# Generated from PostgreSQLParser.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if __name__ is not None and "." in __name__:
    from .PostgreSQLParserBase import PostgreSQLParserBase
else:
    from PostgreSQLParserBase import PostgreSQLParserBase


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0259")
        buf.write("\u2909\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183")
        buf.write("\4\u0184\t\u0184\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187")
        buf.write("\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a")
        buf.write("\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e")
        buf.write("\t\u018e\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191")
        buf.write("\4\u0192\t\u0192\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195")
        buf.write("\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198")
        buf.write("\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c")
        buf.write("\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f")
        buf.write("\4\u01a0\t\u01a0\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3")
        buf.write("\t\u01a3\4\u01a4\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6")
        buf.write("\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa")
        buf.write("\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad")
        buf.write("\4\u01ae\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1")
        buf.write("\t\u01b1\4\u01b2\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4")
        buf.write("\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8")
        buf.write("\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb")
        buf.write("\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf")
        buf.write("\t\u01bf\4\u01c0\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2")
        buf.write("\4\u01c3\t\u01c3\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6")
        buf.write("\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9")
        buf.write("\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd")
        buf.write("\t\u01cd\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0")
        buf.write("\4\u01d1\t\u01d1\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4")
        buf.write("\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7")
        buf.write("\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db")
        buf.write("\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de")
        buf.write("\4\u01df\t\u01df\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2")
        buf.write("\t\u01e2\4\u01e3\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5")
        buf.write("\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9")
        buf.write("\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec")
        buf.write("\4\u01ed\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0")
        buf.write("\t\u01f0\4\u01f1\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3")
        buf.write("\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7")
        buf.write("\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa")
        buf.write("\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe")
        buf.write("\t\u01fe\4\u01ff\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201")
        buf.write("\4\u0202\t\u0202\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205")
        buf.write("\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208")
        buf.write("\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c")
        buf.write("\t\u020c\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f")
        buf.write("\4\u0210\t\u0210\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213")
        buf.write("\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215\4\u0216\t\u0216")
        buf.write("\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a")
        buf.write("\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d")
        buf.write("\4\u021e\t\u021e\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221")
        buf.write("\t\u0221\4\u0222\t\u0222\4\u0223\t\u0223\4\u0224\t\u0224")
        buf.write("\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227\4\u0228")
        buf.write("\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b")
        buf.write("\4\u022c\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f")
        buf.write("\t\u022f\4\u0230\t\u0230\4\u0231\t\u0231\4\u0232\t\u0232")
        buf.write("\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235\t\u0235\4\u0236")
        buf.write("\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239")
        buf.write("\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d")
        buf.write("\t\u023d\4\u023e\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240")
        buf.write("\4\u0241\t\u0241\4\u0242\t\u0242\4\u0243\t\u0243\4\u0244")
        buf.write("\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247\t\u0247")
        buf.write("\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b")
        buf.write("\t\u024b\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e")
        buf.write("\4\u024f\t\u024f\4\u0250\t\u0250\4\u0251\t\u0251\4\u0252")
        buf.write("\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254\4\u0255\t\u0255")
        buf.write("\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259")
        buf.write("\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c")
        buf.write("\4\u025d\t\u025d\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260")
        buf.write("\t\u0260\4\u0261\t\u0261\4\u0262\t\u0262\4\u0263\t\u0263")
        buf.write("\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266\4\u0267")
        buf.write("\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a")
        buf.write("\4\u026b\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e")
        buf.write("\t\u026e\4\u026f\t\u026f\4\u0270\t\u0270\4\u0271\t\u0271")
        buf.write("\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274\t\u0274\4\u0275")
        buf.write("\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278")
        buf.write("\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c")
        buf.write("\t\u027c\4\u027d\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f")
        buf.write("\4\u0280\t\u0280\4\u0281\t\u0281\4\u0282\t\u0282\4\u0283")
        buf.write("\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286\t\u0286")
        buf.write("\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a")
        buf.write("\t\u028a\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d")
        buf.write("\4\u028e\t\u028e\4\u028f\t\u028f\4\u0290\t\u0290\4\u0291")
        buf.write("\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293\4\u0294\t\u0294")
        buf.write("\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298")
        buf.write("\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b")
        buf.write("\4\u029c\t\u029c\4\u029d\t\u029d\4\u029e\t\u029e\4\u029f")
        buf.write("\t\u029f\4\u02a0\t\u02a0\4\u02a1\t\u02a1\4\u02a2\t\u02a2")
        buf.write("\4\u02a3\t\u02a3\4\u02a4\t\u02a4\4\u02a5\t\u02a5\4\u02a6")
        buf.write("\t\u02a6\4\u02a7\t\u02a7\4\u02a8\t\u02a8\4\u02a9\t\u02a9")
        buf.write("\4\u02aa\t\u02aa\4\u02ab\t\u02ab\4\u02ac\t\u02ac\4\u02ad")
        buf.write("\t\u02ad\4\u02ae\t\u02ae\4\u02af\t\u02af\4\u02b0\t\u02b0")
        buf.write("\4\u02b1\t\u02b1\4\u02b2\t\u02b2\4\u02b3\t\u02b3\4\u02b4")
        buf.write("\t\u02b4\4\u02b5\t\u02b5\4\u02b6\t\u02b6\4\u02b7\t\u02b7")
        buf.write("\4\u02b8\t\u02b8\4\u02b9\t\u02b9\4\u02ba\t\u02ba\4\u02bb")
        buf.write("\t\u02bb\4\u02bc\t\u02bc\4\u02bd\t\u02bd\4\u02be\t\u02be")
        buf.write("\4\u02bf\t\u02bf\4\u02c0\t\u02c0\4\u02c1\t\u02c1\4\u02c2")
        buf.write("\t\u02c2\4\u02c3\t\u02c3\4\u02c4\t\u02c4\4\u02c5\t\u02c5")
        buf.write("\4\u02c6\t\u02c6\4\u02c7\t\u02c7\4\u02c8\t\u02c8\4\u02c9")
        buf.write("\t\u02c9\4\u02ca\t\u02ca\4\u02cb\t\u02cb\4\u02cc\t\u02cc")
        buf.write("\4\u02cd\t\u02cd\4\u02ce\t\u02ce\4\u02cf\t\u02cf\4\u02d0")
        buf.write("\t\u02d0\3\2\3\2\3\2\3\3\3\3\3\4\5\4\u05a7\n\4\3\4\3\4")
        buf.write("\5\4\u05ab\n\4\7\4\u05ad\n\4\f\4\16\4\u05b0\13\4\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u062e\n\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u0637")
        buf.write("\n\7\3\7\3\7\3\b\3\b\3\t\7\t\u063e\n\t\f\t\16\t\u0641")
        buf.write("\13\t\3\n\7\n\u0644\n\n\f\n\16\n\u0647\13\n\3\13\3\13")
        buf.write("\3\13\5\13\u064c\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u065b\n\13\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0667\n\f\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u066d\n\r\3\r\3\r\3\16\3\16\3\16\3\16")
        buf.write("\5\16\u0675\n\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\5\20\u0680\n\20\3\20\3\20\5\20\u0684\n\20\3\20")
        buf.write("\3\20\3\21\3\21\3\21\3\21\5\21\u068c\n\21\3\21\3\21\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u0694\n\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\5\25\u06a6\n\25\3\25\5\25\u06a9\n\25\3\25\3\25\3")
        buf.write("\25\5\25\u06ae\n\25\3\25\3\25\3\26\3\26\3\27\7\27\u06b5")
        buf.write("\n\27\f\27\16\27\u06b8\13\27\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\5\30\u06c0\n\30\3\31\3\31\5\31\u06c4\n\31\3\31\3")
        buf.write("\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u06d0")
        buf.write("\n\32\3\33\3\33\3\33\3\33\5\33\u06d6\n\33\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\5\34\u06e6\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\5\34\u06f3\n\34\3\35\3\35\3\35")
        buf.write("\7\35\u06f8\n\35\f\35\16\35\u06fb\13\35\3\36\3\36\3\36")
        buf.write("\7\36\u0700\n\36\f\36\16\36\u0703\13\36\3\37\3\37\5\37")
        buf.write("\u0707\n\37\3 \3 \3 \3 \3 \5 \u070e\n \3!\3!\3!\3!\5!")
        buf.write("\u0714\n!\3\"\3\"\3\"\3\"\3\"\5\"\u071b\n\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0726\n\"\3#\3#\5#\u072a")
        buf.write("\n#\3$\3$\5$\u072e\n$\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\5&\u073b\n&\3\'\3\'\5\'\u073f\n\'\3(\3(\3(\5(\u0744")
        buf.write("\n(\3)\3)\3)\5)\u0749\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\5*\u0755\n*\3+\3+\3+\3+\3+\3,\3,\5,\u075e\n,\3-\3-\3")
        buf.write(".\3.\3/\3/\3/\3\60\3\60\3\60\3\60\5\60\u076b\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u0770\n\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\5\60\u077b\n\60\3\60\3\60\3\60\3\60")
        buf.write("\5\60\u0781\n\60\3\60\3\60\3\60\3\60\5\60\u0787\n\60\3")
        buf.write("\60\3\60\3\60\5\60\u078c\n\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\5\60\u0797\n\60\3\60\3\60\3\60\3")
        buf.write("\60\5\60\u079d\n\60\3\60\3\60\3\60\3\60\5\60\u07a3\n\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u07ac\n\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u07b6\n\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u07c5\n\60\3\60\3\60\3\60\3\60\5\60\u07cb")
        buf.write("\n\60\3\60\3\60\3\60\3\60\3\60\5\60\u07d2\n\60\3\60\3")
        buf.write("\60\3\60\5\60\u07d7\n\60\3\61\3\61\3\61\7\61\u07dc\n\61")
        buf.write("\f\61\16\61\u07df\13\61\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\5\62\u07e9\n\62\3\63\3\63\3\63\3\63\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0801\n\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\5\64\u0808\n\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\5\64\u0811\n\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u081a\n\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u0822\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\5\64\u082c\n\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u0835\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\5\64\u083e\n\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u0846\n\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u084e\n")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0857\n\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0860\n\64\3")
        buf.write("\64\3\64\5\64\u0864\n\64\3\64\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u086b\n\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0873\n")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u087d")
        buf.write("\n\64\3\64\3\64\3\64\3\64\5\64\u0883\n\64\3\64\3\64\5")
        buf.write("\64\u0887\n\64\3\64\3\64\5\64\u088b\n\64\3\64\3\64\5\64")
        buf.write("\u088f\n\64\3\64\3\64\5\64\u0893\n\64\3\64\3\64\3\64\5")
        buf.write("\64\u0898\n\64\3\64\5\64\u089b\n\64\3\64\3\64\5\64\u089f")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u08b4")
        buf.write("\n\64\3\64\3\64\3\64\3\64\5\64\u08ba\n\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\5\64\u0919\n\64\3\65\3\65\3\65\3\65\3")
        buf.write("\65\5\65\u0920\n\65\3\66\3\66\3\67\3\67\3\67\38\38\38")
        buf.write("\39\39\39\39\39\39\59\u0930\n9\3:\3:\3:\3:\3;\3;\3;\3")
        buf.write("<\3<\3<\7<\u093c\n<\f<\16<\u093f\13<\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\5=\u0948\n=\5=\u094a\n=\3>\6>\u094d\n>\r>\16>\u094e")
        buf.write("\3?\3?\5?\u0953\n?\3?\5?\u0956\n?\3?\3?\3?\3?\5?\u095c")
        buf.write("\n?\5?\u095e\n?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u097a\n@\3")
        buf.write("A\3A\3A\3B\3B\3B\7B\u0982\nB\fB\16B\u0985\13B\3C\3C\3")
        buf.write("C\3C\3C\3D\3D\3D\7D\u098f\nD\fD\16D\u0992\13D\3E\3E\3")
        buf.write("E\3E\5E\u0998\nE\3E\3E\3E\3E\5E\u099e\nE\3E\3E\5E\u09a2")
        buf.write("\nE\3E\3E\3E\3E\5E\u09a8\nE\3E\3E\3E\5E\u09ad\nE\3E\5")
        buf.write("E\u09b0\nE\5E\u09b2\nE\3F\3F\3F\5F\u09b7\nF\3G\3G\5G\u09bb")
        buf.write("\nG\3G\3G\5G\u09bf\nG\3G\3G\5G\u09c3\nG\3G\3G\5G\u09c7")
        buf.write("\nG\3G\5G\u09ca\nG\3G\3G\5G\u09ce\nG\3G\3G\3G\3G\3G\3")
        buf.write("G\5G\u09d6\nG\3G\3G\5G\u09da\nG\3G\3G\5G\u09de\nG\3H\3")
        buf.write("H\3I\3I\3J\3J\3J\5J\u09e7\nJ\3K\3K\3K\3K\3K\5K\u09ee\n")
        buf.write("K\3L\7L\u09f1\nL\fL\16L\u09f4\13L\3M\3M\3M\3M\5M\u09fa")
        buf.write("\nM\3M\3M\3M\5M\u09ff\nM\3M\3M\3M\3M\3M\5M\u0a06\nM\3")
        buf.write("M\3M\3M\5M\u0a0b\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\5M\u0a1d\nM\3N\3N\3O\5O\u0a22\nO\3O\3O\3")
        buf.write("O\3P\3P\3Q\3Q\3Q\7Q\u0a2c\nQ\fQ\16Q\u0a2f\13Q\3R\3R\5")
        buf.write("R\u0a33\nR\3S\3S\3S\3S\3S\3S\3S\5S\u0a3c\nS\3T\3T\3T\7")
        buf.write("T\u0a41\nT\fT\16T\u0a44\13T\3U\3U\3V\3V\5V\u0a4a\nV\3")
        buf.write("V\3V\3V\3V\5V\u0a50\nV\3V\3V\3V\5V\u0a55\nV\3V\3V\5V\u0a59")
        buf.write("\nV\3V\5V\u0a5c\nV\3V\5V\u0a5f\nV\3V\5V\u0a62\nV\3V\5")
        buf.write("V\u0a65\nV\3V\5V\u0a68\nV\3V\3V\3V\5V\u0a6d\nV\3V\5V\u0a70")
        buf.write("\nV\3V\5V\u0a73\nV\3V\5V\u0a76\nV\3V\5V\u0a79\nV\3V\5")
        buf.write("V\u0a7c\nV\3V\3V\3V\3V\5V\u0a82\nV\3V\3V\5V\u0a86\nV\3")
        buf.write("V\5V\u0a89\nV\3V\5V\u0a8c\nV\3V\5V\u0a8f\nV\3V\5V\u0a92")
        buf.write("\nV\5V\u0a94\nV\3W\3W\3W\3W\3W\3W\3W\5W\u0a9d\nW\3X\3")
        buf.write("X\3Y\3Y\3Y\3Y\3Z\3Z\3Z\7Z\u0aa8\nZ\fZ\16Z\u0aab\13Z\3")
        buf.write("[\3[\3[\7[\u0ab0\n[\f[\16[\u0ab3\13[\3\\\3\\\3\\\5\\\u0ab8")
        buf.write("\n\\\3]\3]\5]\u0abc\n]\3^\3^\3^\5^\u0ac1\n^\3^\3^\3_\3")
        buf.write("_\3_\5_\u0ac8\n_\3_\3_\3`\7`\u0acd\n`\f`\16`\u0ad0\13")
        buf.write("`\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0ada\na\3b\3b\3b\3b\3b\5")
        buf.write("b\u0ae1\nb\3b\5b\u0ae4\nb\3b\3b\3b\5b\u0ae9\nb\3b\5b\u0aec")
        buf.write("\nb\3b\3b\3b\3b\3b\5b\u0af3\nb\3b\3b\3b\3b\3b\3b\3b\5")
        buf.write("b\u0afc\nb\3b\3b\3b\3b\3b\5b\u0b03\nb\3b\3b\3b\5b\u0b08")
        buf.write("\nb\3b\5b\u0b0b\nb\3b\5b\u0b0e\nb\5b\u0b10\nb\3c\3c\3")
        buf.write("c\5c\u0b15\nc\3d\3d\3d\3d\3d\5d\u0b1c\nd\3e\3e\3e\3e\3")
        buf.write("f\3f\7f\u0b24\nf\ff\16f\u0b27\13f\3g\3g\3h\3h\3h\3h\3")
        buf.write("h\5h\u0b30\nh\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\5i\u0b3d")
        buf.write("\ni\3i\5i\u0b40\ni\3i\5i\u0b43\ni\3i\3i\3i\3i\3i\5i\u0b4a")
        buf.write("\ni\3i\3i\3i\3i\3i\3i\5i\u0b52\ni\3i\5i\u0b55\ni\3i\5")
        buf.write("i\u0b58\ni\3i\3i\3i\3i\3i\5i\u0b5f\ni\3i\3i\5i\u0b63\n")
        buf.write("i\3i\3i\3i\3i\5i\u0b69\ni\3i\5i\u0b6c\ni\3i\5i\u0b6f\n")
        buf.write("i\3i\5i\u0b72\ni\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\5i\u0b7e")
        buf.write("\ni\3i\5i\u0b81\ni\3i\5i\u0b84\ni\3i\3i\5i\u0b88\ni\3")
        buf.write("j\3j\3j\3k\3k\3k\3k\3l\3l\3l\7l\u0b94\nl\fl\16l\u0b97")
        buf.write("\13l\3m\3m\3n\3n\3n\3n\3n\3o\3o\3o\3p\3p\3p\7p\u0ba6\n")
        buf.write("p\fp\16p\u0ba9\13p\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0bb3\n")
        buf.write("q\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\5s\u0bc2\ns\3")
        buf.write("t\3t\3t\3t\3u\3u\3u\3u\3v\3v\3v\3v\3v\3v\5v\u0bd2\nv\3")
        buf.write("w\3w\3w\3w\3w\3x\3x\3y\3y\3y\3y\3y\3y\3y\3z\3z\3z\7z\u0be5")
        buf.write("\nz\fz\16z\u0be8\13z\3{\3{\5{\u0bec\n{\3{\5{\u0bef\n{")
        buf.write("\3{\3{\5{\u0bf3\n{\3{\5{\u0bf6\n{\3{\3{\3{\3{\5{\u0bfc")
        buf.write("\n{\3{\5{\u0bff\n{\5{\u0c01\n{\3|\3|\3|\3}\3}\3}\3}\5")
        buf.write("}\u0c0a\n}\3~\3~\3~\3~\3~\3~\3~\5~\u0c13\n~\3\177\3\177")
        buf.write("\3\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\5\u0082\u0c26\n\u0082\3\u0082\3\u0082\5\u0082")
        buf.write("\u0c2a\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0c35\n\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084")
        buf.write("\5\u0084\u0c3e\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\5\u0084\u0c44\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\5\u0084\u0c4a\n\u0084\3\u0085\3\u0085\5\u0085\u0c4e\n")
        buf.write("\u0085\3\u0085\5\u0085\u0c51\n\u0085\3\u0085\5\u0085\u0c54")
        buf.write("\n\u0085\3\u0085\5\u0085\u0c57\n\u0085\3\u0085\5\u0085")
        buf.write("\u0c5a\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0c60\n\u0086\3\u0087\3\u0087\5\u0087\u0c64\n\u0087\3")
        buf.write("\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0c6b\n")
        buf.write("\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0c71\n")
        buf.write("\u0087\3\u0088\3\u0088\5\u0088\u0c75\n\u0088\3\u0088\5")
        buf.write("\u0088\u0c78\n\u0088\3\u0088\5\u0088\u0c7b\n\u0088\3\u0088")
        buf.write("\5\u0088\u0c7e\n\u0088\3\u0089\3\u0089\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\5\u008a\u0c86\n\u008a\3\u008a\3\u008a")
        buf.write("\5\u008a\u0c8a\n\u008a\3\u008b\3\u008b\5\u008b\u0c8e\n")
        buf.write("\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0c94\n")
        buf.write("\u008b\3\u008b\3\u008b\5\u008b\u0c98\n\u008b\3\u008c\3")
        buf.write("\u008c\3\u008c\3\u008c\5\u008c\u0c9e\n\u008c\3\u008c\3")
        buf.write("\u008c\3\u008c\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008f\6\u008f\u0caa\n\u008f\r\u008f\16\u008f")
        buf.write("\u0cab\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\5\u0090\u0cb5\n\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0cc6")
        buf.write("\n\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0ccb\n\u0090")
        buf.write("\3\u0090\5\u0090\u0cce\n\u0090\5\u0090\u0cd0\n\u0090\3")
        buf.write("\u0091\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\5\u0092\u0cda\n\u0092\3\u0093\3\u0093\3\u0093")
        buf.write("\7\u0093\u0cdf\n\u0093\f\u0093\16\u0093\u0ce2\13\u0093")
        buf.write("\3\u0094\3\u0094\5\u0094\u0ce6\n\u0094\3\u0094\5\u0094")
        buf.write("\u0ce9\n\u0094\3\u0094\5\u0094\u0cec\n\u0094\3\u0094\3")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cf3\n\u0094\3")
        buf.write("\u0094\5\u0094\u0cf6\n\u0094\5\u0094\u0cf8\n\u0094\3\u0095")
        buf.write("\3\u0095\3\u0096\3\u0096\5\u0096\u0cfe\n\u0096\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098")
        buf.write("\u0d07\n\u0098\3\u0099\3\u0099\3\u009a\3\u009a\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\5\u009b\u0d11\n\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\5\u009b\u0d16\n\u009b\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0d1f")
        buf.write("\n\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\5\u009e\u0d28\n\u009e\3\u009e\3\u009e\5\u009e")
        buf.write("\u0d2c\n\u009e\3\u009e\3\u009e\3\u009f\7\u009f\u0d31\n")
        buf.write("\u009f\f\u009f\16\u009f\u0d34\13\u009f\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0d3d")
        buf.write("\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a2\7\u00a2\u0d46\n\u00a2\f\u00a2\16\u00a2\u0d49")
        buf.write("\13\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0db6\n\u00a4\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0dbe")
        buf.write("\n\u00a5\3\u00a5\5\u00a5\u0dc1\n\u00a5\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write("\u0dcb\n\u00a6\3\u00a7\6\u00a7\u0dce\n\u00a7\r\u00a7\16")
        buf.write("\u00a7\u0dcf\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3")
        buf.write("\u00a9\3\u00a9\3\u00a9\5\u00a9\u0dda\n\u00a9\3\u00a9\3")
        buf.write("\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\5\u00a9\u0de5\n\u00a9\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0def")
        buf.write("\n\u00ab\f\u00ab\16\u00ab\u0df2\13\u00ab\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\7\u00ad")
        buf.write("\u0dfc\n\u00ad\f\u00ad\16\u00ad\u0dff\13\u00ad\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae")
        buf.write("\u0e08\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0")
        buf.write("\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2")
        buf.write("\u0e15\n\u00b2\3\u00b2\5\u00b2\u0e18\n\u00b2\3\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0e1f\n\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\5\u00b2\u0e28\n\u00b2\3\u00b2\5\u00b2\u0e2b\n\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0e32\n")
        buf.write("\u00b2\5\u00b2\u0e34\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3")
        buf.write("\u00b4\3\u00b4\3\u00b4\5\u00b4\u0e3c\n\u00b4\3\u00b5\3")
        buf.write("\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\5\u00b6\u0e46\n\u00b6\5\u00b6\u0e48\n\u00b6\3\u00b7\3")
        buf.write("\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0e50\n")
        buf.write("\u00b7\3\u00b7\3\u00b7\5\u00b7\u0e54\n\u00b7\3\u00b7\3")
        buf.write("\u00b7\3\u00b7\5\u00b7\u0e59\n\u00b7\3\u00b7\3\u00b7\3")
        buf.write("\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\5\u00b7\u0e64\n\u00b7\3\u00b7\3\u00b7\5\u00b7\u0e68\n")
        buf.write("\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0e6d\n\u00b7\3")
        buf.write("\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0e77\n\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0e7d\n\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0e8a\n\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0e90\n\u00b7\5\u00b7\u0e92\n\u00b7\3")
        buf.write("\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0e99\n")
        buf.write("\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\5\u00b8\u0ea1\n\u00b8\3\u00b9\3\u00b9\3\u00b9\5\u00b9")
        buf.write("\u0ea6\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\5\u00bb\u0eb5\n\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\5\u00bb\u0ec2\n\u00bb\5\u00bb\u0ec4\n\u00bb\3")
        buf.write("\u00bc\3\u00bc\5\u00bc\u0ec8\n\u00bc\3\u00bd\3\u00bd\3")
        buf.write("\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\5\u00bd\u0edc\n\u00bd\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf")
        buf.write("\u0eed\n\u00bf\3\u00bf\5\u00bf\u0ef0\n\u00bf\3\u00bf\5")
        buf.write("\u00bf\u0ef3\n\u00bf\3\u00bf\5\u00bf\u0ef6\n\u00bf\3\u00bf")
        buf.write("\5\u00bf\u0ef9\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\5\u00c0\u0f01\n\u00c0\3\u00c0\5\u00c0")
        buf.write("\u0f04\n\u00c0\3\u00c0\5\u00c0\u0f07\n\u00c0\3\u00c1\3")
        buf.write("\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\5\u00ca\u0f35\n\u00ca\3\u00ca\5\u00ca\u0f38\n")
        buf.write("\u00ca\3\u00ca\5\u00ca\u0f3b\n\u00ca\3\u00ca\3\u00ca\3")
        buf.write("\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u0f4d\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\5\u00ca\u0f54\n\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0f5d\n\u00ca")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0f63\n\u00cb")
        buf.write("\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u0f68\n\u00cc\f\u00cc")
        buf.write("\16\u00cc\u0f6b\13\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0f74\n\u00cd\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00cf\6\u00cf\u0f7a\n\u00cf\r\u00cf")
        buf.write("\16\u00cf\u0f7b\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0f81")
        buf.write("\n\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\3\u00d2\3\u00d2")
        buf.write("\3\u00d3\3\u00d3\3\u00d4\3\u00d4\5\u00d4\u0f8d\n\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d9")
        buf.write("\3\u00d9\5\u00d9\u0f9e\n\u00d9\3\u00d9\3\u00d9\7\u00d9")
        buf.write("\u0fa2\n\u00d9\f\u00d9\16\u00d9\u0fa5\13\u00d9\3\u00da")
        buf.write("\3\u00da\3\u00da\3\u00da\5\u00da\u0fab\n\u00da\3\u00db")
        buf.write("\3\u00db\3\u00db\3\u00dc\7\u00dc\u0fb1\n\u00dc\f\u00dc")
        buf.write("\16\u00dc\u0fb4\13\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\5\u00dd\u0fc1\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\5\u00de\u0fdd\n\u00de\3\u00df\3\u00df\3\u00df")
        buf.write("\7\u00df\u0fe2\n\u00df\f\u00df\16\u00df\u0fe5\13\u00df")
        buf.write("\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\7\u00e1\u0ff0\n\u00e1\f\u00e1\16\u00e1")
        buf.write("\u0ff3\13\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3")
        buf.write("\5\u00e3\u1001\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5")
        buf.write("\5\u00e5\u100e\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1017\n\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\5\u00e5\u1030\n\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5")
        buf.write("\u103b\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u107e\n\u00e5")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\7\u00e7\u1087\n\u00e7\f\u00e7\16\u00e7\u108a\13\u00e7")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u108f\n\u00e8\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u1097")
        buf.write("\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\7\u00eb\u10a0\n\u00eb\f\u00eb\16\u00eb\u10a3")
        buf.write("\13\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u10ae\n\u00ee\f\u00ee")
        buf.write("\16\u00ee\u10b1\13\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\5\u00ef\u10b9\n\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef")
        buf.write("\u10c3\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u10cf")
        buf.write("\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\5\u00ef\u10de\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0")
        buf.write("\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u10e9")
        buf.write("\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\5\u00f1\u10f1\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\7\u00f2\u10f9\n\u00f2\f\u00f2\16\u00f2")
        buf.write("\u10fc\13\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3")
        buf.write("\u1102\n\u00f3\3\u00f3\5\u00f3\u1105\n\u00f3\3\u00f3\3")
        buf.write("\u00f3\3\u00f3\3\u00f3\5\u00f3\u110b\n\u00f3\3\u00f3\5")
        buf.write("\u00f3\u110e\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3")
        buf.write("\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\3\u00f3\3\u00f3\5\u00f3\u111d\n\u00f3\3\u00f4\3\u00f4")
        buf.write("\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\5\u00f6\u112a\n\u00f6\3\u00f7\3\u00f7")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1147\n\u00f9")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u114c\n\u00fa\f\u00fa")
        buf.write("\16\u00fa\u114f\13\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\5\u00fb\u115d\n\u00fb\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1166\n\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\5\u00fc\u1171\n\u00fc\5\u00fc\u1173\n")
        buf.write("\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd")
        buf.write("\3\u00fd\5\u00fd\u117c\n\u00fd\3\u00fd\3\u00fd\3\u00fd")
        buf.write("\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd")
        buf.write("\u1187\n\u00fd\5\u00fd\u1189\n\u00fd\3\u00fe\3\u00fe\3")
        buf.write("\u00fe\3\u00fe\3\u00fe\5\u00fe\u1190\n\u00fe\3\u00ff\3")
        buf.write("\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u119f")
        buf.write("\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u11a5")
        buf.write("\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\5\u0100\u11ad\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\5\u0100\u11b3\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\3\u0100\5\u0100\u11bb\n\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100")
        buf.write("\u11c5\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100")
        buf.write("\u11cb\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\5\u0100\u11d3\n\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\5\u0100\u11d9\n\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\5\u0100\u11e1\n\u0100\3\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u11e8\n\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\5\u0100\u11f1\n\u0100\5\u0100\u11f3\n\u0100\3\u0101\3")
        buf.write("\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\5\u0101\u120c\n\u0101\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\5\u0102\u1213\n\u0102\3\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103")
        buf.write("\5\u0103\u121e\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103")
        buf.write("\5\u0103\u1224\n\u0103\3\u0104\3\u0104\3\u0105\3\u0105")
        buf.write("\3\u0105\7\u0105\u122b\n\u0105\f\u0105\16\u0105\u122e")
        buf.write("\13\u0105\3\u0106\3\u0106\5\u0106\u1232\n\u0106\3\u0107")
        buf.write("\3\u0107\6\u0107\u1236\n\u0107\r\u0107\16\u0107\u1237")
        buf.write("\3\u0108\3\u0108\3\u0108\7\u0108\u123d\n\u0108\f\u0108")
        buf.write("\16\u0108\u1240\13\u0108\3\u0109\3\u0109\5\u0109\u1244")
        buf.write("\n\u0109\3\u0109\3\u0109\5\u0109\u1248\n\u0109\3\u0109")
        buf.write("\5\u0109\u124b\n\u0109\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\5\u010a\u1251\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010b\3\u010b\5\u010b\u12e6\n\u010b\3\u010c")
        buf.write("\3\u010c\5\u010c\u12ea\n\u010c\3\u010d\3\u010d\3\u010d")
        buf.write("\5\u010d\u12ef\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u12fa")
        buf.write("\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\5\u010d\u1305\n\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\5\u010d\u1310\n\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d")
        buf.write("\u131b\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1326\n\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\5\u010d\u1331\n\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\5\u010d\u133c\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d")
        buf.write("\u1348\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1353\n\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d")
        buf.write("\u135b\n\u010d\3\u010e\3\u010e\3\u010e\3\u010f\3\u010f")
        buf.write("\5\u010f\u1362\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\5\u0110\u1368\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\3\u0111\3\u0111\5\u0111\u1370\n\u0111\3\u0111\3\u0111")
        buf.write("\3\u0111\5\u0111\u1375\n\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\5\u0111\u137a\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u137f\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u1385\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\5\u0111\u138c\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\5\u0111\u1392\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\5\u0111\u1398\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u139d\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u13a3\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\5\u0111\u13aa\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u13af\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u13b5\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\5\u0111\u13bc\n\u0111\3\u0111\5\u0111\u13bf\n\u0111\3")
        buf.write("\u0112\3\u0112\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u13cc\n\u0114")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u13d5\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u13e1\n\u0115\5\u0115\u13e3\n\u0115\3\u0116\3\u0116\3")
        buf.write("\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116")
        buf.write("\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116")
        buf.write("\u13f4\n\u0116\3\u0117\3\u0117\3\u0117\7\u0117\u13f9\n")
        buf.write("\u0117\f\u0117\16\u0117\u13fc\13\u0117\3\u0118\3\u0118")
        buf.write("\5\u0118\u1400\n\u0118\3\u0118\3\u0118\5\u0118\u1404\n")
        buf.write("\u0118\3\u0118\3\u0118\5\u0118\u1408\n\u0118\3\u0118\3")
        buf.write("\u0118\5\u0118\u140c\n\u0118\5\u0118\u140e\n\u0118\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\5\u0119\u144a\n\u0119\3\u011a\3\u011a\3\u011a")
        buf.write("\7\u011a\u144f\n\u011a\f\u011a\16\u011a\u1452\13\u011a")
        buf.write("\3\u011b\3\u011b\3\u011b\5\u011b\u1457\n\u011b\3\u011c")
        buf.write("\3\u011c\3\u011c\3\u011c\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\5\u011d\u1462\n\u011d\3\u011d\5\u011d\u1465\n")
        buf.write("\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e")
        buf.write("\u146c\n\u011e\3\u011e\5\u011e\u146f\n\u011e\3\u011e\3")
        buf.write("\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\5\u011e\u1479\n\u011e\3\u011e\5\u011e\u147c\n\u011e\5")
        buf.write("\u011e\u147e\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0121\3\u0121\3\u0122\7\u0122\u148f\n\u0122")
        buf.write("\f\u0122\16\u0122\u1492\13\u0122\3\u0123\3\u0123\3\u0123")
        buf.write("\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123")
        buf.write("\u149d\n\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124")
        buf.write("\3\u0124\3\u0124\5\u0124\u14a6\n\u0124\3\u0124\3\u0124")
        buf.write("\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u14af")
        buf.write("\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124")
        buf.write("\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u14bb\n\u0124")
        buf.write("\5\u0124\u14bd\n\u0124\3\u0125\3\u0125\3\u0126\3\u0126")
        buf.write("\5\u0126\u14c3\n\u0126\3\u0126\3\u0126\5\u0126\u14c7\n")
        buf.write("\u0126\3\u0126\5\u0126\u14ca\n\u0126\3\u0126\3\u0126\3")
        buf.write("\u0126\5\u0126\u14cf\n\u0126\3\u0126\3\u0126\3\u0126\3")
        buf.write("\u0126\5\u0126\u14d5\n\u0126\3\u0126\5\u0126\u14d8\n\u0126")
        buf.write("\3\u0126\5\u0126\u14db\n\u0126\3\u0126\5\u0126\u14de\n")
        buf.write("\u0126\3\u0126\3\u0126\5\u0126\u14e2\n\u0126\3\u0126\3")
        buf.write("\u0126\5\u0126\u14e6\n\u0126\3\u0126\3\u0126\3\u0126\3")
        buf.write("\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u14ef\n\u0126\3")
        buf.write("\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u14f5\n\u0126\3")
        buf.write("\u0126\5\u0126\u14f8\n\u0126\3\u0126\5\u0126\u14fb\n\u0126")
        buf.write("\3\u0126\5\u0126\u14fe\n\u0126\5\u0126\u1500\n\u0126\3")
        buf.write("\u0127\3\u0127\3\u0128\3\u0128\3\u0129\3\u0129\3\u012a")
        buf.write("\3\u012a\3\u012b\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c")
        buf.write("\7\u012c\u1510\n\u012c\f\u012c\16\u012c\u1513\13\u012c")
        buf.write("\3\u012d\5\u012d\u1516\n\u012d\3\u012d\5\u012d\u1519\n")
        buf.write("\u012d\3\u012d\5\u012d\u151c\n\u012d\3\u012d\5\u012d\u151f")
        buf.write("\n\u012d\3\u012d\5\u012d\u1522\n\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\5\u012d\u1527\n\u012d\3\u012d\5\u012d\u152a\n")
        buf.write("\u012d\5\u012d\u152c\n\u012d\3\u012e\3\u012e\3\u012e\3")
        buf.write("\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012e\5\u012e\u1539\n\u012e\3\u012f\3\u012f\3\u012f")
        buf.write("\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\7\u0130\u1543")
        buf.write("\n\u0130\f\u0130\16\u0130\u1546\13\u0130\3\u0131\3\u0131")
        buf.write("\3\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\5\u0134\u1553\n\u0134\3\u0135\3\u0135")
        buf.write("\5\u0135\u1557\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135")
        buf.write("\u1563\n\u0135\5\u0135\u1565\n\u0135\3\u0135\3\u0135\3")
        buf.write("\u0136\3\u0136\3\u0136\3\u0137\3\u0137\5\u0137\u156e\n")
        buf.write("\u0137\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138\7\u0138")
        buf.write("\u1575\n\u0138\f\u0138\16\u0138\u1578\13\u0138\3\u0139")
        buf.write("\3\u0139\3\u0139\7\u0139\u157d\n\u0139\f\u0139\16\u0139")
        buf.write("\u1580\13\u0139\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a")
        buf.write("\3\u013a\5\u013a\u1588\n\u013a\5\u013a\u158a\n\u013a\3")
        buf.write("\u013b\3\u013b\5\u013b\u158e\n\u013b\3\u013b\3\u013b\3")
        buf.write("\u013c\3\u013c\3\u013c\7\u013c\u1595\n\u013c\f\u013c\16")
        buf.write("\u013c\u1598\13\u013c\3\u013d\3\u013d\5\u013d\u159c\n")
        buf.write("\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u15a2\n")
        buf.write("\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u15a7\n\u013d\3")
        buf.write("\u013e\3\u013e\5\u013e\u15ab\n\u013e\3\u013e\3\u013e\3")
        buf.write("\u013e\5\u013e\u15b0\n\u013e\3\u013f\3\u013f\3\u0140\3")
        buf.write("\u0140\3\u0141\3\u0141\5\u0141\u15b8\n\u0141\3\u0141\3")
        buf.write("\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u15bf\n\u0141\3")
        buf.write("\u0142\3\u0142\3\u0142\5\u0142\u15c4\n\u0142\3\u0143\3")
        buf.write("\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144")
        buf.write("\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u15d3")
        buf.write("\n\u0144\3\u0144\3\u0144\3\u0145\3\u0145\3\u0145\7\u0145")
        buf.write("\u15da\n\u0145\f\u0145\16\u0145\u15dd\13\u0145\3\u0146")
        buf.write("\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147\7\u0147\u15e5")
        buf.write("\n\u0147\f\u0147\16\u0147\u15e8\13\u0147\3\u0148\6\u0148")
        buf.write("\u15eb\n\u0148\r\u0148\16\u0148\u15ec\3\u0148\3\u0148")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\5\u0149\u1614\n\u0149\3\u014a\3\u014a\3\u014a\3\u014a")
        buf.write("\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u161e\n\u014a")
        buf.write("\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1625")
        buf.write("\n\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c")
        buf.write("\3\u014c\7\u014c\u162e\n\u014c\f\u014c\16\u014c\u1631")
        buf.write("\13\u014c\3\u014d\3\u014d\3\u014d\3\u014e\3\u014e\3\u014e")
        buf.write("\3\u014f\3\u014f\3\u014f\7\u014f\u163c\n\u014f\f\u014f")
        buf.write("\16\u014f\u163f\13\u014f\3\u0150\3\u0150\3\u0150\3\u0150")
        buf.write("\3\u0150\5\u0150\u1646\n\u0150\3\u0151\6\u0151\u1649\n")
        buf.write("\u0151\r\u0151\16\u0151\u164a\3\u0152\3\u0152\3\u0153")
        buf.write("\3\u0153\3\u0153\3\u0153\5\u0153\u1653\n\u0153\3\u0153")
        buf.write("\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u165b")
        buf.write("\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u1661")
        buf.write("\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153")
        buf.write("\5\u0153\u1669\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153")
        buf.write("\5\u0153\u166f\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153")
        buf.write("\3\u0153\3\u0153\5\u0153\u1677\n\u0153\5\u0153\u1679\n")
        buf.write("\u0153\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u167f\n")
        buf.write("\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154")
        buf.write("\5\u0154\u1687\n\u0154\5\u0154\u1689\n\u0154\3\u0155\3")
        buf.write("\u0155\3\u0155\3\u0155\5\u0155\u168f\n\u0155\3\u0155\3")
        buf.write("\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u1697\n")
        buf.write("\u0155\5\u0155\u1699\n\u0155\3\u0156\3\u0156\3\u0156\3")
        buf.write("\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156")
        buf.write("\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156")
        buf.write("\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u16b1")
        buf.write("\n\u0156\3\u0157\3\u0157\3\u0157\7\u0157\u16b6\n\u0157")
        buf.write("\f\u0157\16\u0157\u16b9\13\u0157\3\u0157\3\u0157\3\u0158")
        buf.write("\3\u0158\3\u0158\7\u0158\u16c0\n\u0158\f\u0158\16\u0158")
        buf.write("\u16c3\13\u0158\3\u0159\3\u0159\3\u0159\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015b\6\u015b\u16cc\n\u015b\r\u015b\16\u015b")
        buf.write("\u16cd\3\u015c\3\u015c\3\u015c\5\u015c\u16d3\n\u015c\3")
        buf.write("\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16e0\n\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\5\u015d\u16ec\n\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\5\u015d\u16f8\n\u015d\5\u015d\u16fa\n")
        buf.write("\u015d\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u1700\n")
        buf.write("\u015e\3\u015f\3\u015f\3\u015f\5\u015f\u1705\n\u015f\3")
        buf.write("\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f")
        buf.write("\u170d\n\u015f\3\u0160\3\u0160\3\u0160\3\u0161\3\u0161")
        buf.write("\5\u0161\u1714\n\u0161\3\u0161\3\u0161\3\u0161\3\u0161")
        buf.write("\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0162\3\u0162")
        buf.write("\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162")
        buf.write("\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162")
        buf.write("\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162")
        buf.write("\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162")
        buf.write("\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u1741\n\u0162")
        buf.write("\3\u0163\3\u0163\3\u0163\5\u0163\u1746\n\u0163\3\u0163")
        buf.write("\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u174d\n\u0163")
        buf.write("\3\u0164\3\u0164\5\u0164\u1751\n\u0164\3\u0164\3\u0164")
        buf.write("\5\u0164\u1755\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write("\5\u0164\u175b\n\u0164\3\u0164\3\u0164\5\u0164\u175f\n")
        buf.write("\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u1764\n\u0164\3")
        buf.write("\u0164\3\u0164\5\u0164\u1768\n\u0164\3\u0164\5\u0164\u176b")
        buf.write("\n\u0164\5\u0164\u176d\n\u0164\3\u0165\3\u0165\3\u0166")
        buf.write("\3\u0166\3\u0167\3\u0167\3\u0167\3\u0167\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\5\u0168\u1783\n\u0168\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u17ca")
        buf.write("\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u188d")
        buf.write("\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u189a")
        buf.write("\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\5\u0169\u18a5\n\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\5\u0169\u18b2\n\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u18be\n\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\5\u0169\u18cc\n\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\5\u0169\u18ec\n\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u18fa\n\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\5\u0169\u196a\n\u0169\5\u0169")
        buf.write("\u196c\n\u0169\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u1977\n\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c")
        buf.write("\3\u016c\3\u016c\5\u016c\u1982\n\u016c\3\u016c\3\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c")
        buf.write("\5\u016c\u198d\n\u016c\3\u016c\3\u016c\3\u016c\3\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c")
        buf.write("\5\u016c\u199a\n\u016c\3\u016c\3\u016c\3\u016c\3\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c")
        buf.write("\u19a6\n\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u19b1\n\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u19b8")
        buf.write("\n\u016c\3\u016d\3\u016d\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\5\u016e\u1a95\n\u016e\3\u016f")
        buf.write("\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f")
        buf.write("\3\u0170\3\u0170\3\u0170\7\u0170\u1aa2\n\u0170\f\u0170")
        buf.write("\16\u0170\u1aa5\13\u0170\3\u0171\3\u0171\3\u0171\3\u0171")
        buf.write("\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u1aaf\n\u0171")
        buf.write("\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u1ab6")
        buf.write("\n\u0172\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173")
        buf.write("\3\u0173\3\u0173\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u1aec\n\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174")
        buf.write("\u1b79\n\u0174\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175")
        buf.write("\u1b7f\n\u0175\3\u0175\5\u0175\u1b82\n\u0175\3\u0176\3")
        buf.write("\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177")
        buf.write("\5\u0177\u1b8c\n\u0177\3\u0178\3\u0178\3\u0178\3\u0178")
        buf.write("\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178")
        buf.write("\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178")
        buf.write("\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178")
        buf.write("\3\u0178\3\u0178\5\u0178\u1ba9\n\u0178\3\u0179\3\u0179")
        buf.write("\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179")
        buf.write("\u1bb3\n\u0179\3\u017a\3\u017a\3\u017a\7\u017a\u1bb8\n")
        buf.write("\u017a\f\u017a\16\u017a\u1bbb\13\u017a\3\u017b\3\u017b")
        buf.write("\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write("\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write("\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u1bd1\n\u017c")
        buf.write("\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write("\5\u017c\u1bda\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write("\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c")
        buf.write("\u1be6\n\u017c\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d")
        buf.write("\u1bec\n\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d")
        buf.write("\3\u017d\5\u017d\u1bf4\n\u017d\5\u017d\u1bf6\n\u017d\3")
        buf.write("\u017e\3\u017e\5\u017e\u1bfa\n\u017e\3\u017e\3\u017e\3")
        buf.write("\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e")
        buf.write("\u1c04\n\u017e\3\u017e\3\u017e\5\u017e\u1c08\n\u017e\3")
        buf.write("\u017e\3\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write("\3\u017f\5\u017f\u1c12\n\u017f\3\u0180\5\u0180\u1c15\n")
        buf.write("\u0180\3\u0180\3\u0180\5\u0180\u1c19\n\u0180\7\u0180\u1c1b")
        buf.write("\n\u0180\f\u0180\16\u0180\u1c1e\13\u0180\3\u0181\3\u0181")
        buf.write("\3\u0181\3\u0181\3\u0181\5\u0181\u1c25\n\u0181\3\u0182")
        buf.write("\3\u0182\3\u0183\3\u0183\3\u0184\3\u0184\3\u0185\3\u0185")
        buf.write("\3\u0185\5\u0185\u1c30\n\u0185\3\u0186\3\u0186\3\u0186")
        buf.write("\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188\3\u0188\3\u0188")
        buf.write("\5\u0188\u1c3c\n\u0188\3\u0189\3\u0189\5\u0189\u1c40\n")
        buf.write("\u0189\3\u0189\5\u0189\u1c43\n\u0189\3\u0189\3\u0189\5")
        buf.write("\u0189\u1c47\n\u0189\3\u0189\5\u0189\u1c4a\n\u0189\3\u0189")
        buf.write("\3\u0189\3\u0189\5\u0189\u1c4f\n\u0189\3\u0189\3\u0189")
        buf.write("\5\u0189\u1c53\n\u0189\3\u0189\5\u0189\u1c56\n\u0189\3")
        buf.write("\u0189\3\u0189\5\u0189\u1c5a\n\u0189\3\u0189\5\u0189\u1c5d")
        buf.write("\n\u0189\3\u0189\3\u0189\5\u0189\u1c61\n\u0189\3\u0189")
        buf.write("\5\u0189\u1c64\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189")
        buf.write("\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u1c6f")
        buf.write("\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189")
        buf.write("\u1c76\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189")
        buf.write("\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189")
        buf.write("\u1c83\n\u0189\3\u018a\3\u018a\3\u018b\3\u018b\3\u018b")
        buf.write("\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write("\5\u018b\u1c91\n\u018b\3\u018c\3\u018c\5\u018c\u1c95\n")
        buf.write("\u018c\3\u018c\7\u018c\u1c98\n\u018c\f\u018c\16\u018c")
        buf.write("\u1c9b\13\u018c\3\u018d\3\u018d\3\u018e\3\u018e\5\u018e")
        buf.write("\u1ca1\n\u018e\3\u018e\3\u018e\3\u018f\3\u018f\3\u018f")
        buf.write("\5\u018f\u1ca8\n\u018f\3\u018f\5\u018f\u1cab\n\u018f\3")
        buf.write("\u018f\3\u018f\3\u018f\5\u018f\u1cb0\n\u018f\3\u018f\5")
        buf.write("\u018f\u1cb3\n\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3")
        buf.write("\u018f\3\u018f\3\u018f\5\u018f\u1cbc\n\u018f\5\u018f\u1cbe")
        buf.write("\n\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u1cc3\n\u018f")
        buf.write("\3\u0190\3\u0190\5\u0190\u1cc7\n\u0190\3\u0190\3\u0190")
        buf.write("\3\u0190\3\u0191\3\u0191\3\u0191\3\u0192\3\u0192\3\u0192")
        buf.write("\3\u0192\5\u0192\u1cd3\n\u0192\3\u0192\5\u0192\u1cd6\n")
        buf.write("\u0192\3\u0193\3\u0193\3\u0194\6\u0194\u1cdb\n\u0194\r")
        buf.write("\u0194\16\u0194\u1cdc\3\u0195\3\u0195\5\u0195\u1ce1\n")
        buf.write("\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u1ce6\n\u0195\3")
        buf.write("\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196")
        buf.write("\3\u0196\5\u0196\u1cf0\n\u0196\3\u0197\3\u0197\3\u0198")
        buf.write("\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u1cf9\n\u0198")
        buf.write("\3\u0198\5\u0198\u1cfc\n\u0198\3\u0198\3\u0198\3\u0198")
        buf.write("\5\u0198\u1d01\n\u0198\3\u0199\3\u0199\3\u0199\3\u0199")
        buf.write("\3\u0199\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u1d0c")
        buf.write("\n\u019a\3\u019a\3\u019a\5\u019a\u1d10\n\u019a\3\u019a")
        buf.write("\3\u019a\3\u019a\3\u019a\5\u019a\u1d16\n\u019a\3\u019b")
        buf.write("\3\u019b\3\u019b\7\u019b\u1d1b\n\u019b\f\u019b\16\u019b")
        buf.write("\u1d1e\13\u019b\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019e\3\u019e\3\u019e\3\u019e")
        buf.write("\3\u019e\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u1d31")
        buf.write("\n\u019f\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0\3\u01a0")
        buf.write("\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0")
        buf.write("\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0")
        buf.write("\u1d46\n\u01a0\3\u01a0\3\u01a0\5\u01a0\u1d4a\n\u01a0\3")
        buf.write("\u01a0\3\u01a0\3\u01a0\5\u01a0\u1d4f\n\u01a0\3\u01a1\3")
        buf.write("\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u1da2\n\u01a3\3\u01a4")
        buf.write("\3\u01a4\3\u01a5\3\u01a5\5\u01a5\u1da8\n\u01a5\3\u01a5")
        buf.write("\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5")
        buf.write("\3\u01a5\3\u01a6\3\u01a6\5\u01a6\u1db5\n\u01a6\3\u01a6")
        buf.write("\3\u01a6\5\u01a6\u1db9\n\u01a6\3\u01a6\3\u01a6\5\u01a6")
        buf.write("\u1dbd\n\u01a6\3\u01a6\3\u01a6\5\u01a6\u1dc1\n\u01a6\3")
        buf.write("\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1dc7\n\u01a6\3")
        buf.write("\u01a7\3\u01a7\3\u01a7\3\u01a8\3\u01a8\5\u01a8\u1dce\n")
        buf.write("\u01a8\3\u01a8\5\u01a8\u1dd1\n\u01a8\3\u01a8\5\u01a8\u1dd4")
        buf.write("\n\u01a8\3\u01a8\5\u01a8\u1dd7\n\u01a8\3\u01a8\5\u01a8")
        buf.write("\u1dda\n\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8")
        buf.write("\5\u01a8\u1de1\n\u01a8\5\u01a8\u1de3\n\u01a8\3\u01a9\3")
        buf.write("\u01a9\5\u01a9\u1de7\n\u01a9\3\u01a9\5\u01a9\u1dea\n\u01a9")
        buf.write("\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u1df1")
        buf.write("\n\u01a9\5\u01a9\u1df3\n\u01a9\3\u01aa\3\u01aa\3\u01aa")
        buf.write("\7\u01aa\u1df8\n\u01aa\f\u01aa\16\u01aa\u1dfb\13\u01aa")
        buf.write("\3\u01ab\3\u01ab\3\u01ab\7\u01ab\u1e00\n\u01ab\f\u01ab")
        buf.write("\16\u01ab\u1e03\13\u01ab\3\u01ac\3\u01ac\3\u01ad\3\u01ad")
        buf.write("\5\u01ad\u1e09\n\u01ad\3\u01ae\3\u01ae\3\u01ae\5\u01ae")
        buf.write("\u1e0e\n\u01ae\3\u01af\3\u01af\5\u01af\u1e12\n\u01af\3")
        buf.write("\u01b0\3\u01b0\5\u01b0\u1e16\n\u01b0\3\u01b1\3\u01b1\5")
        buf.write("\u01b1\u1e1a\n\u01b1\3\u01b2\3\u01b2\5\u01b2\u1e1e\n\u01b2")
        buf.write("\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b5\3\u01b5\3\u01b6")
        buf.write("\3\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b8\3\u01b8")
        buf.write("\5\u01b8\u1e2e\n\u01b8\3\u01b9\3\u01b9\3\u01b9\7\u01b9")
        buf.write("\u1e33\n\u01b9\f\u01b9\16\u01b9\u1e36\13\u01b9\3\u01ba")
        buf.write("\3\u01ba\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb")
        buf.write("\u1e3f\n\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb")
        buf.write("\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb")
        buf.write("\u1e4c\n\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1e57\n\u01bc")
        buf.write("\3\u01bd\3\u01bd\3\u01bd\7\u01bd\u1e5c\n\u01bd\f\u01bd")
        buf.write("\16\u01bd\u1e5f\13\u01bd\3\u01be\3\u01be\5\u01be\u1e63")
        buf.write("\n\u01be\3\u01bf\3\u01bf\5\u01bf\u1e67\n\u01bf\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1e6b\n\u01c0\3\u01c1\3\u01c1\3\u01c1")
        buf.write("\5\u01c1\u1e70\n\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c2")
        buf.write("\3\u01c2\3\u01c2\3\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3")
        buf.write("\5\u01c3\u1e7d\n\u01c3\3\u01c4\3\u01c4\3\u01c4\5\u01c4")
        buf.write("\u1e82\n\u01c4\3\u01c4\3\u01c4\5\u01c4\u1e86\n\u01c4\3")
        buf.write("\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4")
        buf.write("\u1e8e\n\u01c4\3\u01c4\5\u01c4\u1e91\n\u01c4\3\u01c4\3")
        buf.write("\u01c4\5\u01c4\u1e95\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3")
        buf.write("\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4")
        buf.write("\u1ea0\n\u01c4\3\u01c4\5\u01c4\u1ea3\n\u01c4\5\u01c4\u1ea5")
        buf.write("\n\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6")
        buf.write("\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6")
        buf.write("\3\u01c6\5\u01c6\u1eb5\n\u01c6\3\u01c7\5\u01c7\u1eb8\n")
        buf.write("\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7")
        buf.write("\u1ebf\n\u01c7\3\u01c7\5\u01c7\u1ec2\n\u01c7\3\u01c8\3")
        buf.write("\u01c8\3\u01c8\5\u01c8\u1ec7\n\u01c8\3\u01c9\3\u01c9\3")
        buf.write("\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9")
        buf.write("\3\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1ed6\n\u01c9")
        buf.write("\3\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1edc\n\u01c9")
        buf.write("\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb\7\u01cb\u1ee3")
        buf.write("\n\u01cb\f\u01cb\16\u01cb\u1ee6\13\u01cb\3\u01cc\3\u01cc")
        buf.write("\3\u01cc\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1eee\n\u01cd")
        buf.write("\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1ef5")
        buf.write("\n\u01cd\3\u01cd\5\u01cd\u1ef8\n\u01cd\3\u01ce\3\u01ce")
        buf.write("\3\u01ce\3\u01ce\5\u01ce\u1efe\n\u01ce\3\u01ce\3\u01ce")
        buf.write("\3\u01ce\5\u01ce\u1f03\n\u01ce\3\u01cf\3\u01cf\3\u01cf")
        buf.write("\3\u01d0\3\u01d0\5\u01d0\u1f0a\n\u01d0\3\u01d0\3\u01d0")
        buf.write("\5\u01d0\u1f0e\n\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0")
        buf.write("\u1f13\n\u01d0\3\u01d0\5\u01d0\u1f16\n\u01d0\3\u01d0\3")
        buf.write("\u01d0\3\u01d0\3\u01d0\5\u01d0\u1f1c\n\u01d0\3\u01d0\3")
        buf.write("\u01d0\5\u01d0\u1f20\n\u01d0\5\u01d0\u1f22\n\u01d0\3\u01d0")
        buf.write("\5\u01d0\u1f25\n\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write("\3\u01d1\5\u01d1\u1f2c\n\u01d1\3\u01d1\5\u01d1\u1f2f\n")
        buf.write("\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\5\u01d1")
        buf.write("\u1f36\n\u01d1\3\u01d1\3\u01d1\3\u01d2\3\u01d2\3\u01d2")
        buf.write("\3\u01d2\5\u01d2\u1f3e\n\u01d2\3\u01d2\5\u01d2\u1f41\n")
        buf.write("\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d3\3\u01d3")
        buf.write("\3\u01d3\5\u01d3\u1f4a\n\u01d3\3\u01d3\3\u01d3\3\u01d4")
        buf.write("\5\u01d4\u1f4f\n\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4")
        buf.write("\5\u01d4\u1f55\n\u01d4\3\u01d4\5\u01d4\u1f58\n\u01d4\3")
        buf.write("\u01d4\5\u01d4\u1f5b\n\u01d4\3\u01d5\3\u01d5\3\u01d5\3")
        buf.write("\u01d6\3\u01d6\5\u01d6\u1f62\n\u01d6\3\u01d6\3\u01d6\5")
        buf.write("\u01d6\u1f66\n\u01d6\3\u01d6\5\u01d6\u1f69\n\u01d6\3\u01d7")
        buf.write("\3\u01d7\3\u01d7\3\u01d7\3\u01d8\3\u01d8\3\u01d8\3\u01d8")
        buf.write("\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f78")
        buf.write("\n\u01d8\3\u01d8\5\u01d8\u1f7b\n\u01d8\3\u01d9\3\u01d9")
        buf.write("\3\u01da\3\u01da\3\u01da\5\u01da\u1f82\n\u01da\3\u01db")
        buf.write("\5\u01db\u1f85\n\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write("\3\u01db\5\u01db\u1f8c\n\u01db\3\u01db\5\u01db\u1f8f\n")
        buf.write("\u01db\3\u01db\5\u01db\u1f92\n\u01db\3\u01dc\3\u01dc\3")
        buf.write("\u01dc\7\u01dc\u1f97\n\u01dc\f\u01dc\16\u01dc\u1f9a\13")
        buf.write("\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd")
        buf.write("\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1fa6\n\u01dd")
        buf.write("\3\u01de\3\u01de\3\u01de\3\u01df\3\u01df\3\u01df\7\u01df")
        buf.write("\u1fae\n\u01df\f\u01df\16\u01df\u1fb1\13\u01df\3\u01e0")
        buf.write("\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u1fb8\n\u01e0")
        buf.write("\3\u01e0\3\u01e0\3\u01e0\3\u01e1\3\u01e1\3\u01e2\3\u01e2")
        buf.write("\3\u01e2\3\u01e2\3\u01e2\7\u01e2\u1fc4\n\u01e2\f\u01e2")
        buf.write("\16\u01e2\u1fc7\13\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e3")
        buf.write("\5\u01e3\u1fcd\n\u01e3\3\u01e4\3\u01e4\5\u01e4\u1fd1\n")
        buf.write("\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5")
        buf.write("\3\u01e5\3\u01e5\5\u01e5\u1fdb\n\u01e5\3\u01e6\3\u01e6")
        buf.write("\5\u01e6\u1fdf\n\u01e6\3\u01e6\3\u01e6\5\u01e6\u1fe3\n")
        buf.write("\u01e6\3\u01e6\3\u01e6\5\u01e6\u1fe7\n\u01e6\5\u01e6\u1fe9")
        buf.write("\n\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1fee\n\u01e6")
        buf.write("\3\u01e6\3\u01e6\5\u01e6\u1ff2\n\u01e6\3\u01e6\3\u01e6")
        buf.write("\5\u01e6\u1ff6\n\u01e6\5\u01e6\u1ff8\n\u01e6\5\u01e6\u1ffa")
        buf.write("\n\u01e6\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u1fff\n\u01e7")
        buf.write("\3\u01e7\7\u01e7\u2002\n\u01e7\f\u01e7\16\u01e7\u2005")
        buf.write("\13\u01e7\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u200a\n\u01e8")
        buf.write("\3\u01e8\7\u01e8\u200d\n\u01e8\f\u01e8\16\u01e8\u2010")
        buf.write("\13\u01e8\3\u01e9\3\u01e9\5\u01e9\u2014\n\u01e9\3\u01e9")
        buf.write("\5\u01e9\u2017\n\u01e9\3\u01e9\5\u01e9\u201a\n\u01e9\3")
        buf.write("\u01e9\5\u01e9\u201d\n\u01e9\3\u01e9\5\u01e9\u2020\n\u01e9")
        buf.write("\3\u01e9\5\u01e9\u2023\n\u01e9\3\u01e9\5\u01e9\u2026\n")
        buf.write("\u01e9\3\u01e9\5\u01e9\u2029\n\u01e9\3\u01e9\3\u01e9\3")
        buf.write("\u01e9\5\u01e9\u202e\n\u01e9\3\u01e9\5\u01e9\u2031\n\u01e9")
        buf.write("\3\u01e9\5\u01e9\u2034\n\u01e9\3\u01e9\5\u01e9\u2037\n")
        buf.write("\u01e9\3\u01e9\5\u01e9\u203a\n\u01e9\3\u01e9\5\u01e9\u203d")
        buf.write("\n\u01e9\5\u01e9\u203f\n\u01e9\3\u01e9\3\u01e9\3\u01e9")
        buf.write("\3\u01e9\5\u01e9\u2045\n\u01e9\3\u01ea\3\u01ea\5\u01ea")
        buf.write("\u2049\n\u01ea\3\u01ea\3\u01ea\3\u01eb\3\u01eb\3\u01eb")
        buf.write("\7\u01eb\u2050\n\u01eb\f\u01eb\16\u01eb\u2053\13\u01eb")
        buf.write("\3\u01ec\3\u01ec\5\u01ec\u2057\n\u01ec\3\u01ec\3\u01ec")
        buf.write("\5\u01ec\u205b\n\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec")
        buf.write("\3\u01ed\3\u01ed\3\u01ed\5\u01ed\u2064\n\u01ed\3\u01ee")
        buf.write("\3\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01f0\3\u01f0\3\u01f1")
        buf.write("\5\u01f1\u206e\n\u01f1\3\u01f1\3\u01f1\5\u01f1\u2072\n")
        buf.write("\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u2077\n\u01f1\3")
        buf.write("\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u207d\n\u01f1\3")
        buf.write("\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f4\3\u01f4\3\u01f4")
        buf.write("\3\u01f4\3\u01f4\3\u01f4\5\u01f4\u2089\n\u01f4\3\u01f5")
        buf.write("\3\u01f5\3\u01f6\3\u01f6\3\u01f7\3\u01f7\3\u01f7\3\u01f7")
        buf.write("\3\u01f8\3\u01f8\3\u01f8\7\u01f8\u2096\n\u01f8\f\u01f8")
        buf.write("\16\u01f8\u2099\13\u01f8\3\u01f9\3\u01f9\3\u01f9\3\u01f9")
        buf.write("\5\u01f9\u209f\n\u01f9\5\u01f9\u20a1\n\u01f9\3\u01f9\5")
        buf.write("\u01f9\u20a4\n\u01f9\3\u01fa\3\u01fa\5\u01fa\u20a8\n\u01fa")
        buf.write("\3\u01fa\3\u01fa\5\u01fa\u20ac\n\u01fa\5\u01fa\u20ae\n")
        buf.write("\u01fa\3\u01fb\3\u01fb\3\u01fc\3\u01fc\3\u01fc\3\u01fc")
        buf.write("\5\u01fc\u20b6\n\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc")
        buf.write("\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u20bf\n\u01fc\3\u01fc")
        buf.write("\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u20c5\n\u01fc\5\u01fc")
        buf.write("\u20c7\n\u01fc\5\u01fc\u20c9\n\u01fc\3\u01fd\3\u01fd\3")
        buf.write("\u01fd\3\u01fd\3\u01fd\5\u01fd\u20d0\n\u01fd\3\u01fe\3")
        buf.write("\u01fe\5\u01fe\u20d4\n\u01fe\3\u01ff\3\u01ff\3\u0200\3")
        buf.write("\u0200\3\u0200\3\u0200\3\u0200\5\u0200\u20dd\n\u0200\3")
        buf.write("\u0201\3\u0201\5\u0201\u20e1\n\u0201\3\u0202\3\u0202\3")
        buf.write("\u0203\3\u0203\3\u0204\3\u0204\3\u0204\3\u0204\3\u0205")
        buf.write("\3\u0205\3\u0205\7\u0205\u20ee\n\u0205\f\u0205\16\u0205")
        buf.write("\u20f1\13\u0205\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206")
        buf.write("\5\u0206\u20f8\n\u0206\3\u0207\3\u0207\3\u0207\3\u0208")
        buf.write("\3\u0208\3\u0208\3\u0208\3\u0208\3\u0209\3\u0209\3\u0209")
        buf.write("\3\u0209\3\u0209\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a")
        buf.write("\3\u020a\3\u020b\3\u020b\3\u020b\3\u020c\3\u020c\3\u020c")
        buf.write("\3\u020c\5\u020c\u2114\n\u020c\3\u020d\3\u020d\3\u020e")
        buf.write("\6\u020e\u2119\n\u020e\r\u020e\16\u020e\u211a\3\u020f")
        buf.write("\3\u020f\5\u020f\u211f\n\u020f\3\u020f\5\u020f\u2122\n")
        buf.write("\u020f\3\u0210\3\u0210\3\u0210\5\u0210\u2127\n\u0210\3")
        buf.write("\u0210\3\u0210\5\u0210\u212b\n\u0210\3\u0210\5\u0210\u212e")
        buf.write("\n\u0210\3\u0211\3\u0211\3\u0211\3\u0212\3\u0212\3\u0212")
        buf.write("\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\7\u0212")
        buf.write("\u213c\n\u0212\f\u0212\16\u0212\u213f\13\u0212\3\u0213")
        buf.write("\3\u0213\3\u0213\3\u0214\3\u0214\3\u0214\7\u0214\u2147")
        buf.write("\n\u0214\f\u0214\16\u0214\u214a\13\u0214\3\u0215\3\u0215")
        buf.write("\5\u0215\u214e\n\u0215\3\u0215\5\u0215\u2151\n\u0215\3")
        buf.write("\u0215\3\u0215\5\u0215\u2155\n\u0215\3\u0215\3\u0215\5")
        buf.write("\u0215\u2159\n\u0215\3\u0215\3\u0215\5\u0215\u215d\n\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\5\u0215\u2162\n\u0215\3\u0215")
        buf.write("\3\u0215\5\u0215\u2166\n\u0215\3\u0215\3\u0215\5\u0215")
        buf.write("\u216a\n\u0215\5\u0215\u216c\n\u0215\3\u0215\3\u0215\3")
        buf.write("\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u2175\n")
        buf.write("\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u217a\n\u0215\3")
        buf.write("\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u2180\n\u0215\3")
        buf.write("\u0215\3\u0215\5\u0215\u2184\n\u0215\5\u0215\u2186\n\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u218d")
        buf.write("\n\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u2192\n\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\7\u0215\u2198\n\u0215")
        buf.write("\f\u0215\16\u0215\u219b\13\u0215\3\u0216\5\u0216\u219e")
        buf.write("\n\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216")
        buf.write("\u21a5\n\u0216\3\u0217\3\u0217\3\u0217\5\u0217\u21aa\n")
        buf.write("\u0217\3\u0217\5\u0217\u21ad\n\u0217\3\u0217\3\u0217\3")
        buf.write("\u0217\3\u0217\5\u0217\u21b3\n\u0217\3\u0218\3\u0218\5")
        buf.write("\u0218\u21b7\n\u0218\3\u0219\3\u0219\3\u0219\3\u0219\3")
        buf.write("\u0219\3\u0219\3\u0219\5\u0219\u21c0\n\u0219\3\u021a\3")
        buf.write("\u021a\5\u021a\u21c4\n\u021a\3\u021a\3\u021a\3\u021a\3")
        buf.write("\u021a\3\u021a\3\u021a\5\u021a\u21cc\n\u021a\5\u021a\u21ce")
        buf.write("\n\u021a\3\u021b\3\u021b\3\u021b\7\u021b\u21d3\n\u021b")
        buf.write("\f\u021b\16\u021b\u21d6\13\u021b\3\u021c\3\u021c\5\u021c")
        buf.write("\u21da\n\u021c\3\u021c\5\u021c\u21dd\n\u021c\3\u021d\3")
        buf.write("\u021d\3\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u21e5\n")
        buf.write("\u021d\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021f")
        buf.write("\3\u021f\5\u021f\u21ee\n\u021f\3\u021f\3\u021f\3\u021f")
        buf.write("\3\u021f\3\u021f\3\u021f\5\u021f\u21f6\n\u021f\5\u021f")
        buf.write("\u21f8\n\u021f\3\u0220\3\u0220\5\u0220\u21fc\n\u0220\3")
        buf.write("\u0221\3\u0221\3\u0221\7\u0221\u2201\n\u0221\f\u0221\16")
        buf.write("\u0221\u2204\13\u0221\3\u0222\3\u0222\3\u0222\3\u0222")
        buf.write("\3\u0222\3\u0223\3\u0223\3\u0223\3\u0224\3\u0224\3\u0224")
        buf.write("\3\u0225\3\u0225\3\u0225\3\u0225\3\u0225\5\u0225\u2216")
        buf.write("\n\u0225\3\u0226\3\u0226\3\u0227\3\u0227\3\u0227\7\u0227")
        buf.write("\u221d\n\u0227\f\u0227\16\u0227\u2220\13\u0227\3\u0228")
        buf.write("\3\u0228\3\u0228\5\u0228\u2225\n\u0228\3\u0229\3\u0229")
        buf.write("\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229")
        buf.write("\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229")
        buf.write("\3\u0229\5\u0229\u2238\n\u0229\3\u0229\3\u0229\3\u022a")
        buf.write("\3\u022a\3\u022a\7\u022a\u223f\n\u022a\f\u022a\16\u022a")
        buf.write("\u2242\13\u022a\3\u022b\3\u022b\3\u022b\5\u022b\u2247")
        buf.write("\n\u022b\3\u022b\3\u022b\5\u022b\u224b\n\u022b\3\u022c")
        buf.write("\6\u022c\u224e\n\u022c\r\u022c\16\u022c\u224f\3\u022d")
        buf.write("\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d")
        buf.write("\5\u022d\u225a\n\u022d\3\u022e\3\u022e\3\u022e\7\u022e")
        buf.write("\u225f\n\u022e\f\u022e\16\u022e\u2262\13\u022e\3\u022f")
        buf.write("\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\5\u022f\u226a")
        buf.write("\n\u022f\3\u0230\5\u0230\u226d\n\u0230\3\u0230\3\u0230")
        buf.write("\3\u0230\3\u0230\3\u0230\3\u0230\3\u0230\5\u0230\u2276")
        buf.write("\n\u0230\5\u0230\u2278\n\u0230\3\u0231\3\u0231\5\u0231")
        buf.write("\u227c\n\u0231\3\u0231\7\u0231\u227f\n\u0231\f\u0231\16")
        buf.write("\u0231\u2282\13\u0231\3\u0232\3\u0232\3\u0232\3\u0232")
        buf.write("\3\u0232\3\u0232\3\u0232\5\u0232\u228b\n\u0232\3\u0232")
        buf.write("\3\u0232\3\u0232\3\u0232\5\u0232\u2291\n\u0232\3\u0232")
        buf.write("\5\u0232\u2294\n\u0232\3\u0233\3\u0233\3\u0233\3\u0233")
        buf.write("\3\u0233\5\u0233\u229b\n\u0233\3\u0234\3\u0234\5\u0234")
        buf.write("\u229f\n\u0234\3\u0234\5\u0234\u22a2\n\u0234\3\u0235\3")
        buf.write("\u0235\3\u0235\3\u0235\3\u0236\3\u0236\3\u0236\3\u0236")
        buf.write("\3\u0236\3\u0236\3\u0236\5\u0236\u22af\n\u0236\3\u0236")
        buf.write("\3\u0236\3\u0236\3\u0236\5\u0236\u22b5\n\u0236\3\u0236")
        buf.write("\3\u0236\5\u0236\u22b9\n\u0236\3\u0236\3\u0236\5\u0236")
        buf.write("\u22bd\n\u0236\3\u0236\5\u0236\u22c0\n\u0236\3\u0237\3")
        buf.write("\u0237\3\u0237\3\u0237\3\u0238\3\u0238\5\u0238\u22c8\n")
        buf.write("\u0238\3\u0239\3\u0239\5\u0239\u22cc\n\u0239\3\u023a\3")
        buf.write("\u023a\5\u023a\u22d0\n\u023a\3\u023a\3\u023a\3\u023a\3")
        buf.write("\u023a\3\u023b\3\u023b\5\u023b\u22d8\n\u023b\3\u023c\3")
        buf.write("\u023c\3\u023c\3\u023c\3\u023c\5\u023c\u22df\n\u023c\3")
        buf.write("\u023d\3\u023d\3\u023d\3\u023d\3\u023d\5\u023d\u22e6\n")
        buf.write("\u023d\3\u023e\3\u023e\5\u023e\u22ea\n\u023e\3\u023e\3")
        buf.write("\u023e\3\u023e\3\u023e\5\u023e\u22f0\n\u023e\5\u023e\u22f2")
        buf.write("\n\u023e\3\u023f\3\u023f\3\u0240\3\u0240\3\u0240\3\u0240")
        buf.write("\3\u0240\5\u0240\u22fb\n\u0240\3\u0240\5\u0240\u22fe\n")
        buf.write("\u0240\3\u0241\3\u0241\3\u0242\3\u0242\3\u0242\3\u0242")
        buf.write("\3\u0242\3\u0242\5\u0242\u2308\n\u0242\3\u0243\3\u0243")
        buf.write("\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243")
        buf.write("\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\5\u0243\u2318")
        buf.write("\n\u0243\3\u0243\3\u0243\3\u0243\3\u0243\5\u0243\u231e")
        buf.write("\n\u0243\3\u0243\3\u0243\3\u0243\5\u0243\u2323\n\u0243")
        buf.write("\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\5\u0244\u232a")
        buf.write("\n\u0244\3\u0245\3\u0245\3\u0246\3\u0246\3\u0246\3\u0247")
        buf.write("\3\u0247\3\u0248\3\u0248\3\u0248\3\u0248\5\u0248\u2337")
        buf.write("\n\u0248\3\u0249\3\u0249\3\u0249\7\u0249\u233c\n\u0249")
        buf.write("\f\u0249\16\u0249\u233f\13\u0249\3\u024a\3\u024a\3\u024a")
        buf.write("\7\u024a\u2344\n\u024a\f\u024a\16\u024a\u2347\13\u024a")
        buf.write("\3\u024b\3\u024b\3\u024b\7\u024b\u234c\n\u024b\f\u024b")
        buf.write("\16\u024b\u234f\13\u024b\3\u024c\3\u024c\5\u024c\u2353")
        buf.write("\n\u024c\3\u024c\3\u024c\5\u024c\u2357\n\u024c\3\u024c")
        buf.write("\3\u024c\3\u024c\3\u024c\5\u024c\u235d\n\u024c\3\u024d")
        buf.write("\3\u024d\5\u024d\u2361\n\u024d\3\u024d\3\u024d\5\u024d")
        buf.write("\u2365\n\u024d\3\u024e\5\u024e\u2368\n\u024e\3\u024e\3")
        buf.write("\u024e\3\u024f\3\u024f\5\u024f\u236e\n\u024f\3\u0250\3")
        buf.write("\u0250\3\u0250\5\u0250\u2373\n\u0250\3\u0250\3\u0250\3")
        buf.write("\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250")
        buf.write("\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\5\u0250\u2383")
        buf.write("\n\u0250\3\u0250\5\u0250\u2386\n\u0250\5\u0250\u2388\n")
        buf.write("\u0250\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251")
        buf.write("\3\u0251\3\u0251\3\u0251\3\u0251\5\u0251\u2394\n\u0251")
        buf.write("\5\u0251\u2396\n\u0251\3\u0252\3\u0252\5\u0252\u239a\n")
        buf.write("\u0252\3\u0252\3\u0252\3\u0252\3\u0252\5\u0252\u23a0\n")
        buf.write("\u0252\3\u0252\3\u0252\5\u0252\u23a4\n\u0252\5\u0252\u23a6")
        buf.write("\n\u0252\3\u0253\3\u0253\3\u0253\3\u0253\7\u0253\u23ac")
        buf.write("\n\u0253\f\u0253\16\u0253\u23af\13\u0253\3\u0254\5\u0254")
        buf.write("\u23b2\n\u0254\3\u0254\3\u0254\3\u0255\3\u0255\3\u0255")
        buf.write("\7\u0255\u23b9\n\u0255\f\u0255\16\u0255\u23bc\13\u0255")
        buf.write("\3\u0256\3\u0256\3\u0256\7\u0256\u23c1\n\u0256\f\u0256")
        buf.write("\16\u0256\u23c4\13\u0256\3\u0257\3\u0257\3\u0257\5\u0257")
        buf.write("\u23c9\n\u0257\3\u0258\5\u0258\u23cc\n\u0258\3\u0258\3")
        buf.write("\u0258\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\5\u0259")
        buf.write("\u23d5\n\u0259\3\u025a\3\u025a\3\u025a\5\u025a\u23da\n")
        buf.write("\u025a\3\u025b\3\u025b\3\u025b\7\u025b\u23df\n\u025b\f")
        buf.write("\u025b\16\u025b\u23e2\13\u025b\3\u025c\3\u025c\3\u025c")
        buf.write("\3\u025c\3\u025c\3\u025c\3\u025c\5\u025c\u23eb\n\u025c")
        buf.write("\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c")
        buf.write("\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c")
        buf.write("\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c")
        buf.write("\3\u025c\3\u025c\3\u025c\5\u025c\u2405\n\u025c\3\u025c")
        buf.write("\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c")
        buf.write("\3\u025c\5\u025c\u2410\n\u025c\7\u025c\u2412\n\u025c\f")
        buf.write("\u025c\16\u025c\u2415\13\u025c\3\u025d\3\u025d\3\u025d")
        buf.write("\3\u025d\3\u025d\5\u025d\u241c\n\u025d\3\u025d\3\u025d")
        buf.write("\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d")
        buf.write("\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d")
        buf.write("\3\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u2432\n\u025d")
        buf.write("\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d")
        buf.write("\5\u025d\u243b\n\u025d\3\u025e\3\u025e\3\u025f\3\u025f")
        buf.write("\3\u025f\3\u025f\3\u025f\3\u025f\5\u025f\u2445\n\u025f")
        buf.write("\3\u025f\5\u025f\u2448\n\u025f\3\u025f\3\u025f\3\u025f")
        buf.write("\5\u025f\u244d\n\u025f\3\u025f\3\u025f\3\u025f\5\u025f")
        buf.write("\u2452\n\u025f\3\u025f\3\u025f\5\u025f\u2456\n\u025f\3")
        buf.write("\u025f\3\u025f\3\u0260\3\u0260\5\u0260\u245c\n\u0260\3")
        buf.write("\u0260\5\u0260\u245f\n\u0260\3\u0260\5\u0260\u2462\n\u0260")
        buf.write("\3\u0260\5\u0260\u2465\n\u0260\3\u0261\3\u0261\5\u0261")
        buf.write("\u2469\n\u0261\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\5\u0262\u2477\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\5\u0262\u247e\n\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\5\u0262\u2485\n\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\5\u0262\u248c\n\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\5\u0262\u249f\n\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u24a7\n\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262")
        buf.write("\u24af\n\u0262\5\u0262\u24b1\n\u0262\3\u0262\3\u0262\3")
        buf.write("\u0262\3\u0262\5\u0262\u24b7\n\u0262\3\u0262\3\u0262\3")
        buf.write("\u0262\3\u0262\3\u0262\5\u0262\u24be\n\u0262\5\u0262\u24c0")
        buf.write("\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u24cd")
        buf.write("\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\5\u0262\u24f4\n\u0262\5\u0262")
        buf.write("\u24f6\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262")
        buf.write("\u250a\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\5\u0262\u2514\n\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\5\u0262\u251f\n\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u2530")
        buf.write("\n\u0262\3\u0262\5\u0262\u2533\n\u0262\3\u0262\5\u0262")
        buf.write("\u2536\n\u0262\3\u0262\5\u0262\u2539\n\u0262\5\u0262\u253b")
        buf.write("\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262")
        buf.write("\u2542\n\u0262\3\u0262\5\u0262\u2545\n\u0262\3\u0262\3")
        buf.write("\u0262\5\u0262\u2549\n\u0262\3\u0262\5\u0262\u254c\n\u0262")
        buf.write("\3\u0262\5\u0262\u254f\n\u0262\5\u0262\u2551\n\u0262\3")
        buf.write("\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u2558\n")
        buf.write("\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u2565")
        buf.write("\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u2572")
        buf.write("\n\u0262\3\u0262\5\u0262\u2575\n\u0262\3\u0262\3\u0262")
        buf.write("\5\u0262\u2579\n\u0262\3\u0262\5\u0262\u257c\n\u0262\3")
        buf.write("\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\5\u0262\u2586\n\u0262\3\u0262\5\u0262\u2589\n")
        buf.write("\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\3\u0262\5\u0262\u2593\n\u0262\3\u0262\5\u0262")
        buf.write("\u2596\n\u0262\3\u0262\5\u0262\u2599\n\u0262\3\u0262\3")
        buf.write("\u0262\5\u0262\u259d\n\u0262\3\u0263\3\u0263\3\u0263\3")
        buf.write("\u0263\3\u0263\5\u0263\u25a4\n\u0263\3\u0264\3\u0264\3")
        buf.write("\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264")
        buf.write("\3\u0264\5\u0264\u25b0\n\u0264\3\u0265\3\u0265\3\u0265")
        buf.write("\3\u0265\3\u0265\3\u0266\3\u0266\3\u0266\7\u0266\u25ba")
        buf.write("\n\u0266\f\u0266\16\u0266\u25bd\13\u0266\3\u0267\3\u0267")
        buf.write("\3\u0267\5\u0267\u25c2\n\u0267\3\u0268\3\u0268\3\u0269")
        buf.write("\3\u0269\3\u0269\3\u0269\5\u0269\u25ca\n\u0269\3\u026a")
        buf.write("\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a")
        buf.write("\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a")
        buf.write("\5\u026a\u25db\n\u026a\3\u026b\3\u026b\3\u026b\3\u026c")
        buf.write("\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026d\3\u026d")
        buf.write("\3\u026d\3\u026d\3\u026d\3\u026d\3\u026e\3\u026e\3\u026e")
        buf.write("\3\u026f\3\u026f\3\u026f\7\u026f\u25f2\n\u026f\f\u026f")
        buf.write("\16\u026f\u25f5\13\u026f\3\u0270\3\u0270\3\u0270\3\u0270")
        buf.write("\3\u0271\3\u0271\3\u0271\5\u0271\u25fe\n\u0271\3\u0272")
        buf.write("\3\u0272\5\u0272\u2602\n\u0272\3\u0272\5\u0272\u2605\n")
        buf.write("\u0272\3\u0272\5\u0272\u2608\n\u0272\3\u0272\5\u0272\u260b")
        buf.write("\n\u0272\3\u0272\3\u0272\3\u0273\3\u0273\3\u0274\3\u0274")
        buf.write("\3\u0274\3\u0274\3\u0275\3\u0275\3\u0275\5\u0275\u2618")
        buf.write("\n\u0275\3\u0275\3\u0275\3\u0275\5\u0275\u261d\n\u0275")
        buf.write("\3\u0275\3\u0275\3\u0275\5\u0275\u2622\n\u0275\5\u0275")
        buf.write("\u2624\n\u0275\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276")
        buf.write("\3\u0276\5\u0276\u262c\n\u0276\3\u0277\3\u0277\3\u0277")
        buf.write("\3\u0277\3\u0277\3\u0277\3\u0277\5\u0277\u2635\n\u0277")
        buf.write("\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278")
        buf.write("\5\u0278\u263e\n\u0278\3\u0279\3\u0279\3\u0279\5\u0279")
        buf.write("\u2643\n\u0279\3\u0279\3\u0279\3\u0279\3\u0279\3\u0279")
        buf.write("\3\u0279\3\u0279\5\u0279\u264c\n\u0279\3\u027a\3\u027a")
        buf.write("\3\u027a\5\u027a\u2651\n\u027a\3\u027a\3\u027a\3\u027b")
        buf.write("\3\u027b\3\u027b\3\u027b\3\u027b\3\u027b\3\u027c\3\u027c")
        buf.write("\3\u027d\3\u027d\5\u027d\u265f\n\u027d\3\u027e\3\u027e")
        buf.write("\3\u027f\3\u027f\3\u027f\3\u027f\3\u027f\3\u027f\5\u027f")
        buf.write("\u2669\n\u027f\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280")
        buf.write("\3\u0280\5\u0280\u2671\n\u0280\3\u0281\3\u0281\3\u0281")
        buf.write("\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281")
        buf.write("\3\u0281\3\u0281\5\u0281\u267f\n\u0281\3\u0282\3\u0282")
        buf.write("\3\u0282\7\u0282\u2684\n\u0282\f\u0282\16\u0282\u2687")
        buf.write("\13\u0282\3\u0283\3\u0283\3\u0283\7\u0283\u268c\n\u0283")
        buf.write("\f\u0283\16\u0283\u268f\13\u0283\3\u0284\3\u0284\3\u0284")
        buf.write("\3\u0284\3\u0284\5\u0284\u2696\n\u0284\3\u0285\3\u0285")
        buf.write("\3\u0285\7\u0285\u269b\n\u0285\f\u0285\16\u0285\u269e")
        buf.write("\13\u0285\3\u0286\3\u0286\3\u0286\5\u0286\u26a3\n\u0286")
        buf.write("\3\u0286\3\u0286\3\u0287\3\u0287\3\u0287\7\u0287\u26aa")
        buf.write("\n\u0287\f\u0287\16\u0287\u26ad\13\u0287\3\u0288\3\u0288")
        buf.write("\3\u0288\3\u0288\3\u0289\3\u0289\3\u0289\3\u0289\3\u0289")
        buf.write("\3\u0289\3\u0289\3\u0289\5\u0289\u26bb\n\u0289\3\u028a")
        buf.write("\3\u028a\3\u028b\3\u028b\3\u028b\3\u028b\3\u028b\3\u028b")
        buf.write("\3\u028b\5\u028b\u26c6\n\u028b\3\u028c\3\u028c\3\u028c")
        buf.write("\3\u028c\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d")
        buf.write("\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d")
        buf.write("\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d")
        buf.write("\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\5\u028d")
        buf.write("\u26e6\n\u028d\3\u028e\3\u028e\3\u028e\3\u028e\3\u028e")
        buf.write("\3\u028e\3\u028e\5\u028e\u26ef\n\u028e\3\u028f\3\u028f")
        buf.write("\3\u028f\3\u028f\3\u028f\5\u028f\u26f6\n\u028f\3\u0290")
        buf.write("\3\u0290\5\u0290\u26fa\n\u0290\3\u0290\3\u0290\5\u0290")
        buf.write("\u26fe\n\u0290\3\u0290\3\u0290\3\u0291\6\u0291\u2703\n")
        buf.write("\u0291\r\u0291\16\u0291\u2704\3\u0292\3\u0292\3\u0292")
        buf.write("\3\u0292\3\u0292\3\u0293\3\u0293\3\u0293\3\u0294\3\u0294")
        buf.write("\3\u0295\3\u0295\5\u0295\u2713\n\u0295\3\u0296\3\u0296")
        buf.write("\3\u0296\5\u0296\u2718\n\u0296\3\u0296\3\u0296\3\u0296")
        buf.write("\5\u0296\u271d\n\u0296\3\u0296\3\u0296\5\u0296\u2721\n")
        buf.write("\u0296\5\u0296\u2723\n\u0296\3\u0296\5\u0296\u2726\n\u0296")
        buf.write("\3\u0297\3\u0297\3\u0298\6\u0298\u272b\n\u0298\r\u0298")
        buf.write("\16\u0298\u272c\3\u0299\7\u0299\u2730\n\u0299\f\u0299")
        buf.write("\16\u0299\u2733\13\u0299\3\u029a\3\u029a\3\u029a\3\u029b")
        buf.write("\3\u029b\3\u029b\3\u029b\3\u029b\3\u029b\7\u029b\u273e")
        buf.write("\n\u029b\f\u029b\16\u029b\u2741\13\u029b\3\u029c\3\u029c")
        buf.write("\3\u029c\3\u029c\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d")
        buf.write("\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d")
        buf.write("\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d")
        buf.write("\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d\5\u029d")
        buf.write("\u2760\n\u029d\3\u029e\3\u029e\3\u029e\5\u029e\u2765\n")
        buf.write("\u029e\3\u029f\3\u029f\3\u029f\3\u029f\3\u029f\3\u029f")
        buf.write("\3\u029f\3\u029f\3\u029f\3\u029f\5\u029f\u2771\n\u029f")
        buf.write("\3\u02a0\3\u02a0\3\u02a0\3\u02a0\3\u02a0\3\u02a0\3\u02a0")
        buf.write("\3\u02a0\3\u02a0\3\u02a0\3\u02a0\3\u02a0\3\u02a0\3\u02a0")
        buf.write("\3\u02a0\5\u02a0\u2782\n\u02a0\3\u02a1\3\u02a1\3\u02a1")
        buf.write("\3\u02a1\3\u02a2\3\u02a2\5\u02a2\u278a\n\u02a2\3\u02a3")
        buf.write("\3\u02a3\3\u02a3\3\u02a3\3\u02a3\3\u02a3\5\u02a3\u2792")
        buf.write("\n\u02a3\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4")
        buf.write("\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4")
        buf.write("\3\u02a4\5\u02a4\u27a2\n\u02a4\3\u02a5\3\u02a5\3\u02a5")
        buf.write("\5\u02a5\u27a7\n\u02a5\3\u02a6\3\u02a6\3\u02a6\3\u02a6")
        buf.write("\3\u02a6\3\u02a6\3\u02a6\3\u02a6\3\u02a6\5\u02a6\u27b2")
        buf.write("\n\u02a6\3\u02a7\3\u02a7\3\u02a7\3\u02a7\3\u02a7\3\u02a7")
        buf.write("\3\u02a7\3\u02a7\3\u02a7\3\u02a7\5\u02a7\u27be\n\u02a7")
        buf.write("\3\u02a8\3\u02a8\3\u02a8\3\u02a8\3\u02a8\3\u02a8\7\u02a8")
        buf.write("\u27c6\n\u02a8\f\u02a8\16\u02a8\u27c9\13\u02a8\3\u02a9")
        buf.write("\3\u02a9\3\u02a9\3\u02a9\3\u02a9\3\u02a9\3\u02a9\3\u02a9")
        buf.write("\5\u02a9\u27d3\n\u02a9\3\u02aa\3\u02aa\3\u02aa\3\u02aa")
        buf.write("\3\u02aa\3\u02aa\5\u02aa\u27db\n\u02aa\3\u02ab\3\u02ab")
        buf.write("\3\u02ab\3\u02ab\3\u02ab\3\u02ab\5\u02ab\u27e3\n\u02ab")
        buf.write("\3\u02ac\3\u02ac\3\u02ac\3\u02ac\3\u02ac\3\u02ac\7\u02ac")
        buf.write("\u27eb\n\u02ac\f\u02ac\16\u02ac\u27ee\13\u02ac\3\u02ad")
        buf.write("\3\u02ad\3\u02ad\3\u02ad\5\u02ad\u27f4\n\u02ad\3\u02ad")
        buf.write("\5\u02ad\u27f7\n\u02ad\3\u02ad\3\u02ad\3\u02ad\3\u02ad")
        buf.write("\3\u02ad\3\u02ad\3\u02ad\5\u02ad\u2800\n\u02ad\3\u02ad")
        buf.write("\5\u02ad\u2803\n\u02ad\3\u02ad\3\u02ad\3\u02ad\5\u02ad")
        buf.write("\u2808\n\u02ad\3\u02ae\3\u02ae\3\u02ae\3\u02ae\3\u02af")
        buf.write("\3\u02af\3\u02b0\3\u02b0\3\u02b0\7\u02b0\u2813\n\u02b0")
        buf.write("\f\u02b0\16\u02b0\u2816\13\u02b0\3\u02b1\3\u02b1\3\u02b1")
        buf.write("\3\u02b1\3\u02b1\5\u02b1\u281d\n\u02b1\3\u02b1\5\u02b1")
        buf.write("\u2820\n\u02b1\3\u02b2\3\u02b2\3\u02b2\7\u02b2\u2825\n")
        buf.write("\u02b2\f\u02b2\16\u02b2\u2828\13\u02b2\3\u02b3\3\u02b3")
        buf.write("\5\u02b3\u282c\n\u02b3\3\u02b4\3\u02b4\3\u02b4\7\u02b4")
        buf.write("\u2831\n\u02b4\f\u02b4\16\u02b4\u2834\13\u02b4\3\u02b5")
        buf.write("\3\u02b5\3\u02b6\3\u02b6\3\u02b7\3\u02b7\3\u02b8\3\u02b8")
        buf.write("\3\u02b8\3\u02b8\5\u02b8\u2840\n\u02b8\3\u02b9\3\u02b9")
        buf.write("\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9")
        buf.write("\3\u02b9\5\u02b9\u284c\n\u02b9\3\u02b9\3\u02b9\3\u02b9")
        buf.write("\5\u02b9\u2851\n\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9")
        buf.write("\3\u02b9\3\u02b9\5\u02b9\u2859\n\u02b9\3\u02b9\3\u02b9")
        buf.write("\3\u02b9\3\u02b9\3\u02b9\5\u02b9\u2860\n\u02b9\3\u02b9")
        buf.write("\3\u02b9\3\u02b9\5\u02b9\u2865\n\u02b9\3\u02ba\3\u02ba")
        buf.write("\3\u02bb\3\u02bb\3\u02bc\3\u02bc\3\u02bd\3\u02bd\3\u02be")
        buf.write("\3\u02be\5\u02be\u2871\n\u02be\3\u02bf\3\u02bf\3\u02bf")
        buf.write("\3\u02bf\7\u02bf\u2877\n\u02bf\f\u02bf\16\u02bf\u287a")
        buf.write("\13\u02bf\3\u02bf\3\u02bf\5\u02bf\u287e\n\u02bf\3\u02c0")
        buf.write("\3\u02c0\3\u02c0\3\u02c1\3\u02c1\3\u02c1\3\u02c1\3\u02c1")
        buf.write("\5\u02c1\u2888\n\u02c1\3\u02c2\3\u02c2\3\u02c3\3\u02c3")
        buf.write("\3\u02c3\5\u02c3\u288f\n\u02c3\3\u02c4\3\u02c4\3\u02c4")
        buf.write("\7\u02c4\u2894\n\u02c4\f\u02c4\16\u02c4\u2897\13\u02c4")
        buf.write("\3\u02c5\3\u02c5\3\u02c5\5\u02c5\u289c\n\u02c5\3\u02c6")
        buf.write("\3\u02c6\3\u02c6\5\u02c6\u28a1\n\u02c6\3\u02c7\3\u02c7")
        buf.write("\3\u02c7\3\u02c7\5\u02c7\u28a7\n\u02c7\3\u02c8\3\u02c8")
        buf.write("\3\u02c8\3\u02c8\3\u02c8\3\u02c8\5\u02c8\u28af\n\u02c8")
        buf.write("\3\u02c9\3\u02c9\5\u02c9\u28b3\n\u02c9\3\u02ca\3\u02ca")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cb")
        buf.write("\5\u02cb\u28f6\n\u02cb\3\u02cc\3\u02cc\3\u02cd\3\u02cd")
        buf.write("\3\u02ce\3\u02ce\3\u02cf\3\u02cf\3\u02d0\3\u02d0\5\u02d0")
        buf.write("\u2902\n\u02d0\3\u02d0\3\u02d0\3\u02d0\5\u02d0\u2907\n")
        buf.write("\u02d0\3\u02d0\2\6\u04b6\u0534\u054e\u0556\u02d1\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102")
        buf.write("\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114")
        buf.write("\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126")
        buf.write("\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138")
        buf.write("\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a")
        buf.write("\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c")
        buf.write("\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e")
        buf.write("\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180")
        buf.write("\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192")
        buf.write("\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4")
        buf.write("\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6")
        buf.write("\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8")
        buf.write("\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da")
        buf.write("\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec")
        buf.write("\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe")
        buf.write("\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210")
        buf.write("\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222")
        buf.write("\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234")
        buf.write("\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246")
        buf.write("\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258")
        buf.write("\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a")
        buf.write("\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c")
        buf.write("\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e")
        buf.write("\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0")
        buf.write("\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2")
        buf.write("\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4")
        buf.write("\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6")
        buf.write("\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8")
        buf.write("\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa")
        buf.write("\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c")
        buf.write("\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e")
        buf.write("\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330")
        buf.write("\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342")
        buf.write("\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354")
        buf.write("\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366")
        buf.write("\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378")
        buf.write("\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a")
        buf.write("\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c")
        buf.write("\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae")
        buf.write("\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0")
        buf.write("\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2")
        buf.write("\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4")
        buf.write("\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6")
        buf.write("\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408")
        buf.write("\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a")
        buf.write("\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c")
        buf.write("\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e")
        buf.write("\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450")
        buf.write("\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460\u0462")
        buf.write("\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474")
        buf.write("\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486")
        buf.write("\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498")
        buf.write("\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa")
        buf.write("\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc")
        buf.write("\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce")
        buf.write("\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0")
        buf.write("\u04e2\u04e4\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2")
        buf.write("\u04f4\u04f6\u04f8\u04fa\u04fc\u04fe\u0500\u0502\u0504")
        buf.write("\u0506\u0508\u050a\u050c\u050e\u0510\u0512\u0514\u0516")
        buf.write("\u0518\u051a\u051c\u051e\u0520\u0522\u0524\u0526\u0528")
        buf.write("\u052a\u052c\u052e\u0530\u0532\u0534\u0536\u0538\u053a")
        buf.write("\u053c\u053e\u0540\u0542\u0544\u0546\u0548\u054a\u054c")
        buf.write("\u054e\u0550\u0552\u0554\u0556\u0558\u055a\u055c\u055e")
        buf.write("\u0560\u0562\u0564\u0566\u0568\u056a\u056c\u056e\u0570")
        buf.write("\u0572\u0574\u0576\u0578\u057a\u057c\u057e\u0580\u0582")
        buf.write("\u0584\u0586\u0588\u058a\u058c\u058e\u0590\u0592\u0594")
        buf.write("\u0596\u0598\u059a\u059c\u059e\2D\4\2\u00eb\u00eb\u018d")
        buf.write("\u018d\4\2jj\u015f\u015f\4\2\u008b\u008b\u015f\u015f\5")
        buf.write("\2jj\u008b\u008b\u015f\u015f\4\2\u00ad\u00ad\u00e7\u00e7")
        buf.write("\4\2\u011d\u011d\u016d\u016d\4\2\f\f\u0086\u0086\4\2\u00ca")
        buf.write("\u00ca\u018c\u018c\4\2\u00dc\u00dc\u0105\u0105\7\2FF\u0141")
        buf.write("\u0141\u016a\u016a\u0181\u0181\u0183\u0183\4\2\u00be\u00be")
        buf.write("\u015c\u015c\4\2hh\u0086\u0086\4\2\u0181\u0181\u0183\u0183")
        buf.write("\4\2\u00f0\u00f0\u0108\u0108\13\2FF\u00c8\u00c8\u00cd")
        buf.write("\u00cd\u00db\u00db\u0103\u0103\u010b\u010b\u0177\u0177")
        buf.write("\u017a\u017a\u01de\u01de\5\2\u0099\u0099\u013d\u013d\u0171")
        buf.write("\u0171\4\2]]vv\5\2\u00d5\u00d5\u0124\u0124\u0127\u0127")
        buf.write("\7\2FF\u0080\u0080\u00de\u00de\u0110\u0110\u0192\u0192")
        buf.write("\4\2\u0084\u0084\u010a\u010a\3\2\u01e8\u01e9\4\2\u0084")
        buf.write("\u0084\u01bf\u01bf\4\2\u0176\u0176\u01bf\u01bf\4\2\u00fb")
        buf.write("\u00fb\u0149\u0149\5\2\u0162\u0162\u0186\u0186\u01e5\u01e5")
        buf.write("\4\2hhll\7\2\u00fc\u00fc\u016a\u016a\u017f\u017f\u018a")
        buf.write("\u018a\u01ef\u01f0\4\2MM__\4\2\f\f]]\5\2\u00fb\u00fb\u0149")
        buf.write("\u0149\u01e2\u01e2\4\2\u00d7\u00d7\u017e\u017e\6\2\u0080")
        buf.write("\u0080\u00de\u00de\u0110\u0110\u0192\u0192\4\2\u00b1\u00b1")
        buf.write("\u0111\u0111\4\2\u0185\u0185\u019d\u019d\4\2\u00bf\u00bf")
        buf.write("\u011d\u011d\4\2\u015a\u015a\u016e\u016e\3\2GH\4\2\u008b")
        buf.write("\u008b\u017e\u017e\4\2\u00f1\u00f1\u016f\u016f\4\2cc\u0089")
        buf.write("\u0089\4\2\u00fd\u00fd\u011d\u011d\4\2FF``\4\2\u0161\u0161")
        buf.write("\u01bf\u01bf\4\2\u00f7\u00f7\u012d\u012d\6\2\u0099\u0099")
        buf.write("\u009b\u009b\u009f\u009f\u00a6\u00a6\4\2\u01a8\u01a9\u01b7")
        buf.write("\u01b7\3\2\u01a8\u01a9\3\2\u01c3\u01c4\3\2\24\25\4\2\u009d")
        buf.write("\u009d\u00a2\u00a2\7\2\f\f\22\23\27\27\31\31\33\33\3\2")
        buf.write("\16\17\5\2\13\13\20\20\35\35\5\2OOqq\u0087\u0087\4\2\u00ce")
        buf.write("\u00ce\u00e4\u00e4\4\2\u0151\u0151\u01ea\u01ea\4\2\u00f8")
        buf.write("\u00f8\u0142\u0142\5\2FFJJ\u0082\u0082\b\2\13\f\16\23")
        buf.write("\27\27\31\31\33\33\35\35\4\2\26\26\30\30\3\2\u020b\u020e")
        buf.write("\3\2\u0242\u0245\17\2-D\u00a4\u00a4\u00a9\u014e\u0150")
        buf.write("\u01a3\u01d9\u01ec\u01ef\u01fd\u01ff\u01ff\u0201\u0201")
        buf.write("\u0203\u0203\u0206\u0210\u0213\u0213\u0220\u0220\u022b")
        buf.write("\u022b\5\2\u0092\u00a3\u00a5\u00a8\u0200\u0200\5\2,,F")
        buf.write("\u0091\u01ee\u01ee%\2 DFJMUWbddgglmpqsvyz|~\u0080\u0085")
        buf.write("\u0087\u0088\u008a\u008e\u0092\u009c\u009e\u00a1\u00a3")
        buf.write("\u00a3\u00a6\u00d7\u00d9\u0101\u0103\u0125\u0127\u0128")
        buf.write("\u012a\u014e\u0150\u0166\u0168\u0196\u0198\u019b\u019d")
        buf.write("\u01a0\u01a2\u01a7\u01aa\u01bc\u01be\u01c9\u01d1\u0204")
        buf.write("\u0206\u0206\u0209\u0211\u0213\u0213\u0220\u0220\u022b")
        buf.write("\u022b\2\u2db9\2\u05a0\3\2\2\2\4\u05a3\3\2\2\2\6\u05a6")
        buf.write("\3\2\2\2\b\u062d\3\2\2\2\n\u062f\3\2\2\2\f\u0632\3\2\2")
        buf.write("\2\16\u063a\3\2\2\2\20\u063f\3\2\2\2\22\u0645\3\2\2\2")
        buf.write("\24\u065a\3\2\2\2\26\u0666\3\2\2\2\30\u0668\3\2\2\2\32")
        buf.write("\u0670\3\2\2\2\34\u0678\3\2\2\2\36\u067c\3\2\2\2 \u0687")
        buf.write("\3\2\2\2\"\u068f\3\2\2\2$\u0697\3\2\2\2&\u069e\3\2\2\2")
        buf.write("(\u06a0\3\2\2\2*\u06b1\3\2\2\2,\u06b6\3\2\2\2.\u06bf\3")
        buf.write("\2\2\2\60\u06c1\3\2\2\2\62\u06cf\3\2\2\2\64\u06d1\3\2")
        buf.write("\2\2\66\u06f2\3\2\2\28\u06f4\3\2\2\2:\u06fc\3\2\2\2<\u0706")
        buf.write("\3\2\2\2>\u070d\3\2\2\2@\u0713\3\2\2\2B\u0725\3\2\2\2")
        buf.write("D\u0729\3\2\2\2F\u072d\3\2\2\2H\u072f\3\2\2\2J\u073a\3")
        buf.write("\2\2\2L\u073e\3\2\2\2N\u0743\3\2\2\2P\u0748\3\2\2\2R\u074a")
        buf.write("\3\2\2\2T\u0756\3\2\2\2V\u075d\3\2\2\2X\u075f\3\2\2\2")
        buf.write("Z\u0761\3\2\2\2\\\u0763\3\2\2\2^\u07d6\3\2\2\2`\u07d8")
        buf.write("\3\2\2\2b\u07e8\3\2\2\2d\u07ea\3\2\2\2f\u0918\3\2\2\2")
        buf.write("h\u091f\3\2\2\2j\u0921\3\2\2\2l\u0923\3\2\2\2n\u0926\3")
        buf.write("\2\2\2p\u092f\3\2\2\2r\u0931\3\2\2\2t\u0935\3\2\2\2v\u0938")
        buf.write("\3\2\2\2x\u0940\3\2\2\2z\u094c\3\2\2\2|\u095d\3\2\2\2")
        buf.write("~\u0979\3\2\2\2\u0080\u097b\3\2\2\2\u0082\u097e\3\2\2")
        buf.write("\2\u0084\u0986\3\2\2\2\u0086\u098b\3\2\2\2\u0088\u09b1")
        buf.write("\3\2\2\2\u008a\u09b3\3\2\2\2\u008c\u09dd\3\2\2\2\u008e")
        buf.write("\u09df\3\2\2\2\u0090\u09e1\3\2\2\2\u0092\u09e6\3\2\2\2")
        buf.write("\u0094\u09ed\3\2\2\2\u0096\u09f2\3\2\2\2\u0098\u0a1c\3")
        buf.write("\2\2\2\u009a\u0a1e\3\2\2\2\u009c\u0a21\3\2\2\2\u009e\u0a26")
        buf.write("\3\2\2\2\u00a0\u0a28\3\2\2\2\u00a2\u0a30\3\2\2\2\u00a4")
        buf.write("\u0a3b\3\2\2\2\u00a6\u0a3d\3\2\2\2\u00a8\u0a45\3\2\2\2")
        buf.write("\u00aa\u0a47\3\2\2\2\u00ac\u0a9c\3\2\2\2\u00ae\u0a9e\3")
        buf.write("\2\2\2\u00b0\u0aa0\3\2\2\2\u00b2\u0aa4\3\2\2\2\u00b4\u0aac")
        buf.write("\3\2\2\2\u00b6\u0ab7\3\2\2\2\u00b8\u0abb\3\2\2\2\u00ba")
        buf.write("\u0abd\3\2\2\2\u00bc\u0ac4\3\2\2\2\u00be\u0ace\3\2\2\2")
        buf.write("\u00c0\u0ad9\3\2\2\2\u00c2\u0b0f\3\2\2\2\u00c4\u0b14\3")
        buf.write("\2\2\2\u00c6\u0b1b\3\2\2\2\u00c8\u0b1d\3\2\2\2\u00ca\u0b25")
        buf.write("\3\2\2\2\u00cc\u0b28\3\2\2\2\u00ce\u0b2f\3\2\2\2\u00d0")
        buf.write("\u0b87\3\2\2\2\u00d2\u0b89\3\2\2\2\u00d4\u0b8c\3\2\2\2")
        buf.write("\u00d6\u0b90\3\2\2\2\u00d8\u0b98\3\2\2\2\u00da\u0b9a\3")
        buf.write("\2\2\2\u00dc\u0b9f\3\2\2\2\u00de\u0ba2\3\2\2\2\u00e0\u0baa")
        buf.write("\3\2\2\2\u00e2\u0bb4\3\2\2\2\u00e4\u0bc1\3\2\2\2\u00e6")
        buf.write("\u0bc3\3\2\2\2\u00e8\u0bc7\3\2\2\2\u00ea\u0bd1\3\2\2\2")
        buf.write("\u00ec\u0bd3\3\2\2\2\u00ee\u0bd8\3\2\2\2\u00f0\u0bda\3")
        buf.write("\2\2\2\u00f2\u0be1\3\2\2\2\u00f4\u0c00\3\2\2\2\u00f6\u0c02")
        buf.write("\3\2\2\2\u00f8\u0c09\3\2\2\2\u00fa\u0c0b\3\2\2\2\u00fc")
        buf.write("\u0c14\3\2\2\2\u00fe\u0c17\3\2\2\2\u0100\u0c1c\3\2\2\2")
        buf.write("\u0102\u0c20\3\2\2\2\u0104\u0c30\3\2\2\2\u0106\u0c3b\3")
        buf.write("\2\2\2\u0108\u0c4b\3\2\2\2\u010a\u0c5b\3\2\2\2\u010c\u0c61")
        buf.write("\3\2\2\2\u010e\u0c72\3\2\2\2\u0110\u0c7f\3\2\2\2\u0112")
        buf.write("\u0c81\3\2\2\2\u0114\u0c8b\3\2\2\2\u0116\u0c99\3\2\2\2")
        buf.write("\u0118\u0ca2\3\2\2\2\u011a\u0ca4\3\2\2\2\u011c\u0ca9\3")
        buf.write("\2\2\2\u011e\u0ccf\3\2\2\2\u0120\u0cd1\3\2\2\2\u0122\u0cd9")
        buf.write("\3\2\2\2\u0124\u0cdb\3\2\2\2\u0126\u0ce3\3\2\2\2\u0128")
        buf.write("\u0cf9\3\2\2\2\u012a\u0cfb\3\2\2\2\u012c\u0cff\3\2\2\2")
        buf.write("\u012e\u0d06\3\2\2\2\u0130\u0d08\3\2\2\2\u0132\u0d0a\3")
        buf.write("\2\2\2\u0134\u0d0c\3\2\2\2\u0136\u0d17\3\2\2\2\u0138\u0d1a")
        buf.write("\3\2\2\2\u013a\u0d22\3\2\2\2\u013c\u0d32\3\2\2\2\u013e")
        buf.write("\u0d3c\3\2\2\2\u0140\u0d3e\3\2\2\2\u0142\u0d47\3\2\2\2")
        buf.write("\u0144\u0d4a\3\2\2\2\u0146\u0db5\3\2\2\2\u0148\u0db7\3")
        buf.write("\2\2\2\u014a\u0dca\3\2\2\2\u014c\u0dcd\3\2\2\2\u014e\u0dd1")
        buf.write("\3\2\2\2\u0150\u0de4\3\2\2\2\u0152\u0de6\3\2\2\2\u0154")
        buf.write("\u0deb\3\2\2\2\u0156\u0df3\3\2\2\2\u0158\u0df8\3\2\2\2")
        buf.write("\u015a\u0e07\3\2\2\2\u015c\u0e09\3\2\2\2\u015e\u0e0c\3")
        buf.write("\2\2\2\u0160\u0e0e\3\2\2\2\u0162\u0e33\3\2\2\2\u0164\u0e35")
        buf.write("\3\2\2\2\u0166\u0e38\3\2\2\2\u0168\u0e3d\3\2\2\2\u016a")
        buf.write("\u0e3f\3\2\2\2\u016c\u0e91\3\2\2\2\u016e\u0e93\3\2\2\2")
        buf.write("\u0170\u0ea5\3\2\2\2\u0172\u0ea7\3\2\2\2\u0174\u0ec3\3")
        buf.write("\2\2\2\u0176\u0ec7\3\2\2\2\u0178\u0edb\3\2\2\2\u017a\u0edd")
        buf.write("\3\2\2\2\u017c\u0ee6\3\2\2\2\u017e\u0efa\3\2\2\2\u0180")
        buf.write("\u0f08\3\2\2\2\u0182\u0f0d\3\2\2\2\u0184\u0f13\3\2\2\2")
        buf.write("\u0186\u0f16\3\2\2\2\u0188\u0f19\3\2\2\2\u018a\u0f1c\3")
        buf.write("\2\2\2\u018c\u0f1f\3\2\2\2\u018e\u0f21\3\2\2\2\u0190\u0f2a")
        buf.write("\3\2\2\2\u0192\u0f5c\3\2\2\2\u0194\u0f62\3\2\2\2\u0196")
        buf.write("\u0f64\3\2\2\2\u0198\u0f73\3\2\2\2\u019a\u0f75\3\2\2\2")
        buf.write("\u019c\u0f79\3\2\2\2\u019e\u0f7d\3\2\2\2\u01a0\u0f84\3")
        buf.write("\2\2\2\u01a2\u0f86\3\2\2\2\u01a4\u0f88\3\2\2\2\u01a6\u0f8a")
        buf.write("\3\2\2\2\u01a8\u0f90\3\2\2\2\u01aa\u0f92\3\2\2\2\u01ac")
        buf.write("\u0f94\3\2\2\2\u01ae\u0f99\3\2\2\2\u01b0\u0f9d\3\2\2\2")
        buf.write("\u01b2\u0faa\3\2\2\2\u01b4\u0fac\3\2\2\2\u01b6\u0fb2\3")
        buf.write("\2\2\2\u01b8\u0fc0\3\2\2\2\u01ba\u0fdc\3\2\2\2\u01bc\u0fde")
        buf.write("\3\2\2\2\u01be\u0fe6\3\2\2\2\u01c0\u0fec\3\2\2\2\u01c2")
        buf.write("\u0ff4\3\2\2\2\u01c4\u1000\3\2\2\2\u01c6\u1002\3\2\2\2")
        buf.write("\u01c8\u107d\3\2\2\2\u01ca\u107f\3\2\2\2\u01cc\u1083\3")
        buf.write("\2\2\2\u01ce\u108b\3\2\2\2\u01d0\u1096\3\2\2\2\u01d2\u1098")
        buf.write("\3\2\2\2\u01d4\u109c\3\2\2\2\u01d6\u10a4\3\2\2\2\u01d8")
        buf.write("\u10a8\3\2\2\2\u01da\u10aa\3\2\2\2\u01dc\u10dd\3\2\2\2")
        buf.write("\u01de\u10df\3\2\2\2\u01e0\u10e3\3\2\2\2\u01e2\u10f5\3")
        buf.write("\2\2\2\u01e4\u111c\3\2\2\2\u01e6\u111e\3\2\2\2\u01e8\u1120")
        buf.write("\3\2\2\2\u01ea\u1129\3\2\2\2\u01ec\u112b\3\2\2\2\u01ee")
        buf.write("\u112d\3\2\2\2\u01f0\u1146\3\2\2\2\u01f2\u1148\3\2\2\2")
        buf.write("\u01f4\u115c\3\2\2\2\u01f6\u1172\3\2\2\2\u01f8\u1188\3")
        buf.write("\2\2\2\u01fa\u118a\3\2\2\2\u01fc\u1191\3\2\2\2\u01fe\u11f2")
        buf.write("\3\2\2\2\u0200\u120b\3\2\2\2\u0202\u1212\3\2\2\2\u0204")
        buf.write("\u1223\3\2\2\2\u0206\u1225\3\2\2\2\u0208\u1227\3\2\2\2")
        buf.write("\u020a\u122f\3\2\2\2\u020c\u1235\3\2\2\2\u020e\u1239\3")
        buf.write("\2\2\2\u0210\u1241\3\2\2\2\u0212\u1250\3\2\2\2\u0214\u12e5")
        buf.write("\3\2\2\2\u0216\u12e9\3\2\2\2\u0218\u135a\3\2\2\2\u021a")
        buf.write("\u135c\3\2\2\2\u021c\u1361\3\2\2\2\u021e\u1367\3\2\2\2")
        buf.write("\u0220\u13be\3\2\2\2\u0222\u13c0\3\2\2\2\u0224\u13c2\3")
        buf.write("\2\2\2\u0226\u13c4\3\2\2\2\u0228\u13e2\3\2\2\2\u022a\u13f3")
        buf.write("\3\2\2\2\u022c\u13f5\3\2\2\2\u022e\u140d\3\2\2\2\u0230")
        buf.write("\u1449\3\2\2\2\u0232\u144b\3\2\2\2\u0234\u1456\3\2\2\2")
        buf.write("\u0236\u1458\3\2\2\2\u0238\u145c\3\2\2\2\u023a\u147d\3")
        buf.write("\2\2\2\u023c\u147f\3\2\2\2\u023e\u1483\3\2\2\2\u0240\u1487")
        buf.write("\3\2\2\2\u0242\u1490\3\2\2\2\u0244\u149c\3\2\2\2\u0246")
        buf.write("\u14bc\3\2\2\2\u0248\u14be\3\2\2\2\u024a\u14ff\3\2\2\2")
        buf.write("\u024c\u1501\3\2\2\2\u024e\u1503\3\2\2\2\u0250\u1505\3")
        buf.write("\2\2\2\u0252\u1507\3\2\2\2\u0254\u1509\3\2\2\2\u0256\u150c")
        buf.write("\3\2\2\2\u0258\u152b\3\2\2\2\u025a\u1538\3\2\2\2\u025c")
        buf.write("\u153a\3\2\2\2\u025e\u153f\3\2\2\2\u0260\u1547\3\2\2\2")
        buf.write("\u0262\u154a\3\2\2\2\u0264\u154c\3\2\2\2\u0266\u1552\3")
        buf.write("\2\2\2\u0268\u1554\3\2\2\2\u026a\u1568\3\2\2\2\u026c\u156b")
        buf.write("\3\2\2\2\u026e\u1571\3\2\2\2\u0270\u1579\3\2\2\2\u0272")
        buf.write("\u1589\3\2\2\2\u0274\u158b\3\2\2\2\u0276\u1591\3\2\2\2")
        buf.write("\u0278\u15a6\3\2\2\2\u027a\u15af\3\2\2\2\u027c\u15b1\3")
        buf.write("\2\2\2\u027e\u15b3\3\2\2\2\u0280\u15be\3\2\2\2\u0282\u15c0")
        buf.write("\3\2\2\2\u0284\u15c5\3\2\2\2\u0286\u15c7\3\2\2\2\u0288")
        buf.write("\u15d6\3\2\2\2\u028a\u15de\3\2\2\2\u028c\u15e1\3\2\2\2")
        buf.write("\u028e\u15ea\3\2\2\2\u0290\u1613\3\2\2\2\u0292\u161d\3")
        buf.write("\2\2\2\u0294\u1624\3\2\2\2\u0296\u1626\3\2\2\2\u0298\u1632")
        buf.write("\3\2\2\2\u029a\u1635\3\2\2\2\u029c\u1638\3\2\2\2\u029e")
        buf.write("\u1640\3\2\2\2\u02a0\u1648\3\2\2\2\u02a2\u164c\3\2\2\2")
        buf.write("\u02a4\u1678\3\2\2\2\u02a6\u1688\3\2\2\2\u02a8\u1698\3")
        buf.write("\2\2\2\u02aa\u16b0\3\2\2\2\u02ac\u16b7\3\2\2\2\u02ae\u16bc")
        buf.write("\3\2\2\2\u02b0\u16c4\3\2\2\2\u02b2\u16c7\3\2\2\2\u02b4")
        buf.write("\u16cb\3\2\2\2\u02b6\u16d2\3\2\2\2\u02b8\u16f9\3\2\2\2")
        buf.write("\u02ba\u16ff\3\2\2\2\u02bc\u1701\3\2\2\2\u02be\u170e\3")
        buf.write("\2\2\2\u02c0\u1711\3\2\2\2\u02c2\u1740\3\2\2\2\u02c4\u1742")
        buf.write("\3\2\2\2\u02c6\u176c\3\2\2\2\u02c8\u176e\3\2\2\2\u02ca")
        buf.write("\u1770\3\2\2\2\u02cc\u1772\3\2\2\2\u02ce\u1782\3\2\2\2")
        buf.write("\u02d0\u196b\3\2\2\2\u02d2\u196d\3\2\2\2\u02d4\u196f\3")
        buf.write("\2\2\2\u02d6\u19b7\3\2\2\2\u02d8\u19b9\3\2\2\2\u02da\u1a94")
        buf.write("\3\2\2\2\u02dc\u1a96\3\2\2\2\u02de\u1a9e\3\2\2\2\u02e0")
        buf.write("\u1aae\3\2\2\2\u02e2\u1ab5\3\2\2\2\u02e4\u1ab7\3\2\2\2")
        buf.write("\u02e6\u1b78\3\2\2\2\u02e8\u1b7a\3\2\2\2\u02ea\u1b83\3")
        buf.write("\2\2\2\u02ec\u1b8b\3\2\2\2\u02ee\u1ba8\3\2\2\2\u02f0\u1baa")
        buf.write("\3\2\2\2\u02f2\u1bb4\3\2\2\2\u02f4\u1bbc\3\2\2\2\u02f6")
        buf.write("\u1be5\3\2\2\2\u02f8\u1bf5\3\2\2\2\u02fa\u1bf7\3\2\2\2")
        buf.write("\u02fc\u1c11\3\2\2\2\u02fe\u1c14\3\2\2\2\u0300\u1c24\3")
        buf.write("\2\2\2\u0302\u1c26\3\2\2\2\u0304\u1c28\3\2\2\2\u0306\u1c2a")
        buf.write("\3\2\2\2\u0308\u1c2c\3\2\2\2\u030a\u1c31\3\2\2\2\u030c")
        buf.write("\u1c34\3\2\2\2\u030e\u1c3b\3\2\2\2\u0310\u1c82\3\2\2\2")
        buf.write("\u0312\u1c84\3\2\2\2\u0314\u1c90\3\2\2\2\u0316\u1c92\3")
        buf.write("\2\2\2\u0318\u1c9c\3\2\2\2\u031a\u1c9e\3\2\2\2\u031c\u1ca4")
        buf.write("\3\2\2\2\u031e\u1cc4\3\2\2\2\u0320\u1ccb\3\2\2\2\u0322")
        buf.write("\u1cce\3\2\2\2\u0324\u1cd7\3\2\2\2\u0326\u1cda\3\2\2\2")
        buf.write("\u0328\u1cde\3\2\2\2\u032a\u1cef\3\2\2\2\u032c\u1cf1\3")
        buf.write("\2\2\2\u032e\u1cf3\3\2\2\2\u0330\u1d02\3\2\2\2\u0332\u1d07")
        buf.write("\3\2\2\2\u0334\u1d17\3\2\2\2\u0336\u1d1f\3\2\2\2\u0338")
        buf.write("\u1d21\3\2\2\2\u033a\u1d27\3\2\2\2\u033c\u1d2c\3\2\2\2")
        buf.write("\u033e\u1d35\3\2\2\2\u0340\u1d50\3\2\2\2\u0342\u1d52\3")
        buf.write("\2\2\2\u0344\u1da1\3\2\2\2\u0346\u1da3\3\2\2\2\u0348\u1da5")
        buf.write("\3\2\2\2\u034a\u1dc6\3\2\2\2\u034c\u1dc8\3\2\2\2\u034e")
        buf.write("\u1de2\3\2\2\2\u0350\u1df2\3\2\2\2\u0352\u1df4\3\2\2\2")
        buf.write("\u0354\u1dfc\3\2\2\2\u0356\u1e04\3\2\2\2\u0358\u1e06\3")
        buf.write("\2\2\2\u035a\u1e0d\3\2\2\2\u035c\u1e11\3\2\2\2\u035e\u1e13")
        buf.write("\3\2\2\2\u0360\u1e19\3\2\2\2\u0362\u1e1d\3\2\2\2\u0364")
        buf.write("\u1e1f\3\2\2\2\u0366\u1e21\3\2\2\2\u0368\u1e23\3\2\2\2")
        buf.write("\u036a\u1e25\3\2\2\2\u036c\u1e27\3\2\2\2\u036e\u1e2b\3")
        buf.write("\2\2\2\u0370\u1e2f\3\2\2\2\u0372\u1e37\3\2\2\2\u0374\u1e4b")
        buf.write("\3\2\2\2\u0376\u1e56\3\2\2\2\u0378\u1e58\3\2\2\2\u037a")
        buf.write("\u1e60\3\2\2\2\u037c\u1e66\3\2\2\2\u037e\u1e6a\3\2\2\2")
        buf.write("\u0380\u1e6c\3\2\2\2\u0382\u1e74\3\2\2\2\u0384\u1e7c\3")
        buf.write("\2\2\2\u0386\u1ea4\3\2\2\2\u0388\u1ea6\3\2\2\2\u038a\u1eb4")
        buf.write("\3\2\2\2\u038c\u1eb7\3\2\2\2\u038e\u1ec3\3\2\2\2\u0390")
        buf.write("\u1edb\3\2\2\2\u0392\u1edd\3\2\2\2\u0394\u1edf\3\2\2\2")
        buf.write("\u0396\u1ee7\3\2\2\2\u0398\u1eea\3\2\2\2\u039a\u1f02\3")
        buf.write("\2\2\2\u039c\u1f04\3\2\2\2\u039e\u1f07\3\2\2\2\u03a0\u1f26")
        buf.write("\3\2\2\2\u03a2\u1f39\3\2\2\2\u03a4\u1f46\3\2\2\2\u03a6")
        buf.write("\u1f4e\3\2\2\2\u03a8\u1f5c\3\2\2\2\u03aa\u1f5f\3\2\2\2")
        buf.write("\u03ac\u1f6a\3\2\2\2\u03ae\u1f7a\3\2\2\2\u03b0\u1f7c\3")
        buf.write("\2\2\2\u03b2\u1f81\3\2\2\2\u03b4\u1f84\3\2\2\2\u03b6\u1f93")
        buf.write("\3\2\2\2\u03b8\u1fa5\3\2\2\2\u03ba\u1fa7\3\2\2\2\u03bc")
        buf.write("\u1faa\3\2\2\2\u03be\u1fb2\3\2\2\2\u03c0\u1fbc\3\2\2\2")
        buf.write("\u03c2\u1fc5\3\2\2\2\u03c4\u1fcc\3\2\2\2\u03c6\u1fd0\3")
        buf.write("\2\2\2\u03c8\u1fda\3\2\2\2\u03ca\u1ff9\3\2\2\2\u03cc\u1ffb")
        buf.write("\3\2\2\2\u03ce\u2006\3\2\2\2\u03d0\u2044\3\2\2\2\u03d2")
        buf.write("\u2046\3\2\2\2\u03d4\u204c\3\2\2\2\u03d6\u2054\3\2\2\2")
        buf.write("\u03d8\u2063\3\2\2\2\u03da\u2065\3\2\2\2\u03dc\u2067\3")
        buf.write("\2\2\2\u03de\u206a\3\2\2\2\u03e0\u207c\3\2\2\2\u03e2\u207e")
        buf.write("\3\2\2\2\u03e4\u2080\3\2\2\2\u03e6\u2082\3\2\2\2\u03e8")
        buf.write("\u208a\3\2\2\2\u03ea\u208c\3\2\2\2\u03ec\u208e\3\2\2\2")
        buf.write("\u03ee\u2092\3\2\2\2\u03f0\u209a\3\2\2\2\u03f2\u20ad\3")
        buf.write("\2\2\2\u03f4\u20af\3\2\2\2\u03f6\u20c8\3\2\2\2\u03f8\u20ca")
        buf.write("\3\2\2\2\u03fa\u20d3\3\2\2\2\u03fc\u20d5\3\2\2\2\u03fe")
        buf.write("\u20dc\3\2\2\2\u0400\u20e0\3\2\2\2\u0402\u20e2\3\2\2\2")
        buf.write("\u0404\u20e4\3\2\2\2\u0406\u20e6\3\2\2\2\u0408\u20ea\3")
        buf.write("\2\2\2\u040a\u20f7\3\2\2\2\u040c\u20f9\3\2\2\2\u040e\u20fc")
        buf.write("\3\2\2\2\u0410\u2101\3\2\2\2\u0412\u2106\3\2\2\2\u0414")
        buf.write("\u210c\3\2\2\2\u0416\u2113\3\2\2\2\u0418\u2115\3\2\2\2")
        buf.write("\u041a\u2118\3\2\2\2\u041c\u211c\3\2\2\2\u041e\u2123\3")
        buf.write("\2\2\2\u0420\u212f\3\2\2\2\u0422\u2132\3\2\2\2\u0424\u2140")
        buf.write("\3\2\2\2\u0426\u2143\3\2\2\2\u0428\u2185\3\2\2\2\u042a")
        buf.write("\u219d\3\2\2\2\u042c\u21b2\3\2\2\2\u042e\u21b4\3\2\2\2")
        buf.write("\u0430\u21bf\3\2\2\2\u0432\u21cd\3\2\2\2\u0434\u21cf\3")
        buf.write("\2\2\2\u0436\u21d7\3\2\2\2\u0438\u21de\3\2\2\2\u043a\u21e6")
        buf.write("\3\2\2\2\u043c\u21f7\3\2\2\2\u043e\u21f9\3\2\2\2\u0440")
        buf.write("\u21fd\3\2\2\2\u0442\u2205\3\2\2\2\u0444\u220a\3\2\2\2")
        buf.write("\u0446\u220d\3\2\2\2\u0448\u2210\3\2\2\2\u044a\u2217\3")
        buf.write("\2\2\2\u044c\u2219\3\2\2\2\u044e\u2221\3\2\2\2\u0450\u2226")
        buf.write("\3\2\2\2\u0452\u223b\3\2\2\2\u0454\u2243\3\2\2\2\u0456")
        buf.write("\u224d\3\2\2\2\u0458\u2259\3\2\2\2\u045a\u225b\3\2\2\2")
        buf.write("\u045c\u2269\3\2\2\2\u045e\u226c\3\2\2\2\u0460\u2280\3")
        buf.write("\2\2\2\u0462\u2293\3\2\2\2\u0464\u229a\3\2\2\2\u0466\u229c")
        buf.write("\3\2\2\2\u0468\u22a3\3\2\2\2\u046a\u22bf\3\2\2\2\u046c")
        buf.write("\u22c1\3\2\2\2\u046e\u22c7\3\2\2\2\u0470\u22cb\3\2\2\2")
        buf.write("\u0472\u22cd\3\2\2\2\u0474\u22d5\3\2\2\2\u0476\u22d9\3")
        buf.write("\2\2\2\u0478\u22e0\3\2\2\2\u047a\u22f1\3\2\2\2\u047c\u22f3")
        buf.write("\3\2\2\2\u047e\u22f5\3\2\2\2\u0480\u22ff\3\2\2\2\u0482")
        buf.write("\u2307\3\2\2\2\u0484\u2322\3\2\2\2\u0486\u2324\3\2\2\2")
        buf.write("\u0488\u232b\3\2\2\2\u048a\u232d\3\2\2\2\u048c\u2330\3")
        buf.write("\2\2\2\u048e\u2332\3\2\2\2\u0490\u2338\3\2\2\2\u0492\u2340")
        buf.write("\3\2\2\2\u0494\u2348\3\2\2\2\u0496\u2350\3\2\2\2\u0498")
        buf.write("\u235e\3\2\2\2\u049a\u2367\3\2\2\2\u049c\u236b\3\2\2\2")
        buf.write("\u049e\u236f\3\2\2\2\u04a0\u2389\3\2\2\2\u04a2\u2397\3")
        buf.write("\2\2\2\u04a4\u23a7\3\2\2\2\u04a6\u23b1\3\2\2\2\u04a8\u23b5")
        buf.write("\3\2\2\2\u04aa\u23bd\3\2\2\2\u04ac\u23c5\3\2\2\2\u04ae")
        buf.write("\u23cb\3\2\2\2\u04b0\u23cf\3\2\2\2\u04b2\u23d6\3\2\2\2")
        buf.write("\u04b4\u23db\3\2\2\2\u04b6\u23ea\3\2\2\2\u04b8\u243a\3")
        buf.write("\2\2\2\u04ba\u243c\3\2\2\2\u04bc\u243e\3\2\2\2\u04be\u2464")
        buf.write("\3\2\2\2\u04c0\u2468\3\2\2\2\u04c2\u259c\3\2\2\2\u04c4")
        buf.write("\u25a3\3\2\2\2\u04c6\u25af\3\2\2\2\u04c8\u25b1\3\2\2\2")
        buf.write("\u04ca\u25b6\3\2\2\2\u04cc\u25be\3\2\2\2\u04ce\u25c3\3")
        buf.write("\2\2\2\u04d0\u25c9\3\2\2\2\u04d2\u25da\3\2\2\2\u04d4\u25dc")
        buf.write("\3\2\2\2\u04d6\u25df\3\2\2\2\u04d8\u25e5\3\2\2\2\u04da")
        buf.write("\u25eb\3\2\2\2\u04dc\u25ee\3\2\2\2\u04de\u25f6\3\2\2\2")
        buf.write("\u04e0\u25fa\3\2\2\2\u04e2\u25ff\3\2\2\2\u04e4\u260e\3")
        buf.write("\2\2\2\u04e6\u2610\3\2\2\2\u04e8\u2623\3\2\2\2\u04ea\u262b")
        buf.write("\3\2\2\2\u04ec\u2634\3\2\2\2\u04ee\u2636\3\2\2\2\u04f0")
        buf.write("\u264b\3\2\2\2\u04f2\u264d\3\2\2\2\u04f4\u2654\3\2\2\2")
        buf.write("\u04f6\u265a\3\2\2\2\u04f8\u265e\3\2\2\2\u04fa\u2660\3")
        buf.write("\2\2\2\u04fc\u2668\3\2\2\2\u04fe\u2670\3\2\2\2\u0500\u267e")
        buf.write("\3\2\2\2\u0502\u2680\3\2\2\2\u0504\u2688\3\2\2\2\u0506")
        buf.write("\u2695\3\2\2\2\u0508\u2697\3\2\2\2\u050a\u269f\3\2\2\2")
        buf.write("\u050c\u26a6\3\2\2\2\u050e\u26ae\3\2\2\2\u0510\u26ba\3")
        buf.write("\2\2\2\u0512\u26bc\3\2\2\2\u0514\u26be\3\2\2\2\u0516\u26c7")
        buf.write("\3\2\2\2\u0518\u26e5\3\2\2\2\u051a\u26ee\3\2\2\2\u051c")
        buf.write("\u26f5\3\2\2\2\u051e\u26f7\3\2\2\2\u0520\u2702\3\2\2\2")
        buf.write("\u0522\u2706\3\2\2\2\u0524\u270b\3\2\2\2\u0526\u270e\3")
        buf.write("\2\2\2\u0528\u2710\3\2\2\2\u052a\u2725\3\2\2\2\u052c\u2727")
        buf.write("\3\2\2\2\u052e\u272a\3\2\2\2\u0530\u2731\3\2\2\2\u0532")
        buf.write("\u2734\3\2\2\2\u0534\u2737\3\2\2\2\u0536\u2742\3\2\2\2")
        buf.write("\u0538\u275f\3\2\2\2\u053a\u2764\3\2\2\2\u053c\u2770\3")
        buf.write("\2\2\2\u053e\u2781\3\2\2\2\u0540\u2783\3\2\2\2\u0542\u2787")
        buf.write("\3\2\2\2\u0544\u2791\3\2\2\2\u0546\u27a1\3\2\2\2\u0548")
        buf.write("\u27a3\3\2\2\2\u054a\u27b1\3\2\2\2\u054c\u27bd\3\2\2\2")
        buf.write("\u054e\u27bf\3\2\2\2\u0550\u27d2\3\2\2\2\u0552\u27da\3")
        buf.write("\2\2\2\u0554\u27e2\3\2\2\2\u0556\u27e4\3\2\2\2\u0558\u2807")
        buf.write("\3\2\2\2\u055a\u2809\3\2\2\2\u055c\u280d\3\2\2\2\u055e")
        buf.write("\u280f\3\2\2\2\u0560\u281f\3\2\2\2\u0562\u2821\3\2\2\2")
        buf.write("\u0564\u2829\3\2\2\2\u0566\u282d\3\2\2\2\u0568\u2835\3")
        buf.write("\2\2\2\u056a\u2837\3\2\2\2\u056c\u2839\3\2\2\2\u056e\u283f")
        buf.write("\3\2\2\2\u0570\u2864\3\2\2\2\u0572\u2866\3\2\2\2\u0574")
        buf.write("\u2868\3\2\2\2\u0576\u286a\3\2\2\2\u0578\u286c\3\2\2\2")
        buf.write("\u057a\u286e\3\2\2\2\u057c\u287d\3\2\2\2\u057e\u287f\3")
        buf.write("\2\2\2\u0580\u2887\3\2\2\2\u0582\u2889\3\2\2\2\u0584\u288e")
        buf.write("\3\2\2\2\u0586\u2890\3\2\2\2\u0588\u289b\3\2\2\2\u058a")
        buf.write("\u28a0\3\2\2\2\u058c\u28a6\3\2\2\2\u058e\u28ae\3\2\2\2")
        buf.write("\u0590\u28b2\3\2\2\2\u0592\u28b4\3\2\2\2\u0594\u28f5\3")
        buf.write("\2\2\2\u0596\u28f7\3\2\2\2\u0598\u28f9\3\2\2\2\u059a\u28fb")
        buf.write("\3\2\2\2\u059c\u28fd\3\2\2\2\u059e\u2906\3\2\2\2\u05a0")
        buf.write("\u05a1\5\4\3\2\u05a1\u05a2\7\2\2\3\u05a2\3\3\2\2\2\u05a3")
        buf.write("\u05a4\5\6\4\2\u05a4\5\3\2\2\2\u05a5\u05a7\5\b\5\2\u05a6")
        buf.write("\u05a5\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05ae\3\2\2\2")
        buf.write("\u05a8\u05aa\7\t\2\2\u05a9\u05ab\5\b\5\2\u05aa\u05a9\3")
        buf.write("\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ad\3\2\2\2\u05ac\u05a8")
        buf.write("\3\2\2\2\u05ad\u05b0\3\2\2\2\u05ae\u05ac\3\2\2\2\u05ae")
        buf.write("\u05af\3\2\2\2\u05af\7\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b1")
        buf.write("\u062e\5\u01c2\u00e2\2\u05b2\u062e\5\u0338\u019d\2\u05b3")
        buf.write("\u062e\5\u032e\u0198\2\u05b4\u062e\5\u0330\u0199\2\u05b5")
        buf.write("\u062e\5\u0240\u0121\2\u05b6\u062e\5\u033e\u01a0\2\u05b7")
        buf.write("\u062e\5\u01dc\u00ef\2\u05b8\u062e\5\u0140\u00a1\2\u05b9")
        buf.write("\u062e\5\u0146\u00a4\2\u05ba\u062e\5\u0150\u00a9\2\u05bb")
        buf.write("\u062e\5\u016a\u00b6\2\u05bc\u062e\5\u029e\u0150\2\u05bd")
        buf.write("\u062e\5$\23\2\u05be\u062e\5\u02d6\u016c\2\u05bf\u062e")
        buf.write("\5\u02da\u016e\2\u05c0\u062e\5\u02e6\u0174\2\u05c1\u062e")
        buf.write("\5\u02dc\u016f\2\u05c2\u062e\5\u02e4\u0173\2\u05c3\u062e")
        buf.write("\5\u017e\u00c0\2\u05c4\u062e\5\u0116\u008c\2\u05c5\u062e")
        buf.write("\5\u033a\u019e\2\u05c6\u062e\5^\60\2\u05c7\u062e\5\u02ce")
        buf.write("\u0168\2\u05c8\u062e\5\u0084C\2\u05c9\u062e\5\u02ee\u0178")
        buf.write("\2\u05ca\u062e\5\36\20\2\u05cb\u062e\5\32\16\2\u05cc\u062e")
        buf.write("\5\u02f6\u017c\2\u05cd\u062e\5\u0104\u0083\2\u05ce\u062e")
        buf.write("\5\u0344\u01a3\2\u05cf\u062e\5\u0342\u01a2\2\u05d0\u062e")
        buf.write("\5\u017a\u00be\2\u05d1\u062e\5\u0350\u01a9\2\u05d2\u062e")
        buf.write("\5\n\6\2\u05d3\u062e\5Z.\2\u05d4\u062e\5\u008aF\2\u05d5")
        buf.write("\u062e\5\u034a\u01a6\2\u05d6\u062e\5\u0214\u010b\2\u05d7")
        buf.write("\u062e\5T+\2\u05d8\u062e\5\u008cG\2\u05d9\u062e\5\u018e")
        buf.write("\u00c8\2\u05da\u062e\5\u0106\u0084\2\u05db\u062e\5\u01c6")
        buf.write("\u00e4\2\u05dc\u062e\5\u02b8\u015d\2\u05dd\u062e\5\u0348")
        buf.write("\u01a5\2\u05de\u062e\5\u033c\u019f\2\u05df\u062e\5\u013a")
        buf.write("\u009e\2\u05e0\u062e\5\u0148\u00a5\2\u05e1\u062e\5\u0162")
        buf.write("\u00b2\2\u05e2\u062e\5\u016c\u00b7\2\u05e3\u062e\5\u0268")
        buf.write("\u0135\2\u05e4\u062e\5\"\22\2\u05e5\u062e\5\u010c\u0087")
        buf.write("\2\u05e6\u062e\5\u01e0\u00f1\2\u05e7\u062e\5\u01ee\u00f8")
        buf.write("\2\u05e8\u062e\5\u02e8\u0175\2\u05e9\u062e\5\u01f0\u00f9")
        buf.write("\2\u05ea\u062e\5\u017c\u00bf\2\u05eb\u062e\5\u0126\u0094")
        buf.write("\2\u05ec\u062e\5(\25\2\u05ed\u062e\5\u0114\u008b\2\u05ee")
        buf.write("\u062e\5\u00aaV\2\u05ef\u062e\5\u02f0\u0179\2\u05f0\u062e")
        buf.write("\5\u0102\u0082\2\u05f1\u062e\5\u0134\u009b\2\u05f2\u062e")
        buf.write("\5\u02c0\u0161\2\u05f3\u062e\5\u0192\u00ca\2\u05f4\u062e")
        buf.write("\5\u01ba\u00de\2\u05f5\u062e\5\f\7\2\u05f6\u062e\5\30")
        buf.write("\r\2\u05f7\u062e\5\u0174\u00bb\2\u05f8\u062e\5\u0322\u0192")
        buf.write("\2\u05f9\u062e\5\u038a\u01c6\2\u05fa\u062e\5\u03be\u01e0")
        buf.write("\2\u05fb\u062e\5\u01c8\u00e5\2\u05fc\u062e\5\u03a6\u01d4")
        buf.write("\2\u05fd\u062e\5\\/\2\u05fe\u062e\5\u02b2\u015a\2\u05ff")
        buf.write("\u062e\5\u02bc\u015f\2\u0600\u062e\5\u01f6\u00fc\2\u0601")
        buf.write("\u062e\5\u01f8\u00fd\2\u0602\u062e\5\u01fa\u00fe\2\u0603")
        buf.write("\u062e\5\u01fe\u0100\2\u0604\u062e\5\u02f8\u017d\2\u0605")
        buf.write("\u062e\5\u0138\u009d\2\u0606\u062e\5\u02c4\u0163\2\u0607")
        buf.write("\u062e\5 \21\2\u0608\u062e\5\u0178\u00bd\2\u0609\u062e")
        buf.write("\5\u0332\u019a\2\u060a\u062e\5\u0386\u01c4\2\u060b\u062e")
        buf.write("\5\u0374\u01bb\2\u060c\u062e\5\u021e\u0110\2\u060d\u062e")
        buf.write("\5\u0226\u0114\2\u060e\u062e\5\u0238\u011d\2\u060f\u062e")
        buf.write("\5\u016e\u00b8\2\u0610\u062e\5\u024a\u0126\2\u0611\u062e")
        buf.write("\5\u038c\u01c7\2\u0612\u062e\5\u039e\u01d0\2\u0613\u062e")
        buf.write("\5\u030c\u0187\2\u0614\u062e\5\u0112\u008a\2\u0615\u062e")
        buf.write("\5\u0320\u0191\2\u0616\u062e\5\u03aa\u01d6\2\u0617\u062e")
        buf.write("\5\u0308\u0185\2\u0618\u062e\5\u0380\u01c1\2\u0619\u062e")
        buf.write("\5\u01fc\u00ff\2\u061a\u062e\5\u02c6\u0164\2\u061b\u062e")
        buf.write("\5\u02a6\u0154\2\u061c\u062e\5\u02a4\u0153\2\u061d\u062e")
        buf.write("\5\u02a8\u0155\2\u061e\u062e\5\u02d0\u0169\2\u061f\u062e")
        buf.write("\5\u0228\u0115\2\u0620\u062e\5\u023a\u011e\2\u0621\u062e")
        buf.write("\5\u02fa\u017e\2\u0622\u062e\5\u0218\u010d\2\u0623\u062e")
        buf.write("\5\u03c6\u01e4\2\u0624\u062e\5\u0310\u0189\2\u0625\u062e")
        buf.write("\5\u0210\u0109\2\u0626\u062e\5\u030e\u0188\2\u0627\u062e")
        buf.write("\5\u03b4\u01db\2\u0628\u062e\5\u034e\u01a8\2\u0629\u062e")
        buf.write("\5H%\2\u062a\u062e\5\60\31\2\u062b\u062e\5R*\2\u062c\u062e")
        buf.write("\5\u031c\u018f\2\u062d\u05b1\3\2\2\2\u062d\u05b2\3\2\2")
        buf.write("\2\u062d\u05b3\3\2\2\2\u062d\u05b4\3\2\2\2\u062d\u05b5")
        buf.write("\3\2\2\2\u062d\u05b6\3\2\2\2\u062d\u05b7\3\2\2\2\u062d")
        buf.write("\u05b8\3\2\2\2\u062d\u05b9\3\2\2\2\u062d\u05ba\3\2\2\2")
        buf.write("\u062d\u05bb\3\2\2\2\u062d\u05bc\3\2\2\2\u062d\u05bd\3")
        buf.write("\2\2\2\u062d\u05be\3\2\2\2\u062d\u05bf\3\2\2\2\u062d\u05c0")
        buf.write("\3\2\2\2\u062d\u05c1\3\2\2\2\u062d\u05c2\3\2\2\2\u062d")
        buf.write("\u05c3\3\2\2\2\u062d\u05c4\3\2\2\2\u062d\u05c5\3\2\2\2")
        buf.write("\u062d\u05c6\3\2\2\2\u062d\u05c7\3\2\2\2\u062d\u05c8\3")
        buf.write("\2\2\2\u062d\u05c9\3\2\2\2\u062d\u05ca\3\2\2\2\u062d\u05cb")
        buf.write("\3\2\2\2\u062d\u05cc\3\2\2\2\u062d\u05cd\3\2\2\2\u062d")
        buf.write("\u05ce\3\2\2\2\u062d\u05cf\3\2\2\2\u062d\u05d0\3\2\2\2")
        buf.write("\u062d\u05d1\3\2\2\2\u062d\u05d2\3\2\2\2\u062d\u05d3\3")
        buf.write("\2\2\2\u062d\u05d4\3\2\2\2\u062d\u05d5\3\2\2\2\u062d\u05d6")
        buf.write("\3\2\2\2\u062d\u05d7\3\2\2\2\u062d\u05d8\3\2\2\2\u062d")
        buf.write("\u05d9\3\2\2\2\u062d\u05da\3\2\2\2\u062d\u05db\3\2\2\2")
        buf.write("\u062d\u05dc\3\2\2\2\u062d\u05dd\3\2\2\2\u062d\u05de\3")
        buf.write("\2\2\2\u062d\u05df\3\2\2\2\u062d\u05e0\3\2\2\2\u062d\u05e1")
        buf.write("\3\2\2\2\u062d\u05e2\3\2\2\2\u062d\u05e3\3\2\2\2\u062d")
        buf.write("\u05e4\3\2\2\2\u062d\u05e5\3\2\2\2\u062d\u05e6\3\2\2\2")
        buf.write("\u062d\u05e7\3\2\2\2\u062d\u05e8\3\2\2\2\u062d\u05e9\3")
        buf.write("\2\2\2\u062d\u05ea\3\2\2\2\u062d\u05eb\3\2\2\2\u062d\u05ec")
        buf.write("\3\2\2\2\u062d\u05ed\3\2\2\2\u062d\u05ee\3\2\2\2\u062d")
        buf.write("\u05ef\3\2\2\2\u062d\u05f0\3\2\2\2\u062d\u05f1\3\2\2\2")
        buf.write("\u062d\u05f2\3\2\2\2\u062d\u05f3\3\2\2\2\u062d\u05f4\3")
        buf.write("\2\2\2\u062d\u05f5\3\2\2\2\u062d\u05f6\3\2\2\2\u062d\u05f7")
        buf.write("\3\2\2\2\u062d\u05f8\3\2\2\2\u062d\u05f9\3\2\2\2\u062d")
        buf.write("\u05fa\3\2\2\2\u062d\u05fb\3\2\2\2\u062d\u05fc\3\2\2\2")
        buf.write("\u062d\u05fd\3\2\2\2\u062d\u05fe\3\2\2\2\u062d\u05ff\3")
        buf.write("\2\2\2\u062d\u0600\3\2\2\2\u062d\u0601\3\2\2\2\u062d\u0602")
        buf.write("\3\2\2\2\u062d\u0603\3\2\2\2\u062d\u0604\3\2\2\2\u062d")
        buf.write("\u0605\3\2\2\2\u062d\u0606\3\2\2\2\u062d\u0607\3\2\2\2")
        buf.write("\u062d\u0608\3\2\2\2\u062d\u0609\3\2\2\2\u062d\u060a\3")
        buf.write("\2\2\2\u062d\u060b\3\2\2\2\u062d\u060c\3\2\2\2\u062d\u060d")
        buf.write("\3\2\2\2\u062d\u060e\3\2\2\2\u062d\u060f\3\2\2\2\u062d")
        buf.write("\u0610\3\2\2\2\u062d\u0611\3\2\2\2\u062d\u0612\3\2\2\2")
        buf.write("\u062d\u0613\3\2\2\2\u062d\u0614\3\2\2\2\u062d\u0615\3")
        buf.write("\2\2\2\u062d\u0616\3\2\2\2\u062d\u0617\3\2\2\2\u062d\u0618")
        buf.write("\3\2\2\2\u062d\u0619\3\2\2\2\u062d\u061a\3\2\2\2\u062d")
        buf.write("\u061b\3\2\2\2\u062d\u061c\3\2\2\2\u062d\u061d\3\2\2\2")
        buf.write("\u062d\u061e\3\2\2\2\u062d\u061f\3\2\2\2\u062d\u0620\3")
        buf.write("\2\2\2\u062d\u0621\3\2\2\2\u062d\u0622\3\2\2\2\u062d\u0623")
        buf.write("\3\2\2\2\u062d\u0624\3\2\2\2\u062d\u0625\3\2\2\2\u062d")
        buf.write("\u0626\3\2\2\2\u062d\u0627\3\2\2\2\u062d\u0628\3\2\2\2")
        buf.write("\u062d\u0629\3\2\2\2\u062d\u062a\3\2\2\2\u062d\u062b\3")
        buf.write("\2\2\2\u062d\u062c\3\2\2\2\u062e\t\3\2\2\2\u062f\u0630")
        buf.write("\7\u01d9\2\2\u0630\u0631\5\u04bc\u025f\2\u0631\13\3\2")
        buf.write("\2\2\u0632\u0633\7V\2\2\u0633\u0634\7\u015f\2\2\u0634")
        buf.write("\u0636\5\u0582\u02c2\2\u0635\u0637\5\16\b\2\u0636\u0635")
        buf.write("\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u0638\3\2\2\2\u0638")
        buf.write("\u0639\5\20\t\2\u0639\r\3\2\2\2\u063a\u063b\7\u0091\2")
        buf.write("\2\u063b\17\3\2\2\2\u063c\u063e\5\26\f\2\u063d\u063c\3")
        buf.write("\2\2\2\u063e\u0641\3\2\2\2\u063f\u063d\3\2\2\2\u063f\u0640")
        buf.write("\3\2\2\2\u0640\21\3\2\2\2\u0641\u063f\3\2\2\2\u0642\u0644")
        buf.write("\5\24\13\2\u0643\u0642\3\2\2\2\u0644\u0647\3\2\2\2\u0645")
        buf.write("\u0643\3\2\2\2\u0645\u0646\3\2\2\2\u0646\23\3\2\2\2\u0647")
        buf.write("\u0645\3\2\2\2\u0648\u064b\7\u0140\2\2\u0649\u064c\5\u057a")
        buf.write("\u02be\2\u064a\u064c\7v\2\2\u064b\u0649\3\2\2\2\u064b")
        buf.write("\u064a\3\2\2\2\u064c\u065b\3\2\2\2\u064d\u064e\t\2\2\2")
        buf.write("\u064e\u064f\7\u0140\2\2\u064f\u065b\5\u057a\u02be\2\u0650")
        buf.write("\u065b\7\u010c\2\2\u0651\u0652\7\u00cc\2\2\u0652\u0653")
        buf.write("\7r\2\2\u0653\u065b\5\u0580\u02c1\2\u0654\u0655\7\u0194")
        buf.write("\2\2\u0655\u0656\7\u0191\2\2\u0656\u065b\5\u057a\u02be")
        buf.write("\2\u0657\u0658\7\u008b\2\2\u0658\u065b\5\u0586\u02c4\2")
        buf.write("\u0659\u065b\5\u059e\u02d0\2\u065a\u0648\3\2\2\2\u065a")
        buf.write("\u064d\3\2\2\2\u065a\u0650\3\2\2\2\u065a\u0651\3\2\2\2")
        buf.write("\u065a\u0654\3\2\2\2\u065a\u0657\3\2\2\2\u065a\u0659\3")
        buf.write("\2\2\2\u065b\25\3\2\2\2\u065c\u0667\5\24\13\2\u065d\u065e")
        buf.write("\7\u017d\2\2\u065e\u0667\5\u0578\u02bd\2\u065f\u0660\7")
        buf.write("\u00ae\2\2\u0660\u0667\5\u0586\u02c4\2\u0661\u0662\7\u015f")
        buf.write("\2\2\u0662\u0667\5\u0586\u02c4\2\u0663\u0664\7l\2\2\u0664")
        buf.write("\u0665\t\3\2\2\u0665\u0667\5\u0586\u02c4\2\u0666\u065c")
        buf.write("\3\2\2\2\u0666\u065d\3\2\2\2\u0666\u065f\3\2\2\2\u0666")
        buf.write("\u0661\3\2\2\2\u0666\u0663\3\2\2\2\u0667\27\3\2\2\2\u0668")
        buf.write("\u0669\7V\2\2\u0669\u066a\7\u008b\2\2\u066a\u066c\5\u0582")
        buf.write("\u02c2\2\u066b\u066d\5\16\b\2\u066c\u066b\3\2\2\2\u066c")
        buf.write("\u066d\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u066f\5\20\t")
        buf.write("\2\u066f\31\3\2\2\2\u0670\u0671\7\u00b2\2\2\u0671\u0672")
        buf.write("\t\4\2\2\u0672\u0674\5\u0584\u02c3\2\u0673\u0675\5\16")
        buf.write("\b\2\u0674\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0676")
        buf.write("\3\2\2\2\u0676\u0677\5\22\n\2\u0677\33\3\2\2\2\u0678\u0679")
        buf.write("\7l\2\2\u0679\u067a\7\u00d7\2\2\u067a\u067b\5\u0568\u02b5")
        buf.write("\2\u067b\35\3\2\2\2\u067c\u067d\7\u00b2\2\2\u067d\u067f")
        buf.write("\t\4\2\2\u067e\u0680\7F\2\2\u067f\u067e\3\2\2\2\u067f")
        buf.write("\u0680\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0683\5\u0584")
        buf.write("\u02c3\2\u0682\u0684\5\34\17\2\u0683\u0682\3\2\2\2\u0683")
        buf.write("\u0684\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0686\5N(\2\u0686")
        buf.write("\37\3\2\2\2\u0687\u0688\7\u00e7\2\2\u0688\u068b\t\5\2")
        buf.write("\2\u0689\u068a\7\u0104\2\2\u068a\u068c\7\u01ad\2\2\u068b")
        buf.write("\u0689\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u068d\3\2\2\2")
        buf.write("\u068d\u068e\5\u0586\u02c4\2\u068e!\3\2\2\2\u068f\u0690")
        buf.write("\7V\2\2\u0690\u0691\7j\2\2\u0691\u0693\5\u0582\u02c2\2")
        buf.write("\u0692\u0694\5\16\b\2\u0693\u0692\3\2\2\2\u0693\u0694")
        buf.write("\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u0696\5\20\t\2\u0696")
        buf.write("#\3\2\2\2\u0697\u0698\7\u00b2\2\2\u0698\u0699\7j\2\2\u0699")
        buf.write("\u069a\5\u0584\u02c3\2\u069a\u069b\5&\24\2\u069b\u069c")
        buf.write("\7\u008b\2\2\u069c\u069d\5\u0586\u02c4\2\u069d%\3\2\2")
        buf.write("\2\u069e\u069f\t\6\2\2\u069f\'\3\2\2\2\u06a0\u06a1\7V")
        buf.write("\2\2\u06a1\u06a5\7\u0164\2\2\u06a2\u06a3\7\u0104\2\2\u06a3")
        buf.write("\u06a4\7u\2\2\u06a4\u06a6\7\u01ad\2\2\u06a5\u06a2\3\2")
        buf.write("\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06ad\3\2\2\2\u06a7\u06a9")
        buf.write("\5*\26\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9")
        buf.write("\u06aa\3\2\2\2\u06aa\u06ab\7\u0092\2\2\u06ab\u06ae\5\u0584")
        buf.write("\u02c3\2\u06ac\u06ae\5\u0588\u02c5\2\u06ad\u06a8\3\2\2")
        buf.write("\2\u06ad\u06ac\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0")
        buf.write("\5,\27\2\u06b0)\3\2\2\2\u06b1\u06b2\5\u0588\u02c5\2\u06b2")
        buf.write("+\3\2\2\2\u06b3\u06b5\5.\30\2\u06b4\u06b3\3\2\2\2\u06b5")
        buf.write("\u06b8\3\2\2\2\u06b6\u06b4\3\2\2\2\u06b6\u06b7\3\2\2\2")
        buf.write("\u06b7-\3\2\2\2\u06b8\u06b6\3\2\2\2\u06b9\u06c0\5\u00aa")
        buf.write("V\2\u06ba\u06c0\5\u024a\u0126\2\u06bb\u06c0\5\u0114\u008b")
        buf.write("\2\u06bc\u06c0\5\u0192\u00ca\2\u06bd\u06c0\5\u0226\u0114")
        buf.write("\2\u06be\u06c0\5\u031c\u018f\2\u06bf\u06b9\3\2\2\2\u06bf")
        buf.write("\u06ba\3\2\2\2\u06bf\u06bb\3\2\2\2\u06bf\u06bc\3\2\2\2")
        buf.write("\u06bf\u06bd\3\2\2\2\u06bf\u06be\3\2\2\2\u06c0/\3\2\2")
        buf.write("\2\u06c1\u06c3\7\u016e\2\2\u06c2\u06c4\t\7\2\2\u06c3\u06c2")
        buf.write("\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5")
        buf.write("\u06c6\5\62\32\2\u06c6\61\3\2\2\2\u06c7\u06c8\7\u0185")
        buf.write("\2\2\u06c8\u06d0\5\u0316\u018c\2\u06c9\u06ca\7\u016d\2")
        buf.write("\2\u06ca\u06cb\7\u00c2\2\2\u06cb\u06cc\7L\2\2\u06cc\u06cd")
        buf.write("\7\u0185\2\2\u06cd\u06d0\5\u0316\u018c\2\u06ce\u06d0\5")
        buf.write("\66\34\2\u06cf\u06c7\3\2\2\2\u06cf\u06c9\3\2\2\2\u06cf")
        buf.write("\u06ce\3\2\2\2\u06d0\63\3\2\2\2\u06d1\u06d2\58\35\2\u06d2")
        buf.write("\u06d5\t\b\2\2\u06d3\u06d6\5:\36\2\u06d4\u06d6\7]\2\2")
        buf.write("\u06d5\u06d3\3\2\2\2\u06d5\u06d4\3\2\2\2\u06d6\65\3\2")
        buf.write("\2\2\u06d7\u06f3\5\64\33\2\u06d8\u06d9\58\35\2\u06d9\u06da")
        buf.write("\7h\2\2\u06da\u06db\7\u01da\2\2\u06db\u06f3\3\2\2\2\u06dc")
        buf.write("\u06dd\7\u01c3\2\2\u06dd\u06de\7\u01a3\2\2\u06de\u06f3")
        buf.write("\5B\"\2\u06df\u06e0\7\u00c0\2\2\u06e0\u06f3\5\u057a\u02be")
        buf.write("\2\u06e1\u06e2\7\u0164\2\2\u06e2\u06f3\5\u057a\u02be\2")
        buf.write("\u06e3\u06e5\7\u012c\2\2\u06e4\u06e6\5D#\2\u06e5\u06e4")
        buf.write("\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6\u06f3\3\2\2\2\u06e7")
        buf.write("\u06e8\7\u015f\2\2\u06e8\u06f3\5F$\2\u06e9\u06ea\7\u016d")
        buf.write("\2\2\u06ea\u06eb\7\u0092\2\2\u06eb\u06f3\5F$\2\u06ec\u06ed")
        buf.write("\7\u01a0\2\2\u06ed\u06ee\7\u0138\2\2\u06ee\u06f3\5\u04ce")
        buf.write("\u0268\2\u06ef\u06f0\7\u0185\2\2\u06f0\u06f1\7\u0172\2")
        buf.write("\2\u06f1\u06f3\5\u057a\u02be\2\u06f2\u06d7\3\2\2\2\u06f2")
        buf.write("\u06d8\3\2\2\2\u06f2\u06dc\3\2\2\2\u06f2\u06df\3\2\2\2")
        buf.write("\u06f2\u06e1\3\2\2\2\u06f2\u06e3\3\2\2\2\u06f2\u06e7\3")
        buf.write("\2\2\2\u06f2\u06e9\3\2\2\2\u06f2\u06ec\3\2\2\2\u06f2\u06ef")
        buf.write("\3\2\2\2\u06f3\67\3\2\2\2\u06f4\u06f9\5\u0588\u02c5\2")
        buf.write("\u06f5\u06f6\7\r\2\2\u06f6\u06f8\5\u0588\u02c5\2\u06f7")
        buf.write("\u06f5\3\2\2\2\u06f8\u06fb\3\2\2\2\u06f9\u06f7\3\2\2\2")
        buf.write("\u06f9\u06fa\3\2\2\2\u06fa9\3\2\2\2\u06fb\u06f9\3\2\2")
        buf.write("\2\u06fc\u0701\5<\37\2\u06fd\u06fe\7\b\2\2\u06fe\u0700")
        buf.write("\5<\37\2\u06ff\u06fd\3\2\2\2\u0700\u0703\3\2\2\2\u0701")
        buf.write("\u06ff\3\2\2\2\u0701\u0702\3\2\2\2\u0702;\3\2\2\2\u0703")
        buf.write("\u0701\3\2\2\2\u0704\u0707\5@!\2\u0705\u0707\5\u0122\u0092")
        buf.write("\2\u0706\u0704\3\2\2\2\u0706\u0705\3\2\2\2\u0707=\3\2")
        buf.write("\2\2\u0708\u0709\7\u014d\2\2\u0709\u070e\t\t\2\2\u070a")
        buf.write("\u070b\7\u0157\2\2\u070b\u070e\7\u014d\2\2\u070c\u070e")
        buf.write("\7\u016b\2\2\u070d\u0708\3\2\2\2\u070d\u070a\3\2\2\2\u070d")
        buf.write("\u070c\3\2\2\2\u070e?\3\2\2\2\u070f\u0714\7\u0088\2\2")
        buf.write("\u0710\u0714\7d\2\2\u0711\u0714\7x\2\2\u0712\u0714\5F")
        buf.write("$\2\u0713\u070f\3\2\2\2\u0713\u0710\3\2\2\2\u0713\u0711")
        buf.write("\3\2\2\2\u0713\u0712\3\2\2\2\u0714A\3\2\2\2\u0715\u0726")
        buf.write("\5\u057a\u02be\2\u0716\u0726\5\u059e\u02d0\2\u0717\u0718")
        buf.write("\5\u0480\u0241\2\u0718\u071a\5\u057a\u02be\2\u0719\u071b")
        buf.write("\5\u0484\u0243\2\u071a\u0719\3\2\2\2\u071a\u071b\3\2\2")
        buf.write("\2\u071b\u0726\3\2\2\2\u071c\u071d\5\u0480\u0241\2\u071d")
        buf.write("\u071e\7\4\2\2\u071e\u071f\5\u0578\u02bd\2\u071f\u0720")
        buf.write("\7\5\2\2\u0720\u0721\5\u057a\u02be\2\u0721\u0726\3\2\2")
        buf.write("\2\u0722\u0726\5\u0122\u0092\2\u0723\u0726\7]\2\2\u0724")
        buf.write("\u0726\7\u011d\2\2\u0725\u0715\3\2\2\2\u0725\u0716\3\2")
        buf.write("\2\2\u0725\u0717\3\2\2\2\u0725\u071c\3\2\2\2\u0725\u0722")
        buf.write("\3\2\2\2\u0725\u0723\3\2\2\2\u0725\u0724\3\2\2\2\u0726")
        buf.write("C\3\2\2\2\u0727\u072a\5\u057a\u02be\2\u0728\u072a\7]\2")
        buf.write("\2\u0729\u0727\3\2\2\2\u0729\u0728\3\2\2\2\u072aE\3\2")
        buf.write("\2\2\u072b\u072e\5\u058c\u02c7\2\u072c\u072e\5\u057a\u02be")
        buf.write("\2\u072d\u072b\3\2\2\2\u072d\u072c\3\2\2\2\u072eG\3\2")
        buf.write("\2\2\u072f\u0730\7\u015a\2\2\u0730\u0731\5J&\2\u0731I")
        buf.write("\3\2\2\2\u0732\u073b\5L\'\2\u0733\u0734\7\u01c3\2\2\u0734")
        buf.write("\u073b\7\u01a3\2\2\u0735\u0736\7\u0185\2\2\u0736\u0737")
        buf.write("\7\u0113\2\2\u0737\u073b\7\u011a\2\2\u0738\u0739\7\u016d")
        buf.write("\2\2\u0739\u073b\7\u0092\2\2\u073a\u0732\3\2\2\2\u073a")
        buf.write("\u0733\3\2\2\2\u073a\u0735\3\2\2\2\u073a\u0738\3\2\2\2")
        buf.write("\u073bK\3\2\2\2\u073c\u073f\58\35\2\u073d\u073f\7F\2\2")
        buf.write("\u073e\u073c\3\2\2\2\u073e\u073d\3\2\2\2\u073fM\3\2\2")
        buf.write("\2\u0740\u0741\7\u016e\2\2\u0741\u0744\5\62\32\2\u0742")
        buf.write("\u0744\5H%\2\u0743\u0740\3\2\2\2\u0743\u0742\3\2\2\2\u0744")
        buf.write("O\3\2\2\2\u0745\u0746\7\u016e\2\2\u0746\u0749\5\66\34")
        buf.write("\2\u0747\u0749\5H%\2\u0748\u0745\3\2\2\2\u0748\u0747\3")
        buf.write("\2\2\2\u0749Q\3\2\2\2\u074a\u0754\7\u0170\2\2\u074b\u0755")
        buf.write("\58\35\2\u074c\u074d\7\u01c3\2\2\u074d\u0755\7\u01a3\2")
        buf.write("\2\u074e\u074f\7\u0185\2\2\u074f\u0750\7\u0113\2\2\u0750")
        buf.write("\u0755\7\u011a\2\2\u0751\u0752\7\u016d\2\2\u0752\u0755")
        buf.write("\7\u0092\2\2\u0753\u0755\7F\2\2\u0754\u074b\3\2\2\2\u0754")
        buf.write("\u074c\3\2\2\2\u0754\u074e\3\2\2\2\u0754\u0751\3\2\2\2")
        buf.write("\u0754\u0753\3\2\2\2\u0755S\3\2\2\2\u0756\u0757\7\u016e")
        buf.write("\2\2\u0757\u0758\7\u00cd\2\2\u0758\u0759\5V,\2\u0759\u075a")
        buf.write("\5X-\2\u075aU\3\2\2\2\u075b\u075e\7F\2\2\u075c\u075e\5")
        buf.write("\u0562\u02b2\2\u075d\u075b\3\2\2\2\u075d\u075c\3\2\2\2")
        buf.write("\u075eW\3\2\2\2\u075f\u0760\t\n\2\2\u0760Y\3\2\2\2\u0761")
        buf.write("\u0762\7\u00c3\2\2\u0762[\3\2\2\2\u0763\u0764\7\u00e3")
        buf.write("\2\2\u0764\u0765\t\13\2\2\u0765]\3\2\2\2\u0766\u0767\7")
        buf.write("\u00b2\2\2\u0767\u076a\7\u0084\2\2\u0768\u0769\7\u0104")
        buf.write("\2\2\u0769\u076b\7\u01ad\2\2\u076a\u0768\3\2\2\2\u076a")
        buf.write("\u076b\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076f\5\u0432")
        buf.write("\u021a\2\u076d\u0770\5`\61\2\u076e\u0770\5b\62\2\u076f")
        buf.write("\u076d\3\2\2\2\u076f\u076e\3\2\2\2\u0770\u07d7\3\2\2\2")
        buf.write("\u0771\u0772\7\u00b2\2\2\u0772\u0773\7\u0084\2\2\u0773")
        buf.write("\u0774\7F\2\2\u0774\u0775\7l\2\2\u0775\u0776\7\u0180\2")
        buf.write("\2\u0776\u077a\5\u0568\u02b5\2\u0777\u0778\7\u013a\2\2")
        buf.write("\u0778\u0779\7\u00bb\2\2\u0779\u077b\5\u0586\u02c4\2\u077a")
        buf.write("\u0777\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077c\3\2\2\2")
        buf.write("\u077c\u077d\7\u016e\2\2\u077d\u077e\7\u0180\2\2\u077e")
        buf.write("\u0780\5\u0568\u02b5\2\u077f\u0781\5\u03b0\u01d9\2\u0780")
        buf.write("\u077f\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u07d7\3\2\2\2")
        buf.write("\u0782\u0783\7\u00b2\2\2\u0783\u0786\7\u010a\2\2\u0784")
        buf.write("\u0785\7\u0104\2\2\u0785\u0787\7\u01ad\2\2\u0786\u0784")
        buf.write("\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0788\3\2\2\2\u0788")
        buf.write("\u078b\5\u0564\u02b3\2\u0789\u078c\5`\61\2\u078a\u078c")
        buf.write("\5d\63\2\u078b\u0789\3\2\2\2\u078b\u078a\3\2\2\2\u078c")
        buf.write("\u07d7\3\2\2\2\u078d\u078e\7\u00b2\2\2\u078e\u078f\7\u010a")
        buf.write("\2\2\u078f\u0790\7F\2\2\u0790\u0791\7l\2\2\u0791\u0792")
        buf.write("\7\u0180\2\2\u0792\u0796\5\u0568\u02b5\2\u0793\u0794\7")
        buf.write("\u013a\2\2\u0794\u0795\7\u00bb\2\2\u0795\u0797\5\u0586")
        buf.write("\u02c4\2\u0796\u0793\3\2\2\2\u0796\u0797\3\2\2\2\u0797")
        buf.write("\u0798\3\2\2\2\u0798\u0799\7\u016e\2\2\u0799\u079a\7\u0180")
        buf.write("\2\2\u079a\u079c\5\u0568\u02b5\2\u079b\u079d\5\u03b0\u01d9")
        buf.write("\2\u079c\u079b\3\2\2\2\u079c\u079d\3\2\2\2\u079d\u07d7")
        buf.write("\3\2\2\2\u079e\u079f\7\u00b2\2\2\u079f\u07a2\7\u0169\2")
        buf.write("\2\u07a0\u07a1\7\u0104\2\2\u07a1\u07a3\7\u01ad\2\2\u07a2")
        buf.write("\u07a0\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3\u07a4\3\2\2\2")
        buf.write("\u07a4\u07a5\5\u0564\u02b3\2\u07a5\u07a6\5`\61\2\u07a6")
        buf.write("\u07d7\3\2\2\2\u07a7\u07a8\7\u00b2\2\2\u07a8\u07ab\7\u0199")
        buf.write("\2\2\u07a9\u07aa\7\u0104\2\2\u07aa\u07ac\7\u01ad\2\2\u07ab")
        buf.write("\u07a9\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ad\3\2\2\2")
        buf.write("\u07ad\u07ae\5\u0564\u02b3\2\u07ae\u07af\5`\61\2\u07af")
        buf.write("\u07d7\3\2\2\2\u07b0\u07b1\7\u00b2\2\2\u07b1\u07b2\7\u0123")
        buf.write("\2\2\u07b2\u07b5\7\u0199\2\2\u07b3\u07b4\7\u0104\2\2\u07b4")
        buf.write("\u07b6\7\u01ad\2\2\u07b5\u07b3\3\2\2\2\u07b5\u07b6\3\2")
        buf.write("\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b8\5\u0564\u02b3\2\u07b8")
        buf.write("\u07b9\5`\61\2\u07b9\u07d7\3\2\2\2\u07ba\u07bb\7\u00b2")
        buf.write("\2\2\u07bb\u07bc\7\u0123\2\2\u07bc\u07bd\7\u0199\2\2\u07bd")
        buf.write("\u07be\7F\2\2\u07be\u07bf\7l\2\2\u07bf\u07c0\7\u0180\2")
        buf.write("\2\u07c0\u07c4\5\u0568\u02b5\2\u07c1\u07c2\7\u013a\2\2")
        buf.write("\u07c2\u07c3\7\u00bb\2\2\u07c3\u07c5\5\u0586\u02c4\2\u07c4")
        buf.write("\u07c1\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c6\3\2\2\2")
        buf.write("\u07c6\u07c7\7\u016e\2\2\u07c7\u07c8\7\u0180\2\2\u07c8")
        buf.write("\u07ca\5\u0568\u02b5\2\u07c9\u07cb\5\u03b0\u01d9\2\u07ca")
        buf.write("\u07c9\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07d7\3\2\2\2")
        buf.write("\u07cc\u07cd\7\u00b2\2\2\u07cd\u07ce\7g\2\2\u07ce\u07d1")
        buf.write("\7\u0084\2\2\u07cf\u07d0\7\u0104\2\2\u07d0\u07d2\7\u01ad")
        buf.write("\2\2\u07d1\u07cf\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2\u07d3")
        buf.write("\3\2\2\2\u07d3\u07d4\5\u0432\u021a\2\u07d4\u07d5\5`\61")
        buf.write("\2\u07d5\u07d7\3\2\2\2\u07d6\u0766\3\2\2\2\u07d6\u0771")
        buf.write("\3\2\2\2\u07d6\u0782\3\2\2\2\u07d6\u078d\3\2\2\2\u07d6")
        buf.write("\u079e\3\2\2\2\u07d6\u07a7\3\2\2\2\u07d6\u07b0\3\2\2\2")
        buf.write("\u07d6\u07ba\3\2\2\2\u07d6\u07cc\3\2\2\2\u07d7_\3\2\2")
        buf.write("\2\u07d8\u07dd\5f\64\2\u07d9\u07da\7\b\2\2\u07da\u07dc")
        buf.write("\5f\64\2\u07db\u07d9\3\2\2\2\u07dc\u07df\3\2\2\2\u07dd")
        buf.write("\u07db\3\2\2\2\u07dd\u07de\3\2\2\2\u07dea\3\2\2\2\u07df")
        buf.write("\u07dd\3\2\2\2\u07e0\u07e1\7\u01db\2\2\u07e1\u07e2\7\u013e")
        buf.write("\2\2\u07e2\u07e3\5\u0564\u02b3\2\u07e3\u07e4\5~@\2\u07e4")
        buf.write("\u07e9\3\2\2\2\u07e5\u07e6\7\u01dc\2\2\u07e6\u07e7\7\u013e")
        buf.write("\2\2\u07e7\u07e9\5\u0564\u02b3\2\u07e8\u07e0\3\2\2\2\u07e8")
        buf.write("\u07e5\3\2\2\2\u07e9c\3\2\2\2\u07ea\u07eb\7\u01db\2\2")
        buf.write("\u07eb\u07ec\7\u013e\2\2\u07ec\u07ed\5\u0564\u02b3\2\u07ed")
        buf.write("e\3\2\2\2\u07ee\u07ef\7\u00ad\2\2\u07ef\u0919\5\u00ba")
        buf.write("^\2\u07f0\u07f1\7\u00ad\2\2\u07f1\u07f2\7\u0104\2\2\u07f2")
        buf.write("\u07f3\7u\2\2\u07f3\u07f4\7\u01ad\2\2\u07f4\u0919\5\u00ba")
        buf.write("^\2\u07f5\u07f6\7\u00ad\2\2\u07f6\u07f7\7T\2\2\u07f7\u0919")
        buf.write("\5\u00ba^\2\u07f8\u07f9\7\u00ad\2\2\u07f9\u07fa\7T\2\2")
        buf.write("\u07fa\u07fb\7\u0104\2\2\u07fb\u07fc\7u\2\2\u07fc\u07fd")
        buf.write("\7\u01ad\2\2\u07fd\u0919\5\u00ba^\2\u07fe\u0800\7\u00b2")
        buf.write("\2\2\u07ff\u0801\5\u02d2\u016a\2\u0800\u07ff\3\2\2\2\u0800")
        buf.write("\u0801\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0803\5\u0588")
        buf.write("\u02c5\2\u0803\u0804\5h\65\2\u0804\u0919\3\2\2\2\u0805")
        buf.write("\u0807\7\u00b2\2\2\u0806\u0808\5\u02d2\u016a\2\u0807\u0806")
        buf.write("\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u0809\3\2\2\2\u0809")
        buf.write("\u080a\5\u0588\u02c5\2\u080a\u080b\7\u00e7\2\2\u080b\u080c")
        buf.write("\7u\2\2\u080c\u080d\7v\2\2\u080d\u0919\3\2\2\2\u080e\u0810")
        buf.write("\7\u00b2\2\2\u080f\u0811\5\u02d2\u016a\2\u0810\u080f\3")
        buf.write("\2\2\2\u0810\u0811\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0813")
        buf.write("\5\u0588\u02c5\2\u0813\u0814\7\u016e\2\2\u0814\u0815\7")
        buf.write("u\2\2\u0815\u0816\7v\2\2\u0816\u0919\3\2\2\2\u0817\u0819")
        buf.write("\7\u00b2\2\2\u0818\u081a\5\u02d2\u016a\2\u0819\u0818\3")
        buf.write("\2\2\2\u0819\u081a\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081c")
        buf.write("\5\u0588\u02c5\2\u081c\u081d\7\u00e7\2\2\u081d\u081e\7")
        buf.write("\u01dd\2\2\u081e\u0919\3\2\2\2\u081f\u0821\7\u00b2\2\2")
        buf.write("\u0820\u0822\5\u02d2\u016a\2\u0821\u0820\3\2\2\2\u0821")
        buf.write("\u0822\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0824\5\u0588")
        buf.write("\u02c5\2\u0824\u0825\7\u00e7\2\2\u0825\u0826\7\u01dd\2")
        buf.write("\2\u0826\u0827\7\u0104\2\2\u0827\u0828\7\u01ad\2\2\u0828")
        buf.write("\u0919\3\2\2\2\u0829\u082b\7\u00b2\2\2\u082a\u082c\5\u02d2")
        buf.write("\u016a\2\u082b\u082a\3\2\2\2\u082b\u082c\3\2\2\2\u082c")
        buf.write("\u082d\3\2\2\2\u082d\u082e\5\u0588\u02c5\2\u082e\u082f")
        buf.write("\7\u016e\2\2\u082f\u0830\7\u0177\2\2\u0830\u0831\5\u0580")
        buf.write("\u02c1\2\u0831\u0919\3\2\2\2\u0832\u0834\7\u00b2\2\2\u0833")
        buf.write("\u0835\5\u02d2\u016a\2\u0834\u0833\3\2\2\2\u0834\u0835")
        buf.write("\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837\5\u0578\u02bd")
        buf.write("\2\u0837\u0838\7\u016e\2\2\u0838\u0839\7\u0177\2\2\u0839")
        buf.write("\u083a\5\u0580\u02c1\2\u083a\u0919\3\2\2\2\u083b\u083d")
        buf.write("\7\u00b2\2\2\u083c\u083e\5\u02d2\u016a\2\u083d\u083c\3")
        buf.write("\2\2\2\u083d\u083e\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0840")
        buf.write("\5\u0588\u02c5\2\u0840\u0841\7\u016e\2\2\u0841\u0842\5")
        buf.write("r:\2\u0842\u0919\3\2\2\2\u0843\u0845\7\u00b2\2\2\u0844")
        buf.write("\u0846\5\u02d2\u016a\2\u0845\u0844\3\2\2\2\u0845\u0846")
        buf.write("\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u0848\5\u0588\u02c5")
        buf.write("\2\u0848\u0849\7\u015a\2\2\u0849\u084a\5r:\2\u084a\u0919")
        buf.write("\3\2\2\2\u084b\u084d\7\u00b2\2\2\u084c\u084e\5\u02d2\u016a")
        buf.write("\2\u084d\u084c\3\2\2\2\u084d\u084e\3\2\2\2\u084e\u084f")
        buf.write("\3\2\2\2\u084f\u0850\5\u0588\u02c5\2\u0850\u0851\7\u016e")
        buf.write("\2\2\u0851\u0852\7\u017a\2\2\u0852\u0853\5\u0588\u02c5")
        buf.write("\2\u0853\u0919\3\2\2\2\u0854\u0856\7\u00b2\2\2\u0855\u0857")
        buf.write("\5\u02d2\u016a\2\u0856\u0855\3\2\2\2\u0856\u0857\3\2\2")
        buf.write("\2\u0857\u0858\3\2\2\2\u0858\u0859\5\u0588\u02c5\2\u0859")
        buf.write("\u085a\7\u00ad\2\2\u085a\u085b\7\u01de\2\2\u085b\u085c")
        buf.write("\5\u00c4c\2\u085c\u085d\7L\2\2\u085d\u085f\7\u0103\2\2")
        buf.write("\u085e\u0860\5\u011a\u008e\2\u085f\u085e\3\2\2\2\u085f")
        buf.write("\u0860\3\2\2\2\u0860\u0919\3\2\2\2\u0861\u0863\7\u00b2")
        buf.write("\2\2\u0862\u0864\5\u02d2\u016a\2\u0863\u0862\3\2\2\2\u0863")
        buf.write("\u0864\3\2\2\2\u0864\u0865\3\2\2\2\u0865\u0866\5\u0588")
        buf.write("\u02c5\2\u0866\u0867\5z>\2\u0867\u0919\3\2\2\2\u0868\u086a")
        buf.write("\7\u00b2\2\2\u0869\u086b\5\u02d2\u016a\2\u086a\u0869\3")
        buf.write("\2\2\2\u086a\u086b\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086d")
        buf.write("\5\u0588\u02c5\2\u086d\u086e\7\u00e7\2\2\u086e\u086f\7")
        buf.write("\u0103\2\2\u086f\u0919\3\2\2\2\u0870\u0872\7\u00b2\2\2")
        buf.write("\u0871\u0873\5\u02d2\u016a\2\u0872\u0871\3\2\2\2\u0872")
        buf.write("\u0873\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0875\5\u0588")
        buf.write("\u02c5\2\u0875\u0876\7\u00e7\2\2\u0876\u0877\7\u0103\2")
        buf.write("\2\u0877\u0878\7\u0104\2\2\u0878\u0879\7\u01ad\2\2\u0879")
        buf.write("\u0919\3\2\2\2\u087a\u087c\7\u00e7\2\2\u087b\u087d\5\u02d2")
        buf.write("\u016a\2\u087c\u087b\3\2\2\2\u087c\u087d\3\2\2\2\u087d")
        buf.write("\u087e\3\2\2\2\u087e\u087f\7\u0104\2\2\u087f\u0880\7\u01ad")
        buf.write("\2\2\u0880\u0882\5\u0588\u02c5\2\u0881\u0883\5j\66\2\u0882")
        buf.write("\u0881\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u0919\3\2\2\2")
        buf.write("\u0884\u0886\7\u00e7\2\2\u0885\u0887\5\u02d2\u016a\2\u0886")
        buf.write("\u0885\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888\3\2\2\2")
        buf.write("\u0888\u088a\5\u0588\u02c5\2\u0889\u088b\5j\66\2\u088a")
        buf.write("\u0889\3\2\2\2\u088a\u088b\3\2\2\2\u088b\u0919\3\2\2\2")
        buf.write("\u088c\u088e\7\u00b2\2\2\u088d\u088f\5\u02d2\u016a\2\u088e")
        buf.write("\u088d\3\2\2\2\u088e\u088f\3\2\2\2\u088f\u0890\3\2\2\2")
        buf.write("\u0890\u0892\5\u0588\u02c5\2\u0891\u0893\5\u02d4\u016b")
        buf.write("\2\u0892\u0891\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0894")
        buf.write("\3\2\2\2\u0894\u0895\7\u0189\2\2\u0895\u0897\5\u045e\u0230")
        buf.write("\2\u0896\u0898\5l\67\2\u0897\u0896\3\2\2\2\u0897\u0898")
        buf.write("\3\2\2\2\u0898\u089a\3\2\2\2\u0899\u089b\5n8\2\u089a\u0899")
        buf.write("\3\2\2\2\u089a\u089b\3\2\2\2\u089b\u0919\3\2\2\2\u089c")
        buf.write("\u089e\7\u00b2\2\2\u089d\u089f\5\u02d2\u016a\2\u089e\u089d")
        buf.write("\3\2\2\2\u089e\u089f\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0")
        buf.write("\u08a1\5\u0588\u02c5\2\u08a1\u08a2\5\u0156\u00ac\2\u08a2")
        buf.write("\u0919\3\2\2\2\u08a3\u08a4\7\u00ad\2\2\u08a4\u0919\5\u00ce")
        buf.write("h\2\u08a5\u08a6\7\u00b2\2\2\u08a6\u08a7\7U\2\2\u08a7\u08a8")
        buf.write("\5\u0568\u02b5\2\u08a8\u08a9\5\u01b6\u00dc\2\u08a9\u0919")
        buf.write("\3\2\2\2\u08aa\u08ab\7\u0195\2\2\u08ab\u08ac\7U\2\2\u08ac")
        buf.write("\u0919\5\u0568\u02b5\2\u08ad\u08ae\7\u00e7\2\2\u08ae\u08af")
        buf.write("\7U\2\2\u08af\u08b0\7\u0104\2\2\u08b0\u08b1\7\u01ad\2")
        buf.write("\2\u08b1\u08b3\5\u0568\u02b5\2\u08b2\u08b4\5j\66\2\u08b3")
        buf.write("\u08b2\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u0919\3\2\2\2")
        buf.write("\u08b5\u08b6\7\u00e7\2\2\u08b6\u08b7\7U\2\2\u08b7\u08b9")
        buf.write("\5\u0568\u02b5\2\u08b8\u08ba\5j\66\2\u08b9\u08b8\3\2\2")
        buf.write("\2\u08b9\u08ba\3\2\2\2\u08ba\u0919\3\2\2\2\u08bb\u08bc")
        buf.write("\7\u016e\2\2\u08bc\u08bd\7\u019c\2\2\u08bd\u0919\7\u0136")
        buf.write("\2\2\u08be\u08bf\7\u00c6\2\2\u08bf\u08c0\7x\2\2\u08c0")
        buf.write("\u0919\5\u0568\u02b5\2\u08c1\u08c2\7\u016e\2\2\u08c2\u08c3")
        buf.write("\7\u019c\2\2\u08c3\u0919\7\u00c6\2\2\u08c4\u08c5\7\u016e")
        buf.write("\2\2\u08c5\u0919\7\u01df\2\2\u08c6\u08c7\7\u016e\2\2\u08c7")
        buf.write("\u0919\7\u0190\2\2\u08c8\u08c9\7\u00e9\2\2\u08c9\u08ca")
        buf.write("\7\u0186\2\2\u08ca\u0919\5\u0568\u02b5\2\u08cb\u08cc\7")
        buf.write("\u00e9\2\2\u08cc\u08cd\7\u00b3\2\2\u08cd\u08ce\7\u0186")
        buf.write("\2\2\u08ce\u0919\5\u0568\u02b5\2\u08cf\u08d0\7\u00e9\2")
        buf.write("\2\u08d0\u08d1\7\u0159\2\2\u08d1\u08d2\7\u0186\2\2\u08d2")
        buf.write("\u0919\5\u0568\u02b5\2\u08d3\u08d4\7\u00e9\2\2\u08d4\u08d5")
        buf.write("\7\u0186\2\2\u08d5\u0919\7F\2\2\u08d6\u08d7\7\u00e9\2")
        buf.write("\2\u08d7\u08d8\7\u0186\2\2\u08d8\u0919\7\u008b\2\2\u08d9")
        buf.write("\u08da\7\u00e2\2\2\u08da\u08db\7\u0186\2\2\u08db\u0919")
        buf.write("\5\u0568\u02b5\2\u08dc\u08dd\7\u00e2\2\2\u08dd\u08de\7")
        buf.write("\u0186\2\2\u08de\u0919\7F\2\2\u08df\u08e0\7\u00e2\2\2")
        buf.write("\u08e0\u08e1\7\u0186\2\2\u08e1\u0919\7\u008b\2\2\u08e2")
        buf.write("\u08e3\7\u00e9\2\2\u08e3\u08e4\7\u0162\2\2\u08e4\u0919")
        buf.write("\5\u0568\u02b5\2\u08e5\u08e6\7\u00e9\2\2\u08e6\u08e7\7")
        buf.write("\u00b3\2\2\u08e7\u08e8\7\u0162\2\2\u08e8\u0919\5\u0568")
        buf.write("\u02b5\2\u08e9\u08ea\7\u00e9\2\2\u08ea\u08eb\7\u0159\2")
        buf.write("\2\u08eb\u08ec\7\u0162\2\2\u08ec\u0919\5\u0568\u02b5\2")
        buf.write("\u08ed\u08ee\7\u00e2\2\2\u08ee\u08ef\7\u0162\2\2\u08ef")
        buf.write("\u0919\5\u0568\u02b5\2\u08f0\u08f1\7\u010c\2\2\u08f1\u0919")
        buf.write("\5\u0564\u02b3\2\u08f2\u08f3\7\u012e\2\2\u08f3\u08f4\7")
        buf.write("\u010c\2\2\u08f4\u0919\5\u0564\u02b3\2\u08f5\u08f6\7\u0134")
        buf.write("\2\2\u08f6\u0919\5\u020a\u0106\2\u08f7\u08f8\7u\2\2\u08f8")
        buf.write("\u0919\7\u0134\2\2\u08f9\u08fa\7\u013b\2\2\u08fa\u08fb")
        buf.write("\7\u0086\2\2\u08fb\u0919\5\u0584\u02c3\2\u08fc\u08fd\7")
        buf.write("\u016e\2\2\u08fd\u08fe\7\u0180\2\2\u08fe\u0919\5\u0568")
        buf.write("\u02b5\2\u08ff\u0900\7\u016e\2\2\u0900\u0919\5r:\2\u0901")
        buf.write("\u0902\7\u015a\2\2\u0902\u0919\5r:\2\u0903\u0904\7\u0159")
        buf.write("\2\2\u0904\u0905\7\u0103\2\2\u0905\u0919\5p9\2\u0906\u0907")
        buf.write("\7\u00e9\2\2\u0907\u0908\7\u01bf\2\2\u0908\u0909\7\u011a")
        buf.write("\2\2\u0909\u0919\7\u0168\2\2\u090a\u090b\7\u00e2\2\2\u090b")
        buf.write("\u090c\7\u01bf\2\2\u090c\u090d\7\u011a\2\2\u090d\u0919")
        buf.write("\7\u0168\2\2\u090e\u090f\7\u00f9\2\2\u090f\u0910\7\u01bf")
        buf.write("\2\2\u0910\u0911\7\u011a\2\2\u0911\u0919\7\u0168\2\2\u0912")
        buf.write("\u0913\7\u012e\2\2\u0913\u0914\7\u00f9\2\2\u0914\u0915")
        buf.write("\7\u01bf\2\2\u0915\u0916\7\u011a\2\2\u0916\u0919\7\u0168")
        buf.write("\2\2\u0917\u0919\5\u0156\u00ac\2\u0918\u07ee\3\2\2\2\u0918")
        buf.write("\u07f0\3\2\2\2\u0918\u07f5\3\2\2\2\u0918\u07f8\3\2\2\2")
        buf.write("\u0918\u07fe\3\2\2\2\u0918\u0805\3\2\2\2\u0918\u080e\3")
        buf.write("\2\2\2\u0918\u0817\3\2\2\2\u0918\u081f\3\2\2\2\u0918\u0829")
        buf.write("\3\2\2\2\u0918\u0832\3\2\2\2\u0918\u083b\3\2\2\2\u0918")
        buf.write("\u0843\3\2\2\2\u0918\u084b\3\2\2\2\u0918\u0854\3\2\2\2")
        buf.write("\u0918\u0861\3\2\2\2\u0918\u0868\3\2\2\2\u0918\u0870\3")
        buf.write("\2\2\2\u0918\u087a\3\2\2\2\u0918\u0884\3\2\2\2\u0918\u088c")
        buf.write("\3\2\2\2\u0918\u089c\3\2\2\2\u0918\u08a3\3\2\2\2\u0918")
        buf.write("\u08a5\3\2\2\2\u0918\u08aa\3\2\2\2\u0918\u08ad\3\2\2\2")
        buf.write("\u0918\u08b5\3\2\2\2\u0918\u08bb\3\2\2\2\u0918\u08be\3")
        buf.write("\2\2\2\u0918\u08c1\3\2\2\2\u0918\u08c4\3\2\2\2\u0918\u08c6")
        buf.write("\3\2\2\2\u0918\u08c8\3\2\2\2\u0918\u08cb\3\2\2\2\u0918")
        buf.write("\u08cf\3\2\2\2\u0918\u08d3\3\2\2\2\u0918\u08d6\3\2\2\2")
        buf.write("\u0918\u08d9\3\2\2\2\u0918\u08dc\3\2\2\2\u0918\u08df\3")
        buf.write("\2\2\2\u0918\u08e2\3\2\2\2\u0918\u08e5\3\2\2\2\u0918\u08e9")
        buf.write("\3\2\2\2\u0918\u08ed\3\2\2\2\u0918\u08f0\3\2\2\2\u0918")
        buf.write("\u08f2\3\2\2\2\u0918\u08f5\3\2\2\2\u0918\u08f7\3\2\2\2")
        buf.write("\u0918\u08f9\3\2\2\2\u0918\u08fc\3\2\2\2\u0918\u08ff\3")
        buf.write("\2\2\2\u0918\u0901\3\2\2\2\u0918\u0903\3\2\2\2\u0918\u0906")
        buf.write("\3\2\2\2\u0918\u090a\3\2\2\2\u0918\u090e\3\2\2\2\u0918")
        buf.write("\u0912\3\2\2\2\u0918\u0917\3\2\2\2\u0919g\3\2\2\2\u091a")
        buf.write("\u091b\7\u016e\2\2\u091b\u091c\7]\2\2\u091c\u0920\5\u048c")
        buf.write("\u0247\2\u091d\u091e\7\u00e7\2\2\u091e\u0920\7]\2\2\u091f")
        buf.write("\u091a\3\2\2\2\u091f\u091d\3\2\2\2\u0920i\3\2\2\2\u0921")
        buf.write("\u0922\t\f\2\2\u0922k\3\2\2\2\u0923\u0924\7S\2\2\u0924")
        buf.write("\u0925\5\u020a\u0106\2\u0925m\3\2\2\2\u0926\u0927\7\u008c")
        buf.write("\2\2\u0927\u0928\5\u048c\u0247\2\u0928o\3\2\2\2\u0929")
        buf.write("\u0930\7\u012f\2\2\u092a\u0930\7\u0099\2\2\u092b\u0930")
        buf.write("\7]\2\2\u092c\u092d\7\u008c\2\2\u092d\u092e\7\u010a\2")
        buf.write("\2\u092e\u0930\5\u0568\u02b5\2\u092f\u0929\3\2\2\2\u092f")
        buf.write("\u092a\3\2\2\2\u092f\u092b\3\2\2\2\u092f\u092c\3\2\2\2")
        buf.write("\u0930q\3\2\2\2\u0931\u0932\7\4\2\2\u0932\u0933\5v<\2")
        buf.write("\u0933\u0934\7\5\2\2\u0934s\3\2\2\2\u0935\u0936\7\u0091")
        buf.write("\2\2\u0936\u0937\5r:\2\u0937u\3\2\2\2\u0938\u093d\5x=")
        buf.write("\2\u0939\u093a\7\b\2\2\u093a\u093c\5x=\2\u093b\u0939\3")
        buf.write("\2\2\2\u093c\u093f\3\2\2\2\u093d\u093b\3\2\2\2\u093d\u093e")
        buf.write("\3\2\2\2\u093ew\3\2\2\2\u093f\u093d\3\2\2\2\u0940\u0949")
        buf.write("\5\u058e\u02c8\2\u0941\u0942\7\f\2\2\u0942\u094a\5\u01d0")
        buf.write("\u00e9\2\u0943\u0944\7\r\2\2\u0944\u0947\5\u058e\u02c8")
        buf.write("\2\u0945\u0946\7\f\2\2\u0946\u0948\5\u01d0\u00e9\2\u0947")
        buf.write("\u0945\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u094a\3\2\2\2")
        buf.write("\u0949\u0941\3\2\2\2\u0949\u0943\3\2\2\2\u0949\u094a\3")
        buf.write("\2\2\2\u094ay\3\2\2\2\u094b\u094d\5|?\2\u094c\u094b\3")
        buf.write("\2\2\2\u094d\u094e\3\2\2\2\u094e\u094c\3\2\2\2\u094e\u094f")
        buf.write("\3\2\2\2\u094f{\3\2\2\2\u0950\u0955\7\u015b\2\2\u0951")
        buf.write("\u0953\5\16\b\2\u0952\u0951\3\2\2\2\u0952\u0953\3\2\2")
        buf.write("\2\u0953\u0954\3\2\2\2\u0954\u0956\5\u0122\u0092\2\u0955")
        buf.write("\u0952\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u095e\3\2\2\2")
        buf.write("\u0957\u095b\7\u016e\2\2\u0958\u095c\5\u011e\u0090\2\u0959")
        buf.write("\u095a\7\u01de\2\2\u095a\u095c\5\u00c4c\2\u095b\u0958")
        buf.write("\3\2\2\2\u095b\u0959\3\2\2\2\u095c\u095e\3\2\2\2\u095d")
        buf.write("\u0950\3\2\2\2\u095d\u0957\3\2\2\2\u095e}\3\2\2\2\u095f")
        buf.write("\u0960\7f\2\2\u0960\u0961\7\u01c7\2\2\u0961\u0962\7\u0091")
        buf.write("\2\2\u0962\u0963\7\4\2\2\u0963\u0964\5\u0082B\2\u0964")
        buf.write("\u0965\7\5\2\2\u0965\u097a\3\2\2\2\u0966\u0967\7f\2\2")
        buf.write("\u0967\u0968\7\u01c7\2\2\u0968\u0969\7l\2\2\u0969\u096a")
        buf.write("\7\4\2\2\u096a\u096b\5\u0502\u0282\2\u096b\u096c\7\5\2")
        buf.write("\2\u096c\u097a\3\2\2\2\u096d\u096e\7f\2\2\u096e\u096f")
        buf.write("\7\u01c7\2\2\u096f\u0970\7h\2\2\u0970\u0971\7\4\2\2\u0971")
        buf.write("\u0972\5\u0502\u0282\2\u0972\u0973\7\5\2\2\u0973\u0974")
        buf.write("\7\u0086\2\2\u0974\u0975\7\4\2\2\u0975\u0976\5\u0502\u0282")
        buf.write("\2\u0976\u0977\7\5\2\2\u0977\u097a\3\2\2\2\u0978\u097a")
        buf.write("\7]\2\2\u0979\u095f\3\2\2\2\u0979\u0966\3\2\2\2\u0979")
        buf.write("\u096d\3\2\2\2\u0979\u0978\3\2\2\2\u097a\177\3\2\2\2\u097b")
        buf.write("\u097c\5\u058c\u02c7\2\u097c\u097d\5\u0578\u02bd\2\u097d")
        buf.write("\u0081\3\2\2\2\u097e\u0983\5\u0080A\2\u097f\u0980\7\b")
        buf.write("\2\2\u0980\u0982\5\u0080A\2\u0981\u097f\3\2\2\2\u0982")
        buf.write("\u0985\3\2\2\2\u0983\u0981\3\2\2\2\u0983\u0984\3\2\2\2")
        buf.write("\u0984\u0083\3\2\2\2\u0985\u0983\3\2\2\2\u0986\u0987\7")
        buf.write("\u00b2\2\2\u0987\u0988\7\u0189\2\2\u0988\u0989\5\u020a")
        buf.write("\u0106\2\u0989\u098a\5\u0086D\2\u098a\u0085\3\2\2\2\u098b")
        buf.write("\u0990\5\u0088E\2\u098c\u098d\7\b\2\2\u098d\u098f\5\u0088")
        buf.write("E\2\u098e\u098c\3\2\2\2\u098f\u0992\3\2\2\2\u0990\u098e")
        buf.write("\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u0087\3\2\2\2\u0992")
        buf.write("\u0990\3\2\2\2\u0993\u0994\7\u00ad\2\2\u0994\u0995\7\u00b7")
        buf.write("\2\2\u0995\u0997\5\u044e\u0228\2\u0996\u0998\5j\66\2\u0997")
        buf.write("\u0996\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u09b2\3\2\2\2")
        buf.write("\u0999\u099a\7\u00e7\2\2\u099a\u099d\7\u00b7\2\2\u099b")
        buf.write("\u099c\7\u0104\2\2\u099c\u099e\7\u01ad\2\2\u099d\u099b")
        buf.write("\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u099f\3\2\2\2\u099f")
        buf.write("\u09a1\5\u0588\u02c5\2\u09a0\u09a2\5j\66\2\u09a1\u09a0")
        buf.write("\3\2\2\2\u09a1\u09a2\3\2\2\2\u09a2\u09b2\3\2\2\2\u09a3")
        buf.write("\u09a4\7\u00b2\2\2\u09a4\u09a5\7\u00b7\2\2\u09a5\u09a7")
        buf.write("\5\u0588\u02c5\2\u09a6\u09a8\5\u02d4\u016b\2\u09a7\u09a6")
        buf.write("\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u09a9\3\2\2\2\u09a9")
        buf.write("\u09aa\7\u0189\2\2\u09aa\u09ac\5\u045e\u0230\2\u09ab\u09ad")
        buf.write("\5l\67\2\u09ac\u09ab\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad")
        buf.write("\u09af\3\2\2\2\u09ae\u09b0\5j\66\2\u09af\u09ae\3\2\2\2")
        buf.write("\u09af\u09b0\3\2\2\2\u09b0\u09b2\3\2\2\2\u09b1\u0993\3")
        buf.write("\2\2\2\u09b1\u0999\3\2\2\2\u09b1\u09a3\3\2\2\2\u09b2\u0089")
        buf.write("\3\2\2\2\u09b3\u09b6\7\u00c5\2\2\u09b4\u09b7\5\u03c0\u01e1")
        buf.write("\2\u09b5\u09b7\7F\2\2\u09b6\u09b4\3\2\2\2\u09b6\u09b5")
        buf.write("\3\2\2\2\u09b7\u008b\3\2\2\2\u09b8\u09ba\7\u00d1\2\2\u09b9")
        buf.write("\u09bb\5\u009aN\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb\3\2")
        buf.write("\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09be\5\u0564\u02b3\2\u09bd")
        buf.write("\u09bf\5\u00d4k\2\u09be\u09bd\3\2\2\2\u09be\u09bf\3\2")
        buf.write("\2\2\u09bf\u09c0\3\2\2\2\u09c0\u09c2\5\u008eH\2\u09c1")
        buf.write("\u09c3\5\u0090I\2\u09c2\u09c1\3\2\2\2\u09c2\u09c3\3\2")
        buf.write("\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c6\5\u0092J\2\u09c5")
        buf.write("\u09c7\5\u009cO\2\u09c6\u09c5\3\2\2\2\u09c6\u09c7\3\2")
        buf.write("\2\2\u09c7\u09c9\3\2\2\2\u09c8\u09ca\5\16\b\2\u09c9\u09c8")
        buf.write("\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb")
        buf.write("\u09cd\5\u0094K\2\u09cc\u09ce\5\u0446\u0224\2\u09cd\u09cc")
        buf.write("\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u09de\3\2\2\2\u09cf")
        buf.write("\u09d0\7\u00d1\2\2\u09d0\u09d1\7\4\2\2\u09d1\u09d2\5\u0384")
        buf.write("\u01c3\2\u09d2\u09d3\7\5\2\2\u09d3\u09d5\7\u0086\2\2\u09d4")
        buf.write("\u09d6\5\u0090I\2\u09d5\u09d4\3\2\2\2\u09d5\u09d6\3\2")
        buf.write("\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09d9\5\u0092J\2\u09d8")
        buf.write("\u09da\5\16\b\2\u09d9\u09d8\3\2\2\2\u09d9\u09da\3\2\2")
        buf.write("\2\u09da\u09db\3\2\2\2\u09db\u09dc\5\u0094K\2\u09dc\u09de")
        buf.write("\3\2\2\2\u09dd\u09b8\3\2\2\2\u09dd\u09cf\3\2\2\2\u09de")
        buf.write("\u008d\3\2\2\2\u09df\u09e0\t\r\2\2\u09e0\u008f\3\2\2\2")
        buf.write("\u09e1\u09e2\7\u014a\2\2\u09e2\u0091\3\2\2\2\u09e3\u09e7")
        buf.write("\5\u057a\u02be\2\u09e4\u09e7\7\u0178\2\2\u09e5\u09e7\7")
        buf.write("\u0179\2\2\u09e6\u09e3\3\2\2\2\u09e6\u09e4\3\2\2\2\u09e6")
        buf.write("\u09e5\3\2\2\2\u09e7\u0093\3\2\2\2\u09e8\u09ee\5\u0096")
        buf.write("L\2\u09e9\u09ea\7\4\2\2\u09ea\u09eb\5\u00a0Q\2\u09eb\u09ec")
        buf.write("\7\5\2\2\u09ec\u09ee\3\2\2\2\u09ed\u09e8\3\2\2\2\u09ed")
        buf.write("\u09e9\3\2\2\2\u09ee\u0095\3\2\2\2\u09ef\u09f1\5\u0098")
        buf.write("M\2\u09f0\u09ef\3\2\2\2\u09f1\u09f4\3\2\2\2\u09f2\u09f0")
        buf.write("\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u0097\3\2\2\2\u09f4")
        buf.write("\u09f2\3\2\2\2\u09f5\u0a1d\7\u0093\2\2\u09f6\u0a1d\7\u0098")
        buf.write("\2\2\u09f7\u09f9\7\u00df\2\2\u09f8\u09fa\5\u0340\u01a1")
        buf.write("\2\u09f9\u09f8\3\2\2\2\u09f9\u09fa\3\2\2\2\u09fa\u09fb")
        buf.write("\3\2\2\2\u09fb\u0a1d\5\u057a\u02be\2\u09fc\u09fe\7v\2")
        buf.write("\2\u09fd\u09ff\5\u0340\u01a1\2\u09fe\u09fd\3\2\2\2\u09fe")
        buf.write("\u09ff\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0a1d\5\u057a")
        buf.write("\u02be\2\u0a01\u0a1d\7\u00d3\2\2\u0a02\u0a1d\7\u0100\2")
        buf.write("\2\u0a03\u0a05\7\u014b\2\2\u0a04\u0a06\5\u0340\u01a1\2")
        buf.write("\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a07\3")
        buf.write("\2\2\2\u0a07\u0a1d\5\u057a\u02be\2\u0a08\u0a0a\7\u00ed")
        buf.write("\2\2\u0a09\u0a0b\5\u0340\u01a1\2\u0a0a\u0a09\3\2\2\2\u0a0a")
        buf.write("\u0a0b\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a1d\5\u057a")
        buf.write("\u02be\2\u0a0d\u0a0e\7\u00f9\2\2\u0a0e\u0a0f\7\u014b\2")
        buf.write("\2\u0a0f\u0a1d\5\u00d6l\2\u0a10\u0a11\7\u00f9\2\2\u0a11")
        buf.write("\u0a12\7\u014b\2\2\u0a12\u0a1d\7\13\2\2\u0a13\u0a14\7")
        buf.write("\u00f9\2\2\u0a14\u0a15\7u\2\2\u0a15\u0a16\7v\2\2\u0a16")
        buf.write("\u0a1d\5\u00d6l\2\u0a17\u0a18\7\u00f9\2\2\u0a18\u0a19")
        buf.write("\7v\2\2\u0a19\u0a1d\5\u00d6l\2\u0a1a\u0a1b\7\u00ea\2\2")
        buf.write("\u0a1b\u0a1d\5\u057a\u02be\2\u0a1c\u09f5\3\2\2\2\u0a1c")
        buf.write("\u09f6\3\2\2\2\u0a1c\u09f7\3\2\2\2\u0a1c\u09fc\3\2\2\2")
        buf.write("\u0a1c\u0a01\3\2\2\2\u0a1c\u0a02\3\2\2\2\u0a1c\u0a03\3")
        buf.write("\2\2\2\u0a1c\u0a08\3\2\2\2\u0a1c\u0a0d\3\2\2\2\u0a1c\u0a10")
        buf.write("\3\2\2\2\u0a1c\u0a13\3\2\2\2\u0a1c\u0a17\3\2\2\2\u0a1c")
        buf.write("\u0a1a\3\2\2\2\u0a1d\u0099\3\2\2\2\u0a1e\u0a1f\7\u0093")
        buf.write("\2\2\u0a1f\u009b\3\2\2\2\u0a20\u0a22\5\u009eP\2\u0a21")
        buf.write("\u0a20\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22\u0a23\3\2\2\2")
        buf.write("\u0a23\u0a24\7\u00e0\2\2\u0a24\u0a25\5\u057a\u02be\2\u0a25")
        buf.write("\u009d\3\2\2\2\u0a26\u0a27\7\u008c\2\2\u0a27\u009f\3\2")
        buf.write("\2\2\u0a28\u0a2d\5\u00a2R\2\u0a29\u0a2a\7\b\2\2\u0a2a")
        buf.write("\u0a2c\5\u00a2R\2\u0a2b\u0a29\3\2\2\2\u0a2c\u0a2f\3\2")
        buf.write("\2\2\u0a2d\u0a2b\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u00a1")
        buf.write("\3\2\2\2\u0a2f\u0a2d\3\2\2\2\u0a30\u0a32\5\u058e\u02c8")
        buf.write("\2\u0a31\u0a33\5\u00a4S\2\u0a32\u0a31\3\2\2\2\u0a32\u0a33")
        buf.write("\3\2\2\2\u0a33\u00a3\3\2\2\2\u0a34\u0a3c\5@!\2\u0a35\u0a3c")
        buf.write("\5\u0122\u0092\2\u0a36\u0a3c\7\13\2\2\u0a37\u0a38\7\4")
        buf.write("\2\2\u0a38\u0a39\5\u00a6T\2\u0a39\u0a3a\7\5\2\2\u0a3a")
        buf.write("\u0a3c\3\2\2\2\u0a3b\u0a34\3\2\2\2\u0a3b\u0a35\3\2\2\2")
        buf.write("\u0a3b\u0a36\3\2\2\2\u0a3b\u0a37\3\2\2\2\u0a3c\u00a5\3")
        buf.write("\2\2\2\u0a3d\u0a42\5\u00a8U\2\u0a3e\u0a3f\7\b\2\2\u0a3f")
        buf.write("\u0a41\5\u00a8U\2\u0a40\u0a3e\3\2\2\2\u0a41\u0a44\3\2")
        buf.write("\2\2\u0a42\u0a40\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u00a7")
        buf.write("\3\2\2\2\u0a44\u0a42\3\2\2\2\u0a45\u0a46\5@!\2\u0a46\u00a9")
        buf.write("\3\2\2\2\u0a47\u0a49\7V\2\2\u0a48\u0a4a\5\u00acW\2\u0a49")
        buf.write("\u0a48\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0a4b\3\2\2\2")
        buf.write("\u0a4b\u0a4f\7\u0084\2\2\u0a4c\u0a4d\7\u0104\2\2\u0a4d")
        buf.write("\u0a4e\7u\2\2\u0a4e\u0a50\7\u01ad\2\2\u0a4f\u0a4c\3\2")
        buf.write("\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a93")
        buf.write("\5\u0564\u02b3\2\u0a52\u0a54\7\4\2\2\u0a53\u0a55\5\u00ae")
        buf.write("X\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55\u0a56")
        buf.write("\3\2\2\2\u0a56\u0a58\7\5\2\2\u0a57\u0a59\5\u00ecw\2\u0a58")
        buf.write("\u0a57\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5b\3\2\2\2")
        buf.write("\u0a5a\u0a5c\5\u00eex\2\u0a5b\u0a5a\3\2\2\2\u0a5b\u0a5c")
        buf.write("\3\2\2\2\u0a5c\u0a5e\3\2\2\2\u0a5d\u0a5f\5\u00f6|\2\u0a5e")
        buf.write("\u0a5d\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a61\3\2\2\2")
        buf.write("\u0a60\u0a62\5\u00f8}\2\u0a61\u0a60\3\2\2\2\u0a61\u0a62")
        buf.write("\3\2\2\2\u0a62\u0a64\3\2\2\2\u0a63\u0a65\5\u00fa~\2\u0a64")
        buf.write("\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a67\3\2\2\2")
        buf.write("\u0a66\u0a68\5\u00fc\177\2\u0a67\u0a66\3\2\2\2\u0a67\u0a68")
        buf.write("\3\2\2\2\u0a68\u0a94\3\2\2\2\u0a69\u0a6a\7\u0134\2\2\u0a6a")
        buf.write("\u0a6c\5\u020a\u0106\2\u0a6b\u0a6d\5\u00b0Y\2\u0a6c\u0a6b")
        buf.write("\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6f\3\2\2\2\u0a6e")
        buf.write("\u0a70\5\u00eex\2\u0a6f\u0a6e\3\2\2\2\u0a6f\u0a70\3\2")
        buf.write("\2\2\u0a70\u0a72\3\2\2\2\u0a71\u0a73\5\u00f6|\2\u0a72")
        buf.write("\u0a71\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73\u0a75\3\2\2\2")
        buf.write("\u0a74\u0a76\5\u00f8}\2\u0a75\u0a74\3\2\2\2\u0a75\u0a76")
        buf.write("\3\2\2\2\u0a76\u0a78\3\2\2\2\u0a77\u0a79\5\u00fa~\2\u0a78")
        buf.write("\u0a77\3\2\2\2\u0a78\u0a79\3\2\2\2\u0a79\u0a7b\3\2\2\2")
        buf.write("\u0a7a\u0a7c\5\u00fc\177\2\u0a7b\u0a7a\3\2\2\2\u0a7b\u0a7c")
        buf.write("\3\2\2\2\u0a7c\u0a94\3\2\2\2\u0a7d\u0a7e\7\u013e\2\2\u0a7e")
        buf.write("\u0a7f\7\u0134\2\2\u0a7f\u0a81\5\u0564\u02b3\2\u0a80\u0a82")
        buf.write("\5\u00b0Y\2\u0a81\u0a80\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82")
        buf.write("\u0a83\3\2\2\2\u0a83\u0a85\5~@\2\u0a84\u0a86\5\u00eex")
        buf.write("\2\u0a85\u0a84\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0a88")
        buf.write("\3\2\2\2\u0a87\u0a89\5\u00f6|\2\u0a88\u0a87\3\2\2\2\u0a88")
        buf.write("\u0a89\3\2\2\2\u0a89\u0a8b\3\2\2\2\u0a8a\u0a8c\5\u00f8")
        buf.write("}\2\u0a8b\u0a8a\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8e")
        buf.write("\3\2\2\2\u0a8d\u0a8f\5\u00fa~\2\u0a8e\u0a8d\3\2\2\2\u0a8e")
        buf.write("\u0a8f\3\2\2\2\u0a8f\u0a91\3\2\2\2\u0a90\u0a92\5\u00fc")
        buf.write("\177\2\u0a91\u0a90\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a94")
        buf.write("\3\2\2\2\u0a93\u0a52\3\2\2\2\u0a93\u0a69\3\2\2\2\u0a93")
        buf.write("\u0a7d\3\2\2\2\u0a94\u00ab\3\2\2\2\u0a95\u0a9d\7\u0183")
        buf.write("\2\2\u0a96\u0a9d\7\u0181\2\2\u0a97\u0a98\7\u011d\2\2\u0a98")
        buf.write("\u0a9d\t\16\2\2\u0a99\u0a9a\7\u00fd\2\2\u0a9a\u0a9d\t")
        buf.write("\16\2\2\u0a9b\u0a9d\7\u0190\2\2\u0a9c\u0a95\3\2\2\2\u0a9c")
        buf.write("\u0a96\3\2\2\2\u0a9c\u0a97\3\2\2\2\u0a9c\u0a99\3\2\2\2")
        buf.write("\u0a9c\u0a9b\3\2\2\2\u0a9d\u00ad\3\2\2\2\u0a9e\u0a9f\5")
        buf.write("\u00b2Z\2\u0a9f\u00af\3\2\2\2\u0aa0\u0aa1\7\4\2\2\u0aa1")
        buf.write("\u0aa2\5\u00b4[\2\u0aa2\u0aa3\7\5\2\2\u0aa3\u00b1\3\2")
        buf.write("\2\2\u0aa4\u0aa9\5\u00b6\\\2\u0aa5\u0aa6\7\b\2\2\u0aa6")
        buf.write("\u0aa8\5\u00b6\\\2\u0aa7\u0aa5\3\2\2\2\u0aa8\u0aab\3\2")
        buf.write("\2\2\u0aa9\u0aa7\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u00b3")
        buf.write("\3\2\2\2\u0aab\u0aa9\3\2\2\2\u0aac\u0ab1\5\u00b8]\2\u0aad")
        buf.write("\u0aae\7\b\2\2\u0aae\u0ab0\5\u00b8]\2\u0aaf\u0aad\3\2")
        buf.write("\2\2\u0ab0\u0ab3\3\2\2\2\u0ab1\u0aaf\3\2\2\2\u0ab1\u0ab2")
        buf.write("\3\2\2\2\u0ab2\u00b5\3\2\2\2\u0ab3\u0ab1\3\2\2\2\u0ab4")
        buf.write("\u0ab8\5\u00ceh\2\u0ab5\u0ab8\5\u00c8e\2\u0ab6\u0ab8\5")
        buf.write("\u00ba^\2\u0ab7\u0ab4\3\2\2\2\u0ab7\u0ab5\3\2\2\2\u0ab7")
        buf.write("\u0ab6\3\2\2\2\u0ab8\u00b7\3\2\2\2\u0ab9\u0abc\5\u00bc")
        buf.write("_\2\u0aba\u0abc\5\u00ceh\2\u0abb\u0ab9\3\2\2\2\u0abb\u0aba")
        buf.write("\3\2\2\2\u0abc\u00b9\3\2\2\2\u0abd\u0abe\5\u0588\u02c5")
        buf.write("\2\u0abe\u0ac0\5\u045e\u0230\2\u0abf\u0ac1\5\u0152\u00aa")
        buf.write("\2\u0ac0\u0abf\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0ac2")
        buf.write("\3\2\2\2\u0ac2\u0ac3\5\u00be`\2\u0ac3\u00bb\3\2\2\2\u0ac4")
        buf.write("\u0ac7\5\u0588\u02c5\2\u0ac5\u0ac6\7\u0091\2\2\u0ac6\u0ac8")
        buf.write("\7\u0139\2\2\u0ac7\u0ac5\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8")
        buf.write("\u0ac9\3\2\2\2\u0ac9\u0aca\5\u00be`\2\u0aca\u00bd\3\2")
        buf.write("\2\2\u0acb\u0acd\5\u00c0a\2\u0acc\u0acb\3\2\2\2\u0acd")
        buf.write("\u0ad0\3\2\2\2\u0ace\u0acc\3\2\2\2\u0ace\u0acf\3\2\2\2")
        buf.write("\u0acf\u00bf\3\2\2\2\u0ad0\u0ace\3\2\2\2\u0ad1\u0ad2\7")
        buf.write("U\2\2\u0ad2\u0ad3\5\u0568\u02b5\2\u0ad3\u0ad4\5\u00c2")
        buf.write("b\2\u0ad4\u0ada\3\2\2\2\u0ad5\u0ada\5\u00c2b\2\u0ad6\u0ada")
        buf.write("\5\u00c6d\2\u0ad7\u0ad8\7S\2\2\u0ad8\u0ada\5\u020a\u0106")
        buf.write("\2\u0ad9\u0ad1\3\2\2\2\u0ad9\u0ad5\3\2\2\2\u0ad9\u0ad6")
        buf.write("\3\2\2\2\u0ad9\u0ad7\3\2\2\2\u0ada\u00c1\3\2\2\2\u0adb")
        buf.write("\u0adc\7u\2\2\u0adc\u0b10\7v\2\2\u0add\u0b10\7v\2\2\u0ade")
        buf.write("\u0ae0\7\u008a\2\2\u0adf\u0ae1\5\u0298\u014d\2\u0ae0\u0adf")
        buf.write("\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae3\3\2\2\2\u0ae2")
        buf.write("\u0ae4\5\u00fe\u0080\2\u0ae3\u0ae2\3\2\2\2\u0ae3\u0ae4")
        buf.write("\3\2\2\2\u0ae4\u0b10\3\2\2\2\u0ae5\u0ae6\7}\2\2\u0ae6")
        buf.write("\u0ae8\7\u0114\2\2\u0ae7\u0ae9\5\u0298\u014d\2\u0ae8\u0ae7")
        buf.write("\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0aeb\3\2\2\2\u0aea")
        buf.write("\u0aec\5\u00fe\u0080\2\u0aeb\u0aea\3\2\2\2\u0aeb\u0aec")
        buf.write("\3\2\2\2\u0aec\u0b10\3\2\2\2\u0aed\u0aee\7R\2\2\u0aee")
        buf.write("\u0aef\7\4\2\2\u0aef\u0af0\5\u048c\u0247\2\u0af0\u0af2")
        buf.write("\7\5\2\2\u0af1\u0af3\5\u00d2j\2\u0af2\u0af1\3\2\2\2\u0af2")
        buf.write("\u0af3\3\2\2\2\u0af3\u0b10\3\2\2\2\u0af4\u0af5\7]\2\2")
        buf.write("\u0af5\u0b10\5\u04b6\u025c\2\u0af6\u0af7\7\u01de\2\2\u0af7")
        buf.write("\u0af8\5\u00c4c\2\u0af8\u0b02\7L\2\2\u0af9\u0afb\7\u0103")
        buf.write("\2\2\u0afa\u0afc\5\u011a\u008e\2\u0afb\u0afa\3\2\2\2\u0afb")
        buf.write("\u0afc\3\2\2\2\u0afc\u0b03\3\2\2\2\u0afd\u0afe\7\4\2\2")
        buf.write("\u0afe\u0aff\5\u048c\u0247\2\u0aff\u0b00\7\5\2\2\u0b00")
        buf.write("\u0b01\7\u01e0\2\2\u0b01\u0b03\3\2\2\2\u0b02\u0af9\3\2")
        buf.write("\2\2\u0b02\u0afd\3\2\2\2\u0b03\u0b10\3\2\2\2\u0b04\u0b05")
        buf.write("\7~\2\2\u0b05\u0b07\5\u0564\u02b3\2\u0b06\u0b08\5\u00d4")
        buf.write("k\2\u0b07\u0b06\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u0b0a")
        buf.write("\3\2\2\2\u0b09\u0b0b\5\u00dco\2\u0b0a\u0b09\3\2\2\2\u0b0a")
        buf.write("\u0b0b\3\2\2\2\u0b0b\u0b0d\3\2\2\2\u0b0c\u0b0e\5\u00e4")
        buf.write("s\2\u0b0d\u0b0c\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b10")
        buf.write("\3\2\2\2\u0b0f\u0adb\3\2\2\2\u0b0f\u0add\3\2\2\2\u0b0f")
        buf.write("\u0ade\3\2\2\2\u0b0f\u0ae5\3\2\2\2\u0b0f\u0aed\3\2\2\2")
        buf.write("\u0b0f\u0af4\3\2\2\2\u0b0f\u0af6\3\2\2\2\u0b0f\u0b04\3")
        buf.write("\2\2\2\u0b10\u00c3\3\2\2\2\u0b11\u0b15\7\u00b3\2\2\u0b12")
        buf.write("\u0b13\7\u00bb\2\2\u0b13\u0b15\7]\2\2\u0b14\u0b11\3\2")
        buf.write("\2\2\u0b14\u0b12\3\2\2\2\u0b15\u00c5\3\2\2\2\u0b16\u0b1c")
        buf.write("\7^\2\2\u0b17\u0b18\7u\2\2\u0b18\u0b1c\7^\2\2\u0b19\u0b1a")
        buf.write("\7m\2\2\u0b1a\u0b1c\t\n\2\2\u0b1b\u0b16\3\2\2\2\u0b1b")
        buf.write("\u0b17\3\2\2\2\u0b1b\u0b19\3\2\2\2\u0b1c\u00c7\3\2\2\2")
        buf.write("\u0b1d\u0b1e\7\u00a0\2\2\u0b1e\u0b1f\5\u0564\u02b3\2\u0b1f")
        buf.write("\u0b20\5\u00caf\2\u0b20\u00c9\3\2\2\2\u0b21\u0b22\t\17")
        buf.write("\2\2\u0b22\u0b24\5\u00ccg\2\u0b23\u0b21\3\2\2\2\u0b24")
        buf.write("\u0b27\3\2\2\2\u0b25\u0b23\3\2\2\2\u0b25\u0b26\3\2\2\2")
        buf.write("\u0b26\u00cb\3\2\2\2\u0b27\u0b25\3\2\2\2\u0b28\u0b29\t")
        buf.write("\20\2\2\u0b29\u00cd\3\2\2\2\u0b2a\u0b2b\7U\2\2\u0b2b\u0b2c")
        buf.write("\5\u0568\u02b5\2\u0b2c\u0b2d\5\u00d0i\2\u0b2d\u0b30\3")
        buf.write("\2\2\2\u0b2e\u0b30\5\u00d0i\2\u0b2f\u0b2a\3\2\2\2\u0b2f")
        buf.write("\u0b2e\3\2\2\2\u0b30\u00cf\3\2\2\2\u0b31\u0b32\7R\2\2")
        buf.write("\u0b32\u0b33\7\4\2\2\u0b33\u0b34\5\u048c\u0247\2\u0b34")
        buf.write("\u0b35\7\5\2\2\u0b35\u0b36\5\u01b6\u00dc\2\u0b36\u0b88")
        buf.write("\3\2\2\2\u0b37\u0b49\7\u008a\2\2\u0b38\u0b39\7\4\2\2\u0b39")
        buf.write("\u0b3a\5\u00d6l\2\u0b3a\u0b3c\7\5\2\2\u0b3b\u0b3d\5\u00da")
        buf.write("n\2\u0b3c\u0b3b\3\2\2\2\u0b3c\u0b3d\3\2\2\2\u0b3d\u0b3f")
        buf.write("\3\2\2\2\u0b3e\u0b40\5\u0298\u014d\2\u0b3f\u0b3e\3\2\2")
        buf.write("\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b42\3\2\2\2\u0b41\u0b43")
        buf.write("\5\u00fe\u0080\2\u0b42\u0b41\3\2\2\2\u0b42\u0b43\3\2\2")
        buf.write("\2\u0b43\u0b44\3\2\2\2\u0b44\u0b45\5\u01b6\u00dc\2\u0b45")
        buf.write("\u0b4a\3\2\2\2\u0b46\u0b47\5\u0100\u0081\2\u0b47\u0b48")
        buf.write("\5\u01b6\u00dc\2\u0b48\u0b4a\3\2\2\2\u0b49\u0b38\3\2\2")
        buf.write("\2\u0b49\u0b46\3\2\2\2\u0b4a\u0b88\3\2\2\2\u0b4b\u0b4c")
        buf.write("\7}\2\2\u0b4c\u0b5e\7\u0114\2\2\u0b4d\u0b4e\7\4\2\2\u0b4e")
        buf.write("\u0b4f\5\u00d6l\2\u0b4f\u0b51\7\5\2\2\u0b50\u0b52\5\u00da")
        buf.write("n\2\u0b51\u0b50\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52\u0b54")
        buf.write("\3\2\2\2\u0b53\u0b55\5\u0298\u014d\2\u0b54\u0b53\3\2\2")
        buf.write("\2\u0b54\u0b55\3\2\2\2\u0b55\u0b57\3\2\2\2\u0b56\u0b58")
        buf.write("\5\u00fe\u0080\2\u0b57\u0b56\3\2\2\2\u0b57\u0b58\3\2\2")
        buf.write("\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5a\5\u01b6\u00dc\2\u0b5a")
        buf.write("\u0b5f\3\2\2\2\u0b5b\u0b5c\5\u0100\u0081\2\u0b5c\u0b5d")
        buf.write("\5\u01b6\u00dc\2\u0b5d\u0b5f\3\2\2\2\u0b5e\u0b4d\3\2\2")
        buf.write("\2\u0b5e\u0b5b\3\2\2\2\u0b5f\u0b88\3\2\2\2\u0b60\u0b62")
        buf.write("\7\u00ef\2\2\u0b61\u0b63\5\u0254\u012b\2\u0b62\u0b61\3")
        buf.write("\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64\u0b65")
        buf.write("\7\4\2\2\u0b65\u0b66\5\u00dep\2\u0b66\u0b68\7\5\2\2\u0b67")
        buf.write("\u0b69\5\u00dan\2\u0b68\u0b67\3\2\2\2\u0b68\u0b69\3\2")
        buf.write("\2\2\u0b69\u0b6b\3\2\2\2\u0b6a\u0b6c\5\u0298\u014d\2\u0b6b")
        buf.write("\u0b6a\3\2\2\2\u0b6b\u0b6c\3\2\2\2\u0b6c\u0b6e\3\2\2\2")
        buf.write("\u0b6d\u0b6f\5\u00fe\u0080\2\u0b6e\u0b6d\3\2\2\2\u0b6e")
        buf.write("\u0b6f\3\2\2\2\u0b6f\u0b71\3\2\2\2\u0b70\u0b72\5\u00e2")
        buf.write("r\2\u0b71\u0b70\3\2\2\2\u0b71\u0b72\3\2\2\2\u0b72\u0b73")
        buf.write("\3\2\2\2\u0b73\u0b74\5\u01b6\u00dc\2\u0b74\u0b88\3\2\2")
        buf.write("\2\u0b75\u0b76\7g\2\2\u0b76\u0b77\7\u0114\2\2\u0b77\u0b78")
        buf.write("\7\4\2\2\u0b78\u0b79\5\u00d6l\2\u0b79\u0b7a\7\5\2\2\u0b7a")
        buf.write("\u0b7b\7~\2\2\u0b7b\u0b7d\5\u0564\u02b3\2\u0b7c\u0b7e")
        buf.write("\5\u00d4k\2\u0b7d\u0b7c\3\2\2\2\u0b7d\u0b7e\3\2\2\2\u0b7e")
        buf.write("\u0b80\3\2\2\2\u0b7f\u0b81\5\u00dco\2\u0b80\u0b7f\3\2")
        buf.write("\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b83\3\2\2\2\u0b82\u0b84")
        buf.write("\5\u00e4s\2\u0b83\u0b82\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84")
        buf.write("\u0b85\3\2\2\2\u0b85\u0b86\5\u01b6\u00dc\2\u0b86\u0b88")
        buf.write("\3\2\2\2\u0b87\u0b31\3\2\2\2\u0b87\u0b37\3\2\2\2\u0b87")
        buf.write("\u0b4b\3\2\2\2\u0b87\u0b60\3\2\2\2\u0b87\u0b75\3\2\2\2")
        buf.write("\u0b88\u00d1\3\2\2\2\u0b89\u0b8a\7\u012e\2\2\u0b8a\u0b8b")
        buf.write("\7\u010c\2\2\u0b8b\u00d3\3\2\2\2\u0b8c\u0b8d\7\4\2\2\u0b8d")
        buf.write("\u0b8e\5\u00d6l\2\u0b8e\u0b8f\7\5\2\2\u0b8f\u00d5\3\2")
        buf.write("\2\2\u0b90\u0b95\5\u00d8m\2\u0b91\u0b92\7\b\2\2\u0b92")
        buf.write("\u0b94\5\u00d8m\2\u0b93\u0b91\3\2\2\2\u0b94\u0b97\3\2")
        buf.write("\2\2\u0b95\u0b93\3\2\2\2\u0b95\u0b96\3\2\2\2\u0b96\u00d7")
        buf.write("\3\2\2\2\u0b97\u0b95\3\2\2\2\u0b98\u0b99\5\u0588\u02c5")
        buf.write("\2\u0b99\u00d9\3\2\2\2\u0b9a\u0b9b\7\u01e1\2\2\u0b9b\u0b9c")
        buf.write("\7\4\2\2\u0b9c\u0b9d\5\u00d6l\2\u0b9d\u0b9e\7\5\2\2\u0b9e")
        buf.write("\u00db\3\2\2\2\u0b9f\u0ba0\7\u0121\2\2\u0ba0\u0ba1\t\21")
        buf.write("\2\2\u0ba1\u00dd\3\2\2\2\u0ba2\u0ba7\5\u00e0q\2\u0ba3")
        buf.write("\u0ba4\7\b\2\2\u0ba4\u0ba6\5\u00e0q\2\u0ba5\u0ba3\3\2")
        buf.write("\2\2\u0ba6\u0ba9\3\2\2\2\u0ba7\u0ba5\3\2\2\2\u0ba7\u0ba8")
        buf.write("\3\2\2\2\u0ba8\u00df\3\2\2\2\u0ba9\u0ba7\3\2\2\2\u0baa")
        buf.write("\u0bab\5\u025a\u012e\2\u0bab\u0bb2\7\u0091\2\2\u0bac\u0bb3")
        buf.write("\5\u02ac\u0157\2\u0bad\u0bae\7\u0137\2\2\u0bae\u0baf\7")
        buf.write("\4\2\2\u0baf\u0bb0\5\u02ac\u0157\2\u0bb0\u0bb1\7\5\2\2")
        buf.write("\u0bb1\u0bb3\3\2\2\2\u0bb2\u0bac\3\2\2\2\u0bb2\u0bad\3")
        buf.write("\2\2\2\u0bb3\u00e1\3\2\2\2\u0bb4\u0bb5\7\u008f\2\2\u0bb5")
        buf.write("\u0bb6\7\4\2\2\u0bb6\u0bb7\5\u048c\u0247\2\u0bb7\u0bb8")
        buf.write("\7\5\2\2\u0bb8\u00e3\3\2\2\2\u0bb9\u0bc2\5\u00e6t\2\u0bba")
        buf.write("\u0bc2\5\u00e8u\2\u0bbb\u0bbc\5\u00e6t\2\u0bbc\u0bbd\5")
        buf.write("\u00e8u\2\u0bbd\u0bc2\3\2\2\2\u0bbe\u0bbf\5\u00e8u\2\u0bbf")
        buf.write("\u0bc0\5\u00e6t\2\u0bc0\u0bc2\3\2\2\2\u0bc1\u0bb9\3\2")
        buf.write("\2\2\u0bc1\u0bba\3\2\2\2\u0bc1\u0bbb\3\2\2\2\u0bc1\u0bbe")
        buf.write("\3\2\2\2\u0bc2\u00e5\3\2\2\2\u0bc3\u0bc4\7x\2\2\u0bc4")
        buf.write("\u0bc5\7\u0192\2\2\u0bc5\u0bc6\5\u00eav\2\u0bc6\u00e7")
        buf.write("\3\2\2\2\u0bc7\u0bc8\7x\2\2\u0bc8\u0bc9\7\u00de\2\2\u0bc9")
        buf.write("\u0bca\5\u00eav\2\u0bca\u00e9\3\2\2\2\u0bcb\u0bcc\7\u012e")
        buf.write("\2\2\u0bcc\u0bd2\7\u00ac\2\2\u0bcd\u0bd2\7\u015c\2\2\u0bce")
        buf.write("\u0bd2\7\u00be\2\2\u0bcf\u0bd0\7\u016e\2\2\u0bd0\u0bd2")
        buf.write("\t\22\2\2\u0bd1\u0bcb\3\2\2\2\u0bd1\u0bcd\3\2\2\2\u0bd1")
        buf.write("\u0bce\3\2\2\2\u0bd1\u0bcf\3\2\2\2\u0bd2\u00eb\3\2\2\2")
        buf.write("\u0bd3\u0bd4\7\u010d\2\2\u0bd4\u0bd5\7\4\2\2\u0bd5\u0bd6")
        buf.write("\5\u0562\u02b2\2\u0bd6\u0bd7\7\5\2\2\u0bd7\u00ed\3\2\2")
        buf.write("\2\u0bd8\u0bd9\5\u00f0y\2\u0bd9\u00ef\3\2\2\2\u0bda\u0bdb")
        buf.write("\7\u013e\2\2\u0bdb\u0bdc\7\u00bb\2\2\u0bdc\u0bdd\5\u0588")
        buf.write("\u02c5\2\u0bdd\u0bde\7\4\2\2\u0bde\u0bdf\5\u00f2z\2\u0bdf")
        buf.write("\u0be0\7\5\2\2\u0be0\u00f1\3\2\2\2\u0be1\u0be6\5\u00f4")
        buf.write("{\2\u0be2\u0be3\7\b\2\2\u0be3\u0be5\5\u00f4{\2\u0be4\u0be2")
        buf.write("\3\2\2\2\u0be5\u0be8\3\2\2\2\u0be6\u0be4\3\2\2\2\u0be6")
        buf.write("\u0be7\3\2\2\2\u0be7\u00f3\3\2\2\2\u0be8\u0be6\3\2\2\2")
        buf.write("\u0be9\u0beb\5\u0588\u02c5\2\u0bea\u0bec\5\u0260\u0131")
        buf.write("\2\u0beb\u0bea\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u0bee")
        buf.write("\3\2\2\2\u0bed\u0bef\5\u0262\u0132\2\u0bee\u0bed\3\2\2")
        buf.write("\2\u0bee\u0bef\3\2\2\2\u0bef\u0c01\3\2\2\2\u0bf0\u0bf2")
        buf.write("\5\u04c0\u0261\2\u0bf1\u0bf3\5\u0260\u0131\2\u0bf2\u0bf1")
        buf.write("\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf5\3\2\2\2\u0bf4")
        buf.write("\u0bf6\5\u0262\u0132\2\u0bf5\u0bf4\3\2\2\2\u0bf5\u0bf6")
        buf.write("\3\2\2\2\u0bf6\u0c01\3\2\2\2\u0bf7\u0bf8\7\4\2\2\u0bf8")
        buf.write("\u0bf9\5\u048c\u0247\2\u0bf9\u0bfb\7\5\2\2\u0bfa\u0bfc")
        buf.write("\5\u0260\u0131\2\u0bfb\u0bfa\3\2\2\2\u0bfb\u0bfc\3\2\2")
        buf.write("\2\u0bfc\u0bfe\3\2\2\2\u0bfd\u0bff\5\u0262\u0132\2\u0bfe")
        buf.write("\u0bfd\3\2\2\2\u0bfe\u0bff\3\2\2\2\u0bff\u0c01\3\2\2\2")
        buf.write("\u0c00\u0be9\3\2\2\2\u0c00\u0bf0\3\2\2\2\u0c00\u0bf7\3")
        buf.write("\2\2\2\u0c01\u00f5\3\2\2\2\u0c02\u0c03\7\u008c\2\2\u0c03")
        buf.write("\u0c04\5\u0568\u02b5\2\u0c04\u00f7\3\2\2\2\u0c05\u0c06")
        buf.write("\7\u0091\2\2\u0c06\u0c0a\5r:\2\u0c07\u0c08\7\u019c\2\2")
        buf.write("\u0c08\u0c0a\7\u0136\2\2\u0c09\u0c05\3\2\2\2\u0c09\u0c07")
        buf.write("\3\2\2\2\u0c0a\u00f9\3\2\2\2\u0c0b\u0c0c\7x\2\2\u0c0c")
        buf.write("\u0c12\7\u00c9\2\2\u0c0d\u0c13\7\u00e7\2\2\u0c0e\u0c0f")
        buf.write("\7\u00de\2\2\u0c0f\u0c13\7\u0161\2\2\u0c10\u0c11\7\u0145")
        buf.write("\2\2\u0c11\u0c13\7\u0161\2\2\u0c12\u0c0d\3\2\2\2\u0c12")
        buf.write("\u0c0e\3\2\2\2\u0c12\u0c10\3\2\2\2\u0c13\u00fb\3\2\2\2")
        buf.write("\u0c14\u0c15\7\u0180\2\2\u0c15\u0c16\5\u0568\u02b5\2\u0c16")
        buf.write("\u00fd\3\2\2\2\u0c17\u0c18\7\u008c\2\2\u0c18\u0c19\7\u010a")
        buf.write("\2\2\u0c19\u0c1a\7\u0180\2\2\u0c1a\u0c1b\5\u0568\u02b5")
        buf.write("\2\u0c1b\u00ff\3\2\2\2\u0c1c\u0c1d\7\u008c\2\2\u0c1d\u0c1e")
        buf.write("\7\u010a\2\2\u0c1e\u0c1f\5\u0568\u02b5\2\u0c1f\u0101\3")
        buf.write("\2\2\2\u0c20\u0c21\7V\2\2\u0c21\u0c25\7\u0177\2\2\u0c22")
        buf.write("\u0c23\7\u0104\2\2\u0c23\u0c24\7u\2\2\u0c24\u0c26\7\u01ad")
        buf.write("\2\2\u0c25\u0c22\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c27")
        buf.write("\3\2\2\2\u0c27\u0c29\5\u020a\u0106\2\u0c28\u0c2a\5\u036c")
        buf.write("\u01b7\2\u0c29\u0c28\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a")
        buf.write("\u0c2b\3\2\2\2\u0c2b\u0c2c\7x\2\2\u0c2c\u0c2d\5\u0502")
        buf.write("\u0282\2\u0c2d\u0c2e\7h\2\2\u0c2e\u0c2f\5\u0426\u0214")
        buf.write("\2\u0c2f\u0103\3\2\2\2\u0c30\u0c31\7\u00b2\2\2\u0c31\u0c34")
        buf.write("\7\u0177\2\2\u0c32\u0c33\7\u0104\2\2\u0c33\u0c35\7\u01ad")
        buf.write("\2\2\u0c34\u0c32\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c36")
        buf.write("\3\2\2\2\u0c36\u0c37\5\u020a\u0106\2\u0c37\u0c38\7\u016e")
        buf.write("\2\2\u0c38\u0c39\7\u0177\2\2\u0c39\u0c3a\5\u0580\u02c1")
        buf.write("\2\u0c3a\u0105\3\2\2\2\u0c3b\u0c3d\7V\2\2\u0c3c\u0c3e")
        buf.write("\5\u00acW\2\u0c3d\u0c3c\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e")
        buf.write("\u0c3f\3\2\2\2\u0c3f\u0c43\7\u0084\2\2\u0c40\u0c41\7\u0104")
        buf.write("\2\2\u0c41\u0c42\7u\2\2\u0c42\u0c44\7\u01ad\2\2\u0c43")
        buf.write("\u0c40\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c45\3\2\2\2")
        buf.write("\u0c45\u0c46\5\u0108\u0085\2\u0c46\u0c47\7L\2\2\u0c47")
        buf.write("\u0c49\5\u03c6\u01e4\2\u0c48\u0c4a\5\u010a\u0086\2\u0c49")
        buf.write("\u0c48\3\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a\u0107\3\2\2\2")
        buf.write("\u0c4b\u0c4d\5\u0564\u02b3\2\u0c4c\u0c4e\5\u00d4k\2\u0c4d")
        buf.write("\u0c4c\3\2\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c50\3\2\2\2")
        buf.write("\u0c4f\u0c51\5\u00f6|\2\u0c50\u0c4f\3\2\2\2\u0c50\u0c51")
        buf.write("\3\2\2\2\u0c51\u0c53\3\2\2\2\u0c52\u0c54\5\u00f8}\2\u0c53")
        buf.write("\u0c52\3\2\2\2\u0c53\u0c54\3\2\2\2\u0c54\u0c56\3\2\2\2")
        buf.write("\u0c55\u0c57\5\u00fa~\2\u0c56\u0c55\3\2\2\2\u0c56\u0c57")
        buf.write("\3\2\2\2\u0c57\u0c59\3\2\2\2\u0c58\u0c5a\5\u00fc\177\2")
        buf.write("\u0c59\u0c58\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0109\3")
        buf.write("\2\2\2\u0c5b\u0c5f\7\u0091\2\2\u0c5c\u0c60\7\u00d6\2\2")
        buf.write("\u0c5d\u0c5e\7\u012e\2\2\u0c5e\u0c60\7\u00d6\2\2\u0c5f")
        buf.write("\u0c5c\3\2\2\2\u0c5f\u0c5d\3\2\2\2\u0c60\u010b\3\2\2\2")
        buf.write("\u0c61\u0c63\7V\2\2\u0c62\u0c64\5\u0110\u0089\2\u0c63")
        buf.write("\u0c62\3\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c65\3\2\2\2")
        buf.write("\u0c65\u0c66\7\u0123\2\2\u0c66\u0c6a\7\u0199\2\2\u0c67")
        buf.write("\u0c68\7\u0104\2\2\u0c68\u0c69\7u\2\2\u0c69\u0c6b\7\u01ad")
        buf.write("\2\2\u0c6a\u0c67\3\2\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b\u0c6c")
        buf.write("\3\2\2\2\u0c6c\u0c6d\5\u010e\u0088\2\u0c6d\u0c6e\7L\2")
        buf.write("\2\u0c6e\u0c70\5\u03c6\u01e4\2\u0c6f\u0c71\5\u010a\u0086")
        buf.write("\2\u0c70\u0c6f\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u010d")
        buf.write("\3\2\2\2\u0c72\u0c74\5\u0564\u02b3\2\u0c73\u0c75\5\u00d4")
        buf.write("k\2\u0c74\u0c73\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75\u0c77")
        buf.write("\3\2\2\2\u0c76\u0c78\5\u00f6|\2\u0c77\u0c76\3\2\2\2\u0c77")
        buf.write("\u0c78\3\2\2\2\u0c78\u0c7a\3\2\2\2\u0c79\u0c7b\5t;\2\u0c7a")
        buf.write("\u0c79\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c7d\3\2\2\2")
        buf.write("\u0c7c\u0c7e\5\u00fc\177\2\u0c7d\u0c7c\3\2\2\2\u0c7d\u0c7e")
        buf.write("\3\2\2\2\u0c7e\u010f\3\2\2\2\u0c7f\u0c80\7\u0190\2\2\u0c80")
        buf.write("\u0111\3\2\2\2\u0c81\u0c82\7\u0152\2\2\u0c82\u0c83\7\u0123")
        buf.write("\2\2\u0c83\u0c85\7\u0199\2\2\u0c84\u0c86\5\u0250\u0129")
        buf.write("\2\u0c85\u0c84\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c87")
        buf.write("\3\2\2\2\u0c87\u0c89\5\u0564\u02b3\2\u0c88\u0c8a\5\u010a")
        buf.write("\u0086\2\u0c89\u0c88\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a")
        buf.write("\u0113\3\2\2\2\u0c8b\u0c8d\7V\2\2\u0c8c\u0c8e\5\u00ac")
        buf.write("W\2\u0c8d\u0c8c\3\2\2\2\u0c8d\u0c8e\3\2\2\2\u0c8e\u0c8f")
        buf.write("\3\2\2\2\u0c8f\u0c93\7\u0169\2\2\u0c90\u0c91\7\u0104\2")
        buf.write("\2\u0c91\u0c92\7u\2\2\u0c92\u0c94\7\u01ad\2\2\u0c93\u0c90")
        buf.write("\3\2\2\2\u0c93\u0c94\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95")
        buf.write("\u0c97\5\u0564\u02b3\2\u0c96\u0c98\5\u0118\u008d\2\u0c97")
        buf.write("\u0c96\3\2\2\2\u0c97\u0c98\3\2\2\2\u0c98\u0115\3\2\2\2")
        buf.write("\u0c99\u0c9a\7\u00b2\2\2\u0c9a\u0c9d\7\u0169\2\2\u0c9b")
        buf.write("\u0c9c\7\u0104\2\2\u0c9c\u0c9e\7\u01ad\2\2\u0c9d\u0c9b")
        buf.write("\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f")
        buf.write("\u0ca0\5\u0564\u02b3\2\u0ca0\u0ca1\5\u011c\u008f\2\u0ca1")
        buf.write("\u0117\3\2\2\2\u0ca2\u0ca3\5\u011c\u008f\2\u0ca3\u0119")
        buf.write("\3\2\2\2\u0ca4\u0ca5\7\4\2\2\u0ca5\u0ca6\5\u011c\u008f")
        buf.write("\2\u0ca6\u0ca7\7\5\2\2\u0ca7\u011b\3\2\2\2\u0ca8\u0caa")
        buf.write("\5\u011e\u0090\2\u0ca9\u0ca8\3\2\2\2\u0caa\u0cab\3\2\2")
        buf.write("\2\u0cab\u0ca9\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u011d")
        buf.write("\3\2\2\2\u0cad\u0cae\7L\2\2\u0cae\u0cd0\5\u0462\u0232")
        buf.write("\2\u0caf\u0cb0\7\u00bc\2\2\u0cb0\u0cd0\5\u0122\u0092\2")
        buf.write("\u0cb1\u0cd0\7\u00d5\2\2\u0cb2\u0cb4\7\u0109\2\2\u0cb3")
        buf.write("\u0cb5\5\u0120\u0091\2\u0cb4\u0cb3\3\2\2\2\u0cb4\u0cb5")
        buf.write("\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cd0\5\u0122\u0092")
        buf.write("\2\u0cb7\u0cb8\7\u0124\2\2\u0cb8\u0cd0\5\u0122\u0092\2")
        buf.write("\u0cb9\u0cba\7\u0127\2\2\u0cba\u0cd0\5\u0122\u0092\2\u0cbb")
        buf.write("\u0cbc\7\u012e\2\2\u0cbc\u0cd0\t\23\2\2\u0cbd\u0cbe\7")
        buf.write("\u013a\2\2\u0cbe\u0cbf\7\u00bb\2\2\u0cbf\u0cd0\5\u020a")
        buf.write("\u0106\2\u0cc0\u0cc1\7\u0169\2\2\u0cc1\u0cc2\7\u012b\2")
        buf.write("\2\u0cc2\u0cd0\5\u020a\u0106\2\u0cc3\u0cc5\7\u0175\2\2")
        buf.write("\u0cc4\u0cc6\5\16\b\2\u0cc5\u0cc4\3\2\2\2\u0cc5\u0cc6")
        buf.write("\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7\u0cd0\5\u0122\u0092")
        buf.write("\2\u0cc8\u0cca\7\u015b\2\2\u0cc9\u0ccb\5\16\b\2\u0cca")
        buf.write("\u0cc9\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0ccd\3\2\2\2")
        buf.write("\u0ccc\u0cce\5\u0122\u0092\2\u0ccd\u0ccc\3\2\2\2\u0ccd")
        buf.write("\u0cce\3\2\2\2\u0cce\u0cd0\3\2\2\2\u0ccf\u0cad\3\2\2\2")
        buf.write("\u0ccf\u0caf\3\2\2\2\u0ccf\u0cb1\3\2\2\2\u0ccf\u0cb2\3")
        buf.write("\2\2\2\u0ccf\u0cb7\3\2\2\2\u0ccf\u0cb9\3\2\2\2\u0ccf\u0cbb")
        buf.write("\3\2\2\2\u0ccf\u0cbd\3\2\2\2\u0ccf\u0cc0\3\2\2\2\u0ccf")
        buf.write("\u0cc3\3\2\2\2\u0ccf\u0cc8\3\2\2\2\u0cd0\u011f\3\2\2\2")
        buf.write("\u0cd1\u0cd2\7\u00bb\2\2\u0cd2\u0121\3\2\2\2\u0cd3\u0cda")
        buf.write("\5\u0576\u02bc\2\u0cd4\u0cd5\7\16\2\2\u0cd5\u0cda\5\u0576")
        buf.write("\u02bc\2\u0cd6\u0cd7\7\17\2\2\u0cd7\u0cda\5\u0576\u02bc")
        buf.write("\2\u0cd8\u0cda\5\u0580\u02c1\2\u0cd9\u0cd3\3\2\2\2\u0cd9")
        buf.write("\u0cd4\3\2\2\2\u0cd9\u0cd6\3\2\2\2\u0cd9\u0cd8\3\2\2\2")
        buf.write("\u0cda\u0123\3\2\2\2\u0cdb\u0ce0\5\u0122\u0092\2\u0cdc")
        buf.write("\u0cdd\7\b\2\2\u0cdd\u0cdf\5\u0122\u0092\2\u0cde\u0cdc")
        buf.write("\3\2\2\2\u0cdf\u0ce2\3\2\2\2\u0ce0\u0cde\3\2\2\2\u0ce0")
        buf.write("\u0ce1\3\2\2\2\u0ce1\u0125\3\2\2\2\u0ce2\u0ce0\3\2\2\2")
        buf.write("\u0ce3\u0ce5\7V\2\2\u0ce4\u0ce6\5\u026a\u0136\2\u0ce5")
        buf.write("\u0ce4\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6\u0ce8\3\2\2\2")
        buf.write("\u0ce7\u0ce9\5\u0128\u0095\2\u0ce8\u0ce7\3\2\2\2\u0ce8")
        buf.write("\u0ce9\3\2\2\2\u0ce9\u0ceb\3\2\2\2\u0cea\u0cec\5\u0132")
        buf.write("\u009a\2\u0ceb\u0cea\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec")
        buf.write("\u0ced\3\2\2\2\u0ced\u0cee\7\u0116\2\2\u0cee\u0cf7\5\u0568")
        buf.write("\u02b5\2\u0cef\u0cf0\7\u00ff\2\2\u0cf0\u0cf2\5\u012a\u0096")
        buf.write("\2\u0cf1\u0cf3\5\u012c\u0097\2\u0cf2\u0cf1\3\2\2\2\u0cf2")
        buf.write("\u0cf3\3\2\2\2\u0cf3\u0cf5\3\2\2\2\u0cf4\u0cf6\5\u0130")
        buf.write("\u0099\2\u0cf5\u0cf4\3\2\2\2\u0cf5\u0cf6\3\2\2\2\u0cf6")
        buf.write("\u0cf8\3\2\2\2\u0cf7\u0cef\3\2\2\2\u0cf7\u0cf8\3\2\2\2")
        buf.write("\u0cf8\u0127\3\2\2\2\u0cf9\u0cfa\7\u0188\2\2\u0cfa\u0129")
        buf.write("\3\2\2\2\u0cfb\u0cfd\5\u0568\u02b5\2\u0cfc\u0cfe\5\u020c")
        buf.write("\u0107\2\u0cfd\u0cfc\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe")
        buf.write("\u012b\3\2\2\2\u0cff\u0d00\7\u010e\2\2\u0d00\u0d01\5\u012a")
        buf.write("\u0096\2\u0d01\u012d\3\2\2\2\u0d02\u0d03\7\u0196\2\2\u0d03")
        buf.write("\u0d07\5\u012a\u0096\2\u0d04\u0d05\7\u012e\2\2\u0d05\u0d07")
        buf.write("\7\u0196\2\2\u0d06\u0d02\3\2\2\2\u0d06\u0d04\3\2\2\2\u0d07")
        buf.write("\u012f\3\2\2\2\u0d08\u0d09\5\u012e\u0098\2\u0d09\u0131")
        buf.write("\3\2\2\2\u0d0a\u0d0b\7\u0148\2\2\u0d0b\u0133\3\2\2\2\u0d0c")
        buf.write("\u0d0d\7V\2\2\u0d0d\u0d0e\7\u0180\2\2\u0d0e\u0d10\5\u0568")
        buf.write("\u02b5\2\u0d0f\u0d11\5\u0136\u009c\2\u0d10\u0d0f\3\2\2")
        buf.write("\2\u0d10\u0d11\3\2\2\2\u0d11\u0d12\3\2\2\2\u0d12\u0d13")
        buf.write("\7\u011e\2\2\u0d13\u0d15\5\u057a\u02be\2\u0d14\u0d16\5")
        buf.write("t;\2\u0d15\u0d14\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0135")
        buf.write("\3\2\2\2\u0d17\u0d18\7\u013b\2\2\u0d18\u0d19\5\u0584\u02c3")
        buf.write("\2\u0d19\u0137\3\2\2\2\u0d1a\u0d1b\7\u00e7\2\2\u0d1b\u0d1e")
        buf.write("\7\u0180\2\2\u0d1c\u0d1d\7\u0104\2\2\u0d1d\u0d1f\7\u01ad")
        buf.write("\2\2\u0d1e\u0d1c\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f\u0d20")
        buf.write("\3\2\2\2\u0d20\u0d21\5\u0568\u02b5\2\u0d21\u0139\3\2\2")
        buf.write("\2\u0d22\u0d23\7V\2\2\u0d23\u0d27\7\u00f4\2\2\u0d24\u0d25")
        buf.write("\7\u0104\2\2\u0d25\u0d26\7u\2\2\u0d26\u0d28\7\u01ad\2")
        buf.write("\2\u0d27\u0d24\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d29")
        buf.write("\3\2\2\2\u0d29\u0d2b\5\u0568\u02b5\2\u0d2a\u0d2c\5\16")
        buf.write("\b\2\u0d2b\u0d2a\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2d")
        buf.write("\3\2\2\2\u0d2d\u0d2e\5\u013c\u009f\2\u0d2e\u013b\3\2\2")
        buf.write("\2\u0d2f\u0d31\5\u013e\u00a0\2\u0d30\u0d2f\3\2\2\2\u0d31")
        buf.write("\u0d34\3\2\2\2\u0d32\u0d30\3\2\2\2\u0d32\u0d33\3\2\2\2")
        buf.write("\u0d33\u013d\3\2\2\2\u0d34\u0d32\3\2\2\2\u0d35\u0d36\7")
        buf.write("\u0164\2\2\u0d36\u0d3d\5\u0568\u02b5\2\u0d37\u0d38\7\u0198")
        buf.write("\2\2\u0d38\u0d3d\5F$\2\u0d39\u0d3a\7h\2\2\u0d3a\u0d3d")
        buf.write("\5F$\2\u0d3b\u0d3d\7\u00be\2\2\u0d3c\u0d35\3\2\2\2\u0d3c")
        buf.write("\u0d37\3\2\2\2\u0d3c\u0d39\3\2\2\2\u0d3c\u0d3b\3\2\2\2")
        buf.write("\u0d3d\u013f\3\2\2\2\u0d3e\u0d3f\7\u00b2\2\2\u0d3f\u0d40")
        buf.write("\7\u00f4\2\2\u0d40\u0d41\5\u0568\u02b5\2\u0d41\u0d42\7")
        buf.write("\u0192\2\2\u0d42\u0d43\5\u0142\u00a2\2\u0d43\u0141\3\2")
        buf.write("\2\2\u0d44\u0d46\5\u0144\u00a3\2\u0d45\u0d44\3\2\2\2\u0d46")
        buf.write("\u0d49\3\2\2\2\u0d47\u0d45\3\2\2\2\u0d47\u0d48\3\2\2\2")
        buf.write("\u0d48\u0143\3\2\2\2\u0d49\u0d47\3\2\2\2\u0d4a\u0d4b\7")
        buf.write("\u0086\2\2\u0d4b\u0d4c\5F$\2\u0d4c\u0145\3\2\2\2\u0d4d")
        buf.write("\u0d4e\7\u00b2\2\2\u0d4e\u0d4f\7\u00f4\2\2\u0d4f\u0d50")
        buf.write("\5\u0568\u02b5\2\u0d50\u0d51\5&\24\2\u0d51\u0d52\5\u0202")
        buf.write("\u0102\2\u0d52\u0d53\5\u0568\u02b5\2\u0d53\u0db6\3\2\2")
        buf.write("\2\u0d54\u0d55\7\u00b2\2\2\u0d55\u0d56\7\u00f4\2\2\u0d56")
        buf.write("\u0d57\5\u0568\u02b5\2\u0d57\u0d58\5&\24\2\u0d58\u0d59")
        buf.write("\5\u0200\u0101\2\u0d59\u0d5a\5\u020a\u0106\2\u0d5a\u0db6")
        buf.write("\3\2\2\2\u0d5b\u0d5c\7\u00b2\2\2\u0d5c\u0d5d\7\u00f4\2")
        buf.write("\2\u0d5d\u0d5e\5\u0568\u02b5\2\u0d5e\u0d5f\5&\24\2\u0d5f")
        buf.write("\u0d60\7\u00b0\2\2\u0d60\u0d61\5\u028a\u0146\2\u0d61\u0db6")
        buf.write("\3\2\2\2\u0d62\u0d63\7\u00b2\2\2\u0d63\u0d64\7\u00f4\2")
        buf.write("\2\u0d64\u0d65\5\u0568\u02b5\2\u0d65\u0d66\5&\24\2\u0d66")
        buf.write("\u0d67\7Q\2\2\u0d67\u0d68\7\4\2\2\u0d68\u0d69\5\u045e")
        buf.write("\u0230\2\u0d69\u0d6a\7L\2\2\u0d6a\u0d6b\5\u045e\u0230")
        buf.write("\2\u0d6b\u0d6c\7\5\2\2\u0d6c\u0db6\3\2\2\2\u0d6d\u0d6e")
        buf.write("\7\u00b2\2\2\u0d6e\u0d6f\7\u00f4\2\2\u0d6f\u0d70\5\u0568")
        buf.write("\u02b5\2\u0d70\u0d71\5&\24\2\u0d71\u0d72\7\u00e5\2\2\u0d72")
        buf.write("\u0d73\5\u045e\u0230\2\u0d73\u0db6\3\2\2\2\u0d74\u0d75")
        buf.write("\7\u00b2\2\2\u0d75\u0d76\7\u00f4\2\2\u0d76\u0d77\5\u0568")
        buf.write("\u02b5\2\u0d77\u0d78\5&\24\2\u0d78\u0d79\7\u00fb\2\2\u0d79")
        buf.write("\u0d7a\5\u0272\u013a\2\u0d7a\u0db6\3\2\2\2\u0d7b\u0d7c")
        buf.write("\7\u00b2\2\2\u0d7c\u0d7d\7\u00f4\2\2\u0d7d\u0d7e\5\u0568")
        buf.write("\u02b5\2\u0d7e\u0d7f\5&\24\2\u0d7f\u0d80\7\u0137\2\2\u0d80")
        buf.write("\u0d81\5\u02b0\u0159\2\u0d81\u0db6\3\2\2\2\u0d82\u0d83")
        buf.write("\7\u00b2\2\2\u0d83\u0d84\7\u00f4\2\2\u0d84\u0d85\5\u0568")
        buf.write("\u02b5\2\u0d85\u0d86\5&\24\2\u0d86\u0d87\7\u0137\2\2\u0d87")
        buf.write("\u0d88\7\u00c4\2\2\u0d88\u0d89\5\u020a\u0106\2\u0d89\u0d8a")
        buf.write("\7\u008c\2\2\u0d8a\u0d8b\5\u0568\u02b5\2\u0d8b\u0db6\3")
        buf.write("\2\2\2\u0d8c\u0d8d\7\u00b2\2\2\u0d8d\u0d8e\7\u00f4\2\2")
        buf.write("\u0d8e\u0d8f\5\u0568\u02b5\2\u0d8f\u0d90\5&\24\2\u0d90")
        buf.write("\u0d91\7\u0137\2\2\u0d91\u0d92\7\u00f6\2\2\u0d92\u0d93")
        buf.write("\5\u020a\u0106\2\u0d93\u0d94\7\u008c\2\2\u0d94\u0d95\5")
        buf.write("\u0568\u02b5\2\u0d95\u0db6\3\2\2\2\u0d96\u0d97\7\u00b2")
        buf.write("\2\2\u0d97\u0d98\7\u00f4\2\2\u0d98\u0d99\5\u0568\u02b5")
        buf.write("\2\u0d99\u0d9a\5&\24\2\u0d9a\u0d9b\7\u0149\2\2\u0d9b\u0d9c")
        buf.write("\5\u0272\u013a\2\u0d9c\u0db6\3\2\2\2\u0d9d\u0d9e\7\u00b2")
        buf.write("\2\2\u0d9e\u0d9f\7\u00f4\2\2\u0d9f\u0da0\5\u0568\u02b5")
        buf.write("\2\u0da0\u0da1\5&\24\2\u0da1\u0da2\7\u01e2\2\2\u0da2\u0da3")
        buf.write("\5\u0272\u013a\2\u0da3\u0db6\3\2\2\2\u0da4\u0da5\7\u00b2")
        buf.write("\2\2\u0da5\u0da6\7\u00f4\2\2\u0da6\u0da7\5\u0568\u02b5")
        buf.write("\2\u0da7\u0da8\5&\24\2\u0da8\u0da9\7\u01e3\2\2\u0da9\u0daa")
        buf.write("\7f\2\2\u0daa\u0dab\5\u045e\u0230\2\u0dab\u0dac\7\u0116")
        buf.write("\2\2\u0dac\u0dad\5\u0568\u02b5\2\u0dad\u0db6\3\2\2\2\u0dae")
        buf.write("\u0daf\7\u00b2\2\2\u0daf\u0db0\7\u00f4\2\2\u0db0\u0db1")
        buf.write("\5\u0568\u02b5\2\u0db1\u0db2\5&\24\2\u0db2\u0db3\7\u0189")
        buf.write("\2\2\u0db3\u0db4\5\u045e\u0230\2\u0db4\u0db6\3\2\2\2\u0db5")
        buf.write("\u0d4d\3\2\2\2\u0db5\u0d54\3\2\2\2\u0db5\u0d5b\3\2\2\2")
        buf.write("\u0db5\u0d62\3\2\2\2\u0db5\u0d6d\3\2\2\2\u0db5\u0d74\3")
        buf.write("\2\2\2\u0db5\u0d7b\3\2\2\2\u0db5\u0d82\3\2\2\2\u0db5\u0d8c")
        buf.write("\3\2\2\2\u0db5\u0d96\3\2\2\2\u0db5\u0d9d\3\2\2\2\u0db5")
        buf.write("\u0da4\3\2\2\2\u0db5\u0dae\3\2\2\2\u0db6\u0147\3\2\2\2")
        buf.write("\u0db7\u0db8\7V\2\2\u0db8\u0db9\7g\2\2\u0db9\u0dba\7\u00d6")
        buf.write("\2\2\u0dba\u0dbb\7\u019e\2\2\u0dbb\u0dbd\5\u0568\u02b5")
        buf.write("\2\u0dbc\u0dbe\5\u014e\u00a8\2\u0dbd\u0dbc\3\2\2\2\u0dbd")
        buf.write("\u0dbe\3\2\2\2\u0dbe\u0dc0\3\2\2\2\u0dbf\u0dc1\5\u0152")
        buf.write("\u00aa\2\u0dc0\u0dbf\3\2\2\2\u0dc0\u0dc1\3\2\2\2\u0dc1")
        buf.write("\u0149\3\2\2\2\u0dc2\u0dc3\7\u00ff\2\2\u0dc3\u0dcb\5\u012a")
        buf.write("\u0096\2\u0dc4\u0dc5\7\u012e\2\2\u0dc5\u0dcb\7\u00ff\2")
        buf.write("\2\u0dc6\u0dc7\7\u0196\2\2\u0dc7\u0dcb\5\u012a\u0096\2")
        buf.write("\u0dc8\u0dc9\7\u012e\2\2\u0dc9\u0dcb\7\u0196\2\2\u0dca")
        buf.write("\u0dc2\3\2\2\2\u0dca\u0dc4\3\2\2\2\u0dca\u0dc6\3\2\2\2")
        buf.write("\u0dca\u0dc8\3\2\2\2\u0dcb\u014b\3\2\2\2\u0dcc\u0dce\5")
        buf.write("\u014a\u00a6\2\u0dcd\u0dcc\3\2\2\2\u0dce\u0dcf\3\2\2\2")
        buf.write("\u0dcf\u0dcd\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u014d\3")
        buf.write("\2\2\2\u0dd1\u0dd2\5\u014c\u00a7\2\u0dd2\u014f\3\2\2\2")
        buf.write("\u0dd3\u0dd4\7\u00b2\2\2\u0dd4\u0dd5\7g\2\2\u0dd5\u0dd6")
        buf.write("\7\u00d6\2\2\u0dd6\u0dd7\7\u019e\2\2\u0dd7\u0dd9\5\u0568")
        buf.write("\u02b5\2\u0dd8\u0dda\5\u014e\u00a8\2\u0dd9\u0dd8\3\2\2")
        buf.write("\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb\u0ddc")
        buf.write("\5\u0156\u00ac\2\u0ddc\u0de5\3\2\2\2\u0ddd\u0dde\7\u00b2")
        buf.write("\2\2\u0dde\u0ddf\7g\2\2\u0ddf\u0de0\7\u00d6\2\2\u0de0")
        buf.write("\u0de1\7\u019e\2\2\u0de1\u0de2\5\u0568\u02b5\2\u0de2\u0de3")
        buf.write("\5\u014c\u00a7\2\u0de3\u0de5\3\2\2\2\u0de4\u0dd3\3\2\2")
        buf.write("\2\u0de4\u0ddd\3\2\2\2\u0de5\u0151\3\2\2\2\u0de6\u0de7")
        buf.write("\7\u0139\2\2\u0de7\u0de8\7\4\2\2\u0de8\u0de9\5\u0154\u00ab")
        buf.write("\2\u0de9\u0dea\7\5\2\2\u0dea\u0153\3\2\2\2\u0deb\u0df0")
        buf.write("\5\u015c\u00af\2\u0dec\u0ded\7\b\2\2\u0ded\u0def\5\u015c")
        buf.write("\u00af\2\u0dee\u0dec\3\2\2\2\u0def\u0df2\3\2\2\2\u0df0")
        buf.write("\u0dee\3\2\2\2\u0df0\u0df1\3\2\2\2\u0df1\u0155\3\2\2\2")
        buf.write("\u0df2\u0df0\3\2\2\2\u0df3\u0df4\7\u0139\2\2\u0df4\u0df5")
        buf.write("\7\4\2\2\u0df5\u0df6\5\u0158\u00ad\2\u0df6\u0df7\7\5\2")
        buf.write("\2\u0df7\u0157\3\2\2\2\u0df8\u0dfd\5\u015a\u00ae\2\u0df9")
        buf.write("\u0dfa\7\b\2\2\u0dfa\u0dfc\5\u015a\u00ae\2\u0dfb\u0df9")
        buf.write("\3\2\2\2\u0dfc\u0dff\3\2\2\2\u0dfd\u0dfb\3\2\2\2\u0dfd")
        buf.write("\u0dfe\3\2\2\2\u0dfe\u0159\3\2\2\2\u0dff\u0dfd\3\2\2\2")
        buf.write("\u0e00\u0e08\5\u015c\u00af\2\u0e01\u0e02\7\u016e\2\2\u0e02")
        buf.write("\u0e08\5\u015c\u00af\2\u0e03\u0e04\7\u00ad\2\2\u0e04\u0e08")
        buf.write("\5\u015c\u00af\2\u0e05\u0e06\7\u00e7\2\2\u0e06\u0e08\5")
        buf.write("\u015e\u00b0\2\u0e07\u0e00\3\2\2\2\u0e07\u0e01\3\2\2\2")
        buf.write("\u0e07\u0e03\3\2\2\2\u0e07\u0e05\3\2\2\2\u0e08\u015b\3")
        buf.write("\2\2\2\u0e09\u0e0a\5\u015e\u00b0\2\u0e0a\u0e0b\5\u0160")
        buf.write("\u00b1\2\u0e0b\u015d\3\2\2\2\u0e0c\u0e0d\5\u058e\u02c8")
        buf.write("\2\u0e0d\u015f\3\2\2\2\u0e0e\u0e0f\5\u057a\u02be\2\u0e0f")
        buf.write("\u0161\3\2\2\2\u0e10\u0e11\7V\2\2\u0e11\u0e12\7\u016c")
        buf.write("\2\2\u0e12\u0e14\5\u0568\u02b5\2\u0e13\u0e15\5\u0164\u00b3")
        buf.write("\2\u0e14\u0e13\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0e17")
        buf.write("\3\2\2\2\u0e16\u0e18\5\u0168\u00b5\2\u0e17\u0e16\3\2\2")
        buf.write("\2\u0e17\u0e18\3\2\2\2\u0e18\u0e19\3\2\2\2\u0e19\u0e1a")
        buf.write("\7g\2\2\u0e1a\u0e1b\7\u00d6\2\2\u0e1b\u0e1c\7\u019e\2")
        buf.write("\2\u0e1c\u0e1e\5\u0568\u02b5\2\u0e1d\u0e1f\5\u0152\u00aa")
        buf.write("\2\u0e1e\u0e1d\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e34")
        buf.write("\3\2\2\2\u0e20\u0e21\7V\2\2\u0e21\u0e22\7\u016c\2\2\u0e22")
        buf.write("\u0e23\7\u0104\2\2\u0e23\u0e24\7u\2\2\u0e24\u0e25\7\u01ad")
        buf.write("\2\2\u0e25\u0e27\5\u0568\u02b5\2\u0e26\u0e28\5\u0164\u00b3")
        buf.write("\2\u0e27\u0e26\3\2\2\2\u0e27\u0e28\3\2\2\2\u0e28\u0e2a")
        buf.write("\3\2\2\2\u0e29\u0e2b\5\u0168\u00b5\2\u0e2a\u0e29\3\2\2")
        buf.write("\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2d")
        buf.write("\7g\2\2\u0e2d\u0e2e\7\u00d6\2\2\u0e2e\u0e2f\7\u019e\2")
        buf.write("\2\u0e2f\u0e31\5\u0568\u02b5\2\u0e30\u0e32\5\u0152\u00aa")
        buf.write("\2\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u0e34")
        buf.write("\3\2\2\2\u0e33\u0e10\3\2\2\2\u0e33\u0e20\3\2\2\2\u0e34")
        buf.write("\u0163\3\2\2\2\u0e35\u0e36\7\u0189\2\2\u0e36\u0e37\5\u057a")
        buf.write("\u02be\2\u0e37\u0165\3\2\2\2\u0e38\u0e3b\7\u0198\2\2\u0e39")
        buf.write("\u0e3c\5\u057a\u02be\2\u0e3a\u0e3c\7v\2\2\u0e3b\u0e39")
        buf.write("\3\2\2\2\u0e3b\u0e3a\3\2\2\2\u0e3c\u0167\3\2\2\2\u0e3d")
        buf.write("\u0e3e\5\u0166\u00b4\2\u0e3e\u0169\3\2\2\2\u0e3f\u0e40")
        buf.write("\7\u00b2\2\2\u0e40\u0e41\7\u016c\2\2\u0e41\u0e47\5\u0568")
        buf.write("\u02b5\2\u0e42\u0e48\5\u0156\u00ac\2\u0e43\u0e45\5\u0166")
        buf.write("\u00b4\2\u0e44\u0e46\5\u0156\u00ac\2\u0e45\u0e44\3\2\2")
        buf.write("\2\u0e45\u0e46\3\2\2\2\u0e46\u0e48\3\2\2\2\u0e47\u0e42")
        buf.write("\3\2\2\2\u0e47\u0e43\3\2\2\2\u0e48\u016b\3\2\2\2\u0e49")
        buf.write("\u0e4a\7V\2\2\u0e4a\u0e4b\7g\2\2\u0e4b\u0e4c\7\u0084\2")
        buf.write("\2\u0e4c\u0e4d\5\u0564\u02b3\2\u0e4d\u0e4f\7\4\2\2\u0e4e")
        buf.write("\u0e50\5\u00aeX\2\u0e4f\u0e4e\3\2\2\2\u0e4f\u0e50\3\2")
        buf.write("\2\2\u0e50\u0e51\3\2\2\2\u0e51\u0e53\7\5\2\2\u0e52\u0e54")
        buf.write("\5\u00ecw\2\u0e53\u0e52\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54")
        buf.write("\u0e55\3\2\2\2\u0e55\u0e56\7\u016c\2\2\u0e56\u0e58\5\u0568")
        buf.write("\u02b5\2\u0e57\u0e59\5\u0152\u00aa\2\u0e58\u0e57\3\2\2")
        buf.write("\2\u0e58\u0e59\3\2\2\2\u0e59\u0e92\3\2\2\2\u0e5a\u0e5b")
        buf.write("\7V\2\2\u0e5b\u0e5c\7g\2\2\u0e5c\u0e5d\7\u0084\2\2\u0e5d")
        buf.write("\u0e5e\7\u0104\2\2\u0e5e\u0e5f\7u\2\2\u0e5f\u0e60\7\u01ad")
        buf.write("\2\2\u0e60\u0e61\5\u0564\u02b3\2\u0e61\u0e63\7\4\2\2\u0e62")
        buf.write("\u0e64\5\u00aeX\2\u0e63\u0e62\3\2\2\2\u0e63\u0e64\3\2")
        buf.write("\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e67\7\5\2\2\u0e66\u0e68")
        buf.write("\5\u00ecw\2\u0e67\u0e66\3\2\2\2\u0e67\u0e68\3\2\2\2\u0e68")
        buf.write("\u0e69\3\2\2\2\u0e69\u0e6a\7\u016c\2\2\u0e6a\u0e6c\5\u0568")
        buf.write("\u02b5\2\u0e6b\u0e6d\5\u0152\u00aa\2\u0e6c\u0e6b\3\2\2")
        buf.write("\2\u0e6c\u0e6d\3\2\2\2\u0e6d\u0e92\3\2\2\2\u0e6e\u0e6f")
        buf.write("\7V\2\2\u0e6f\u0e70\7g\2\2\u0e70\u0e71\7\u0084\2\2\u0e71")
        buf.write("\u0e72\5\u0564\u02b3\2\u0e72\u0e73\7\u013e\2\2\u0e73\u0e74")
        buf.write("\7\u0134\2\2\u0e74\u0e76\5\u0564\u02b3\2\u0e75\u0e77\5")
        buf.write("\u00b0Y\2\u0e76\u0e75\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77")
        buf.write("\u0e78\3\2\2\2\u0e78\u0e79\5~@\2\u0e79\u0e7a\7\u016c\2")
        buf.write("\2\u0e7a\u0e7c\5\u0568\u02b5\2\u0e7b\u0e7d\5\u0152\u00aa")
        buf.write("\2\u0e7c\u0e7b\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e92")
        buf.write("\3\2\2\2\u0e7e\u0e7f\7V\2\2\u0e7f\u0e80\7g\2\2\u0e80\u0e81")
        buf.write("\7\u0084\2\2\u0e81\u0e82\7\u0104\2\2\u0e82\u0e83\7u\2")
        buf.write("\2\u0e83\u0e84\7\u01ad\2\2\u0e84\u0e85\5\u0564\u02b3\2")
        buf.write("\u0e85\u0e86\7\u013e\2\2\u0e86\u0e87\7\u0134\2\2\u0e87")
        buf.write("\u0e89\5\u0564\u02b3\2\u0e88\u0e8a\5\u00b0Y\2\u0e89\u0e88")
        buf.write("\3\2\2\2\u0e89\u0e8a\3\2\2\2\u0e8a\u0e8b\3\2\2\2\u0e8b")
        buf.write("\u0e8c\5~@\2\u0e8c\u0e8d\7\u016c\2\2\u0e8d\u0e8f\5\u0568")
        buf.write("\u02b5\2\u0e8e\u0e90\5\u0152\u00aa\2\u0e8f\u0e8e\3\2\2")
        buf.write("\2\u0e8f\u0e90\3\2\2\2\u0e90\u0e92\3\2\2\2\u0e91\u0e49")
        buf.write("\3\2\2\2\u0e91\u0e5a\3\2\2\2\u0e91\u0e6e\3\2\2\2\u0e91")
        buf.write("\u0e7e\3\2\2\2\u0e92\u016d\3\2\2\2\u0e93\u0e94\7\u01e4")
        buf.write("\2\2\u0e94\u0e95\7g\2\2\u0e95\u0e96\7\u0164\2\2\u0e96")
        buf.write("\u0e98\5\u0568\u02b5\2\u0e97\u0e99\5\u0172\u00ba\2\u0e98")
        buf.write("\u0e97\3\2\2\2\u0e98\u0e99\3\2\2\2\u0e99\u0e9a\3\2\2\2")
        buf.write("\u0e9a\u0e9b\7h\2\2\u0e9b\u0e9c\7\u016c\2\2\u0e9c\u0e9d")
        buf.write("\5\u0568\u02b5\2\u0e9d\u0e9e\7o\2\2\u0e9e\u0ea0\5\u0568")
        buf.write("\u02b5\2\u0e9f\u0ea1\5\u0152\u00aa\2\u0ea0\u0e9f\3\2\2")
        buf.write("\2\u0ea0\u0ea1\3\2\2\2\u0ea1\u016f\3\2\2\2\u0ea2\u0ea3")
        buf.write("\7r\2\2\u0ea3\u0ea6\7\u0086\2\2\u0ea4\u0ea6\7c\2\2\u0ea5")
        buf.write("\u0ea2\3\2\2\2\u0ea5\u0ea4\3\2\2\2\u0ea6\u0171\3\2\2\2")
        buf.write("\u0ea7\u0ea8\5\u0170\u00b9\2\u0ea8\u0ea9\7\4\2\2\u0ea9")
        buf.write("\u0eaa\5\u0434\u021b\2\u0eaa\u0eab\7\5\2\2\u0eab\u0173")
        buf.write("\3\2\2\2\u0eac\u0ead\7V\2\2\u0ead\u0eae\7\u008b\2\2\u0eae")
        buf.write("\u0eaf\7\u0120\2\2\u0eaf\u0eb0\7f\2\2\u0eb0\u0eb1\5\u0176")
        buf.write("\u00bc\2\u0eb1\u0eb2\7\u016c\2\2\u0eb2\u0eb4\5\u0568\u02b5")
        buf.write("\2\u0eb3\u0eb5\5\u0152\u00aa\2\u0eb4\u0eb3\3\2\2\2\u0eb4")
        buf.write("\u0eb5\3\2\2\2\u0eb5\u0ec4\3\2\2\2\u0eb6\u0eb7\7V\2\2")
        buf.write("\u0eb7\u0eb8\7\u008b\2\2\u0eb8\u0eb9\7\u0120\2\2\u0eb9")
        buf.write("\u0eba\7\u0104\2\2\u0eba\u0ebb\7u\2\2\u0ebb\u0ebc\7\u01ad")
        buf.write("\2\2\u0ebc\u0ebd\7f\2\2\u0ebd\u0ebe\5\u0176\u00bc\2\u0ebe")
        buf.write("\u0ebf\7\u016c\2\2\u0ebf\u0ec1\5\u0568\u02b5\2\u0ec0\u0ec2")
        buf.write("\5\u0152\u00aa\2\u0ec1\u0ec0\3\2\2\2\u0ec1\u0ec2\3\2\2")
        buf.write("\2\u0ec2\u0ec4\3\2\2\2\u0ec3\u0eac\3\2\2\2\u0ec3\u0eb6")
        buf.write("\3\2\2\2\u0ec4\u0175\3\2\2\2\u0ec5\u0ec8\5\u0584\u02c3")
        buf.write("\2\u0ec6\u0ec8\7\u008b\2\2\u0ec7\u0ec5\3\2\2\2\u0ec7\u0ec6")
        buf.write("\3\2\2\2\u0ec8\u0177\3\2\2\2\u0ec9\u0eca\7\u00e7\2\2\u0eca")
        buf.write("\u0ecb\7\u008b\2\2\u0ecb\u0ecc\7\u0120\2\2\u0ecc\u0ecd")
        buf.write("\7f\2\2\u0ecd\u0ece\5\u0176\u00bc\2\u0ece\u0ecf\7\u016c")
        buf.write("\2\2\u0ecf\u0ed0\5\u0568\u02b5\2\u0ed0\u0edc\3\2\2\2\u0ed1")
        buf.write("\u0ed2\7\u00e7\2\2\u0ed2\u0ed3\7\u008b\2\2\u0ed3\u0ed4")
        buf.write("\7\u0120\2\2\u0ed4\u0ed5\7\u0104\2\2\u0ed5\u0ed6\7\u01ad")
        buf.write("\2\2\u0ed6\u0ed7\7f\2\2\u0ed7\u0ed8\5\u0176\u00bc\2\u0ed8")
        buf.write("\u0ed9\7\u016c\2\2\u0ed9\u0eda\5\u0568\u02b5\2\u0eda\u0edc")
        buf.write("\3\2\2\2\u0edb\u0ec9\3\2\2\2\u0edb\u0ed1\3\2\2\2\u0edc")
        buf.write("\u0179\3\2\2\2\u0edd\u0ede\7\u00b2\2\2\u0ede\u0edf\7\u008b")
        buf.write("\2\2\u0edf\u0ee0\7\u0120\2\2\u0ee0\u0ee1\7f\2\2\u0ee1")
        buf.write("\u0ee2\5\u0176\u00bc\2\u0ee2\u0ee3\7\u016c\2\2\u0ee3\u0ee4")
        buf.write("\5\u0568\u02b5\2\u0ee4\u0ee5\5\u0156\u00ac\2\u0ee5\u017b")
        buf.write("\3\2\2\2\u0ee6\u0ee7\7V\2\2\u0ee7\u0ee8\7\u01e5\2\2\u0ee8")
        buf.write("\u0ee9\5\u0568\u02b5\2\u0ee9\u0eea\7x\2\2\u0eea\u0eec")
        buf.write("\5\u0564\u02b3\2\u0eeb\u0eed\5\u0188\u00c5\2\u0eec\u0eeb")
        buf.write("\3\2\2\2\u0eec\u0eed\3\2\2\2\u0eed\u0eef\3\2\2\2\u0eee")
        buf.write("\u0ef0\5\u018a\u00c6\2\u0eef\u0eee\3\2\2\2\u0eef\u0ef0")
        buf.write("\3\2\2\2\u0ef0\u0ef2\3\2\2\2\u0ef1\u0ef3\5\u0184\u00c3")
        buf.write("\2\u0ef2\u0ef1\3\2\2\2\u0ef2\u0ef3\3\2\2\2\u0ef3\u0ef5")
        buf.write("\3\2\2\2\u0ef4\u0ef6\5\u0180\u00c1\2\u0ef5\u0ef4\3\2\2")
        buf.write("\2\u0ef5\u0ef6\3\2\2\2\u0ef6\u0ef8\3\2\2\2\u0ef7\u0ef9")
        buf.write("\5\u0182\u00c2\2\u0ef8\u0ef7\3\2\2\2\u0ef8\u0ef9\3\2\2")
        buf.write("\2\u0ef9\u017d\3\2\2\2\u0efa\u0efb\7\u00b2\2\2\u0efb\u0efc")
        buf.write("\7\u01e5\2\2\u0efc\u0efd\5\u0568\u02b5\2\u0efd\u0efe\7")
        buf.write("x\2\2\u0efe\u0f00\5\u0564\u02b3\2\u0eff\u0f01\5\u0186")
        buf.write("\u00c4\2\u0f00\u0eff\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01")
        buf.write("\u0f03\3\2\2\2\u0f02\u0f04\5\u0180\u00c1\2\u0f03\u0f02")
        buf.write("\3\2\2\2\u0f03\u0f04\3\2\2\2\u0f04\u0f06\3\2\2\2\u0f05")
        buf.write("\u0f07\5\u0182\u00c2\2\u0f06\u0f05\3\2\2\2\u0f06\u0f07")
        buf.write("\3\2\2\2\u0f07\u017f\3\2\2\2\u0f08\u0f09\7\u008c\2\2\u0f09")
        buf.write("\u0f0a\7\4\2\2\u0f0a\u0f0b\5\u048c\u0247\2\u0f0b\u0f0c")
        buf.write("\7\5\2\2\u0f0c\u0181\3\2\2\2\u0f0d\u0f0e\7\u0091\2\2\u0f0e")
        buf.write("\u0f0f\7R\2\2\u0f0f\u0f10\7\4\2\2\u0f10\u0f11\5\u048c")
        buf.write("\u0247\2\u0f11\u0f12\7\5\2\2\u0f12\u0183\3\2\2\2\u0f13")
        buf.write("\u0f14\7\u0086\2\2\u0f14\u0f15\5\u0586\u02c4\2\u0f15\u0185")
        buf.write("\3\2\2\2\u0f16\u0f17\7\u0086\2\2\u0f17\u0f18\5\u0586\u02c4")
        buf.write("\2\u0f18\u0187\3\2\2\2\u0f19\u0f1a\7L\2\2\u0f1a\u0f1b")
        buf.write("\5\u059e\u02d0\2\u0f1b\u0189\3\2\2\2\u0f1c\u0f1d\7f\2")
        buf.write("\2\u0f1d\u0f1e\5\u018c\u00c7\2\u0f1e\u018b\3\2\2\2\u0f1f")
        buf.write("\u0f20\t\24\2\2\u0f20\u018d\3\2\2\2\u0f21\u0f22\7V\2\2")
        buf.write("\u0f22\u0f23\7\u00ab\2\2\u0f23\u0f24\7\u01e6\2\2\u0f24")
        buf.write("\u0f25\5\u0568\u02b5\2\u0f25\u0f26\7\u0189\2\2\u0f26\u0f27")
        buf.write("\5\u0190\u00c9\2\u0f27\u0f28\7\u00ff\2\2\u0f28\u0f29\5")
        buf.write("\u012a\u0096\2\u0f29\u018f\3\2\2\2\u0f2a\u0f2b\t\25\2")
        buf.write("\2\u0f2b\u0191\3\2\2\2\u0f2c\u0f2d\7V\2\2\u0f2d\u0f2e")
        buf.write("\7\u0186\2\2\u0f2e\u0f2f\5\u0568\u02b5\2\u0f2f\u0f30\5")
        buf.write("\u0194\u00cb\2\u0f30\u0f31\5\u0196\u00cc\2\u0f31\u0f32")
        buf.write("\7x\2\2\u0f32\u0f34\5\u0564\u02b3\2\u0f33\u0f35\5\u019a")
        buf.write("\u00ce\2\u0f34\u0f33\3\2\2\2\u0f34\u0f35\3\2\2\2\u0f35")
        buf.write("\u0f37\3\2\2\2\u0f36\u0f38\5\u01a6\u00d4\2\u0f37\u0f36")
        buf.write("\3\2\2\2\u0f37\u0f38\3\2\2\2\u0f38\u0f3a\3\2\2\2\u0f39")
        buf.write("\u0f3b\5\u01ac\u00d7\2\u0f3a\u0f39\3\2\2\2\u0f3a\u0f3b")
        buf.write("\3\2\2\2\u0f3b\u0f3c\3\2\2\2\u0f3c\u0f3d\7\u00f2\2\2\u0f3d")
        buf.write("\u0f3e\5\u01ae\u00d8\2\u0f3e\u0f3f\5\u056e\u02b8\2\u0f3f")
        buf.write("\u0f40\7\4\2\2\u0f40\u0f41\5\u01b0\u00d9\2\u0f41\u0f42")
        buf.write("\7\5\2\2\u0f42\u0f5d\3\2\2\2\u0f43\u0f44\7V\2\2\u0f44")
        buf.write("\u0f45\7U\2\2\u0f45\u0f46\7\u0186\2\2\u0f46\u0f47\5\u0568")
        buf.write("\u02b5\2\u0f47\u0f48\7\u00af\2\2\u0f48\u0f49\5\u0196\u00cc")
        buf.write("\2\u0f49\u0f4a\7x\2\2\u0f4a\u0f4c\5\u0564\u02b3\2\u0f4b")
        buf.write("\u0f4d\5\u01b4\u00db\2\u0f4c\u0f4b\3\2\2\2\u0f4c\u0f4d")
        buf.write("\3\2\2\2\u0f4d\u0f4e\3\2\2\2\u0f4e\u0f4f\5\u01b6\u00dc")
        buf.write("\2\u0f4f\u0f50\7f\2\2\u0f50\u0f51\7\u00e8\2\2\u0f51\u0f53")
        buf.write("\7\u01bf\2\2\u0f52\u0f54\5\u01ac\u00d7\2\u0f53\u0f52\3")
        buf.write("\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f55\3\2\2\2\u0f55\u0f56")
        buf.write("\7\u00f2\2\2\u0f56\u0f57\5\u01ae\u00d8\2\u0f57\u0f58\5")
        buf.write("\u056e\u02b8\2\u0f58\u0f59\7\4\2\2\u0f59\u0f5a\5\u01b0")
        buf.write("\u00d9\2\u0f5a\u0f5b\7\5\2\2\u0f5b\u0f5d\3\2\2\2\u0f5c")
        buf.write("\u0f2c\3\2\2\2\u0f5c\u0f43\3\2\2\2\u0f5d\u0193\3\2\2\2")
        buf.write("\u0f5e\u0f63\7\u00b9\2\2\u0f5f\u0f63\7\u00af\2\2\u0f60")
        buf.write("\u0f61\7\u0111\2\2\u0f61\u0f63\7\u0134\2\2\u0f62\u0f5e")
        buf.write("\3\2\2\2\u0f62\u0f5f\3\2\2\2\u0f62\u0f60\3\2\2\2\u0f63")
        buf.write("\u0195\3\2\2\2\u0f64\u0f69\5\u0198\u00cd\2\u0f65\u0f66")
        buf.write("\7z\2\2\u0f66\u0f68\5\u0198\u00cd\2\u0f67\u0f65\3\2\2")
        buf.write("\2\u0f68\u0f6b\3\2\2\2\u0f69\u0f67\3\2\2\2\u0f69\u0f6a")
        buf.write("\3\2\2\2\u0f6a\u0197\3\2\2\2\u0f6b\u0f69\3\2\2\2\u0f6c")
        buf.write("\u0f74\7\u0110\2\2\u0f6d\u0f74\7\u00de\2\2\u0f6e\u0f74")
        buf.write("\7\u0192\2\2\u0f6f\u0f70\7\u0192\2\2\u0f70\u0f71\7\u0134")
        buf.write("\2\2\u0f71\u0f74\5\u00d6l\2\u0f72\u0f74\7\u0187\2\2\u0f73")
        buf.write("\u0f6c\3\2\2\2\u0f73\u0f6d\3\2\2\2\u0f73\u0f6e\3\2\2\2")
        buf.write("\u0f73\u0f6f\3\2\2\2\u0f73\u0f72\3\2\2\2\u0f74\u0199\3")
        buf.write("\2\2\2\u0f75\u0f76\7\u01e7\2\2\u0f76\u0f77\5\u019c\u00cf")
        buf.write("\2\u0f77\u019b\3\2\2\2\u0f78\u0f7a\5\u019e\u00d0\2\u0f79")
        buf.write("\u0f78\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0f79\3\2\2\2")
        buf.write("\u0f7b\u0f7c\3\2\2\2\u0f7c\u019d\3\2\2\2\u0f7d\u0f7e\5")
        buf.write("\u01a0\u00d1\2\u0f7e\u0f80\5\u01a2\u00d2\2\u0f7f\u0f81")
        buf.write("\5\u0340\u01a1\2\u0f80\u0f7f\3\2\2\2\u0f80\u0f81\3\2\2")
        buf.write("\2\u0f81\u0f82\3\2\2\2\u0f82\u0f83\5\u01a4\u00d3\2\u0f83")
        buf.write("\u019f\3\2\2\2\u0f84\u0f85\t\26\2\2\u0f85\u01a1\3\2\2")
        buf.write("\2\u0f86\u0f87\t\27\2\2\u0f87\u01a3\3\2\2\2\u0f88\u0f89")
        buf.write("\5\u0588\u02c5\2\u0f89\u01a5\3\2\2\2\u0f8a\u0f8c\7f\2")
        buf.write("\2\u0f8b\u0f8d\5\u01a8\u00d5\2\u0f8c\u0f8b\3\2\2\2\u0f8c")
        buf.write("\u0f8d\3\2\2\2\u0f8d\u0f8e\3\2\2\2\u0f8e\u0f8f\5\u01aa")
        buf.write("\u00d6\2\u0f8f\u01a7\3\2\2\2\u0f90\u0f91\7\u00e8\2\2\u0f91")
        buf.write("\u01a9\3\2\2\2\u0f92\u0f93\t\30\2\2\u0f93\u01ab\3\2\2")
        buf.write("\2\u0f94\u0f95\7\u008e\2\2\u0f95\u0f96\7\4\2\2\u0f96\u0f97")
        buf.write("\5\u048c\u0247\2\u0f97\u0f98\7\5\2\2\u0f98\u01ad\3\2\2")
        buf.write("\2\u0f99\u0f9a\t\31\2\2\u0f9a\u01af\3\2\2\2\u0f9b\u0f9e")
        buf.write("\5\u01b2\u00da\2\u0f9c\u0f9e\3\2\2\2\u0f9d\u0f9b\3\2\2")
        buf.write("\2\u0f9d\u0f9c\3\2\2\2\u0f9e\u0fa3\3\2\2\2\u0f9f\u0fa0")
        buf.write("\7\b\2\2\u0fa0\u0fa2\5\u01b2\u00da\2\u0fa1\u0f9f\3\2\2")
        buf.write("\2\u0fa2\u0fa5\3\2\2\2\u0fa3\u0fa1\3\2\2\2\u0fa3\u0fa4")
        buf.write("\3\2\2\2\u0fa4\u01b1\3\2\2\2\u0fa5\u0fa3\3\2\2\2\u0fa6")
        buf.write("\u0fab\5\u0578\u02bd\2\u0fa7\u0fab\5\u0576\u02bc\2\u0fa8")
        buf.write("\u0fab\5\u057a\u02be\2\u0fa9\u0fab\5\u058e\u02c8\2\u0faa")
        buf.write("\u0fa6\3\2\2\2\u0faa\u0fa7\3\2\2\2\u0faa\u0fa8\3\2\2\2")
        buf.write("\u0faa\u0fa9\3\2\2\2\u0fab\u01b3\3\2\2\2\u0fac\u0fad\7")
        buf.write("h\2\2\u0fad\u0fae\5\u0564\u02b3\2\u0fae\u01b5\3\2\2\2")
        buf.write("\u0faf\u0fb1\5\u01b8\u00dd\2\u0fb0\u0faf\3\2\2\2\u0fb1")
        buf.write("\u0fb4\3\2\2\2\u0fb2\u0fb0\3\2\2\2\u0fb2\u0fb3\3\2\2\2")
        buf.write("\u0fb3\u01b7\3\2\2\2\u0fb4\u0fb2\3\2\2\2\u0fb5\u0fb6\7")
        buf.write("u\2\2\u0fb6\u0fc1\7^\2\2\u0fb7\u0fc1\7^\2\2\u0fb8\u0fb9")
        buf.write("\7m\2\2\u0fb9\u0fc1\7\u0105\2\2\u0fba\u0fbb\7m\2\2\u0fbb")
        buf.write("\u0fc1\7\u00dc\2\2\u0fbc\u0fbd\7u\2\2\u0fbd\u0fc1\7\u0194")
        buf.write("\2\2\u0fbe\u0fbf\7\u012e\2\2\u0fbf\u0fc1\7\u010c\2\2\u0fc0")
        buf.write("\u0fb5\3\2\2\2\u0fc0\u0fb7\3\2\2\2\u0fc0\u0fb8\3\2\2\2")
        buf.write("\u0fc0\u0fba\3\2\2\2\u0fc0\u0fbc\3\2\2\2\u0fc0\u0fbe\3")
        buf.write("\2\2\2\u0fc1\u01b9\3\2\2\2\u0fc2\u0fc3\7V\2\2\u0fc3\u0fc4")
        buf.write("\7\u00ee\2\2\u0fc4\u0fc5\7\u0186\2\2\u0fc5\u0fc6\5\u0568")
        buf.write("\u02b5\2\u0fc6\u0fc7\7x\2\2\u0fc7\u0fc8\5\u058e\u02c8")
        buf.write("\2\u0fc8\u0fc9\7\u00f2\2\2\u0fc9\u0fca\5\u01ae\u00d8\2")
        buf.write("\u0fca\u0fcb\5\u056e\u02b8\2\u0fcb\u0fcc\7\4\2\2\u0fcc")
        buf.write("\u0fcd\7\5\2\2\u0fcd\u0fdd\3\2\2\2\u0fce\u0fcf\7V\2\2")
        buf.write("\u0fcf\u0fd0\7\u00ee\2\2\u0fd0\u0fd1\7\u0186\2\2\u0fd1")
        buf.write("\u0fd2\5\u0568\u02b5\2\u0fd2\u0fd3\7x\2\2\u0fd3\u0fd4")
        buf.write("\5\u058e\u02c8\2\u0fd4\u0fd5\7\u008e\2\2\u0fd5\u0fd6\5")
        buf.write("\u01bc\u00df\2\u0fd6\u0fd7\7\u00f2\2\2\u0fd7\u0fd8\5\u01ae")
        buf.write("\u00d8\2\u0fd8\u0fd9\5\u056e\u02b8\2\u0fd9\u0fda\7\4\2")
        buf.write("\2\u0fda\u0fdb\7\5\2\2\u0fdb\u0fdd\3\2\2\2\u0fdc\u0fc2")
        buf.write("\3\2\2\2\u0fdc\u0fce\3\2\2\2\u0fdd\u01bb\3\2\2\2\u0fde")
        buf.write("\u0fe3\5\u01be\u00e0\2\u0fdf\u0fe0\7I\2\2\u0fe0\u0fe2")
        buf.write("\5\u01be\u00e0\2\u0fe1\u0fdf\3\2\2\2\u0fe2\u0fe5\3\2\2")
        buf.write("\2\u0fe3\u0fe1\3\2\2\2\u0fe3\u0fe4\3\2\2\2\u0fe4\u01bd")
        buf.write("\3\2\2\2\u0fe5\u0fe3\3\2\2\2\u0fe6\u0fe7\5\u0588\u02c5")
        buf.write("\2\u0fe7\u0fe8\7l\2\2\u0fe8\u0fe9\7\4\2\2\u0fe9\u0fea")
        buf.write("\5\u01c0\u00e1\2\u0fea\u0feb\7\5\2\2\u0feb\u01bf\3\2\2")
        buf.write("\2\u0fec\u0ff1\5\u057a\u02be\2\u0fed\u0fee\7\b\2\2\u0fee")
        buf.write("\u0ff0\5\u057a\u02be\2\u0fef\u0fed\3\2\2\2\u0ff0\u0ff3")
        buf.write("\3\2\2\2\u0ff1\u0fef\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2")
        buf.write("\u01c1\3\2\2\2\u0ff3\u0ff1\3\2\2\2\u0ff4\u0ff5\7\u00b2")
        buf.write("\2\2\u0ff5\u0ff6\7\u00ee\2\2\u0ff6\u0ff7\7\u0186\2\2\u0ff7")
        buf.write("\u0ff8\5\u0568\u02b5\2\u0ff8\u0ff9\5\u01c4\u00e3\2\u0ff9")
        buf.write("\u01c3\3\2\2\2\u0ffa\u1001\7\u00e9\2\2\u0ffb\u0ffc\7\u00e9")
        buf.write("\2\2\u0ffc\u1001\7\u0159\2\2\u0ffd\u0ffe\7\u00e9\2\2\u0ffe")
        buf.write("\u1001\7\u00b3\2\2\u0fff\u1001\7\u00e2\2\2\u1000\u0ffa")
        buf.write("\3\2\2\2\u1000\u0ffb\3\2\2\2\u1000\u0ffd\3\2\2\2\u1000")
        buf.write("\u0fff\3\2\2\2\u1001\u01c5\3\2\2\2\u1002\u1003\7V\2\2")
        buf.write("\u1003\u1004\7\u00b4\2\2\u1004\u1005\5\u020a\u0106\2\u1005")
        buf.write("\u1006\7R\2\2\u1006\u1007\7\4\2\2\u1007\u1008\5\u048c")
        buf.write("\u0247\2\u1008\u1009\7\5\2\2\u1009\u100a\5\u01b6\u00dc")
        buf.write("\2\u100a\u01c7\3\2\2\2\u100b\u100d\7V\2\2\u100c\u100e")
        buf.write("\5\u026a\u0136\2\u100d\u100c\3\2\2\2\u100d\u100e\3\2\2")
        buf.write("\2\u100e\u100f\3\2\2\2\u100f\u1010\7\u00b0\2\2\u1010\u1011")
        buf.write("\5\u056e\u02b8\2\u1011\u1012\5\u0286\u0144\2\u1012\u1013")
        buf.write("\5\u01ca\u00e6\2\u1013\u107e\3\2\2\2\u1014\u1016\7V\2")
        buf.write("\2\u1015\u1017\5\u026a\u0136\2\u1016\u1015\3\2\2\2\u1016")
        buf.write("\u1017\3\2\2\2\u1017\u1018\3\2\2\2\u1018\u1019\7\u00b0")
        buf.write("\2\2\u1019\u101a\5\u056e\u02b8\2\u101a\u101b\5\u01d2\u00ea")
        buf.write("\2\u101b\u107e\3\2\2\2\u101c\u101d\7V\2\2\u101d\u101e")
        buf.write("\7\u0137\2\2\u101e\u101f\5\u02ac\u0157\2\u101f\u1020\5")
        buf.write("\u01ca\u00e6\2\u1020\u107e\3\2\2\2\u1021\u1022\7V\2\2")
        buf.write("\u1022\u1023\7\u0189\2\2\u1023\u1024\5\u020a\u0106\2\u1024")
        buf.write("\u1025\5\u01ca\u00e6\2\u1025\u107e\3\2\2\2\u1026\u1027")
        buf.write("\7V\2\2\u1027\u1028\7\u0189\2\2\u1028\u107e\5\u020a\u0106")
        buf.write("\2\u1029\u102a\7V\2\2\u102a\u102b\7\u0189\2\2\u102b\u102c")
        buf.write("\5\u020a\u0106\2\u102c\u102d\7L\2\2\u102d\u102f\7\4\2")
        buf.write("\2\u102e\u1030\5\u044a\u0226\2\u102f\u102e\3\2\2\2\u102f")
        buf.write("\u1030\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u1032\7\5\2\2")
        buf.write("\u1032\u107e\3\2\2\2\u1033\u1034\7V\2\2\u1034\u1035\7")
        buf.write("\u0189\2\2\u1035\u1036\5\u020a\u0106\2\u1036\u1037\7L")
        buf.write("\2\2\u1037\u1038\7\u00ec\2\2\u1038\u103a\7\4\2\2\u1039")
        buf.write("\u103b\5\u01d8\u00ed\2\u103a\u1039\3\2\2\2\u103a\u103b")
        buf.write("\3\2\2\2\u103b\u103c\3\2\2\2\u103c\u103d\7\5\2\2\u103d")
        buf.write("\u107e\3\2\2\2\u103e\u103f\7V\2\2\u103f\u1040\7\u0189")
        buf.write("\2\2\u1040\u1041\5\u020a\u0106\2\u1041\u1042\7L\2\2\u1042")
        buf.write("\u1043\7\u014c\2\2\u1043\u1044\5\u01ca\u00e6\2\u1044\u107e")
        buf.write("\3\2\2\2\u1045\u1046\7V\2\2\u1046\u1047\7\u0184\2\2\u1047")
        buf.write("\u1048\7\u0166\2\2\u1048\u1049\7\u013c\2\2\u1049\u104a")
        buf.write("\5\u020a\u0106\2\u104a\u104b\5\u01ca\u00e6\2\u104b\u107e")
        buf.write("\3\2\2\2\u104c\u104d\7V\2\2\u104d\u104e\7\u0184\2\2\u104e")
        buf.write("\u104f\7\u0166\2\2\u104f\u1050\7\u00e1\2\2\u1050\u1051")
        buf.write("\5\u020a\u0106\2\u1051\u1052\5\u01ca\u00e6\2\u1052\u107e")
        buf.write("\3\2\2\2\u1053\u1054\7V\2\2\u1054\u1055\7\u0184\2\2\u1055")
        buf.write("\u1056\7\u0166\2\2\u1056\u1057\7\u0182\2\2\u1057\u1058")
        buf.write("\5\u020a\u0106\2\u1058\u1059\5\u01ca\u00e6\2\u1059\u107e")
        buf.write("\3\2\2\2\u105a\u105b\7V\2\2\u105b\u105c\7\u0184\2\2\u105c")
        buf.write("\u105d\7\u0166\2\2\u105d\u105e\7\u00cb\2\2\u105e\u105f")
        buf.write("\5\u020a\u0106\2\u105f\u1060\5\u01ca\u00e6\2\u1060\u107e")
        buf.write("\3\2\2\2\u1061\u1062\7V\2\2\u1062\u1063\7\u0094\2\2\u1063")
        buf.write("\u1064\5\u020a\u0106\2\u1064\u1065\5\u01ca\u00e6\2\u1065")
        buf.write("\u107e\3\2\2\2\u1066\u1067\7V\2\2\u1067\u1068\7\u0094")
        buf.write("\2\2\u1068\u1069\7\u0104\2\2\u1069\u106a\7u\2\2\u106a")
        buf.write("\u106b\7\u01ad\2\2\u106b\u106c\5\u020a\u0106\2\u106c\u106d")
        buf.write("\5\u01ca\u00e6\2\u106d\u107e\3\2\2\2\u106e\u106f\7V\2")
        buf.write("\2\u106f\u1070\7\u0094\2\2\u1070\u1071\5\u020a\u0106\2")
        buf.write("\u1071\u1072\7h\2\2\u1072\u1073\5\u020a\u0106\2\u1073")
        buf.write("\u107e\3\2\2\2\u1074\u1075\7V\2\2\u1075\u1076\7\u0094")
        buf.write("\2\2\u1076\u1077\7\u0104\2\2\u1077\u1078\7u\2\2\u1078")
        buf.write("\u1079\7\u01ad\2\2\u1079\u107a\5\u020a\u0106\2\u107a\u107b")
        buf.write("\7h\2\2\u107b\u107c\5\u020a\u0106\2\u107c\u107e\3\2\2")
        buf.write("\2\u107d\u100b\3\2\2\2\u107d\u1014\3\2\2\2\u107d\u101c")
        buf.write("\3\2\2\2\u107d\u1021\3\2\2\2\u107d\u1026\3\2\2\2\u107d")
        buf.write("\u1029\3\2\2\2\u107d\u1033\3\2\2\2\u107d\u103e\3\2\2\2")
        buf.write("\u107d\u1045\3\2\2\2\u107d\u104c\3\2\2\2\u107d\u1053\3")
        buf.write("\2\2\2\u107d\u105a\3\2\2\2\u107d\u1061\3\2\2\2\u107d\u1066")
        buf.write("\3\2\2\2\u107d\u106e\3\2\2\2\u107d\u1074\3\2\2\2\u107e")
        buf.write("\u01c9\3\2\2\2\u107f\u1080\7\4\2\2\u1080\u1081\5\u01cc")
        buf.write("\u00e7\2\u1081\u1082\7\5\2\2\u1082\u01cb\3\2\2\2\u1083")
        buf.write("\u1088\5\u01ce\u00e8\2\u1084\u1085\7\b\2\2\u1085\u1087")
        buf.write("\5\u01ce\u00e8\2\u1086\u1084\3\2\2\2\u1087\u108a\3\2\2")
        buf.write("\2\u1088\u1086\3\2\2\2\u1088\u1089\3\2\2\2\u1089\u01cd")
        buf.write("\3\2\2\2\u108a\u1088\3\2\2\2\u108b\u108e\5\u058e\u02c8")
        buf.write("\2\u108c\u108d\7\f\2\2\u108d\u108f\5\u01d0\u00e9\2\u108e")
        buf.write("\u108c\3\2\2\2\u108e\u108f\3\2\2\2\u108f\u01cf\3\2\2\2")
        buf.write("\u1090\u1097\5\u0280\u0141\2\u1091\u1097\5\u0598\u02cd")
        buf.write("\2\u1092\u1097\5\u04fe\u0280\2\u1093\u1097\5\u0122\u0092")
        buf.write("\2\u1094\u1097\5\u057a\u02be\2\u1095\u1097\7\u01b8\2\2")
        buf.write("\u1096\u1090\3\2\2\2\u1096\u1091\3\2\2\2\u1096\u1092\3")
        buf.write("\2\2\2\u1096\u1093\3\2\2\2\u1096\u1094\3\2\2\2\u1096\u1095")
        buf.write("\3\2\2\2\u1097\u01d1\3\2\2\2\u1098\u1099\7\4\2\2\u1099")
        buf.write("\u109a\5\u01d4\u00eb\2\u109a\u109b\7\5\2\2\u109b\u01d3")
        buf.write("\3\2\2\2\u109c\u10a1\5\u01d6\u00ec\2\u109d\u109e\7\b\2")
        buf.write("\2\u109e\u10a0\5\u01d6\u00ec\2\u109f\u109d\3\2\2\2\u10a0")
        buf.write("\u10a3\3\2\2\2\u10a1\u109f\3\2\2\2\u10a1\u10a2\3\2\2\2")
        buf.write("\u10a2\u01d5\3\2\2\2\u10a3\u10a1\3\2\2\2\u10a4\u10a5\5")
        buf.write("\u059e\u02d0\2\u10a5\u10a6\7\f\2\2\u10a6\u10a7\5\u01d0")
        buf.write("\u00e9\2\u10a7\u01d7\3\2\2\2\u10a8\u10a9\5\u01da\u00ee")
        buf.write("\2\u10a9\u01d9\3\2\2\2\u10aa\u10af\5\u057a\u02be\2\u10ab")
        buf.write("\u10ac\7\b\2\2\u10ac\u10ae\5\u057a\u02be\2\u10ad\u10ab")
        buf.write("\3\2\2\2\u10ae\u10b1\3\2\2\2\u10af\u10ad\3\2\2\2\u10af")
        buf.write("\u10b0\3\2\2\2\u10b0\u01db\3\2\2\2\u10b1\u10af\3\2\2\2")
        buf.write("\u10b2\u10b3\7\u00b2\2\2\u10b3\u10b4\7\u0189\2\2\u10b4")
        buf.write("\u10b5\5\u020a\u0106\2\u10b5\u10b6\7\u00ad\2\2\u10b6\u10b8")
        buf.write("\7\u01ea\2\2\u10b7\u10b9\5\u01de\u00f0\2\u10b8\u10b7\3")
        buf.write("\2\2\2\u10b8\u10b9\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba\u10bb")
        buf.write("\5\u057a\u02be\2\u10bb\u10de\3\2\2\2\u10bc\u10bd\7\u00b2")
        buf.write("\2\2\u10bd\u10be\7\u0189\2\2\u10be\u10bf\5\u020a\u0106")
        buf.write("\2\u10bf\u10c0\7\u00ad\2\2\u10c0\u10c2\7\u01ea\2\2\u10c1")
        buf.write("\u10c3\5\u01de\u00f0\2\u10c2\u10c1\3\2\2\2\u10c2\u10c3")
        buf.write("\3\2\2\2\u10c3\u10c4\3\2\2\2\u10c4\u10c5\5\u057a\u02be")
        buf.write("\2\u10c5\u10c6\7\u00b9\2\2\u10c6\u10c7\5\u057a\u02be\2")
        buf.write("\u10c7\u10de\3\2\2\2\u10c8\u10c9\7\u00b2\2\2\u10c9\u10ca")
        buf.write("\7\u0189\2\2\u10ca\u10cb\5\u020a\u0106\2\u10cb\u10cc\7")
        buf.write("\u00ad\2\2\u10cc\u10ce\7\u01ea\2\2\u10cd\u10cf\5\u01de")
        buf.write("\u00f0\2\u10ce\u10cd\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf")
        buf.write("\u10d0\3\2\2\2\u10d0\u10d1\5\u057a\u02be\2\u10d1\u10d2")
        buf.write("\7\u00af\2\2\u10d2\u10d3\5\u057a\u02be\2\u10d3\u10de\3")
        buf.write("\2\2\2\u10d4\u10d5\7\u00b2\2\2\u10d5\u10d6\7\u0189\2\2")
        buf.write("\u10d6\u10d7\5\u020a\u0106\2\u10d7\u10d8\7\u0156\2\2\u10d8")
        buf.write("\u10d9\7\u01ea\2\2\u10d9\u10da\5\u057a\u02be\2\u10da\u10db")
        buf.write("\7\u0086\2\2\u10db\u10dc\5\u057a\u02be\2\u10dc\u10de\3")
        buf.write("\2\2\2\u10dd\u10b2\3\2\2\2\u10dd\u10bc\3\2\2\2\u10dd\u10c8")
        buf.write("\3\2\2\2\u10dd\u10d4\3\2\2\2\u10de\u01dd\3\2\2\2\u10df")
        buf.write("\u10e0\7\u0104\2\2\u10e0\u10e1\7u\2\2\u10e1\u10e2\7\u01ad")
        buf.write("\2\2\u10e2\u01df\3\2\2\2\u10e3\u10e4\7V\2\2\u10e4\u10e5")
        buf.write("\7\u0137\2\2\u10e5\u10e6\7\u00c4\2\2\u10e6\u10e8\5\u020a")
        buf.write("\u0106\2\u10e7\u10e9\5\u01e6\u00f4\2\u10e8\u10e7\3\2\2")
        buf.write("\2\u10e8\u10e9\3\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10eb")
        buf.write("\7f\2\2\u10eb\u10ec\7\u0189\2\2\u10ec\u10ed\5\u045e\u0230")
        buf.write("\2\u10ed\u10ee\7\u008c\2\2\u10ee\u10f0\5\u0568\u02b5\2")
        buf.write("\u10ef\u10f1\5\u01e8\u00f5\2\u10f0\u10ef\3\2\2\2\u10f0")
        buf.write("\u10f1\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2\u10f3\7L\2\2")
        buf.write("\u10f3\u10f4\5\u01e2\u00f2\2\u10f4\u01e1\3\2\2\2\u10f5")
        buf.write("\u10fa\5\u01e4\u00f3\2\u10f6\u10f7\7\b\2\2\u10f7\u10f9")
        buf.write("\5\u01e4\u00f3\2\u10f8\u10f6\3\2\2\2\u10f9\u10fc\3\2\2")
        buf.write("\2\u10fa\u10f8\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u01e3")
        buf.write("\3\2\2\2\u10fc\u10fa\3\2\2\2\u10fd\u10fe\7\u0137\2\2\u10fe")
        buf.write("\u10ff\5\u0578\u02bd\2\u10ff\u1101\5\u02ac\u0157\2\u1100")
        buf.write("\u1102\5\u01ea\u00f6\2\u1101\u1100\3\2\2\2\u1101\u1102")
        buf.write("\3\2\2\2\u1102\u1104\3\2\2\2\u1103\u1105\5\u01ec\u00f7")
        buf.write("\2\u1104\u1103\3\2\2\2\u1104\u1105\3\2\2\2\u1105\u111d")
        buf.write("\3\2\2\2\u1106\u1107\7\u0137\2\2\u1107\u1108\5\u0578\u02bd")
        buf.write("\2\u1108\u110a\5\u02b0\u0159\2\u1109\u110b\5\u01ea\u00f6")
        buf.write("\2\u110a\u1109\3\2\2\2\u110a\u110b\3\2\2\2\u110b\u110d")
        buf.write("\3\2\2\2\u110c\u110e\5\u01ec\u00f7\2\u110d\u110c\3\2\2")
        buf.write("\2\u110d\u110e\3\2\2\2\u110e\u111d\3\2\2\2\u110f\u1110")
        buf.write("\7\u00fb\2\2\u1110\u1111\5\u0578\u02bd\2\u1111\u1112\5")
        buf.write("\u0272\u013a\2\u1112\u111d\3\2\2\2\u1113\u1114\7\u00fb")
        buf.write("\2\2\u1114\u1115\5\u0578\u02bd\2\u1115\u1116\7\4\2\2\u1116")
        buf.write("\u1117\5\u0508\u0285\2\u1117\u1118\7\5\2\2\u1118\u1119")
        buf.write("\5\u0272\u013a\2\u1119\u111d\3\2\2\2\u111a\u111b\7\u017a")
        buf.write("\2\2\u111b\u111d\5\u045e\u0230\2\u111c\u10fd\3\2\2\2\u111c")
        buf.write("\u1106\3\2\2\2\u111c\u110f\3\2\2\2\u111c\u1113\3\2\2\2")
        buf.write("\u111c\u111a\3\2\2\2\u111d\u01e5\3\2\2\2\u111e\u111f\7")
        buf.write("]\2\2\u111f\u01e7\3\2\2\2\u1120\u1121\7\u00f6\2\2\u1121")
        buf.write("\u1122\5\u020a\u0106\2\u1122\u01e9\3\2\2\2\u1123\u1124")
        buf.write("\7f\2\2\u1124\u112a\7\u0166\2\2\u1125\u1126\7f\2\2\u1126")
        buf.write("\u1127\7{\2\2\u1127\u1128\7\u00bb\2\2\u1128\u112a\5\u020a")
        buf.write("\u0106\2\u1129\u1123\3\2\2\2\u1129\u1125\3\2\2\2\u112a")
        buf.write("\u01eb\3\2\2\2\u112b\u112c\7\u014f\2\2\u112c\u01ed\3\2")
        buf.write("\2\2\u112d\u112e\7V\2\2\u112e\u112f\7\u0137\2\2\u112f")
        buf.write("\u1130\7\u00f6\2\2\u1130\u1131\5\u020a\u0106\2\u1131\u1132")
        buf.write("\7\u008c\2\2\u1132\u1133\5\u0568\u02b5\2\u1133\u01ef\3")
        buf.write("\2\2\2\u1134\u1135\7\u00b2\2\2\u1135\u1136\7\u0137\2\2")
        buf.write("\u1136\u1137\7\u00f6\2\2\u1137\u1138\5\u020a\u0106\2\u1138")
        buf.write("\u1139\7\u008c\2\2\u1139\u113a\5\u0568\u02b5\2\u113a\u113b")
        buf.write("\7\u00ad\2\2\u113b\u113c\5\u01e2\u00f2\2\u113c\u1147\3")
        buf.write("\2\2\2\u113d\u113e\7\u00b2\2\2\u113e\u113f\7\u0137\2\2")
        buf.write("\u113f\u1140\7\u00f6\2\2\u1140\u1141\5\u020a\u0106\2\u1141")
        buf.write("\u1142\7\u008c\2\2\u1142\u1143\5\u0568\u02b5\2\u1143\u1144")
        buf.write("\7\u00e7\2\2\u1144\u1145\5\u01f2\u00fa\2\u1145\u1147\3")
        buf.write("\2\2\2\u1146\u1134\3\2\2\2\u1146\u113d\3\2\2\2\u1147\u01f1")
        buf.write("\3\2\2\2\u1148\u114d\5\u01f4\u00fb\2\u1149\u114a\7\b\2")
        buf.write("\2\u114a\u114c\5\u01f4\u00fb\2\u114b\u1149\3\2\2\2\u114c")
        buf.write("\u114f\3\2\2\2\u114d\u114b\3\2\2\2\u114d\u114e\3\2\2\2")
        buf.write("\u114e\u01f3\3\2\2\2\u114f\u114d\3\2\2\2\u1150\u1151\7")
        buf.write("\u0137\2\2\u1151\u1152\5\u0578\u02bd\2\u1152\u1153\7\4")
        buf.write("\2\2\u1153\u1154\5\u0508\u0285\2\u1154\u1155\7\5\2\2\u1155")
        buf.write("\u115d\3\2\2\2\u1156\u1157\7\u00fb\2\2\u1157\u1158\5\u0578")
        buf.write("\u02bd\2\u1158\u1159\7\4\2\2\u1159\u115a\5\u0508\u0285")
        buf.write("\2\u115a\u115b\7\5\2\2\u115b\u115d\3\2\2\2\u115c\u1150")
        buf.write("\3\2\2\2\u115c\u1156\3\2\2\2\u115d\u01f5\3\2\2\2\u115e")
        buf.write("\u115f\7\u00e7\2\2\u115f\u1160\7\u0137\2\2\u1160\u1161")
        buf.write("\7\u00c4\2\2\u1161\u1162\5\u020a\u0106\2\u1162\u1163\7")
        buf.write("\u008c\2\2\u1163\u1165\5\u0568\u02b5\2\u1164\u1166\5j")
        buf.write("\66\2\u1165\u1164\3\2\2\2\u1165\u1166\3\2\2\2\u1166\u1173")
        buf.write("\3\2\2\2\u1167\u1168\7\u00e7\2\2\u1168\u1169\7\u0137\2")
        buf.write("\2\u1169\u116a\7\u00c4\2\2\u116a\u116b\7\u0104\2\2\u116b")
        buf.write("\u116c\7\u01ad\2\2\u116c\u116d\5\u020a\u0106\2\u116d\u116e")
        buf.write("\7\u008c\2\2\u116e\u1170\5\u0568\u02b5\2\u116f\u1171\5")
        buf.write("j\66\2\u1170\u116f\3\2\2\2\u1170\u1171\3\2\2\2\u1171\u1173")
        buf.write("\3\2\2\2\u1172\u115e\3\2\2\2\u1172\u1167\3\2\2\2\u1173")
        buf.write("\u01f7\3\2\2\2\u1174\u1175\7\u00e7\2\2\u1175\u1176\7\u0137")
        buf.write("\2\2\u1176\u1177\7\u00f6\2\2\u1177\u1178\5\u020a\u0106")
        buf.write("\2\u1178\u1179\7\u008c\2\2\u1179\u117b\5\u0568\u02b5\2")
        buf.write("\u117a\u117c\5j\66\2\u117b\u117a\3\2\2\2\u117b\u117c\3")
        buf.write("\2\2\2\u117c\u1189\3\2\2\2\u117d\u117e\7\u00e7\2\2\u117e")
        buf.write("\u117f\7\u0137\2\2\u117f\u1180\7\u00f6\2\2\u1180\u1181")
        buf.write("\7\u0104\2\2\u1181\u1182\7\u01ad\2\2\u1182\u1183\5\u020a")
        buf.write("\u0106\2\u1183\u1184\7\u008c\2\2\u1184\u1186\5\u0568\u02b5")
        buf.write("\2\u1185\u1187\5j\66\2\u1186\u1185\3\2\2\2\u1186\u1187")
        buf.write("\3\2\2\2\u1187\u1189\3\2\2\2\u1188\u1174\3\2\2\2\u1188")
        buf.write("\u117d\3\2\2\2\u1189\u01f9\3\2\2\2\u118a\u118b\7\u00e7")
        buf.write("\2\2\u118b\u118c\7\u013a\2\2\u118c\u118d\7\u00bb\2\2\u118d")
        buf.write("\u118f\5\u0586\u02c4\2\u118e\u1190\5j\66\2\u118f\u118e")
        buf.write("\3\2\2\2\u118f\u1190\3\2\2\2\u1190\u01fb\3\2\2\2\u1191")
        buf.write("\u1192\7\u014e\2\2\u1192\u1193\7\u013a\2\2\u1193\u1194")
        buf.write("\7\u00bb\2\2\u1194\u1195\5\u0586\u02c4\2\u1195\u1196\7")
        buf.write("\u0086\2\2\u1196\u1197\5\u0584\u02c3\2\u1197\u01fd\3\2")
        buf.write("\2\2\u1198\u1199\7\u00e7\2\2\u1199\u119a\5\u0200\u0101")
        buf.write("\2\u119a\u119b\7\u0104\2\2\u119b\u119c\7\u01ad\2\2\u119c")
        buf.write("\u119e\5\u0208\u0105\2\u119d\u119f\5j\66\2\u119e\u119d")
        buf.write("\3\2\2\2\u119e\u119f\3\2\2\2\u119f\u11f3\3\2\2\2\u11a0")
        buf.write("\u11a1\7\u00e7\2\2\u11a1\u11a2\5\u0200\u0101\2\u11a2\u11a4")
        buf.write("\5\u0208\u0105\2\u11a3\u11a5\5j\66\2\u11a4\u11a3\3\2\2")
        buf.write("\2\u11a4\u11a5\3\2\2\2\u11a5\u11f3\3\2\2\2\u11a6\u11a7")
        buf.write("\7\u00e7\2\2\u11a7\u11a8\5\u0204\u0103\2\u11a8\u11a9\7")
        buf.write("\u0104\2\2\u11a9\u11aa\7\u01ad\2\2\u11aa\u11ac\5\u0566")
        buf.write("\u02b4\2\u11ab\u11ad\5j\66\2\u11ac\u11ab\3\2\2\2\u11ac")
        buf.write("\u11ad\3\2\2\2\u11ad\u11f3\3\2\2\2\u11ae\u11af\7\u00e7")
        buf.write("\2\2\u11af\u11b0\5\u0204\u0103\2\u11b0\u11b2\5\u0566\u02b4")
        buf.write("\2\u11b1\u11b3\5j\66\2\u11b2\u11b1\3\2\2\2\u11b2\u11b3")
        buf.write("\3\2\2\2\u11b3\u11f3\3\2\2\2\u11b4\u11b5\7\u00e7\2\2\u11b5")
        buf.write("\u11b6\5\u0206\u0104\2\u11b6\u11b7\5\u0568\u02b5\2\u11b7")
        buf.write("\u11b8\7x\2\2\u11b8\u11ba\5\u020a\u0106\2\u11b9\u11bb")
        buf.write("\5j\66\2\u11ba\u11b9\3\2\2\2\u11ba\u11bb\3\2\2\2\u11bb")
        buf.write("\u11f3\3\2\2\2\u11bc\u11bd\7\u00e7\2\2\u11bd\u11be\5\u0206")
        buf.write("\u0104\2\u11be\u11bf\7\u0104\2\2\u11bf\u11c0\7\u01ad\2")
        buf.write("\2\u11c0\u11c1\5\u0568\u02b5\2\u11c1\u11c2\7x\2\2\u11c2")
        buf.write("\u11c4\5\u020a\u0106\2\u11c3\u11c5\5j\66\2\u11c4\u11c3")
        buf.write("\3\2\2\2\u11c4\u11c5\3\2\2\2\u11c5\u11f3\3\2\2\2\u11c6")
        buf.write("\u11c7\7\u00e7\2\2\u11c7\u11c8\7\u0189\2\2\u11c8\u11ca")
        buf.write("\5\u020e\u0108\2\u11c9\u11cb\5j\66\2\u11ca\u11c9\3\2\2")
        buf.write("\2\u11ca\u11cb\3\2\2\2\u11cb\u11f3\3\2\2\2\u11cc\u11cd")
        buf.write("\7\u00e7\2\2\u11cd\u11ce\7\u0189\2\2\u11ce\u11cf\7\u0104")
        buf.write("\2\2\u11cf\u11d0\7\u01ad\2\2\u11d0\u11d2\5\u020e\u0108")
        buf.write("\2\u11d1\u11d3\5j\66\2\u11d2\u11d1\3\2\2\2\u11d2\u11d3")
        buf.write("\3\2\2\2\u11d3\u11f3\3\2\2\2\u11d4\u11d5\7\u00e7\2\2\u11d5")
        buf.write("\u11d6\7\u00e5\2\2\u11d6\u11d8\5\u020e\u0108\2\u11d7\u11d9")
        buf.write("\5j\66\2\u11d8\u11d7\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9")
        buf.write("\u11f3\3\2\2\2\u11da\u11db\7\u00e7\2\2\u11db\u11dc\7\u00e5")
        buf.write("\2\2\u11dc\u11dd\7\u0104\2\2\u11dd\u11de\7\u01ad\2\2\u11de")
        buf.write("\u11e0\5\u020e\u0108\2\u11df\u11e1\5j\66\2\u11e0\u11df")
        buf.write("\3\2\2\2\u11e0\u11e1\3\2\2\2\u11e1\u11f3\3\2\2\2\u11e2")
        buf.write("\u11e3\7\u00e7\2\2\u11e3\u11e4\7\u010a\2\2\u11e4\u11e5")
        buf.write("\7\u0095\2\2\u11e5\u11e7\5\u0208\u0105\2\u11e6\u11e8\5")
        buf.write("j\66\2\u11e7\u11e6\3\2\2\2\u11e7\u11e8\3\2\2\2\u11e8\u11f3")
        buf.write("\3\2\2\2\u11e9\u11ea\7\u00e7\2\2\u11ea\u11eb\7\u010a\2")
        buf.write("\2\u11eb\u11ec\7\u0095\2\2\u11ec\u11ed\7\u0104\2\2\u11ed")
        buf.write("\u11ee\7\u01ad\2\2\u11ee\u11f0\5\u0208\u0105\2\u11ef\u11f1")
        buf.write("\5j\66\2\u11f0\u11ef\3\2\2\2\u11f0\u11f1\3\2\2\2\u11f1")
        buf.write("\u11f3\3\2\2\2\u11f2\u1198\3\2\2\2\u11f2\u11a0\3\2\2\2")
        buf.write("\u11f2\u11a6\3\2\2\2\u11f2\u11ae\3\2\2\2\u11f2\u11b4\3")
        buf.write("\2\2\2\u11f2\u11bc\3\2\2\2\u11f2\u11c6\3\2\2\2\u11f2\u11cc")
        buf.write("\3\2\2\2\u11f2\u11d4\3\2\2\2\u11f2\u11da\3\2\2\2\u11f2")
        buf.write("\u11e2\3\2\2\2\u11f2\u11e9\3\2\2\2\u11f3\u01ff\3\2\2\2")
        buf.write("\u11f4\u120c\7\u0084\2\2\u11f5\u120c\7\u0169\2\2\u11f6")
        buf.write("\u120c\7\u0199\2\2\u11f7\u11f8\7\u0123\2\2\u11f8\u120c")
        buf.write("\7\u0199\2\2\u11f9\u120c\7\u010a\2\2\u11fa\u11fb\7g\2")
        buf.write("\2\u11fb\u120c\7\u0084\2\2\u11fc\u120c\7\u0094\2\2\u11fd")
        buf.write("\u120c\7\u00d0\2\2\u11fe\u120c\7\u0177\2\2\u11ff\u1200")
        buf.write("\7\u0184\2\2\u1200\u1201\7\u0166\2\2\u1201\u120c\7\u013c")
        buf.write("\2\2\u1202\u1203\7\u0184\2\2\u1203\u1204\7\u0166\2\2\u1204")
        buf.write("\u120c\7\u00e1\2\2\u1205\u1206\7\u0184\2\2\u1206\u1207")
        buf.write("\7\u0166\2\2\u1207\u120c\7\u0182\2\2\u1208\u1209\7\u0184")
        buf.write("\2\2\u1209\u120a\7\u0166\2\2\u120a\u120c\7\u00cb\2\2\u120b")
        buf.write("\u11f4\3\2\2\2\u120b\u11f5\3\2\2\2\u120b\u11f6\3\2\2\2")
        buf.write("\u120b\u11f7\3\2\2\2\u120b\u11f9\3\2\2\2\u120b\u11fa\3")
        buf.write("\2\2\2\u120b\u11fc\3\2\2\2\u120b\u11fd\3\2\2\2\u120b\u11fe")
        buf.write("\3\2\2\2\u120b\u11ff\3\2\2\2\u120b\u1202\3\2\2\2\u120b")
        buf.write("\u1205\3\2\2\2\u120b\u1208\3\2\2\2\u120c\u0201\3\2\2\2")
        buf.write("\u120d\u1213\5\u0204\u0103\2\u120e\u1213\7\u00d7\2\2\u120f")
        buf.write("\u1213\7\u015f\2\2\u1210\u1213\7\u01eb\2\2\u1211\u1213")
        buf.write("\7\u0180\2\2\u1212\u120d\3\2\2\2\u1212\u120e\3\2\2\2\u1212")
        buf.write("\u120f\3\2\2\2\u1212\u1210\3\2\2\2\u1212\u1211\3\2\2\2")
        buf.write("\u1213\u0203\3\2\2\2\u1214\u1215\7\u00ab\2\2\u1215\u1224")
        buf.write("\7\u01e6\2\2\u1216\u1217\7\u00ee\2\2\u1217\u1224\7\u0186")
        buf.write("\2\2\u1218\u1224\7\u00f4\2\2\u1219\u121a\7g\2\2\u121a")
        buf.write("\u121b\7\u00d6\2\2\u121b\u1224\7\u019e\2\2\u121c\u121e")
        buf.write("\5\u0132\u009a\2\u121d\u121c\3\2\2\2\u121d\u121e\3\2\2")
        buf.write("\2\u121e\u121f\3\2\2\2\u121f\u1224\7\u0116\2\2\u1220\u1224")
        buf.write("\7\u01ec\2\2\u1221\u1224\7\u0164\2\2\u1222\u1224\7\u016c")
        buf.write("\2\2\u1223\u1214\3\2\2\2\u1223\u1216\3\2\2\2\u1223\u1218")
        buf.write("\3\2\2\2\u1223\u1219\3\2\2\2\u1223\u121d\3\2\2\2\u1223")
        buf.write("\u1220\3\2\2\2\u1223\u1221\3\2\2\2\u1223\u1222\3\2\2\2")
        buf.write("\u1224\u0205\3\2\2\2\u1225\u1226\t\32\2\2\u1226\u0207")
        buf.write("\3\2\2\2\u1227\u122c\5\u020a\u0106\2\u1228\u1229\7\b\2")
        buf.write("\2\u1229\u122b\5\u020a\u0106\2\u122a\u1228\3\2\2\2\u122b")
        buf.write("\u122e\3\2\2\2\u122c\u122a\3\2\2\2\u122c\u122d\3\2\2\2")
        buf.write("\u122d\u0209\3\2\2\2\u122e\u122c\3\2\2\2\u122f\u1231\5")
        buf.write("\u0588\u02c5\2\u1230\u1232\5\u020c\u0107\2\u1231\u1230")
        buf.write("\3\2\2\2\u1231\u1232\3\2\2\2\u1232\u020b\3\2\2\2\u1233")
        buf.write("\u1234\7\r\2\2\u1234\u1236\5\u056a\u02b6\2\u1235\u1233")
        buf.write("\3\2\2\2\u1236\u1237\3\2\2\2\u1237\u1235\3\2\2\2\u1237")
        buf.write("\u1238\3\2\2\2\u1238\u020d\3\2\2\2\u1239\u123e\5\u045e")
        buf.write("\u0230\2\u123a\u123b\7\b\2\2\u123b\u123d\5\u045e\u0230")
        buf.write("\2\u123c\u123a\3\2\2\2\u123d\u1240\3\2\2\2\u123e\u123c")
        buf.write("\3\2\2\2\u123e\u123f\3\2\2\2\u123f\u020f\3\2\2\2\u1240")
        buf.write("\u123e\3\2\2\2\u1241\u1243\7\u0187\2\2\u1242\u1244\5\u03e2")
        buf.write("\u01f2\2\u1243\u1242\3\2\2\2\u1243\u1244\3\2\2\2\u1244")
        buf.write("\u1245\3\2\2\2\u1245\u1247\5\u0434\u021b\2\u1246\u1248")
        buf.write("\5\u0212\u010a\2\u1247\u1246\3\2\2\2\u1247\u1248\3\2\2")
        buf.write("\2\u1248\u124a\3\2\2\2\u1249\u124b\5j\66\2\u124a\u1249")
        buf.write("\3\2\2\2\u124a\u124b\3\2\2\2\u124b\u0211\3\2\2\2\u124c")
        buf.write("\u124d\7\u00cf\2\2\u124d\u1251\7\u0103\2\2\u124e\u124f")
        buf.write("\7\u015b\2\2\u124f\u1251\7\u0103\2\2\u1250\u124c\3\2\2")
        buf.write("\2\u1250\u124e\3\2\2\2\u1251\u0213\3\2\2\2\u1252\u1253")
        buf.write("\7\u00c7\2\2\u1253\u1254\7x\2\2\u1254\u1255\5\u0200\u0101")
        buf.write("\2\u1255\u1256\5\u020a\u0106\2\u1256\u1257\7\u009c\2\2")
        buf.write("\u1257\u1258\5\u0216\u010c\2\u1258\u12e6\3\2\2\2\u1259")
        buf.write("\u125a\7\u00c7\2\2\u125a\u125b\7x\2\2\u125b\u125c\7T\2")
        buf.write("\2\u125c\u125d\5\u020a\u0106\2\u125d\u125e\7\u009c\2\2")
        buf.write("\u125e\u125f\5\u0216\u010c\2\u125f\u12e6\3\2\2\2\u1260")
        buf.write("\u1261\7\u00c7\2\2\u1261\u1262\7x\2\2\u1262\u1263\5\u0202")
        buf.write("\u0102\2\u1263\u1264\5\u0568\u02b5\2\u1264\u1265\7\u009c")
        buf.write("\2\2\u1265\u1266\5\u0216\u010c\2\u1266\u12e6\3\2\2\2\u1267")
        buf.write("\u1268\7\u00c7\2\2\u1268\u1269\7x\2\2\u1269\u126a\7\u0189")
        buf.write("\2\2\u126a\u126b\5\u045e\u0230\2\u126b\u126c\7\u009c\2")
        buf.write("\2\u126c\u126d\5\u0216\u010c\2\u126d\u12e6\3\2\2\2\u126e")
        buf.write("\u126f\7\u00c7\2\2\u126f\u1270\7x\2\2\u1270\u1271\7\u00e5")
        buf.write("\2\2\u1271\u1272\5\u045e\u0230\2\u1272\u1273\7\u009c\2")
        buf.write("\2\u1273\u1274\5\u0216\u010c\2\u1274\u12e6\3\2\2\2\u1275")
        buf.write("\u1276\7\u00c7\2\2\u1276\u1277\7x\2\2\u1277\u1278\7\u00b0")
        buf.write("\2\2\u1278\u1279\5\u028a\u0146\2\u1279\u127a\7\u009c\2")
        buf.write("\2\u127a\u127b\5\u0216\u010c\2\u127b\u12e6\3\2\2\2\u127c")
        buf.write("\u127d\7\u00c7\2\2\u127d\u127e\7x\2\2\u127e\u127f\7\u00fb")
        buf.write("\2\2\u127f\u1280\5\u0272\u013a\2\u1280\u1281\7\u009c\2")
        buf.write("\2\u1281\u1282\5\u0216\u010c\2\u1282\u12e6\3\2\2\2\u1283")
        buf.write("\u1284\7\u00c7\2\2\u1284\u1285\7x\2\2\u1285\u1286\7\u0137")
        buf.write("\2\2\u1286\u1287\5\u02b0\u0159\2\u1287\u1288\7\u009c\2")
        buf.write("\2\u1288\u1289\5\u0216\u010c\2\u1289\u12e6\3\2\2\2\u128a")
        buf.write("\u128b\7\u00c7\2\2\u128b\u128c\7x\2\2\u128c\u128d\7U\2")
        buf.write("\2\u128d\u128e\5\u0568\u02b5\2\u128e\u128f\7x\2\2\u128f")
        buf.write("\u1290\5\u020a\u0106\2\u1290\u1291\7\u009c\2\2\u1291\u1292")
        buf.write("\5\u0216\u010c\2\u1292\u12e6\3\2\2\2\u1293\u1294\7\u00c7")
        buf.write("\2\2\u1294\u1295\7x\2\2\u1295\u1296\7U\2\2\u1296\u1297")
        buf.write("\5\u0568\u02b5\2\u1297\u1298\7x\2\2\u1298\u1299\7\u00e5")
        buf.write("\2\2\u1299\u129a\5\u020a\u0106\2\u129a\u129b\7\u009c\2")
        buf.write("\2\u129b\u129c\5\u0216\u010c\2\u129c\u12e6\3\2\2\2\u129d")
        buf.write("\u129e\7\u00c7\2\2\u129e\u129f\7x\2\2\u129f\u12a0\5\u0206")
        buf.write("\u0104\2\u12a0\u12a1\5\u0568\u02b5\2\u12a1\u12a2\7x\2")
        buf.write("\2\u12a2\u12a3\5\u020a\u0106\2\u12a3\u12a4\7\u009c\2\2")
        buf.write("\u12a4\u12a5\5\u0216\u010c\2\u12a5\u12e6\3\2\2\2\u12a6")
        buf.write("\u12a7\7\u00c7\2\2\u12a7\u12a8\7x\2\2\u12a8\u12a9\7\u0149")
        buf.write("\2\2\u12a9\u12aa\5\u0272\u013a\2\u12aa\u12ab\7\u009c\2")
        buf.write("\2\u12ab\u12ac\5\u0216\u010c\2\u12ac\u12e6\3\2\2\2\u12ad")
        buf.write("\u12ae\7\u00c7\2\2\u12ae\u12af\7x\2\2\u12af\u12b0\7\u01e2")
        buf.write("\2\2\u12b0\u12b1\5\u0272\u013a\2\u12b1\u12b2\7\u009c\2")
        buf.write("\2\u12b2\u12b3\5\u0216\u010c\2\u12b3\u12e6\3\2\2\2\u12b4")
        buf.write("\u12b5\7\u00c7\2\2\u12b5\u12b6\7x\2\2\u12b6\u12b7\7\u01e3")
        buf.write("\2\2\u12b7\u12b8\7f\2\2\u12b8\u12b9\5\u045e\u0230\2\u12b9")
        buf.write("\u12ba\7\u0116\2\2\u12ba\u12bb\5\u0568\u02b5\2\u12bb\u12bc")
        buf.write("\7\u009c\2\2\u12bc\u12bd\5\u0216\u010c\2\u12bd\u12e6\3")
        buf.write("\2\2\2\u12be\u12bf\7\u00c7\2\2\u12bf\u12c0\7x\2\2\u12c0")
        buf.write("\u12c1\7\u0137\2\2\u12c1\u12c2\7\u00c4\2\2\u12c2\u12c3")
        buf.write("\5\u020a\u0106\2\u12c3\u12c4\7\u008c\2\2\u12c4\u12c5\5")
        buf.write("\u0568\u02b5\2\u12c5\u12c6\7\u009c\2\2\u12c6\u12c7\5\u0216")
        buf.write("\u010c\2\u12c7\u12e6\3\2\2\2\u12c8\u12c9\7\u00c7\2\2\u12c9")
        buf.write("\u12ca\7x\2\2\u12ca\u12cb\7\u0137\2\2\u12cb\u12cc\7\u00f6")
        buf.write("\2\2\u12cc\u12cd\5\u020a\u0106\2\u12cd\u12ce\7\u008c\2")
        buf.write("\2\u12ce\u12cf\5\u0568\u02b5\2\u12cf\u12d0\7\u009c\2\2")
        buf.write("\u12d0\u12d1\5\u0216\u010c\2\u12d1\u12e6\3\2\2\2\u12d2")
        buf.write("\u12d3\7\u00c7\2\2\u12d3\u12d4\7x\2\2\u12d4\u12d5\7\u0117")
        buf.write("\2\2\u12d5\u12d6\7\u0133\2\2\u12d6\u12d7\5\u0122\u0092")
        buf.write("\2\u12d7\u12d8\7\u009c\2\2\u12d8\u12d9\5\u0216\u010c\2")
        buf.write("\u12d9\u12e6\3\2\2\2\u12da\u12db\7\u00c7\2\2\u12db\u12dc")
        buf.write("\7x\2\2\u12dc\u12dd\7Q\2\2\u12dd\u12de\7\4\2\2\u12de\u12df")
        buf.write("\5\u045e\u0230\2\u12df\u12e0\7L\2\2\u12e0\u12e1\5\u045e")
        buf.write("\u0230\2\u12e1\u12e2\7\5\2\2\u12e2\u12e3\7\u009c\2\2\u12e3")
        buf.write("\u12e4\5\u0216\u010c\2\u12e4\u12e6\3\2\2\2\u12e5\u1252")
        buf.write("\3\2\2\2\u12e5\u1259\3\2\2\2\u12e5\u1260\3\2\2\2\u12e5")
        buf.write("\u1267\3\2\2\2\u12e5\u126e\3\2\2\2\u12e5\u1275\3\2\2\2")
        buf.write("\u12e5\u127c\3\2\2\2\u12e5\u1283\3\2\2\2\u12e5\u128a\3")
        buf.write("\2\2\2\u12e5\u1293\3\2\2\2\u12e5\u129d\3\2\2\2\u12e5\u12a6")
        buf.write("\3\2\2\2\u12e5\u12ad\3\2\2\2\u12e5\u12b4\3\2\2\2\u12e5")
        buf.write("\u12be\3\2\2\2\u12e5\u12c8\3\2\2\2\u12e5\u12d2\3\2\2\2")
        buf.write("\u12e5\u12da\3\2\2\2\u12e6\u0215\3\2\2\2\u12e7\u12ea\5")
        buf.write("\u057a\u02be\2\u12e8\u12ea\7v\2\2\u12e9\u12e7\3\2\2\2")
        buf.write("\u12e9\u12e8\3\2\2\2\u12ea\u0217\3\2\2\2\u12eb\u12ec\7")
        buf.write("\u0168\2\2\u12ec\u12ee\7\u0115\2\2\u12ed\u12ef\5\u021a")
        buf.write("\u010e\2\u12ee\u12ed\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef")
        buf.write("\u12f0\3\2\2\2\u12f0\u12f1\7x\2\2\u12f1\u12f2\5\u0200")
        buf.write("\u0101\2\u12f2\u12f3\5\u020a\u0106\2\u12f3\u12f4\7\u009c")
        buf.write("\2\2\u12f4\u12f5\5\u021c\u010f\2\u12f5\u135b\3\2\2\2\u12f6")
        buf.write("\u12f7\7\u0168\2\2\u12f7\u12f9\7\u0115\2\2\u12f8\u12fa")
        buf.write("\5\u021a\u010e\2\u12f9\u12f8\3\2\2\2\u12f9\u12fa\3\2\2")
        buf.write("\2\u12fa\u12fb\3\2\2\2\u12fb\u12fc\7x\2\2\u12fc\u12fd")
        buf.write("\7T\2\2\u12fd\u12fe\5\u020a\u0106\2\u12fe\u12ff\7\u009c")
        buf.write("\2\2\u12ff\u1300\5\u021c\u010f\2\u1300\u135b\3\2\2\2\u1301")
        buf.write("\u1302\7\u0168\2\2\u1302\u1304\7\u0115\2\2\u1303\u1305")
        buf.write("\5\u021a\u010e\2\u1304\u1303\3\2\2\2\u1304\u1305\3\2\2")
        buf.write("\2\u1305\u1306\3\2\2\2\u1306\u1307\7x\2\2\u1307\u1308")
        buf.write("\5\u0202\u0102\2\u1308\u1309\5\u0568\u02b5\2\u1309\u130a")
        buf.write("\7\u009c\2\2\u130a\u130b\5\u021c\u010f\2\u130b\u135b\3")
        buf.write("\2\2\2\u130c\u130d\7\u0168\2\2\u130d\u130f\7\u0115\2\2")
        buf.write("\u130e\u1310\5\u021a\u010e\2\u130f\u130e\3\2\2\2\u130f")
        buf.write("\u1310\3\2\2\2\u1310\u1311\3\2\2\2\u1311\u1312\7x\2\2")
        buf.write("\u1312\u1313\7\u0189\2\2\u1313\u1314\5\u045e\u0230\2\u1314")
        buf.write("\u1315\7\u009c\2\2\u1315\u1316\5\u021c\u010f\2\u1316\u135b")
        buf.write("\3\2\2\2\u1317\u1318\7\u0168\2\2\u1318\u131a\7\u0115\2")
        buf.write("\2\u1319\u131b\5\u021a\u010e\2\u131a\u1319\3\2\2\2\u131a")
        buf.write("\u131b\3\2\2\2\u131b\u131c\3\2\2\2\u131c\u131d\7x\2\2")
        buf.write("\u131d\u131e\7\u00e5\2\2\u131e\u131f\5\u045e\u0230\2\u131f")
        buf.write("\u1320\7\u009c\2\2\u1320\u1321\5\u021c\u010f\2\u1321\u135b")
        buf.write("\3\2\2\2\u1322\u1323\7\u0168\2\2\u1323\u1325\7\u0115\2")
        buf.write("\2\u1324\u1326\5\u021a\u010e\2\u1325\u1324\3\2\2\2\u1325")
        buf.write("\u1326\3\2\2\2\u1326\u1327\3\2\2\2\u1327\u1328\7x\2\2")
        buf.write("\u1328\u1329\7\u00b0\2\2\u1329\u132a\5\u028a\u0146\2\u132a")
        buf.write("\u132b\7\u009c\2\2\u132b\u132c\5\u021c\u010f\2\u132c\u135b")
        buf.write("\3\2\2\2\u132d\u132e\7\u0168\2\2\u132e\u1330\7\u0115\2")
        buf.write("\2\u132f\u1331\5\u021a\u010e\2\u1330\u132f\3\2\2\2\u1330")
        buf.write("\u1331\3\2\2\2\u1331\u1332\3\2\2\2\u1332\u1333\7x\2\2")
        buf.write("\u1333\u1334\7\u00fb\2\2\u1334\u1335\5\u0272\u013a\2\u1335")
        buf.write("\u1336\7\u009c\2\2\u1336\u1337\5\u021c\u010f\2\u1337\u135b")
        buf.write("\3\2\2\2\u1338\u1339\7\u0168\2\2\u1339\u133b\7\u0115\2")
        buf.write("\2\u133a\u133c\5\u021a\u010e\2\u133b\u133a\3\2\2\2\u133b")
        buf.write("\u133c\3\2\2\2\u133c\u133d\3\2\2\2\u133d\u133e\7x\2\2")
        buf.write("\u133e\u133f\7\u0117\2\2\u133f\u1340\7\u0133\2\2\u1340")
        buf.write("\u1341\5\u0122\u0092\2\u1341\u1342\7\u009c\2\2\u1342\u1343")
        buf.write("\5\u021c\u010f\2\u1343\u135b\3\2\2\2\u1344\u1345\7\u0168")
        buf.write("\2\2\u1345\u1347\7\u0115\2\2\u1346\u1348\5\u021a\u010e")
        buf.write("\2\u1347\u1346\3\2\2\2\u1347\u1348\3\2\2\2\u1348\u1349")
        buf.write("\3\2\2\2\u1349\u134a\7x\2\2\u134a\u134b\7\u0149\2\2\u134b")
        buf.write("\u134c\5\u0272\u013a\2\u134c\u134d\7\u009c\2\2\u134d\u134e")
        buf.write("\5\u021c\u010f\2\u134e\u135b\3\2\2\2\u134f\u1350\7\u0168")
        buf.write("\2\2\u1350\u1352\7\u0115\2\2\u1351\u1353\5\u021a\u010e")
        buf.write("\2\u1352\u1351\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u1354")
        buf.write("\3\2\2\2\u1354\u1355\7x\2\2\u1355\u1356\7\u01e2\2\2\u1356")
        buf.write("\u1357\5\u0272\u013a\2\u1357\u1358\7\u009c\2\2\u1358\u1359")
        buf.write("\5\u021c\u010f\2\u1359\u135b\3\2\2\2\u135a\u12eb\3\2\2")
        buf.write("\2\u135a\u12f6\3\2\2\2\u135a\u1301\3\2\2\2\u135a\u130c")
        buf.write("\3\2\2\2\u135a\u1317\3\2\2\2\u135a\u1322\3\2\2\2\u135a")
        buf.write("\u132d\3\2\2\2\u135a\u1338\3\2\2\2\u135a\u1344\3\2\2\2")
        buf.write("\u135a\u134f\3\2\2\2\u135b\u0219\3\2\2\2\u135c\u135d\7")
        buf.write("f\2\2\u135d\u135e\5F$\2\u135e\u021b\3\2\2\2\u135f\u1362")
        buf.write("\5\u057a\u02be\2\u1360\u1362\7v\2\2\u1361\u135f\3\2\2")
        buf.write("\2\u1361\u1360\3\2\2\2\u1362\u021d\3\2\2\2\u1363\u1364")
        buf.write("\7e\2\2\u1364\u1368\5\u0220\u0111\2\u1365\u1366\7\u012a")
        buf.write("\2\2\u1366\u1368\5\u0220\u0111\2\u1367\u1363\3\2\2\2\u1367")
        buf.write("\u1365\3\2\2\2\u1368\u021f\3\2\2\2\u1369\u13bf\5\u03c0")
        buf.write("\u01e1\2\u136a\u136b\5\u0222\u0112\2\u136b\u136c\5\u03c0")
        buf.write("\u01e1\2\u136c\u13bf\3\2\2\2\u136d\u136f\7\u012d\2\2\u136e")
        buf.write("\u1370\5\u0224\u0113\2\u136f\u136e\3\2\2\2\u136f\u1370")
        buf.write("\3\2\2\2\u1370\u1371\3\2\2\2\u1371\u13bf\5\u03c0\u01e1")
        buf.write("\2\u1372\u1374\7\u0146\2\2\u1373\u1375\5\u0224\u0113\2")
        buf.write("\u1374\u1373\3\2\2\2\u1374\u1375\3\2\2\2\u1375\u1376\3")
        buf.write("\2\2\2\u1376\u13bf\5\u03c0\u01e1\2\u1377\u1379\7\u00f7")
        buf.write("\2\2\u1378\u137a\5\u0224\u0113\2\u1379\u1378\3\2\2\2\u1379")
        buf.write("\u137a\3\2\2\2\u137a\u137b\3\2\2\2\u137b\u13bf\5\u03c0")
        buf.write("\u01e1\2\u137c\u137e\7\u0118\2\2\u137d\u137f\5\u0224\u0113")
        buf.write("\2\u137e\u137d\3\2\2\2\u137e\u137f\3\2\2\2\u137f\u1380")
        buf.write("\3\2\2\2\u1380\u13bf\5\u03c0\u01e1\2\u1381\u1382\7\u00aa")
        buf.write("\2\2\u1382\u1384\5\u0580\u02c1\2\u1383\u1385\5\u0224\u0113")
        buf.write("\2\u1384\u1383\3\2\2\2\u1384\u1385\3\2\2\2\u1385\u1386")
        buf.write("\3\2\2\2\u1386\u1387\5\u03c0\u01e1\2\u1387\u13bf\3\2\2")
        buf.write("\2\u1388\u1389\7\u0154\2\2\u1389\u138b\5\u0580\u02c1\2")
        buf.write("\u138a\u138c\5\u0224\u0113\2\u138b\u138a\3\2\2\2\u138b")
        buf.write("\u138c\3\2\2\2\u138c\u138d\3\2\2\2\u138d\u138e\5\u03c0")
        buf.write("\u01e1\2\u138e\u13bf\3\2\2\2\u138f\u1391\5\u0580\u02c1")
        buf.write("\2\u1390\u1392\5\u0224\u0113\2\u1391\u1390\3\2\2\2\u1391")
        buf.write("\u1392\3\2\2\2\u1392\u1393\3\2\2\2\u1393\u1394\5\u03c0")
        buf.write("\u01e1\2\u1394\u13bf\3\2\2\2\u1395\u1397\7F\2\2\u1396")
        buf.write("\u1398\5\u0224\u0113\2\u1397\u1396\3\2\2\2\u1397\u1398")
        buf.write("\3\2\2\2\u1398\u1399\3\2\2\2\u1399\u13bf\5\u03c0\u01e1")
        buf.write("\2\u139a\u139c\7\u00fa\2\2\u139b\u139d\5\u0224\u0113\2")
        buf.write("\u139c\u139b\3\2\2\2\u139c\u139d\3\2\2\2\u139d\u139e\3")
        buf.write("\2\2\2\u139e\u13bf\5\u03c0\u01e1\2\u139f\u13a0\7\u00fa")
        buf.write("\2\2\u13a0\u13a2\5\u0580\u02c1\2\u13a1\u13a3\5\u0224\u0113")
        buf.write("\2\u13a2\u13a1\3\2\2\2\u13a2\u13a3\3\2\2\2\u13a3\u13a4")
        buf.write("\3\2\2\2\u13a4\u13a5\5\u03c0\u01e1\2\u13a5\u13bf\3\2\2")
        buf.write("\2\u13a6\u13a7\7\u00fa\2\2\u13a7\u13a9\7F\2\2\u13a8\u13aa")
        buf.write("\5\u0224\u0113\2\u13a9\u13a8\3\2\2\2\u13a9\u13aa\3\2\2")
        buf.write("\2\u13aa\u13ab\3\2\2\2\u13ab\u13bf\5\u03c0\u01e1\2\u13ac")
        buf.write("\u13ae\7\u00b8\2\2\u13ad\u13af\5\u0224\u0113\2\u13ae\u13ad")
        buf.write("\3\2\2\2\u13ae\u13af\3\2\2\2\u13af\u13b0\3\2\2\2\u13b0")
        buf.write("\u13bf\5\u03c0\u01e1\2\u13b1\u13b2\7\u00b8\2\2\u13b2\u13b4")
        buf.write("\5\u0580\u02c1\2\u13b3\u13b5\5\u0224\u0113\2\u13b4\u13b3")
        buf.write("\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u13b6\3\2\2\2\u13b6")
        buf.write("\u13b7\5\u03c0\u01e1\2\u13b7\u13bf\3\2\2\2\u13b8\u13b9")
        buf.write("\7\u00b8\2\2\u13b9\u13bb\7F\2\2\u13ba\u13bc\5\u0224\u0113")
        buf.write("\2\u13bb\u13ba\3\2\2\2\u13bb\u13bc\3\2\2\2\u13bc\u13bd")
        buf.write("\3\2\2\2\u13bd\u13bf\5\u03c0\u01e1\2\u13be\u1369\3\2\2")
        buf.write("\2\u13be\u136a\3\2\2\2\u13be\u136d\3\2\2\2\u13be\u1372")
        buf.write("\3\2\2\2\u13be\u1377\3\2\2\2\u13be\u137c\3\2\2\2\u13be")
        buf.write("\u1381\3\2\2\2\u13be\u1388\3\2\2\2\u13be\u138f\3\2\2\2")
        buf.write("\u13be\u1395\3\2\2\2\u13be\u139a\3\2\2\2\u13be\u139f\3")
        buf.write("\2\2\2\u13be\u13a6\3\2\2\2\u13be\u13ac\3\2\2\2\u13be\u13b1")
        buf.write("\3\2\2\2\u13be\u13b8\3\2\2\2\u13bf\u0221\3\2\2\2\u13c0")
        buf.write("\u13c1\t\33\2\2\u13c1\u0223\3\2\2\2\u13c2\u13c3\5\u0222")
        buf.write("\u0112\2\u13c3\u0225\3\2\2\2\u13c4\u13c5\7i\2\2\u13c5")
        buf.write("\u13c6\5\u022a\u0116\2\u13c6\u13c7\7x\2\2\u13c7\u13c8")
        buf.write("\5\u0230\u0119\2\u13c8\u13c9\7\u0086\2\2\u13c9\u13cb\5")
        buf.write("\u0232\u011a\2\u13ca\u13cc\5\u0236\u011c\2\u13cb\u13ca")
        buf.write("\3\2\2\2\u13cb\u13cc\3\2\2\2\u13cc\u0227\3\2\2\2\u13cd")
        buf.write("\u13ce\7\u015e\2\2\u13ce\u13cf\5\u022a\u0116\2\u13cf\u13d0")
        buf.write("\7x\2\2\u13d0\u13d1\5\u0230\u0119\2\u13d1\u13d2\7h\2\2")
        buf.write("\u13d2\u13d4\5\u0232\u011a\2\u13d3\u13d5\5j\66\2\u13d4")
        buf.write("\u13d3\3\2\2\2\u13d4\u13d5\3\2\2\2\u13d5\u13e3\3\2\2\2")
        buf.write("\u13d6\u13d7\7\u015e\2\2\u13d7\u13d8\7i\2\2\u13d8\u13d9")
        buf.write("\7\u0138\2\2\u13d9\u13da\7f\2\2\u13da\u13db\5\u022a\u0116")
        buf.write("\2\u13db\u13dc\7x\2\2\u13dc\u13dd\5\u0230\u0119\2\u13dd")
        buf.write("\u13de\7h\2\2\u13de\u13e0\5\u0232\u011a\2\u13df\u13e1")
        buf.write("\5j\66\2\u13e0\u13df\3\2\2\2\u13e0\u13e1\3\2\2\2\u13e1")
        buf.write("\u13e3\3\2\2\2\u13e2\u13cd\3\2\2\2\u13e2\u13d6\3\2\2\2")
        buf.write("\u13e3\u0229\3\2\2\2\u13e4\u13f4\5\u022c\u0117\2\u13e5")
        buf.write("\u13f4\7F\2\2\u13e6\u13e7\7F\2\2\u13e7\u13f4\7\u0147\2")
        buf.write("\2\u13e8\u13e9\7F\2\2\u13e9\u13ea\7\4\2\2\u13ea\u13eb")
        buf.write("\5\u00d6l\2\u13eb\u13ec\7\5\2\2\u13ec\u13f4\3\2\2\2\u13ed")
        buf.write("\u13ee\7F\2\2\u13ee\u13ef\7\u0147\2\2\u13ef\u13f0\7\4")
        buf.write("\2\2\u13f0\u13f1\5\u00d6l\2\u13f1\u13f2\7\5\2\2\u13f2")
        buf.write("\u13f4\3\2\2\2\u13f3\u13e4\3\2\2\2\u13f3\u13e5\3\2\2\2")
        buf.write("\u13f3\u13e6\3\2\2\2\u13f3\u13e8\3\2\2\2\u13f3\u13ed\3")
        buf.write("\2\2\2\u13f4\u022b\3\2\2\2\u13f5\u13fa\5\u022e\u0118\2")
        buf.write("\u13f6\u13f7\7\b\2\2\u13f7\u13f9\5\u022e\u0118\2\u13f8")
        buf.write("\u13f6\3\2\2\2\u13f9\u13fc\3\2\2\2\u13fa\u13f8\3\2\2\2")
        buf.write("\u13fa\u13fb\3\2\2\2\u13fb\u022d\3\2\2\2\u13fc\u13fa\3")
        buf.write("\2\2\2\u13fd\u13ff\7\u0080\2\2\u13fe\u1400\5\u00d4k\2")
        buf.write("\u13ff\u13fe\3\2\2\2\u13ff\u1400\3\2\2\2\u1400\u140e\3")
        buf.write("\2\2\2\u1401\u1403\7~\2\2\u1402\u1404\5\u00d4k\2\u1403")
        buf.write("\u1402\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u140e\3\2\2\2")
        buf.write("\u1405\u1407\7V\2\2\u1406\u1408\5\u00d4k\2\u1407\u1406")
        buf.write("\3\2\2\2\u1407\u1408\3\2\2\2\u1408\u140e\3\2\2\2\u1409")
        buf.write("\u140b\5\u0588\u02c5\2\u140a\u140c\5\u00d4k\2\u140b\u140a")
        buf.write("\3\2\2\2\u140b\u140c\3\2\2\2\u140c\u140e\3\2\2\2\u140d")
        buf.write("\u13fd\3\2\2\2\u140d\u1401\3\2\2\2\u140d\u1405\3\2\2\2")
        buf.write("\u140d\u1409\3\2\2\2\u140e\u022f\3\2\2\2\u140f\u144a\5")
        buf.write("\u0562\u02b2\2\u1410\u1411\7\u0084\2\2\u1411\u144a\5\u0562")
        buf.write("\u02b2\2\u1412\u1413\7\u0169\2\2\u1413\u144a\5\u0562\u02b2")
        buf.write("\2\u1414\u1415\7g\2\2\u1415\u1416\7\u00d6\2\2\u1416\u1417")
        buf.write("\7\u019e\2\2\u1417\u144a\5\u0566\u02b4\2\u1418\u1419\7")
        buf.write("g\2\2\u1419\u141a\7\u016c\2\2\u141a\u144a\5\u0566\u02b4")
        buf.write("\2\u141b\u141c\7\u00fb\2\2\u141c\u144a\5\u0270\u0139\2")
        buf.write("\u141d\u141e\7\u0149\2\2\u141e\u144a\5\u0270\u0139\2\u141f")
        buf.write("\u1420\7\u01e2\2\2\u1420\u144a\5\u0270\u0139\2\u1421\u1422")
        buf.write("\7\u00d7\2\2\u1422\u144a\5\u0566\u02b4\2\u1423\u1424\7")
        buf.write("\u00e5\2\2\u1424\u144a\5\u0208\u0105\2\u1425\u1426\7\u0116")
        buf.write("\2\2\u1426\u144a\5\u0566\u02b4\2\u1427\u1428\7\u0117\2")
        buf.write("\2\u1428\u1429\7\u0133\2\2\u1429\u144a\5\u0124\u0093\2")
        buf.write("\u142a\u142b\7\u0164\2\2\u142b\u144a\5\u0566\u02b4\2\u142c")
        buf.write("\u142d\7\u0180\2\2\u142d\u144a\5\u0566\u02b4\2\u142e\u142f")
        buf.write("\7\u0189\2\2\u142f\u144a\5\u0208\u0105\2\u1430\u1431\7")
        buf.write("F\2\2\u1431\u1432\7\u017f\2\2\u1432\u1433\7l\2\2\u1433")
        buf.write("\u1434\7\u0164\2\2\u1434\u144a\5\u0566\u02b4\2\u1435\u1436")
        buf.write("\7F\2\2\u1436\u1437\7\u016a\2\2\u1437\u1438\7l\2\2\u1438")
        buf.write("\u1439\7\u0164\2\2\u1439\u144a\5\u0566\u02b4\2\u143a\u143b")
        buf.write("\7F\2\2\u143b\u143c\7\u00fc\2\2\u143c\u143d\7l\2\2\u143d")
        buf.write("\u143e\7\u0164\2\2\u143e\u144a\5\u0566\u02b4\2\u143f\u1440")
        buf.write("\7F\2\2\u1440\u1441\7\u01f1\2\2\u1441\u1442\7l\2\2\u1442")
        buf.write("\u1443\7\u0164\2\2\u1443\u144a\5\u0566\u02b4\2\u1444\u1445")
        buf.write("\7F\2\2\u1445\u1446\7\u01ef\2\2\u1446\u1447\7l\2\2\u1447")
        buf.write("\u1448\7\u0164\2\2\u1448\u144a\5\u0566\u02b4\2\u1449\u140f")
        buf.write("\3\2\2\2\u1449\u1410\3\2\2\2\u1449\u1412\3\2\2\2\u1449")
        buf.write("\u1414\3\2\2\2\u1449\u1418\3\2\2\2\u1449\u141b\3\2\2\2")
        buf.write("\u1449\u141d\3\2\2\2\u1449\u141f\3\2\2\2\u1449\u1421\3")
        buf.write("\2\2\2\u1449\u1423\3\2\2\2\u1449\u1425\3\2\2\2\u1449\u1427")
        buf.write("\3\2\2\2\u1449\u142a\3\2\2\2\u1449\u142c\3\2\2\2\u1449")
        buf.write("\u142e\3\2\2\2\u1449\u1430\3\2\2\2\u1449\u1435\3\2\2\2")
        buf.write("\u1449\u143a\3\2\2\2\u1449\u143f\3\2\2\2\u1449\u1444\3")
        buf.write("\2\2\2\u144a\u0231\3\2\2\2\u144b\u1450\5\u0234\u011b\2")
        buf.write("\u144c\u144d\7\b\2\2\u144d\u144f\5\u0234\u011b\2\u144e")
        buf.write("\u144c\3\2\2\2\u144f\u1452\3\2\2\2\u1450\u144e\3\2\2\2")
        buf.write("\u1450\u1451\3\2\2\2\u1451\u0233\3\2\2\2\u1452\u1450\3")
        buf.write("\2\2\2\u1453\u1457\5\u0584\u02c3\2\u1454\u1455\7j\2\2")
        buf.write("\u1455\u1457\5\u0584\u02c3\2\u1456\u1453\3\2\2\2\u1456")
        buf.write("\u1454\3\2\2\2\u1457\u0235\3\2\2\2\u1458\u1459\7\u0091")
        buf.write("\2\2\u1459\u145a\7i\2\2\u145a\u145b\7\u0138\2\2\u145b")
        buf.write("\u0237\3\2\2\2\u145c\u145d\7i\2\2\u145d\u145e\5\u022c")
        buf.write("\u0117\2\u145e\u145f\7\u0086\2\2\u145f\u1461\5\u0586\u02c4")
        buf.write("\2\u1460\u1462\5\u023c\u011f\2\u1461\u1460\3\2\2\2\u1461")
        buf.write("\u1462\3\2\2\2\u1462\u1464\3\2\2\2\u1463\u1465\5\u023e")
        buf.write("\u0120\2\u1464\u1463\3\2\2\2\u1464\u1465\3\2\2\2\u1465")
        buf.write("\u0239\3\2\2\2\u1466\u1467\7\u015e\2\2\u1467\u1468\5\u022c")
        buf.write("\u0117\2\u1468\u1469\7h\2\2\u1469\u146b\5\u0586\u02c4")
        buf.write("\2\u146a\u146c\5\u023e\u0120\2\u146b\u146a\3\2\2\2\u146b")
        buf.write("\u146c\3\2\2\2\u146c\u146e\3\2\2\2\u146d\u146f\5j\66\2")
        buf.write("\u146e\u146d\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u147e\3")
        buf.write("\2\2\2\u1470\u1471\7\u015e\2\2\u1471\u1472\7\u00ae\2\2")
        buf.write("\u1472\u1473\7\u0138\2\2\u1473\u1474\7f\2\2\u1474\u1475")
        buf.write("\5\u022c\u0117\2\u1475\u1476\7h\2\2\u1476\u1478\5\u0586")
        buf.write("\u02c4\2\u1477\u1479\5\u023e\u0120\2\u1478\u1477\3\2\2")
        buf.write("\2\u1478\u1479\3\2\2\2\u1479\u147b\3\2\2\2\u147a\u147c")
        buf.write("\5j\66\2\u147b\u147a\3\2\2\2\u147b\u147c\3\2\2\2\u147c")
        buf.write("\u147e\3\2\2\2\u147d\u1466\3\2\2\2\u147d\u1470\3\2\2\2")
        buf.write("\u147e\u023b\3\2\2\2\u147f\u1480\7\u0091\2\2\u1480\u1481")
        buf.write("\7\u00ae\2\2\u1481\u1482\7\u0138\2\2\u1482\u023d\3\2\2")
        buf.write("\2\u1483\u1484\7\u00fe\2\2\u1484\u1485\7\u00bb\2\2\u1485")
        buf.write("\u1486\5\u0584\u02c3\2\u1486\u023f\3\2\2\2\u1487\u1488")
        buf.write("\7\u00b2\2\2\u1488\u1489\7]\2\2\u1489\u148a\7\u0147\2")
        buf.write("\2\u148a\u148b\5\u0242\u0122\2\u148b\u148c\5\u0246\u0124")
        buf.write("\2\u148c\u0241\3\2\2\2\u148d\u148f\5\u0244\u0123\2\u148e")
        buf.write("\u148d\3\2\2\2\u148f\u1492\3\2\2\2\u1490\u148e\3\2\2\2")
        buf.write("\u1490\u1491\3\2\2\2\u1491\u0243\3\2\2\2\u1492\u1490\3")
        buf.write("\2\2\2\u1493\u1494\7l\2\2\u1494\u1495\7\u0164\2\2\u1495")
        buf.write("\u149d\5\u0566\u02b4\2\u1496\u1497\7f\2\2\u1497\u1498")
        buf.write("\7\u015f\2\2\u1498\u149d\5\u0586\u02c4\2\u1499\u149a\7")
        buf.write("f\2\2\u149a\u149b\7\u008b\2\2\u149b\u149d\5\u0586\u02c4")
        buf.write("\2\u149c\u1493\3\2\2\2\u149c\u1496\3\2\2\2\u149c\u1499")
        buf.write("\3\2\2\2\u149d\u0245\3\2\2\2\u149e\u149f\7i\2\2\u149f")
        buf.write("\u14a0\5\u022a\u0116\2\u14a0\u14a1\7x\2\2\u14a1\u14a2")
        buf.write("\5\u0248\u0125\2\u14a2\u14a3\7\u0086\2\2\u14a3\u14a5\5")
        buf.write("\u0232\u011a\2\u14a4\u14a6\5\u0236\u011c\2\u14a5\u14a4")
        buf.write("\3\2\2\2\u14a5\u14a6\3\2\2\2\u14a6\u14bd\3\2\2\2\u14a7")
        buf.write("\u14a8\7\u015e\2\2\u14a8\u14a9\5\u022a\u0116\2\u14a9\u14aa")
        buf.write("\7x\2\2\u14aa\u14ab\5\u0248\u0125\2\u14ab\u14ac\7h\2\2")
        buf.write("\u14ac\u14ae\5\u0232\u011a\2\u14ad\u14af\5j\66\2\u14ae")
        buf.write("\u14ad\3\2\2\2\u14ae\u14af\3\2\2\2\u14af\u14bd\3\2\2\2")
        buf.write("\u14b0\u14b1\7\u015e\2\2\u14b1\u14b2\7i\2\2\u14b2\u14b3")
        buf.write("\7\u0138\2\2\u14b3\u14b4\7f\2\2\u14b4\u14b5\5\u022a\u0116")
        buf.write("\2\u14b5\u14b6\7x\2\2\u14b6\u14b7\5\u0248\u0125\2\u14b7")
        buf.write("\u14b8\7h\2\2\u14b8\u14ba\5\u0232\u011a\2\u14b9\u14bb")
        buf.write("\5j\66\2\u14ba\u14b9\3\2\2\2\u14ba\u14bb\3\2\2\2\u14bb")
        buf.write("\u14bd\3\2\2\2\u14bc\u149e\3\2\2\2\u14bc\u14a7\3\2\2\2")
        buf.write("\u14bc\u14b0\3\2\2\2\u14bd\u0247\3\2\2\2\u14be\u14bf\t")
        buf.write("\34\2\2\u14bf\u0249\3\2\2\2\u14c0\u14c2\7V\2\2\u14c1\u14c3")
        buf.write("\5\u024c\u0127\2\u14c2\u14c1\3\2\2\2\u14c2\u14c3\3\2\2")
        buf.write("\2\u14c3\u14c4\3\2\2\2\u14c4\u14c6\7\u010a\2\2\u14c5\u14c7")
        buf.write("\5\u0250\u0129\2\u14c6\u14c5\3\2\2\2\u14c6\u14c7\3\2\2")
        buf.write("\2\u14c7\u14c9\3\2\2\2\u14c8\u14ca\5\u0252\u012a\2\u14c9")
        buf.write("\u14c8\3\2\2\2\u14c9\u14ca\3\2\2\2\u14ca\u14cb\3\2\2\2")
        buf.write("\u14cb\u14cc\7x\2\2\u14cc\u14ce\5\u0432\u021a\2\u14cd")
        buf.write("\u14cf\5\u0254\u012b\2\u14ce\u14cd\3\2\2\2\u14ce\u14cf")
        buf.write("\3\2\2\2\u14cf\u14d0\3\2\2\2\u14d0\u14d1\7\4\2\2\u14d1")
        buf.write("\u14d2\5\u0256\u012c\2\u14d2\u14d4\7\5\2\2\u14d3\u14d5")
        buf.write("\5\u025c\u012f\2\u14d4\u14d3\3\2\2\2\u14d4\u14d5\3\2\2")
        buf.write("\2\u14d5\u14d7\3\2\2\2\u14d6\u14d8\5t;\2\u14d7\u14d6\3")
        buf.write("\2\2\2\u14d7\u14d8\3\2\2\2\u14d8\u14da\3\2\2\2\u14d9\u14db")
        buf.write("\5\u00fc\177\2\u14da\u14d9\3\2\2\2\u14da\u14db\3\2\2\2")
        buf.write("\u14db\u14dd\3\2\2\2\u14dc\u14de\5\u0446\u0224\2\u14dd")
        buf.write("\u14dc\3\2\2\2\u14dd\u14de\3\2\2\2\u14de\u1500\3\2\2\2")
        buf.write("\u14df\u14e1\7V\2\2\u14e0\u14e2\5\u024c\u0127\2\u14e1")
        buf.write("\u14e0\3\2\2\2\u14e1\u14e2\3\2\2\2\u14e2\u14e3\3\2\2\2")
        buf.write("\u14e3\u14e5\7\u010a\2\2\u14e4\u14e6\5\u0250\u0129\2\u14e5")
        buf.write("\u14e4\3\2\2\2\u14e5\u14e6\3\2\2\2\u14e6\u14e7\3\2\2\2")
        buf.write("\u14e7\u14e8\7\u0104\2\2\u14e8\u14e9\7u\2\2\u14e9\u14ea")
        buf.write("\7\u01ad\2\2\u14ea\u14eb\5\u0568\u02b5\2\u14eb\u14ec\7")
        buf.write("x\2\2\u14ec\u14ee\5\u0432\u021a\2\u14ed\u14ef\5\u0254")
        buf.write("\u012b\2\u14ee\u14ed\3\2\2\2\u14ee\u14ef\3\2\2\2\u14ef")
        buf.write("\u14f0\3\2\2\2\u14f0\u14f1\7\4\2\2\u14f1\u14f2\5\u0256")
        buf.write("\u012c\2\u14f2\u14f4\7\5\2\2\u14f3\u14f5\5\u025c\u012f")
        buf.write("\2\u14f4\u14f3\3\2\2\2\u14f4\u14f5\3\2\2\2\u14f5\u14f7")
        buf.write("\3\2\2\2\u14f6\u14f8\5t;\2\u14f7\u14f6\3\2\2\2\u14f7\u14f8")
        buf.write("\3\2\2\2\u14f8\u14fa\3\2\2\2\u14f9\u14fb\5\u00fc\177\2")
        buf.write("\u14fa\u14f9\3\2\2\2\u14fa\u14fb\3\2\2\2\u14fb\u14fd\3")
        buf.write("\2\2\2\u14fc\u14fe\5\u0446\u0224\2\u14fd\u14fc\3\2\2\2")
        buf.write("\u14fd\u14fe\3\2\2\2\u14fe\u1500\3\2\2\2\u14ff\u14c0\3")
        buf.write("\2\2\2\u14ff\u14df\3\2\2\2\u1500\u024b\3\2\2\2\u1501\u1502")
        buf.write("\7\u008a\2\2\u1502\u024d\3\2\2\2\u1503\u1504\5\u0588\u02c5")
        buf.write("\2\u1504\u024f\3\2\2\2\u1505\u1506\7\u0095\2\2\u1506\u0251")
        buf.write("\3\2\2\2\u1507\u1508\5\u0568\u02b5\2\u1508\u0253\3\2\2")
        buf.write("\2\u1509\u150a\7\u008c\2\2\u150a\u150b\5\u0568\u02b5\2")
        buf.write("\u150b\u0255\3\2\2\2\u150c\u1511\5\u025a\u012e\2\u150d")
        buf.write("\u150e\7\b\2\2\u150e\u1510\5\u025a\u012e\2\u150f\u150d")
        buf.write("\3\2\2\2\u1510\u1513\3\2\2\2\u1511\u150f\3\2\2\2\u1511")
        buf.write("\u1512\3\2\2\2\u1512\u0257\3\2\2\2\u1513\u1511\3\2\2\2")
        buf.write("\u1514\u1516\5\u0260\u0131\2\u1515\u1514\3\2\2\2\u1515")
        buf.write("\u1516\3\2\2\2\u1516\u1518\3\2\2\2\u1517\u1519\5\u0262")
        buf.write("\u0132\2\u1518\u1517\3\2\2\2\u1518\u1519\3\2\2\2\u1519")
        buf.write("\u151b\3\2\2\2\u151a\u151c\5\u0264\u0133\2\u151b\u151a")
        buf.write("\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u151e\3\2\2\2\u151d")
        buf.write("\u151f\5\u0266\u0134\2\u151e\u151d\3\2\2\2\u151e\u151f")
        buf.write("\3\2\2\2\u151f\u152c\3\2\2\2\u1520\u1522\5\u0260\u0131")
        buf.write("\2\u1521\u1520\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u1523")
        buf.write("\3\2\2\2\u1523\u1524\5\u020a\u0106\2\u1524\u1526\5r:\2")
        buf.write("\u1525\u1527\5\u0264\u0133\2\u1526\u1525\3\2\2\2\u1526")
        buf.write("\u1527\3\2\2\2\u1527\u1529\3\2\2\2\u1528\u152a\5\u0266")
        buf.write("\u0134\2\u1529\u1528\3\2\2\2\u1529\u152a\3\2\2\2\u152a")
        buf.write("\u152c\3\2\2\2\u152b\u1515\3\2\2\2\u152b\u1521\3\2\2\2")
        buf.write("\u152c\u0259\3\2\2\2\u152d\u152e\5\u0588\u02c5\2\u152e")
        buf.write("\u152f\5\u0258\u012d\2\u152f\u1539\3\2\2\2\u1530\u1531")
        buf.write("\5\u04c0\u0261\2\u1531\u1532\5\u0258\u012d\2\u1532\u1539")
        buf.write("\3\2\2\2\u1533\u1534\7\4\2\2\u1534\u1535\5\u048c\u0247")
        buf.write("\2\u1535\u1536\7\5\2\2\u1536\u1537\5\u0258\u012d\2\u1537")
        buf.write("\u1539\3\2\2\2\u1538\u152d\3\2\2\2\u1538\u1530\3\2\2\2")
        buf.write("\u1538\u1533\3\2\2\2\u1539\u025b\3\2\2\2\u153a\u153b\7")
        buf.write("\u01e1\2\2\u153b\u153c\7\4\2\2\u153c\u153d\5\u025e\u0130")
        buf.write("\2\u153d\u153e\7\5\2\2\u153e\u025d\3\2\2\2\u153f\u1544")
        buf.write("\5\u025a\u012e\2\u1540\u1541\7\b\2\2\u1541\u1543\5\u025a")
        buf.write("\u012e\2\u1542\u1540\3\2\2\2\u1543\u1546\3\2\2\2\u1544")
        buf.write("\u1542\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u025f\3\2\2\2")
        buf.write("\u1546\u1544\3\2\2\2\u1547\u1548\7S\2\2\u1548\u1549\5")
        buf.write("\u020a\u0106\2\u1549\u0261\3\2\2\2\u154a\u154b\5\u020a")
        buf.write("\u0106\2\u154b\u0263\3\2\2\2\u154c\u154d\t\35\2\2\u154d")
        buf.write("\u0265\3\2\2\2\u154e\u154f\7\u0132\2\2\u154f\u1553\7\u00f7")
        buf.write("\2\2\u1550\u1551\7\u0132\2\2\u1551\u1553\7\u0118\2\2\u1552")
        buf.write("\u154e\3\2\2\2\u1552\u1550\3\2\2\2\u1553\u0267\3\2\2\2")
        buf.write("\u1554\u1556\7V\2\2\u1555\u1557\5\u026a\u0136\2\u1556")
        buf.write("\u1555\3\2\2\2\u1556\u1557\3\2\2\2\u1557\u1558\3\2\2\2")
        buf.write("\u1558\u1559\t\31\2\2\u1559\u155a\5\u056e\u02b8\2\u155a")
        buf.write("\u1564\5\u0274\u013b\2\u155b\u1562\7\u015d\2\2\u155c\u1563")
        buf.write("\5\u027e\u0140\2\u155d\u155e\7\u0084\2\2\u155e\u155f\7")
        buf.write("\4\2\2\u155f\u1560\5\u029c\u014f\2\u1560\u1561\7\5\2\2")
        buf.write("\u1561\u1563\3\2\2\2\u1562\u155c\3\2\2\2\u1562\u155d\3")
        buf.write("\2\2\2\u1563\u1565\3\2\2\2\u1564\u155b\3\2\2\2\u1564\u1565")
        buf.write("\3\2\2\2\u1565\u1566\3\2\2\2\u1566\u1567\5\u028e\u0148")
        buf.write("\2\u1567\u0269\3\2\2\2\u1568\u1569\7z\2\2\u1569\u156a")
        buf.write("\7\u0158\2\2\u156a\u026b\3\2\2\2\u156b\u156d\7\4\2\2\u156c")
        buf.write("\u156e\5\u026e\u0138\2\u156d\u156c\3\2\2\2\u156d\u156e")
        buf.write("\3\2\2\2\u156e\u156f\3\2\2\2\u156f\u1570\7\5\2\2\u1570")
        buf.write("\u026d\3\2\2\2\u1571\u1576\5\u0278\u013d\2\u1572\u1573")
        buf.write("\7\b\2\2\u1573\u1575\5\u0278\u013d\2\u1574\u1572\3\2\2")
        buf.write("\2\u1575\u1578\3\2\2\2\u1576\u1574\3\2\2\2\u1576\u1577")
        buf.write("\3\2\2\2\u1577\u026f\3\2\2\2\u1578\u1576\3\2\2\2\u1579")
        buf.write("\u157e\5\u0272\u013a\2\u157a\u157b\7\b\2\2\u157b\u157d")
        buf.write("\5\u0272\u013a\2\u157c\u157a\3\2\2\2\u157d\u1580\3\2\2")
        buf.write("\2\u157e\u157c\3\2\2\2\u157e\u157f\3\2\2\2\u157f\u0271")
        buf.write("\3\2\2\2\u1580\u157e\3\2\2\2\u1581\u1582\5\u056e\u02b8")
        buf.write("\2\u1582\u1583\5\u026c\u0137\2\u1583\u158a\3\2\2\2\u1584")
        buf.write("\u158a\5\u0596\u02cc\2\u1585\u1587\5\u0588\u02c5\2\u1586")
        buf.write("\u1588\5\u052e\u0298\2\u1587\u1586\3\2\2\2\u1587\u1588")
        buf.write("\3\2\2\2\u1588\u158a\3\2\2\2\u1589\u1581\3\2\2\2\u1589")
        buf.write("\u1584\3\2\2\2\u1589\u1585\3\2\2\2\u158a\u0273\3\2\2\2")
        buf.write("\u158b\u158d\7\4\2\2\u158c\u158e\5\u0276\u013c\2\u158d")
        buf.write("\u158c\3\2\2\2\u158d\u158e\3\2\2\2\u158e\u158f\3\2\2\2")
        buf.write("\u158f\u1590\7\5\2\2\u1590\u0275\3\2\2\2\u1591\u1596\5")
        buf.write("\u0282\u0142\2\u1592\u1593\7\b\2\2\u1593\u1595\5\u0282")
        buf.write("\u0142\2\u1594\u1592\3\2\2\2\u1595\u1598\3\2\2\2\u1596")
        buf.write("\u1594\3\2\2\2\u1596\u1597\3\2\2\2\u1597\u0277\3\2\2\2")
        buf.write("\u1598\u1596\3\2\2\2\u1599\u159b\5\u027a\u013e\2\u159a")
        buf.write("\u159c\5\u027c\u013f\2\u159b\u159a\3\2\2\2\u159b\u159c")
        buf.write("\3\2\2\2\u159c\u159d\3\2\2\2\u159d\u159e\5\u0280\u0141")
        buf.write("\2\u159e\u15a7\3\2\2\2\u159f\u15a1\5\u027c\u013f\2\u15a0")
        buf.write("\u15a2\5\u027a\u013e\2\u15a1\u15a0\3\2\2\2\u15a1\u15a2")
        buf.write("\3\2\2\2\u15a2\u15a3\3\2\2\2\u15a3\u15a4\5\u0280\u0141")
        buf.write("\2\u15a4\u15a7\3\2\2\2\u15a5\u15a7\5\u0280\u0141\2\u15a6")
        buf.write("\u1599\3\2\2\2\u15a6\u159f\3\2\2\2\u15a6\u15a5\3\2\2\2")
        buf.write("\u15a7\u0279\3\2\2\2\u15a8\u15aa\7l\2\2\u15a9\u15ab\7")
        buf.write("\u01ed\2\2\u15aa\u15a9\3\2\2\2\u15aa\u15ab\3\2\2\2\u15ab")
        buf.write("\u15b0\3\2\2\2\u15ac\u15b0\7\u01ed\2\2\u15ad\u15b0\7\u01b1")
        buf.write("\2\2\u15ae\u15b0\7\u008d\2\2\u15af\u15a8\3\2\2\2\u15af")
        buf.write("\u15ac\3\2\2\2\u15af\u15ad\3\2\2\2\u15af\u15ae\3\2\2\2")
        buf.write("\u15b0\u027b\3\2\2\2\u15b1\u15b2\5\u058a\u02c6\2\u15b2")
        buf.write("\u027d\3\2\2\2\u15b3\u15b4\5\u0280\u0141\2\u15b4\u027f")
        buf.write("\3\2\2\2\u15b5\u15bf\5\u045e\u0230\2\u15b6\u15b8\7\u01c0")
        buf.write("\2\2\u15b7\u15b6\3\2\2\2\u15b7\u15b8\3\2\2\2\u15b8\u15b9")
        buf.write("\3\2\2\2\u15b9\u15ba\5\u058a\u02c6\2\u15ba\u15bb\5\u020c")
        buf.write("\u0107\2\u15bb\u15bc\7\35\2\2\u15bc\u15bd\7\u0189\2\2")
        buf.write("\u15bd\u15bf\3\2\2\2\u15be\u15b5\3\2\2\2\u15be\u15b7\3")
        buf.write("\2\2\2\u15bf\u0281\3\2\2\2\u15c0\u15c3\5\u0278\u013d\2")
        buf.write("\u15c1\u15c2\t\36\2\2\u15c2\u15c4\5\u048c\u0247\2\u15c3")
        buf.write("\u15c1\3\2\2\2\u15c3\u15c4\3\2\2\2\u15c4\u0283\3\2\2\2")
        buf.write("\u15c5\u15c6\5\u0278\u013d\2\u15c6\u0285\3\2\2\2\u15c7")
        buf.write("\u15d2\7\4\2\2\u15c8\u15d3\7\13\2\2\u15c9\u15d3\5\u0288")
        buf.write("\u0145\2\u15ca\u15cb\7{\2\2\u15cb\u15cc\7\u00bb\2\2\u15cc")
        buf.write("\u15d3\5\u0288\u0145\2\u15cd\u15ce\5\u0288\u0145\2\u15ce")
        buf.write("\u15cf\7{\2\2\u15cf\u15d0\7\u00bb\2\2\u15d0\u15d1\5\u0288")
        buf.write("\u0145\2\u15d1\u15d3\3\2\2\2\u15d2\u15c8\3\2\2\2\u15d2")
        buf.write("\u15c9\3\2\2\2\u15d2\u15ca\3\2\2\2\u15d2\u15cd\3\2\2\2")
        buf.write("\u15d3\u15d4\3\2\2\2\u15d4\u15d5\7\5\2\2\u15d5\u0287\3")
        buf.write("\2\2\2\u15d6\u15db\5\u0284\u0143\2\u15d7\u15d8\7\b\2\2")
        buf.write("\u15d8\u15da\5\u0284\u0143\2\u15d9\u15d7\3\2\2\2\u15da")
        buf.write("\u15dd\3\2\2\2\u15db\u15d9\3\2\2\2\u15db\u15dc\3\2\2\2")
        buf.write("\u15dc\u0289\3\2\2\2\u15dd\u15db\3\2\2\2\u15de\u15df\5")
        buf.write("\u056e\u02b8\2\u15df\u15e0\5\u0286\u0144\2\u15e0\u028b")
        buf.write("\3\2\2\2\u15e1\u15e6\5\u028a\u0146\2\u15e2\u15e3\7\b\2")
        buf.write("\2\u15e3\u15e5\5\u028a\u0146\2\u15e4\u15e2\3\2\2\2\u15e5")
        buf.write("\u15e8\3\2\2\2\u15e6\u15e4\3\2\2\2\u15e6\u15e7\3\2\2\2")
        buf.write("\u15e7\u028d\3\2\2\2\u15e8\u15e6\3\2\2\2\u15e9\u15eb\5")
        buf.write("\u0292\u014a\2\u15ea\u15e9\3\2\2\2\u15eb\u15ec\3\2\2\2")
        buf.write("\u15ec\u15ea\3\2\2\2\u15ec\u15ed\3\2\2\2\u15ed\u15ee\3")
        buf.write("\2\2\2\u15ee\u15ef\b\u0148\1\2\u15ef\u028f\3\2\2\2\u15f0")
        buf.write("\u15f1\7\u00bd\2\2\u15f1\u15f2\7x\2\2\u15f2\u15f3\7v\2")
        buf.write("\2\u15f3\u1614\7\u01f2\2\2\u15f4\u15f5\7\u015d\2\2\u15f5")
        buf.write("\u15f6\7v\2\2\u15f6\u15f7\7x\2\2\u15f7\u15f8\7v\2\2\u15f8")
        buf.write("\u1614\7\u01f2\2\2\u15f9\u1614\7\u017b\2\2\u15fa\u1614")
        buf.write("\7\u0106\2\2\u15fb\u1614\7\u0173\2\2\u15fc\u1614\7\u019a")
        buf.write("\2\2\u15fd\u15fe\7\u00f5\2\2\u15fe\u15ff\7\u0168\2\2\u15ff")
        buf.write("\u1614\7\u00dd\2\2\u1600\u1601\7\u00f5\2\2\u1601\u1602")
        buf.write("\7\u0168\2\2\u1602\u1614\7\u0112\2\2\u1603\u1604\7\u0168")
        buf.write("\2\2\u1604\u1614\7\u00dd\2\2\u1605\u1606\7\u0168\2\2\u1606")
        buf.write("\u1614\7\u0112\2\2\u1607\u1614\7\u0119\2\2\u1608\u1609")
        buf.write("\7u\2\2\u1609\u1614\7\u0119\2\2\u160a\u160b\7\u00d2\2")
        buf.write("\2\u160b\u1614\5\u0122\u0092\2\u160c\u160d\7\u0161\2\2")
        buf.write("\u160d\u1614\5\u0122\u0092\2\u160e\u160f\7\u01f3\2\2\u160f")
        buf.write("\u1614\5\u020a\u0106\2\u1610\u1614\5P)\2\u1611\u1612\7")
        buf.write("\u01f4\2\2\u1612\u1614\5\u0588\u02c5\2\u1613\u15f0\3\2")
        buf.write("\2\2\u1613\u15f4\3\2\2\2\u1613\u15f9\3\2\2\2\u1613\u15fa")
        buf.write("\3\2\2\2\u1613\u15fb\3\2\2\2\u1613\u15fc\3\2\2\2\u1613")
        buf.write("\u15fd\3\2\2\2\u1613\u1600\3\2\2\2\u1613\u1603\3\2\2\2")
        buf.write("\u1613\u1605\3\2\2\2\u1613\u1607\3\2\2\2\u1613\u1608\3")
        buf.write("\2\2\2\u1613\u160a\3\2\2\2\u1613\u160c\3\2\2\2\u1613\u160e")
        buf.write("\3\2\2\2\u1613\u1610\3\2\2\2\u1613\u1611\3\2\2\2\u1614")
        buf.write("\u0291\3\2\2\2\u1615\u1616\7L\2\2\u1616\u161e\5\u0294")
        buf.write("\u014b\2\u1617\u1618\7\u0116\2\2\u1618\u161e\5F$\2\u1619")
        buf.write("\u161a\7\u01e3\2\2\u161a\u161e\5\u0296\u014c\2\u161b\u161e")
        buf.write("\7\u0090\2\2\u161c\u161e\5\u0290\u0149\2\u161d\u1615\3")
        buf.write("\2\2\2\u161d\u1617\3\2\2\2\u161d\u1619\3\2\2\2\u161d\u161b")
        buf.write("\3\2\2\2\u161d\u161c\3\2\2\2\u161e\u0293\3\2\2\2\u161f")
        buf.write("\u1625\5\u057a\u02be\2\u1620\u1621\5\u057a\u02be\2\u1621")
        buf.write("\u1622\7\b\2\2\u1622\u1623\5\u057a\u02be\2\u1623\u1625")
        buf.write("\3\2\2\2\u1624\u161f\3\2\2\2\u1624\u1620\3\2\2\2\u1625")
        buf.write("\u0295\3\2\2\2\u1626\u1627\7f\2\2\u1627\u1628\7\u0189")
        buf.write("\2\2\u1628\u162f\5\u045e\u0230\2\u1629\u162a\7\b\2\2\u162a")
        buf.write("\u162b\7f\2\2\u162b\u162c\7\u0189\2\2\u162c\u162e\5\u045e")
        buf.write("\u0230\2\u162d\u1629\3\2\2\2\u162e\u1631\3\2\2\2\u162f")
        buf.write("\u162d\3\2\2\2\u162f\u1630\3\2\2\2\u1630\u0297\3\2\2\2")
        buf.write("\u1631\u162f\3\2\2\2\u1632\u1633\7\u0091\2\2\u1633\u1634")
        buf.write("\5\u01ca\u00e6\2\u1634\u0299\3\2\2\2\u1635\u1636\5\u027c")
        buf.write("\u013f\2\u1636\u1637\5\u0280\u0141\2\u1637\u029b\3\2\2")
        buf.write("\2\u1638\u163d\5\u029a\u014e\2\u1639\u163a\7\b\2\2\u163a")
        buf.write("\u163c\5\u029a\u014e\2\u163b\u1639\3\2\2\2\u163c\u163f")
        buf.write("\3\2\2\2\u163d\u163b\3\2\2\2\u163d\u163e\3\2\2\2\u163e")
        buf.write("\u029d\3\2\2\2\u163f\u163d\3\2\2\2\u1640\u1641\7\u00b2")
        buf.write("\2\2\u1641\u1642\t\37\2\2\u1642\u1643\5\u0272\u013a\2")
        buf.write("\u1643\u1645\5\u02a0\u0151\2\u1644\u1646\5\u02a2\u0152")
        buf.write("\2\u1645\u1644\3\2\2\2\u1645\u1646\3\2\2\2\u1646\u029f")
        buf.write("\3\2\2\2\u1647\u1649\5\u0290\u0149\2\u1648\u1647\3\2\2")
        buf.write("\2\u1649\u164a\3\2\2\2\u164a\u1648\3\2\2\2\u164a\u164b")
        buf.write("\3\2\2\2\u164b\u02a1\3\2\2\2\u164c\u164d\7\u015c\2\2\u164d")
        buf.write("\u02a3\3\2\2\2\u164e\u164f\7\u00e7\2\2\u164f\u1650\7\u00fb")
        buf.write("\2\2\u1650\u1652\5\u0270\u0139\2\u1651\u1653\5j\66\2\u1652")
        buf.write("\u1651\3\2\2\2\u1652\u1653\3\2\2\2\u1653\u1679\3\2\2\2")
        buf.write("\u1654\u1655\7\u00e7\2\2\u1655\u1656\7\u00fb\2\2\u1656")
        buf.write("\u1657\7\u0104\2\2\u1657\u1658\7\u01ad\2\2\u1658\u165a")
        buf.write("\5\u0270\u0139\2\u1659\u165b\5j\66\2\u165a\u1659\3\2\2")
        buf.write("\2\u165a\u165b\3\2\2\2\u165b\u1679\3\2\2\2\u165c\u165d")
        buf.write("\7\u00e7\2\2\u165d\u165e\7\u0149\2\2\u165e\u1660\5\u0270")
        buf.write("\u0139\2\u165f\u1661\5j\66\2\u1660\u165f\3\2\2\2\u1660")
        buf.write("\u1661\3\2\2\2\u1661\u1679\3\2\2\2\u1662\u1663\7\u00e7")
        buf.write("\2\2\u1663\u1664\7\u0149\2\2\u1664\u1665\7\u0104\2\2\u1665")
        buf.write("\u1666\7\u01ad\2\2\u1666\u1668\5\u0270\u0139\2\u1667\u1669")
        buf.write("\5j\66\2\u1668\u1667\3\2\2\2\u1668\u1669\3\2\2\2\u1669")
        buf.write("\u1679\3\2\2\2\u166a\u166b\7\u00e7\2\2\u166b\u166c\7\u01e2")
        buf.write("\2\2\u166c\u166e\5\u0270\u0139\2\u166d\u166f\5j\66\2\u166e")
        buf.write("\u166d\3\2\2\2\u166e\u166f\3\2\2\2\u166f\u1679\3\2\2\2")
        buf.write("\u1670\u1671\7\u00e7\2\2\u1671\u1672\7\u01e2\2\2\u1672")
        buf.write("\u1673\7\u0104\2\2\u1673\u1674\7\u01ad\2\2\u1674\u1676")
        buf.write("\5\u0270\u0139\2\u1675\u1677\5j\66\2\u1676\u1675\3\2\2")
        buf.write("\2\u1676\u1677\3\2\2\2\u1677\u1679\3\2\2\2\u1678\u164e")
        buf.write("\3\2\2\2\u1678\u1654\3\2\2\2\u1678\u165c\3\2\2\2\u1678")
        buf.write("\u1662\3\2\2\2\u1678\u166a\3\2\2\2\u1678\u1670\3\2\2\2")
        buf.write("\u1679\u02a5\3\2\2\2\u167a\u167b\7\u00e7\2\2\u167b\u167c")
        buf.write("\7\u00b0\2\2\u167c\u167e\5\u028c\u0147\2\u167d\u167f\5")
        buf.write("j\66\2\u167e\u167d\3\2\2\2\u167e\u167f\3\2\2\2\u167f\u1689")
        buf.write("\3\2\2\2\u1680\u1681\7\u00e7\2\2\u1681\u1682\7\u00b0\2")
        buf.write("\2\u1682\u1683\7\u0104\2\2\u1683\u1684\7\u01ad\2\2\u1684")
        buf.write("\u1686\5\u028c\u0147\2\u1685\u1687\5j\66\2\u1686\u1685")
        buf.write("\3\2\2\2\u1686\u1687\3\2\2\2\u1687\u1689\3\2\2\2\u1688")
        buf.write("\u167a\3\2\2\2\u1688\u1680\3\2\2\2\u1689\u02a7\3\2\2\2")
        buf.write("\u168a\u168b\7\u00e7\2\2\u168b\u168c\7\u0137\2\2\u168c")
        buf.write("\u168e\5\u02ae\u0158\2\u168d\u168f\5j\66\2\u168e\u168d")
        buf.write("\3\2\2\2\u168e\u168f\3\2\2\2\u168f\u1699\3\2\2\2\u1690")
        buf.write("\u1691\7\u00e7\2\2\u1691\u1692\7\u0137\2\2\u1692\u1693")
        buf.write("\7\u0104\2\2\u1693\u1694\7\u01ad\2\2\u1694\u1696\5\u02ae")
        buf.write("\u0158\2\u1695\u1697\5j\66\2\u1696\u1695\3\2\2\2\u1696")
        buf.write("\u1697\3\2\2\2\u1697\u1699\3\2\2\2\u1698\u168a\3\2\2\2")
        buf.write("\u1698\u1690\3\2\2\2\u1699\u02a9\3\2\2\2\u169a\u169b\7")
        buf.write("\4\2\2\u169b\u169c\5\u045e\u0230\2\u169c\u169d\7\5\2\2")
        buf.write("\u169d\u16b1\3\2\2\2\u169e\u169f\7\4\2\2\u169f\u16a0\5")
        buf.write("\u045e\u0230\2\u16a0\u16a1\7\b\2\2\u16a1\u16a2\5\u045e")
        buf.write("\u0230\2\u16a2\u16a3\7\5\2\2\u16a3\u16b1\3\2\2\2\u16a4")
        buf.write("\u16a5\7\4\2\2\u16a5\u16a6\7\u01b8\2\2\u16a6\u16a7\7\b")
        buf.write("\2\2\u16a7\u16a8\5\u045e\u0230\2\u16a8\u16a9\7\5\2\2\u16a9")
        buf.write("\u16b1\3\2\2\2\u16aa\u16ab\7\4\2\2\u16ab\u16ac\5\u045e")
        buf.write("\u0230\2\u16ac\u16ad\7\b\2\2\u16ad\u16ae\7\u01b8\2\2\u16ae")
        buf.write("\u16af\7\5\2\2\u16af\u16b1\3\2\2\2\u16b0\u169a\3\2\2\2")
        buf.write("\u16b0\u169e\3\2\2\2\u16b0\u16a4\3\2\2\2\u16b0\u16aa\3")
        buf.write("\2\2\2\u16b1\u02ab\3\2\2\2\u16b2\u16b3\5\u0588\u02c5\2")
        buf.write("\u16b3\u16b4\7\r\2\2\u16b4\u16b6\3\2\2\2\u16b5\u16b2\3")
        buf.write("\2\2\2\u16b6\u16b9\3\2\2\2\u16b7\u16b5\3\2\2\2\u16b7\u16b8")
        buf.write("\3\2\2\2\u16b8\u16ba\3\2\2\2\u16b9\u16b7\3\2\2\2\u16ba")
        buf.write("\u16bb\5\u04f8\u027d\2\u16bb\u02ad\3\2\2\2\u16bc\u16c1")
        buf.write("\5\u02b0\u0159\2\u16bd\u16be\7\b\2\2\u16be\u16c0\5\u02b0")
        buf.write("\u0159\2\u16bf\u16bd\3\2\2\2\u16c0\u16c3\3\2\2\2\u16c1")
        buf.write("\u16bf\3\2\2\2\u16c1\u16c2\3\2\2\2\u16c2\u02af\3\2\2\2")
        buf.write("\u16c3\u16c1\3\2\2\2\u16c4\u16c5\5\u02ac\u0157\2\u16c5")
        buf.write("\u16c6\5\u02aa\u0156\2\u16c6\u02b1\3\2\2\2\u16c7\u16c8")
        buf.write("\7a\2\2\u16c8\u16c9\5\u02b4\u015b\2\u16c9\u02b3\3\2\2")
        buf.write("\2\u16ca\u16cc\5\u02b6\u015c\2\u16cb\u16ca\3\2\2\2\u16cc")
        buf.write("\u16cd\3\2\2\2\u16cd\u16cb\3\2\2\2\u16cd\u16ce\3\2\2\2")
        buf.write("\u16ce\u02b5\3\2\2\2\u16cf\u16d3\5\u057a\u02be\2\u16d0")
        buf.write("\u16d1\7\u0116\2\2\u16d1\u16d3\5F$\2\u16d2\u16cf\3\2\2")
        buf.write("\2\u16d2\u16d0\3\2\2\2\u16d3\u02b7\3\2\2\2\u16d4\u16d5")
        buf.write("\7V\2\2\u16d5\u16d6\7Q\2\2\u16d6\u16d7\7\4\2\2\u16d7\u16d8")
        buf.write("\5\u045e\u0230\2\u16d8\u16d9\7L\2\2\u16d9\u16da\5\u045e")
        buf.write("\u0230\2\u16da\u16db\7\5\2\2\u16db\u16dc\7\u0091\2\2\u16dc")
        buf.write("\u16dd\7\u00fb\2\2\u16dd\u16df\5\u0272\u013a\2\u16de\u16e0")
        buf.write("\5\u02ba\u015e\2\u16df\u16de\3\2\2\2\u16df\u16e0\3\2\2")
        buf.write("\2\u16e0\u16fa\3\2\2\2\u16e1\u16e2\7V\2\2\u16e2\u16e3")
        buf.write("\7Q\2\2\u16e3\u16e4\7\4\2\2\u16e4\u16e5\5\u045e\u0230")
        buf.write("\2\u16e5\u16e6\7L\2\2\u16e6\u16e7\5\u045e\u0230\2\u16e7")
        buf.write("\u16e8\7\5\2\2\u16e8\u16e9\7\u019c\2\2\u16e9\u16eb\7\u00fb")
        buf.write("\2\2\u16ea\u16ec\5\u02ba\u015e\2\u16eb\u16ea\3\2\2\2\u16eb")
        buf.write("\u16ec\3\2\2\2\u16ec\u16fa\3\2\2\2\u16ed\u16ee\7V\2\2")
        buf.write("\u16ee\u16ef\7Q\2\2\u16ef\u16f0\7\4\2\2\u16f0\u16f1\5")
        buf.write("\u045e\u0230\2\u16f1\u16f2\7L\2\2\u16f2\u16f3\5\u045e")
        buf.write("\u0230\2\u16f3\u16f4\7\5\2\2\u16f4\u16f5\7\u0091\2\2\u16f5")
        buf.write("\u16f7\7\u01b1\2\2\u16f6\u16f8\5\u02ba\u015e\2\u16f7\u16f6")
        buf.write("\3\2\2\2\u16f7\u16f8\3\2\2\2\u16f8\u16fa\3\2\2\2\u16f9")
        buf.write("\u16d4\3\2\2\2\u16f9\u16e1\3\2\2\2\u16f9\u16ed\3\2\2\2")
        buf.write("\u16fa\u02b9\3\2\2\2\u16fb\u16fc\7L\2\2\u16fc\u1700\7")
        buf.write("\u0107\2\2\u16fd\u16fe\7L\2\2\u16fe\u1700\7\u00b5\2\2")
        buf.write("\u16ff\u16fb\3\2\2\2\u16ff\u16fd\3\2\2\2\u1700\u02bb\3")
        buf.write("\2\2\2\u1701\u1702\7\u00e7\2\2\u1702\u1704\7Q\2\2\u1703")
        buf.write("\u1705\5\u02be\u0160\2\u1704\u1703\3\2\2\2\u1704\u1705")
        buf.write("\3\2\2\2\u1705\u1706\3\2\2\2\u1706\u1707\7\4\2\2\u1707")
        buf.write("\u1708\5\u045e\u0230\2\u1708\u1709\7L\2\2\u1709\u170a")
        buf.write("\5\u045e\u0230\2\u170a\u170c\7\5\2\2\u170b\u170d\5j\66")
        buf.write("\2\u170c\u170b\3\2\2\2\u170c\u170d\3\2\2\2\u170d\u02bd")
        buf.write("\3\2\2\2\u170e\u170f\7\u0104\2\2\u170f\u1710\7\u01ad\2")
        buf.write("\2\u1710\u02bf\3\2\2\2\u1711\u1713\7V\2\2\u1712\u1714")
        buf.write("\5\u026a\u0136\2\u1713\u1712\3\2\2\2\u1713\u1714\3\2\2")
        buf.write("\2\u1714\u1715\3\2\2\2\u1715\u1716\7\u01e3\2\2\u1716\u1717")
        buf.write("\7f\2\2\u1717\u1718\5\u045e\u0230\2\u1718\u1719\7\u0116")
        buf.write("\2\2\u1719\u171a\5\u0568\u02b5\2\u171a\u171b\7\4\2\2\u171b")
        buf.write("\u171c\5\u02c2\u0162\2\u171c\u171d\7\5\2\2\u171d\u02c1")
        buf.write("\3\2\2\2\u171e\u171f\7h\2\2\u171f\u1720\7\u01f5\2\2\u1720")
        buf.write("\u1721\7\u0091\2\2\u1721\u1722\7\u00fb\2\2\u1722\u1723")
        buf.write("\5\u0272\u013a\2\u1723\u1724\7\b\2\2\u1724\u1725\7\u0086")
        buf.write("\2\2\u1725\u1726\7\u01f5\2\2\u1726\u1727\7\u0091\2\2\u1727")
        buf.write("\u1728\7\u00fb\2\2\u1728\u1729\5\u0272\u013a\2\u1729\u1741")
        buf.write("\3\2\2\2\u172a\u172b\7\u0086\2\2\u172b\u172c\7\u01f5\2")
        buf.write("\2\u172c\u172d\7\u0091\2\2\u172d\u172e\7\u00fb\2\2\u172e")
        buf.write("\u172f\5\u0272\u013a\2\u172f\u1730\7\b\2\2\u1730\u1731")
        buf.write("\7h\2\2\u1731\u1732\7\u01f5\2\2\u1732\u1733\7\u0091\2")
        buf.write("\2\u1733\u1734\7\u00fb\2\2\u1734\u1735\5\u0272\u013a\2")
        buf.write("\u1735\u1741\3\2\2\2\u1736\u1737\7h\2\2\u1737\u1738\7")
        buf.write("\u01f5\2\2\u1738\u1739\7\u0091\2\2\u1739\u173a\7\u00fb")
        buf.write("\2\2\u173a\u1741\5\u0272\u013a\2\u173b\u173c\7\u0086\2")
        buf.write("\2\u173c\u173d\7\u01f5\2\2\u173d\u173e\7\u0091\2\2\u173e")
        buf.write("\u173f\7\u00fb\2\2\u173f\u1741\5\u0272\u013a\2\u1740\u171e")
        buf.write("\3\2\2\2\u1740\u172a\3\2\2\2\u1740\u1736\3\2\2\2\u1740")
        buf.write("\u173b\3\2\2\2\u1741\u02c3\3\2\2\2\u1742\u1743\7\u00e7")
        buf.write("\2\2\u1743\u1745\7\u01e3\2\2\u1744\u1746\5\u02be\u0160")
        buf.write("\2\u1745\u1744\3\2\2\2\u1745\u1746\3\2\2\2\u1746\u1747")
        buf.write("\3\2\2\2\u1747\u1748\7f\2\2\u1748\u1749\5\u045e\u0230")
        buf.write("\2\u1749\u174a\7\u0116\2\2\u174a\u174c\5\u0568\u02b5\2")
        buf.write("\u174b\u174d\5j\66\2\u174c\u174b\3\2\2\2\u174c\u174d\3")
        buf.write("\2\2\2\u174d\u02c5\3\2\2\2\u174e\u1750\7\u0153\2\2\u174f")
        buf.write("\u1751\5\u02cc\u0167\2\u1750\u174f\3\2\2\2\u1750\u1751")
        buf.write("\3\2\2\2\u1751\u1752\3\2\2\2\u1752\u1754\5\u02c8\u0165")
        buf.write("\2\u1753\u1755\5\u0250\u0129\2\u1754\u1753\3\2\2\2\u1754")
        buf.write("\u1755\3\2\2\2\u1755\u1756\3\2\2\2\u1756\u1757\5\u0564")
        buf.write("\u02b3\2\u1757\u176d\3\2\2\2\u1758\u175a\7\u0153\2\2\u1759")
        buf.write("\u175b\5\u02cc\u0167\2\u175a\u1759\3\2\2\2\u175a\u175b")
        buf.write("\3\2\2\2\u175b\u175c\3\2\2\2\u175c\u175e\7\u0164\2\2\u175d")
        buf.write("\u175f\5\u0250\u0129\2\u175e\u175d\3\2\2\2\u175e\u175f")
        buf.write("\3\2\2\2\u175f\u1760\3\2\2\2\u1760\u176d\5\u0568\u02b5")
        buf.write("\2\u1761\u1763\7\u0153\2\2\u1762\u1764\5\u02cc\u0167\2")
        buf.write("\u1763\u1762\3\2\2\2\u1763\u1764\3\2\2\2\u1764\u1765\3")
        buf.write("\2\2\2\u1765\u1767\5\u02ca\u0166\2\u1766\u1768\5\u0250")
        buf.write("\u0129\2\u1767\u1766\3\2\2\2\u1767\u1768\3\2\2\2\u1768")
        buf.write("\u176a\3\2\2\2\u1769\u176b\5\u024e\u0128\2\u176a\u1769")
        buf.write("\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u176d\3\2\2\2\u176c")
        buf.write("\u174e\3\2\2\2\u176c\u1758\3\2\2\2\u176c\u1761\3\2\2\2")
        buf.write("\u176d\u02c7\3\2\2\2\u176e\u176f\t\25\2\2\u176f\u02c9")
        buf.write("\3\2\2\2\u1770\u1771\t \2\2\u1771\u02cb\3\2\2\2\u1772")
        buf.write("\u1773\7\4\2\2\u1773\u1774\5\u0352\u01aa\2\u1774\u1775")
        buf.write("\7\5\2\2\u1775\u02cd\3\2\2\2\u1776\u1777\7\u00b2\2\2\u1777")
        buf.write("\u1778\7\u0180\2\2\u1778\u1779\5\u0568\u02b5\2\u1779\u177a")
        buf.write("\7\u016e\2\2\u177a\u177b\5r:\2\u177b\u1783\3\2\2\2\u177c")
        buf.write("\u177d\7\u00b2\2\2\u177d\u177e\7\u0180\2\2\u177e\u177f")
        buf.write("\5\u0568\u02b5\2\u177f\u1780\7\u015a\2\2\u1780\u1781\5")
        buf.write("r:\2\u1781\u1783\3\2\2\2\u1782\u1776\3\2\2\2\u1782\u177c")
        buf.write("\3\2\2\2\u1783\u02cf\3\2\2\2\u1784\u1785\7\u00b2\2\2\u1785")
        buf.write("\u1786\7\u00b0\2\2\u1786\u1787\5\u028a\u0146\2\u1787\u1788")
        buf.write("\7\u0156\2\2\u1788\u1789\7\u0086\2\2\u1789\u178a\5\u0568")
        buf.write("\u02b5\2\u178a\u196c\3\2\2\2\u178b\u178c\7\u00b2\2\2\u178c")
        buf.write("\u178d\7\u0094\2\2\u178d\u178e\5\u020a\u0106\2\u178e\u178f")
        buf.write("\7\u0156\2\2\u178f\u1790\7\u0086\2\2\u1790\u1791\5\u0568")
        buf.write("\u02b5\2\u1791\u196c\3\2\2\2\u1792\u1793\7\u00b2\2\2\u1793")
        buf.write("\u1794\7\u00d0\2\2\u1794\u1795\5\u020a\u0106\2\u1795\u1796")
        buf.write("\7\u0156\2\2\u1796\u1797\7\u0086\2\2\u1797\u1798\5\u0568")
        buf.write("\u02b5\2\u1798\u196c\3\2\2\2\u1799\u179a\7\u00b2\2\2\u179a")
        buf.write("\u179b\7\u00d7\2\2\u179b\u179c\5\u0568\u02b5\2\u179c\u179d")
        buf.write("\7\u0156\2\2\u179d\u179e\7\u0086\2\2\u179e\u179f\5\u0568")
        buf.write("\u02b5\2\u179f\u196c\3\2\2\2\u17a0\u17a1\7\u00b2\2\2\u17a1")
        buf.write("\u17a2\7\u00e5\2\2\u17a2\u17a3\5\u020a\u0106\2\u17a3\u17a4")
        buf.write("\7\u0156\2\2\u17a4\u17a5\7\u0086\2\2\u17a5\u17a6\5\u0568")
        buf.write("\u02b5\2\u17a6\u196c\3\2\2\2\u17a7\u17a8\7\u00b2\2\2\u17a8")
        buf.write("\u17a9\7\u00e5\2\2\u17a9\u17aa\5\u020a\u0106\2\u17aa\u17ab")
        buf.write("\7\u0156\2\2\u17ab\u17ac\7U\2\2\u17ac\u17ad\5\u0568\u02b5")
        buf.write("\2\u17ad\u17ae\7\u0086\2\2\u17ae\u17af\5\u0568\u02b5\2")
        buf.write("\u17af\u196c\3\2\2\2\u17b0\u17b1\7\u00b2\2\2\u17b1\u17b2")
        buf.write("\7g\2\2\u17b2\u17b3\7\u00d6\2\2\u17b3\u17b4\7\u019e\2")
        buf.write("\2\u17b4\u17b5\5\u0568\u02b5\2\u17b5\u17b6\7\u0156\2\2")
        buf.write("\u17b6\u17b7\7\u0086\2\2\u17b7\u17b8\5\u0568\u02b5\2\u17b8")
        buf.write("\u196c\3\2\2\2\u17b9\u17ba\7\u00b2\2\2\u17ba\u17bb\7\u00fb")
        buf.write("\2\2\u17bb\u17bc\5\u0272\u013a\2\u17bc\u17bd\7\u0156\2")
        buf.write("\2\u17bd\u17be\7\u0086\2\2\u17be\u17bf\5\u0568\u02b5\2")
        buf.write("\u17bf\u196c\3\2\2\2\u17c0\u17c1\7\u00b2\2\2\u17c1\u17c2")
        buf.write("\7j\2\2\u17c2\u17c3\5\u0582\u02c2\2\u17c3\u17c4\7\u0156")
        buf.write("\2\2\u17c4\u17c5\7\u0086\2\2\u17c5\u17c6\5\u0582\u02c2")
        buf.write("\2\u17c6\u196c\3\2\2\2\u17c7\u17c9\7\u00b2\2\2\u17c8\u17ca")
        buf.write("\5\u0132\u009a\2\u17c9\u17c8\3\2\2\2\u17c9\u17ca\3\2\2")
        buf.write("\2\u17ca\u17cb\3\2\2\2\u17cb\u17cc\7\u0116\2\2\u17cc\u17cd")
        buf.write("\5\u0568\u02b5\2\u17cd\u17ce\7\u0156\2\2\u17ce\u17cf\7")
        buf.write("\u0086\2\2\u17cf\u17d0\5\u0568\u02b5\2\u17d0\u196c\3\2")
        buf.write("\2\2\u17d1\u17d2\7\u00b2\2\2\u17d2\u17d3\7\u0137\2\2\u17d3")
        buf.write("\u17d4\7\u00c4\2\2\u17d4\u17d5\5\u020a\u0106\2\u17d5\u17d6")
        buf.write("\7\u008c\2\2\u17d6\u17d7\5\u0568\u02b5\2\u17d7\u17d8\7")
        buf.write("\u0156\2\2\u17d8\u17d9\7\u0086\2\2\u17d9\u17da\5\u0568")
        buf.write("\u02b5\2\u17da\u196c\3\2\2\2\u17db\u17dc\7\u00b2\2\2\u17dc")
        buf.write("\u17dd\7\u0137\2\2\u17dd\u17de\7\u00f6\2\2\u17de\u17df")
        buf.write("\5\u020a\u0106\2\u17df\u17e0\7\u008c\2\2\u17e0\u17e1\5")
        buf.write("\u0568\u02b5\2\u17e1\u17e2\7\u0156\2\2\u17e2\u17e3\7\u0086")
        buf.write("\2\2\u17e3\u17e4\5\u0568\u02b5\2\u17e4\u196c\3\2\2\2\u17e5")
        buf.write("\u17e6\7\u00b2\2\2\u17e6\u17e7\7\u01e5\2\2\u17e7\u17e8")
        buf.write("\5\u0568\u02b5\2\u17e8\u17e9\7x\2\2\u17e9\u17ea\5\u0564")
        buf.write("\u02b3\2\u17ea\u17eb\7\u0156\2\2\u17eb\u17ec\7\u0086\2")
        buf.write("\2\u17ec\u17ed\5\u0568\u02b5\2\u17ed\u196c\3\2\2\2\u17ee")
        buf.write("\u17ef\7\u00b2\2\2\u17ef\u17f0\7\u01e5\2\2\u17f0\u17f1")
        buf.write("\7\u0104\2\2\u17f1\u17f2\7\u01ad\2\2\u17f2\u17f3\5\u0568")
        buf.write("\u02b5\2\u17f3\u17f4\7x\2\2\u17f4\u17f5\5\u0564\u02b3")
        buf.write("\2\u17f5\u17f6\7\u0156\2\2\u17f6\u17f7\7\u0086\2\2\u17f7")
        buf.write("\u17f8\5\u0568\u02b5\2\u17f8\u196c\3\2\2\2\u17f9\u17fa")
        buf.write("\7\u00b2\2\2\u17fa\u17fb\7\u0149\2\2\u17fb\u17fc\5\u0272")
        buf.write("\u013a\2\u17fc\u17fd\7\u0156\2\2\u17fd\u17fe\7\u0086\2")
        buf.write("\2\u17fe\u17ff\5\u0568\u02b5\2\u17ff\u196c\3\2\2\2\u1800")
        buf.write("\u1801\7\u00b2\2\2\u1801\u1802\7\u01ec\2\2\u1802\u1803")
        buf.write("\5\u0568\u02b5\2\u1803\u1804\7\u0156\2\2\u1804\u1805\7")
        buf.write("\u0086\2\2\u1805\u1806\5\u0568\u02b5\2\u1806\u196c\3\2")
        buf.write("\2\2\u1807\u1808\7\u00b2\2\2\u1808\u1809\7\u01e2\2\2\u1809")
        buf.write("\u180a\5\u0272\u013a\2\u180a\u180b\7\u0156\2\2\u180b\u180c")
        buf.write("\7\u0086\2\2\u180c\u180d\5\u0568\u02b5\2\u180d\u196c\3")
        buf.write("\2\2\2\u180e\u180f\7\u00b2\2\2\u180f\u1810\7\u0164\2\2")
        buf.write("\u1810\u1811\5\u0568\u02b5\2\u1811\u1812\7\u0156\2\2\u1812")
        buf.write("\u1813\7\u0086\2\2\u1813\u1814\5\u0568\u02b5\2\u1814\u196c")
        buf.write("\3\2\2\2\u1815\u1816\7\u00b2\2\2\u1816\u1817\7\u016c\2")
        buf.write("\2\u1817\u1818\5\u0568\u02b5\2\u1818\u1819\7\u0156\2\2")
        buf.write("\u1819\u181a\7\u0086\2\2\u181a\u181b\5\u0568\u02b5\2\u181b")
        buf.write("\u196c\3\2\2\2\u181c\u181d\7\u00b2\2\2\u181d\u181e\7\u01eb")
        buf.write("\2\2\u181e\u181f\5\u0568\u02b5\2\u181f\u1820\7\u0156\2")
        buf.write("\2\u1820\u1821\7\u0086\2\2\u1821\u1822\5\u0568\u02b5\2")
        buf.write("\u1822\u196c\3\2\2\2\u1823\u1824\7\u00b2\2\2\u1824\u1825")
        buf.write("\7\u0084\2\2\u1825\u1826\5\u0432\u021a\2\u1826\u1827\7")
        buf.write("\u0156\2\2\u1827\u1828\7\u0086\2\2\u1828\u1829\5\u0568")
        buf.write("\u02b5\2\u1829\u196c\3\2\2\2\u182a\u182b\7\u00b2\2\2\u182b")
        buf.write("\u182c\7\u0084\2\2\u182c\u182d\7\u0104\2\2\u182d\u182e")
        buf.write("\7\u01ad\2\2\u182e\u182f\5\u0432\u021a\2\u182f\u1830\7")
        buf.write("\u0156\2\2\u1830\u1831\7\u0086\2\2\u1831\u1832\5\u0568")
        buf.write("\u02b5\2\u1832\u196c\3\2\2\2\u1833\u1834\7\u00b2\2\2\u1834")
        buf.write("\u1835\7\u0169\2\2\u1835\u1836\5\u0564\u02b3\2\u1836\u1837")
        buf.write("\7\u0156\2\2\u1837\u1838\7\u0086\2\2\u1838\u1839\5\u0568")
        buf.write("\u02b5\2\u1839\u196c\3\2\2\2\u183a\u183b\7\u00b2\2\2\u183b")
        buf.write("\u183c\7\u0169\2\2\u183c\u183d\7\u0104\2\2\u183d\u183e")
        buf.write("\7\u01ad\2\2\u183e\u183f\5\u0564\u02b3\2\u183f\u1840\7")
        buf.write("\u0156\2\2\u1840\u1841\7\u0086\2\2\u1841\u1842\5\u0568")
        buf.write("\u02b5\2\u1842\u196c\3\2\2\2\u1843\u1844\7\u00b2\2\2\u1844")
        buf.write("\u1845\7\u0199\2\2\u1845\u1846\5\u0564\u02b3\2\u1846\u1847")
        buf.write("\7\u0156\2\2\u1847\u1848\7\u0086\2\2\u1848\u1849\5\u0568")
        buf.write("\u02b5\2\u1849\u196c\3\2\2\2\u184a\u184b\7\u00b2\2\2\u184b")
        buf.write("\u184c\7\u0199\2\2\u184c\u184d\7\u0104\2\2\u184d\u184e")
        buf.write("\7\u01ad\2\2\u184e\u184f\5\u0564\u02b3\2\u184f\u1850\7")
        buf.write("\u0156\2\2\u1850\u1851\7\u0086\2\2\u1851\u1852\5\u0568")
        buf.write("\u02b5\2\u1852\u196c\3\2\2\2\u1853\u1854\7\u00b2\2\2\u1854")
        buf.write("\u1855\7\u0123\2\2\u1855\u1856\7\u0199\2\2\u1856\u1857")
        buf.write("\5\u0564\u02b3\2\u1857\u1858\7\u0156\2\2\u1858\u1859\7")
        buf.write("\u0086\2\2\u1859\u185a\5\u0568\u02b5\2\u185a\u196c\3\2")
        buf.write("\2\2\u185b\u185c\7\u00b2\2\2\u185c\u185d\7\u0123\2\2\u185d")
        buf.write("\u185e\7\u0199\2\2\u185e\u185f\7\u0104\2\2\u185f\u1860")
        buf.write("\7\u01ad\2\2\u1860\u1861\5\u0564\u02b3\2\u1861\u1862\7")
        buf.write("\u0156\2\2\u1862\u1863\7\u0086\2\2\u1863\u1864\5\u0568")
        buf.write("\u02b5\2\u1864\u196c\3\2\2\2\u1865\u1866\7\u00b2\2\2\u1866")
        buf.write("\u1867\7\u010a\2\2\u1867\u1868\5\u0564\u02b3\2\u1868\u1869")
        buf.write("\7\u0156\2\2\u1869\u186a\7\u0086\2\2\u186a\u186b\5\u0568")
        buf.write("\u02b5\2\u186b\u196c\3\2\2\2\u186c\u186d\7\u00b2\2\2\u186d")
        buf.write("\u186e\7\u010a\2\2\u186e\u186f\7\u0104\2\2\u186f\u1870")
        buf.write("\7\u01ad\2\2\u1870\u1871\5\u0564\u02b3\2\u1871\u1872\7")
        buf.write("\u0156\2\2\u1872\u1873\7\u0086\2\2\u1873\u1874\5\u0568")
        buf.write("\u02b5\2\u1874\u196c\3\2\2\2\u1875\u1876\7\u00b2\2\2\u1876")
        buf.write("\u1877\7g\2\2\u1877\u1878\7\u0084\2\2\u1878\u1879\5\u0432")
        buf.write("\u021a\2\u1879\u187a\7\u0156\2\2\u187a\u187b\7\u0086\2")
        buf.write("\2\u187b\u187c\5\u0568\u02b5\2\u187c\u196c\3\2\2\2\u187d")
        buf.write("\u187e\7\u00b2\2\2\u187e\u187f\7g\2\2\u187f\u1880\7\u0084")
        buf.write("\2\2\u1880\u1881\7\u0104\2\2\u1881\u1882\7\u01ad\2\2\u1882")
        buf.write("\u1883\5\u0432\u021a\2\u1883\u1884\7\u0156\2\2\u1884\u1885")
        buf.write("\7\u0086\2\2\u1885\u1886\5\u0568\u02b5\2\u1886\u196c\3")
        buf.write("\2\2\2\u1887\u1888\7\u00b2\2\2\u1888\u1889\7\u0084\2\2")
        buf.write("\u1889\u188a\5\u0432\u021a\2\u188a\u188c\7\u0156\2\2\u188b")
        buf.write("\u188d\5\u02d2\u016a\2\u188c\u188b\3\2\2\2\u188c\u188d")
        buf.write("\3\2\2\2\u188d\u188e\3\2\2\2\u188e\u188f\5\u0568\u02b5")
        buf.write("\2\u188f\u1890\7\u0086\2\2\u1890\u1891\5\u0568\u02b5\2")
        buf.write("\u1891\u196c\3\2\2\2\u1892\u1893\7\u00b2\2\2\u1893\u1894")
        buf.write("\7\u0084\2\2\u1894\u1895\7\u0104\2\2\u1895\u1896\7\u01ad")
        buf.write("\2\2\u1896\u1897\5\u0432\u021a\2\u1897\u1899\7\u0156\2")
        buf.write("\2\u1898\u189a\5\u02d2\u016a\2\u1899\u1898\3\2\2\2\u1899")
        buf.write("\u189a\3\2\2\2\u189a\u189b\3\2\2\2\u189b\u189c\5\u0568")
        buf.write("\u02b5\2\u189c\u189d\7\u0086\2\2\u189d\u189e\5\u0568\u02b5")
        buf.write("\2\u189e\u196c\3\2\2\2\u189f\u18a0\7\u00b2\2\2\u18a0\u18a1")
        buf.write("\7\u0199\2\2\u18a1\u18a2\5\u0564\u02b3\2\u18a2\u18a4\7")
        buf.write("\u0156\2\2\u18a3\u18a5\5\u02d2\u016a\2\u18a4\u18a3\3\2")
        buf.write("\2\2\u18a4\u18a5\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a7")
        buf.write("\5\u0568\u02b5\2\u18a7\u18a8\7\u0086\2\2\u18a8\u18a9\5")
        buf.write("\u0568\u02b5\2\u18a9\u196c\3\2\2\2\u18aa\u18ab\7\u00b2")
        buf.write("\2\2\u18ab\u18ac\7\u0199\2\2\u18ac\u18ad\7\u0104\2\2\u18ad")
        buf.write("\u18ae\7\u01ad\2\2\u18ae\u18af\5\u0564\u02b3\2\u18af\u18b1")
        buf.write("\7\u0156\2\2\u18b0\u18b2\5\u02d2\u016a\2\u18b1\u18b0\3")
        buf.write("\2\2\2\u18b1\u18b2\3\2\2\2\u18b2\u18b3\3\2\2\2\u18b3\u18b4")
        buf.write("\5\u0568\u02b5\2\u18b4\u18b5\7\u0086\2\2\u18b5\u18b6\5")
        buf.write("\u0568\u02b5\2\u18b6\u196c\3\2\2\2\u18b7\u18b8\7\u00b2")
        buf.write("\2\2\u18b8\u18b9\7\u0123\2\2\u18b9\u18ba\7\u0199\2\2\u18ba")
        buf.write("\u18bb\5\u0564\u02b3\2\u18bb\u18bd\7\u0156\2\2\u18bc\u18be")
        buf.write("\5\u02d2\u016a\2\u18bd\u18bc\3\2\2\2\u18bd\u18be\3\2\2")
        buf.write("\2\u18be\u18bf\3\2\2\2\u18bf\u18c0\5\u0568\u02b5\2\u18c0")
        buf.write("\u18c1\7\u0086\2\2\u18c1\u18c2\5\u0568\u02b5\2\u18c2\u196c")
        buf.write("\3\2\2\2\u18c3\u18c4\7\u00b2\2\2\u18c4\u18c5\7\u0123\2")
        buf.write("\2\u18c5\u18c6\7\u0199\2\2\u18c6\u18c7\7\u0104\2\2\u18c7")
        buf.write("\u18c8\7\u01ad\2\2\u18c8\u18c9\5\u0564\u02b3\2\u18c9\u18cb")
        buf.write("\7\u0156\2\2\u18ca\u18cc\5\u02d2\u016a\2\u18cb\u18ca\3")
        buf.write("\2\2\2\u18cb\u18cc\3\2\2\2\u18cc\u18cd\3\2\2\2\u18cd\u18ce")
        buf.write("\5\u0568\u02b5\2\u18ce\u18cf\7\u0086\2\2\u18cf\u18d0\5")
        buf.write("\u0568\u02b5\2\u18d0\u196c\3\2\2\2\u18d1\u18d2\7\u00b2")
        buf.write("\2\2\u18d2\u18d3\7\u0084\2\2\u18d3\u18d4\5\u0432\u021a")
        buf.write("\2\u18d4\u18d5\7\u0156\2\2\u18d5\u18d6\7U\2\2\u18d6\u18d7")
        buf.write("\5\u0568\u02b5\2\u18d7\u18d8\7\u0086\2\2\u18d8\u18d9\5")
        buf.write("\u0568\u02b5\2\u18d9\u196c\3\2\2\2\u18da\u18db\7\u00b2")
        buf.write("\2\2\u18db\u18dc\7\u0084\2\2\u18dc\u18dd\7\u0104\2\2\u18dd")
        buf.write("\u18de\7\u01ad\2\2\u18de\u18df\5\u0432\u021a\2\u18df\u18e0")
        buf.write("\7\u0156\2\2\u18e0\u18e1\7U\2\2\u18e1\u18e2\5\u0568\u02b5")
        buf.write("\2\u18e2\u18e3\7\u0086\2\2\u18e3\u18e4\5\u0568\u02b5\2")
        buf.write("\u18e4\u196c\3\2\2\2\u18e5\u18e6\7\u00b2\2\2\u18e6\u18e7")
        buf.write("\7g\2\2\u18e7\u18e8\7\u0084\2\2\u18e8\u18e9\5\u0432\u021a")
        buf.write("\2\u18e9\u18eb\7\u0156\2\2\u18ea\u18ec\5\u02d2\u016a\2")
        buf.write("\u18eb\u18ea\3\2\2\2\u18eb\u18ec\3\2\2\2\u18ec\u18ed\3")
        buf.write("\2\2\2\u18ed\u18ee\5\u0568\u02b5\2\u18ee\u18ef\7\u0086")
        buf.write("\2\2\u18ef\u18f0\5\u0568\u02b5\2\u18f0\u196c\3\2\2\2\u18f1")
        buf.write("\u18f2\7\u00b2\2\2\u18f2\u18f3\7g\2\2\u18f3\u18f4\7\u0084")
        buf.write("\2\2\u18f4\u18f5\7\u0104\2\2\u18f5\u18f6\7\u01ad\2\2\u18f6")
        buf.write("\u18f7\5\u0432\u021a\2\u18f7\u18f9\7\u0156\2\2\u18f8\u18fa")
        buf.write("\5\u02d2\u016a\2\u18f9\u18f8\3\2\2\2\u18f9\u18fa\3\2\2")
        buf.write("\2\u18fa\u18fb\3\2\2\2\u18fb\u18fc\5\u0568\u02b5\2\u18fc")
        buf.write("\u18fd\7\u0086\2\2\u18fd\u18fe\5\u0568\u02b5\2\u18fe\u196c")
        buf.write("\3\2\2\2\u18ff\u1900\7\u00b2\2\2\u1900\u1901\7\u0162\2")
        buf.write("\2\u1901\u1902\5\u0568\u02b5\2\u1902\u1903\7x\2\2\u1903")
        buf.write("\u1904\5\u0564\u02b3\2\u1904\u1905\7\u0156\2\2\u1905\u1906")
        buf.write("\7\u0086\2\2\u1906\u1907\5\u0568\u02b5\2\u1907\u196c\3")
        buf.write("\2\2\2\u1908\u1909\7\u00b2\2\2\u1909\u190a\7\u0186\2\2")
        buf.write("\u190a\u190b\5\u0568\u02b5\2\u190b\u190c\7x\2\2\u190c")
        buf.write("\u190d\5\u0564\u02b3\2\u190d\u190e\7\u0156\2\2\u190e\u190f")
        buf.write("\7\u0086\2\2\u190f\u1910\5\u0568\u02b5\2\u1910\u196c\3")
        buf.write("\2\2\2\u1911\u1912\7\u00b2\2\2\u1912\u1913\7\u00ee\2\2")
        buf.write("\u1913\u1914\7\u0186\2\2\u1914\u1915\5\u0568\u02b5\2\u1915")
        buf.write("\u1916\7\u0156\2\2\u1916\u1917\7\u0086\2\2\u1917\u1918")
        buf.write("\5\u0568\u02b5\2\u1918\u196c\3\2\2\2\u1919\u191a\7\u00b2")
        buf.write("\2\2\u191a\u191b\7\u015f\2\2\u191b\u191c\5\u0582\u02c2")
        buf.write("\2\u191c\u191d\7\u0156\2\2\u191d\u191e\7\u0086\2\2\u191e")
        buf.write("\u191f\5\u0582\u02c2\2\u191f\u196c\3\2\2\2\u1920\u1921")
        buf.write("\7\u00b2\2\2\u1921\u1922\7\u008b\2\2\u1922\u1923\5\u0582")
        buf.write("\u02c2\2\u1923\u1924\7\u0156\2\2\u1924\u1925\7\u0086\2")
        buf.write("\2\u1925\u1926\5\u0582\u02c2\2\u1926\u196c\3\2\2\2\u1927")
        buf.write("\u1928\7\u00b2\2\2\u1928\u1929\7\u0180\2\2\u1929\u192a")
        buf.write("\5\u0568\u02b5\2\u192a\u192b\7\u0156\2\2\u192b\u192c\7")
        buf.write("\u0086\2\2\u192c\u192d\5\u0568\u02b5\2\u192d\u196c\3\2")
        buf.write("\2\2\u192e\u192f\7\u00b2\2\2\u192f\u1930\7\u0177\2\2\u1930")
        buf.write("\u1931\5\u020a\u0106\2\u1931\u1932\7\u0156\2\2\u1932\u1933")
        buf.write("\7\u0086\2\2\u1933\u1934\5\u0568\u02b5\2\u1934\u196c\3")
        buf.write("\2\2\2\u1935\u1936\7\u00b2\2\2\u1936\u1937\7\u0184\2\2")
        buf.write("\u1937\u1938\7\u0166\2\2\u1938\u1939\7\u013c\2\2\u1939")
        buf.write("\u193a\5\u020a\u0106\2\u193a\u193b\7\u0156\2\2\u193b\u193c")
        buf.write("\7\u0086\2\2\u193c\u193d\5\u0568\u02b5\2\u193d\u196c\3")
        buf.write("\2\2\2\u193e\u193f\7\u00b2\2\2\u193f\u1940\7\u0184\2\2")
        buf.write("\u1940\u1941\7\u0166\2\2\u1941\u1942\7\u00e1\2\2\u1942")
        buf.write("\u1943\5\u020a\u0106\2\u1943\u1944\7\u0156\2\2\u1944\u1945")
        buf.write("\7\u0086\2\2\u1945\u1946\5\u0568\u02b5\2\u1946\u196c\3")
        buf.write("\2\2\2\u1947\u1948\7\u00b2\2\2\u1948\u1949\7\u0184\2\2")
        buf.write("\u1949\u194a\7\u0166\2\2\u194a\u194b\7\u0182\2\2\u194b")
        buf.write("\u194c\5\u020a\u0106\2\u194c\u194d\7\u0156\2\2\u194d\u194e")
        buf.write("\7\u0086\2\2\u194e\u194f\5\u0568\u02b5\2\u194f\u196c\3")
        buf.write("\2\2\2\u1950\u1951\7\u00b2\2\2\u1951\u1952\7\u0184\2\2")
        buf.write("\u1952\u1953\7\u0166\2\2\u1953\u1954\7\u00cb\2\2\u1954")
        buf.write("\u1955\5\u020a\u0106\2\u1955\u1956\7\u0156\2\2\u1956\u1957")
        buf.write("\7\u0086\2\2\u1957\u1958\5\u0568\u02b5\2\u1958\u196c\3")
        buf.write("\2\2\2\u1959\u195a\7\u00b2\2\2\u195a\u195b\7\u0189\2\2")
        buf.write("\u195b\u195c\5\u020a\u0106\2\u195c\u195d\7\u0156\2\2\u195d")
        buf.write("\u195e\7\u0086\2\2\u195e\u195f\5\u0568\u02b5\2\u195f\u196c")
        buf.write("\3\2\2\2\u1960\u1961\7\u00b2\2\2\u1961\u1962\7\u0189\2")
        buf.write("\2\u1962\u1963\5\u020a\u0106\2\u1963\u1964\7\u0156\2\2")
        buf.write("\u1964\u1965\7\u00b7\2\2\u1965\u1966\5\u0568\u02b5\2\u1966")
        buf.write("\u1967\7\u0086\2\2\u1967\u1969\5\u0568\u02b5\2\u1968\u196a")
        buf.write("\5j\66\2\u1969\u1968\3\2\2\2\u1969\u196a\3\2\2\2\u196a")
        buf.write("\u196c\3\2\2\2\u196b\u1784\3\2\2\2\u196b\u178b\3\2\2\2")
        buf.write("\u196b\u1792\3\2\2\2\u196b\u1799\3\2\2\2\u196b\u17a0\3")
        buf.write("\2\2\2\u196b\u17a7\3\2\2\2\u196b\u17b0\3\2\2\2\u196b\u17b9")
        buf.write("\3\2\2\2\u196b\u17c0\3\2\2\2\u196b\u17c7\3\2\2\2\u196b")
        buf.write("\u17d1\3\2\2\2\u196b\u17db\3\2\2\2\u196b\u17e5\3\2\2\2")
        buf.write("\u196b\u17ee\3\2\2\2\u196b\u17f9\3\2\2\2\u196b\u1800\3")
        buf.write("\2\2\2\u196b\u1807\3\2\2\2\u196b\u180e\3\2\2\2\u196b\u1815")
        buf.write("\3\2\2\2\u196b\u181c\3\2\2\2\u196b\u1823\3\2\2\2\u196b")
        buf.write("\u182a\3\2\2\2\u196b\u1833\3\2\2\2\u196b\u183a\3\2\2\2")
        buf.write("\u196b\u1843\3\2\2\2\u196b\u184a\3\2\2\2\u196b\u1853\3")
        buf.write("\2\2\2\u196b\u185b\3\2\2\2\u196b\u1865\3\2\2\2\u196b\u186c")
        buf.write("\3\2\2\2\u196b\u1875\3\2\2\2\u196b\u187d\3\2\2\2\u196b")
        buf.write("\u1887\3\2\2\2\u196b\u1892\3\2\2\2\u196b\u189f\3\2\2\2")
        buf.write("\u196b\u18aa\3\2\2\2\u196b\u18b7\3\2\2\2\u196b\u18c3\3")
        buf.write("\2\2\2\u196b\u18d1\3\2\2\2\u196b\u18da\3\2\2\2\u196b\u18e5")
        buf.write("\3\2\2\2\u196b\u18f1\3\2\2\2\u196b\u18ff\3\2\2\2\u196b")
        buf.write("\u1908\3\2\2\2\u196b\u1911\3\2\2\2\u196b\u1919\3\2\2\2")
        buf.write("\u196b\u1920\3\2\2\2\u196b\u1927\3\2\2\2\u196b\u192e\3")
        buf.write("\2\2\2\u196b\u1935\3\2\2\2\u196b\u193e\3\2\2\2\u196b\u1947")
        buf.write("\3\2\2\2\u196b\u1950\3\2\2\2\u196b\u1959\3\2\2\2\u196b")
        buf.write("\u1960\3\2\2\2\u196c\u02d1\3\2\2\2\u196d\u196e\7T\2\2")
        buf.write("\u196e\u02d3\3\2\2\2\u196f\u1970\7\u016e\2\2\u1970\u1971")
        buf.write("\7\u00d6\2\2\u1971\u02d5\3\2\2\2\u1972\u1973\7\u00b2\2")
        buf.write("\2\u1973\u1974\7\u00fb\2\2\u1974\u1976\5\u0272\u013a\2")
        buf.write("\u1975\u1977\5\u02d8\u016d\2\u1976\u1975\3\2\2\2\u1976")
        buf.write("\u1977\3\2\2\2\u1977\u1978\3\2\2\2\u1978\u1979\7\u01f6")
        buf.write("\2\2\u1979\u197a\7x\2\2\u197a\u197b\7\u00f4\2\2\u197b")
        buf.write("\u197c\5\u0568\u02b5\2\u197c\u19b8\3\2\2\2\u197d\u197e")
        buf.write("\7\u00b2\2\2\u197e\u197f\7\u0149\2\2\u197f\u1981\5\u0272")
        buf.write("\u013a\2\u1980\u1982\5\u02d8\u016d\2\u1981\u1980\3\2\2")
        buf.write("\2\u1981\u1982\3\2\2\2\u1982\u1983\3\2\2\2\u1983\u1984")
        buf.write("\7\u01f6\2\2\u1984\u1985\7x\2\2\u1985\u1986\7\u00f4\2")
        buf.write("\2\u1986\u1987\5\u0568\u02b5\2\u1987\u19b8\3\2\2\2\u1988")
        buf.write("\u1989\7\u00b2\2\2\u1989\u198a\7\u01e2\2\2\u198a\u198c")
        buf.write("\5\u0272\u013a\2\u198b\u198d\5\u02d8\u016d\2\u198c\u198b")
        buf.write("\3\2\2\2\u198c\u198d\3\2\2\2\u198d\u198e\3\2\2\2\u198e")
        buf.write("\u198f\7\u01f6\2\2\u198f\u1990\7x\2\2\u1990\u1991\7\u00f4")
        buf.write("\2\2\u1991\u1992\5\u0568\u02b5\2\u1992\u19b8\3\2\2\2\u1993")
        buf.write("\u1994\7\u00b2\2\2\u1994\u1995\7\u0186\2\2\u1995\u1996")
        buf.write("\5\u0568\u02b5\2\u1996\u1997\7x\2\2\u1997\u1999\5\u0564")
        buf.write("\u02b3\2\u1998\u199a\5\u02d8\u016d\2\u1999\u1998\3\2\2")
        buf.write("\2\u1999\u199a\3\2\2\2\u199a\u199b\3\2\2\2\u199b\u199c")
        buf.write("\7\u01f6\2\2\u199c\u199d\7x\2\2\u199d\u199e\7\u00f4\2")
        buf.write("\2\u199e\u199f\5\u0568\u02b5\2\u199f\u19b8\3\2\2\2\u19a0")
        buf.write("\u19a1\7\u00b2\2\2\u19a1\u19a2\7\u0123\2\2\u19a2\u19a3")
        buf.write("\7\u0199\2\2\u19a3\u19a5\5\u0564\u02b3\2\u19a4\u19a6\5")
        buf.write("\u02d8\u016d\2\u19a5\u19a4\3\2\2\2\u19a5\u19a6\3\2\2\2")
        buf.write("\u19a6\u19a7\3\2\2\2\u19a7\u19a8\7\u01f6\2\2\u19a8\u19a9")
        buf.write("\7x\2\2\u19a9\u19aa\7\u00f4\2\2\u19aa\u19ab\5\u0568\u02b5")
        buf.write("\2\u19ab\u19b8\3\2\2\2\u19ac\u19ad\7\u00b2\2\2\u19ad\u19ae")
        buf.write("\7\u010a\2\2\u19ae\u19b0\5\u0564\u02b3\2\u19af\u19b1\5")
        buf.write("\u02d8\u016d\2\u19b0\u19af\3\2\2\2\u19b0\u19b1\3\2\2\2")
        buf.write("\u19b1\u19b2\3\2\2\2\u19b2\u19b3\7\u01f6\2\2\u19b3\u19b4")
        buf.write("\7x\2\2\u19b4\u19b5\7\u00f4\2\2\u19b5\u19b6\5\u0568\u02b5")
        buf.write("\2\u19b6\u19b8\3\2\2\2\u19b7\u1972\3\2\2\2\u19b7\u197d")
        buf.write("\3\2\2\2\u19b7\u1988\3\2\2\2\u19b7\u1993\3\2\2\2\u19b7")
        buf.write("\u19a0\3\2\2\2\u19b7\u19ac\3\2\2\2\u19b8\u02d7\3\2\2\2")
        buf.write("\u19b9\u19ba\7\u012e\2\2\u19ba\u02d9\3\2\2\2\u19bb\u19bc")
        buf.write("\7\u00b2\2\2\u19bc\u19bd\7\u00b0\2\2\u19bd\u19be\5\u028a")
        buf.write("\u0146\2\u19be\u19bf\7\u016e\2\2\u19bf\u19c0\7\u0164\2")
        buf.write("\2\u19c0\u19c1\5\u0568\u02b5\2\u19c1\u1a95\3\2\2\2\u19c2")
        buf.write("\u19c3\7\u00b2\2\2\u19c3\u19c4\7\u0094\2\2\u19c4\u19c5")
        buf.write("\5\u020a\u0106\2\u19c5\u19c6\7\u016e\2\2\u19c6\u19c7\7")
        buf.write("\u0164\2\2\u19c7\u19c8\5\u0568\u02b5\2\u19c8\u1a95\3\2")
        buf.write("\2\2\u19c9\u19ca\7\u00b2\2\2\u19ca\u19cb\7\u00d0\2\2\u19cb")
        buf.write("\u19cc\5\u020a\u0106\2\u19cc\u19cd\7\u016e\2\2\u19cd\u19ce")
        buf.write("\7\u0164\2\2\u19ce\u19cf\5\u0568\u02b5\2\u19cf\u1a95\3")
        buf.write("\2\2\2\u19d0\u19d1\7\u00b2\2\2\u19d1\u19d2\7\u00e5\2\2")
        buf.write("\u19d2\u19d3\5\u020a\u0106\2\u19d3\u19d4\7\u016e\2\2\u19d4")
        buf.write("\u19d5\7\u0164\2\2\u19d5\u19d6\5\u0568\u02b5\2\u19d6\u1a95")
        buf.write("\3\2\2\2\u19d7\u19d8\7\u00b2\2\2\u19d8\u19d9\7\u00f4\2")
        buf.write("\2\u19d9\u19da\5\u0568\u02b5\2\u19da\u19db\7\u016e\2\2")
        buf.write("\u19db\u19dc\7\u0164\2\2\u19dc\u19dd\5\u0568\u02b5\2\u19dd")
        buf.write("\u1a95\3\2\2\2\u19de\u19df\7\u00b2\2\2\u19df\u19e0\7\u00fb")
        buf.write("\2\2\u19e0\u19e1\5\u0272\u013a\2\u19e1\u19e2\7\u016e\2")
        buf.write("\2\u19e2\u19e3\7\u0164\2\2\u19e3\u19e4\5\u0568\u02b5\2")
        buf.write("\u19e4\u1a95\3\2\2\2\u19e5\u19e6\7\u00b2\2\2\u19e6\u19e7")
        buf.write("\7\u0137\2\2\u19e7\u19e8\5\u02b0\u0159\2\u19e8\u19e9\7")
        buf.write("\u016e\2\2\u19e9\u19ea\7\u0164\2\2\u19ea\u19eb\5\u0568")
        buf.write("\u02b5\2\u19eb\u1a95\3\2\2\2\u19ec\u19ed\7\u00b2\2\2\u19ed")
        buf.write("\u19ee\7\u0137\2\2\u19ee\u19ef\7\u00c4\2\2\u19ef\u19f0")
        buf.write("\5\u020a\u0106\2\u19f0\u19f1\7\u008c\2\2\u19f1\u19f2\5")
        buf.write("\u0568\u02b5\2\u19f2\u19f3\7\u016e\2\2\u19f3\u19f4\7\u0164")
        buf.write("\2\2\u19f4\u19f5\5\u0568\u02b5\2\u19f5\u1a95\3\2\2\2\u19f6")
        buf.write("\u19f7\7\u00b2\2\2\u19f7\u19f8\7\u0137\2\2\u19f8\u19f9")
        buf.write("\7\u00f6\2\2\u19f9\u19fa\5\u020a\u0106\2\u19fa\u19fb\7")
        buf.write("\u008c\2\2\u19fb\u19fc\5\u0568\u02b5\2\u19fc\u19fd\7\u016e")
        buf.write("\2\2\u19fd\u19fe\7\u0164\2\2\u19fe\u19ff\5\u0568\u02b5")
        buf.write("\2\u19ff\u1a95\3\2\2\2\u1a00\u1a01\7\u00b2\2\2\u1a01\u1a02")
        buf.write("\7\u0149\2\2\u1a02\u1a03\5\u0272\u013a\2\u1a03\u1a04\7")
        buf.write("\u016e\2\2\u1a04\u1a05\7\u0164\2\2\u1a05\u1a06\5\u0568")
        buf.write("\u02b5\2\u1a06\u1a95\3\2\2\2\u1a07\u1a08\7\u00b2\2\2\u1a08")
        buf.write("\u1a09\7\u01e2\2\2\u1a09\u1a0a\5\u0272\u013a\2\u1a0a\u1a0b")
        buf.write("\7\u016e\2\2\u1a0b\u1a0c\7\u0164\2\2\u1a0c\u1a0d\5\u0568")
        buf.write("\u02b5\2\u1a0d\u1a95\3\2\2\2\u1a0e\u1a0f\7\u00b2\2\2\u1a0f")
        buf.write("\u1a10\7\u0084\2\2\u1a10\u1a11\5\u0432\u021a\2\u1a11\u1a12")
        buf.write("\7\u016e\2\2\u1a12\u1a13\7\u0164\2\2\u1a13\u1a14\5\u0568")
        buf.write("\u02b5\2\u1a14\u1a95\3\2\2\2\u1a15\u1a16\7\u00b2\2\2\u1a16")
        buf.write("\u1a17\7\u0084\2\2\u1a17\u1a18\7\u0104\2\2\u1a18\u1a19")
        buf.write("\7\u01ad\2\2\u1a19\u1a1a\5\u0432\u021a\2\u1a1a\u1a1b\7")
        buf.write("\u016e\2\2\u1a1b\u1a1c\7\u0164\2\2\u1a1c\u1a1d\5\u0568")
        buf.write("\u02b5\2\u1a1d\u1a95\3\2\2\2\u1a1e\u1a1f\7\u00b2\2\2\u1a1f")
        buf.write("\u1a20\7\u0177\2\2\u1a20\u1a21\5\u020a\u0106\2\u1a21\u1a22")
        buf.write("\7\u016e\2\2\u1a22\u1a23\7\u0164\2\2\u1a23\u1a24\5\u0568")
        buf.write("\u02b5\2\u1a24\u1a95\3\2\2\2\u1a25\u1a26\7\u00b2\2\2\u1a26")
        buf.write("\u1a27\7\u0184\2\2\u1a27\u1a28\7\u0166\2\2\u1a28\u1a29")
        buf.write("\7\u013c\2\2\u1a29\u1a2a\5\u020a\u0106\2\u1a2a\u1a2b\7")
        buf.write("\u016e\2\2\u1a2b\u1a2c\7\u0164\2\2\u1a2c\u1a2d\5\u0568")
        buf.write("\u02b5\2\u1a2d\u1a95\3\2\2\2\u1a2e\u1a2f\7\u00b2\2\2\u1a2f")
        buf.write("\u1a30\7\u0184\2\2\u1a30\u1a31\7\u0166\2\2\u1a31\u1a32")
        buf.write("\7\u00e1\2\2\u1a32\u1a33\5\u020a\u0106\2\u1a33\u1a34\7")
        buf.write("\u016e\2\2\u1a34\u1a35\7\u0164\2\2\u1a35\u1a36\5\u0568")
        buf.write("\u02b5\2\u1a36\u1a95\3\2\2\2\u1a37\u1a38\7\u00b2\2\2\u1a38")
        buf.write("\u1a39\7\u0184\2\2\u1a39\u1a3a\7\u0166\2\2\u1a3a\u1a3b")
        buf.write("\7\u0182\2\2\u1a3b\u1a3c\5\u020a\u0106\2\u1a3c\u1a3d\7")
        buf.write("\u016e\2\2\u1a3d\u1a3e\7\u0164\2\2\u1a3e\u1a3f\5\u0568")
        buf.write("\u02b5\2\u1a3f\u1a95\3\2\2\2\u1a40\u1a41\7\u00b2\2\2\u1a41")
        buf.write("\u1a42\7\u0184\2\2\u1a42\u1a43\7\u0166\2\2\u1a43\u1a44")
        buf.write("\7\u00cb\2\2\u1a44\u1a45\5\u020a\u0106\2\u1a45\u1a46\7")
        buf.write("\u016e\2\2\u1a46\u1a47\7\u0164\2\2\u1a47\u1a48\5\u0568")
        buf.write("\u02b5\2\u1a48\u1a95\3\2\2\2\u1a49\u1a4a\7\u00b2\2\2\u1a4a")
        buf.write("\u1a4b\7\u0169\2\2\u1a4b\u1a4c\5\u0564\u02b3\2\u1a4c\u1a4d")
        buf.write("\7\u016e\2\2\u1a4d\u1a4e\7\u0164\2\2\u1a4e\u1a4f\5\u0568")
        buf.write("\u02b5\2\u1a4f\u1a95\3\2\2\2\u1a50\u1a51\7\u00b2\2\2\u1a51")
        buf.write("\u1a52\7\u0169\2\2\u1a52\u1a53\7\u0104\2\2\u1a53\u1a54")
        buf.write("\7\u01ad\2\2\u1a54\u1a55\5\u0564\u02b3\2\u1a55\u1a56\7")
        buf.write("\u016e\2\2\u1a56\u1a57\7\u0164\2\2\u1a57\u1a58\5\u0568")
        buf.write("\u02b5\2\u1a58\u1a95\3\2\2\2\u1a59\u1a5a\7\u00b2\2\2\u1a5a")
        buf.write("\u1a5b\7\u0199\2\2\u1a5b\u1a5c\5\u0564\u02b3\2\u1a5c\u1a5d")
        buf.write("\7\u016e\2\2\u1a5d\u1a5e\7\u0164\2\2\u1a5e\u1a5f\5\u0568")
        buf.write("\u02b5\2\u1a5f\u1a95\3\2\2\2\u1a60\u1a61\7\u00b2\2\2\u1a61")
        buf.write("\u1a62\7\u0199\2\2\u1a62\u1a63\7\u0104\2\2\u1a63\u1a64")
        buf.write("\7\u01ad\2\2\u1a64\u1a65\5\u0564\u02b3\2\u1a65\u1a66\7")
        buf.write("\u016e\2\2\u1a66\u1a67\7\u0164\2\2\u1a67\u1a68\5\u0568")
        buf.write("\u02b5\2\u1a68\u1a95\3\2\2\2\u1a69\u1a6a\7\u00b2\2\2\u1a6a")
        buf.write("\u1a6b\7\u0123\2\2\u1a6b\u1a6c\7\u0199\2\2\u1a6c\u1a6d")
        buf.write("\5\u0564\u02b3\2\u1a6d\u1a6e\7\u016e\2\2\u1a6e\u1a6f\7")
        buf.write("\u0164\2\2\u1a6f\u1a70\5\u0568\u02b5\2\u1a70\u1a95\3\2")
        buf.write("\2\2\u1a71\u1a72\7\u00b2\2\2\u1a72\u1a73\7\u0123\2\2\u1a73")
        buf.write("\u1a74\7\u0199\2\2\u1a74\u1a75\7\u0104\2\2\u1a75\u1a76")
        buf.write("\7\u01ad\2\2\u1a76\u1a77\5\u0564\u02b3\2\u1a77\u1a78\7")
        buf.write("\u016e\2\2\u1a78\u1a79\7\u0164\2\2\u1a79\u1a7a\5\u0568")
        buf.write("\u02b5\2\u1a7a\u1a95\3\2\2\2\u1a7b\u1a7c\7\u00b2\2\2\u1a7c")
        buf.write("\u1a7d\7g\2\2\u1a7d\u1a7e\7\u0084\2\2\u1a7e\u1a7f\5\u0432")
        buf.write("\u021a\2\u1a7f\u1a80\7\u016e\2\2\u1a80\u1a81\7\u0164\2")
        buf.write("\2\u1a81\u1a82\5\u0568\u02b5\2\u1a82\u1a95\3\2\2\2\u1a83")
        buf.write("\u1a84\7\u00b2\2\2\u1a84\u1a85\7g\2\2\u1a85\u1a86\7\u0084")
        buf.write("\2\2\u1a86\u1a87\7\u0104\2\2\u1a87\u1a88\7\u01ad\2\2\u1a88")
        buf.write("\u1a89\5\u0432\u021a\2\u1a89\u1a8a\7\u016e\2\2\u1a8a\u1a8b")
        buf.write("\7\u0164\2\2\u1a8b\u1a8c\5\u0568\u02b5\2\u1a8c\u1a95\3")
        buf.write("\2\2\2\u1a8d\u1a8e\7\u00b2\2\2\u1a8e\u1a8f\7\u0189\2\2")
        buf.write("\u1a8f\u1a90\5\u020a\u0106\2\u1a90\u1a91\7\u016e\2\2\u1a91")
        buf.write("\u1a92\7\u0164\2\2\u1a92\u1a93\5\u0568\u02b5\2\u1a93\u1a95")
        buf.write("\3\2\2\2\u1a94\u19bb\3\2\2\2\u1a94\u19c2\3\2\2\2\u1a94")
        buf.write("\u19c9\3\2\2\2\u1a94\u19d0\3\2\2\2\u1a94\u19d7\3\2\2\2")
        buf.write("\u1a94\u19de\3\2\2\2\u1a94\u19e5\3\2\2\2\u1a94\u19ec\3")
        buf.write("\2\2\2\u1a94\u19f6\3\2\2\2\u1a94\u1a00\3\2\2\2\u1a94\u1a07")
        buf.write("\3\2\2\2\u1a94\u1a0e\3\2\2\2\u1a94\u1a15\3\2\2\2\u1a94")
        buf.write("\u1a1e\3\2\2\2\u1a94\u1a25\3\2\2\2\u1a94\u1a2e\3\2\2\2")
        buf.write("\u1a94\u1a37\3\2\2\2\u1a94\u1a40\3\2\2\2\u1a94\u1a49\3")
        buf.write("\2\2\2\u1a94\u1a50\3\2\2\2\u1a94\u1a59\3\2\2\2\u1a94\u1a60")
        buf.write("\3\2\2\2\u1a94\u1a69\3\2\2\2\u1a94\u1a71\3\2\2\2\u1a94")
        buf.write("\u1a7b\3\2\2\2\u1a94\u1a83\3\2\2\2\u1a94\u1a8d\3\2\2\2")
        buf.write("\u1a95\u02db\3\2\2\2\u1a96\u1a97\7\u00b2\2\2\u1a97\u1a98")
        buf.write("\7\u0137\2\2\u1a98\u1a99\5\u02b0\u0159\2\u1a99\u1a9a\7")
        buf.write("\u016e\2\2\u1a9a\u1a9b\7\4\2\2\u1a9b\u1a9c\5\u02de\u0170")
        buf.write("\2\u1a9c\u1a9d\7\5\2\2\u1a9d\u02dd\3\2\2\2\u1a9e\u1aa3")
        buf.write("\5\u02e0\u0171\2\u1a9f\u1aa0\7\b\2\2\u1aa0\u1aa2\5\u02e0")
        buf.write("\u0171\2\u1aa1\u1a9f\3\2\2\2\u1aa2\u1aa5\3\2\2\2\u1aa3")
        buf.write("\u1aa1\3\2\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u02df\3\2\2\2")
        buf.write("\u1aa5\u1aa3\3\2\2\2\u1aa6\u1aa7\5\u058e\u02c8\2\u1aa7")
        buf.write("\u1aa8\7\f\2\2\u1aa8\u1aa9\7\u01b8\2\2\u1aa9\u1aaf\3\2")
        buf.write("\2\2\u1aaa\u1aab\5\u058e\u02c8\2\u1aab\u1aac\7\f\2\2\u1aac")
        buf.write("\u1aad\5\u02e2\u0172\2\u1aad\u1aaf\3\2\2\2\u1aae\u1aa6")
        buf.write("\3\2\2\2\u1aae\u1aaa\3\2\2\2\u1aaf\u02e1\3\2\2\2\u1ab0")
        buf.write("\u1ab6\5\u0280\u0141\2\u1ab1\u1ab6\5\u0598\u02cd\2\u1ab2")
        buf.write("\u1ab6\5\u04fe\u0280\2\u1ab3\u1ab6\5\u0122\u0092\2\u1ab4")
        buf.write("\u1ab6\5\u057a\u02be\2\u1ab5\u1ab0\3\2\2\2\u1ab5\u1ab1")
        buf.write("\3\2\2\2\u1ab5\u1ab2\3\2\2\2\u1ab5\u1ab3\3\2\2\2\u1ab5")
        buf.write("\u1ab4\3\2\2\2\u1ab6\u02e3\3\2\2\2\u1ab7\u1ab8\7\u00b2")
        buf.write("\2\2\u1ab8\u1ab9\7\u0189\2\2\u1ab9\u1aba\5\u020a\u0106")
        buf.write("\2\u1aba\u1abb\7\u016e\2\2\u1abb\u1abc\7\4\2\2\u1abc\u1abd")
        buf.write("\5\u02de\u0170\2\u1abd\u1abe\7\5\2\2\u1abe\u02e5\3\2\2")
        buf.write("\2\u1abf\u1ac0\7\u00b2\2\2\u1ac0\u1ac1\7\u00b0\2\2\u1ac1")
        buf.write("\u1ac2\5\u028a\u0146\2\u1ac2\u1ac3\7\u013b\2\2\u1ac3\u1ac4")
        buf.write("\7\u0086\2\2\u1ac4\u1ac5\5\u0584\u02c3\2\u1ac5\u1b79\3")
        buf.write("\2\2\2\u1ac6\u1ac7\7\u00b2\2\2\u1ac7\u1ac8\7\u0094\2\2")
        buf.write("\u1ac8\u1ac9\5\u020a\u0106\2\u1ac9\u1aca\7\u013b\2\2\u1aca")
        buf.write("\u1acb\7\u0086\2\2\u1acb\u1acc\5\u0584\u02c3\2\u1acc\u1b79")
        buf.write("\3\2\2\2\u1acd\u1ace\7\u00b2\2\2\u1ace\u1acf\7\u00d0\2")
        buf.write("\2\u1acf\u1ad0\5\u020a\u0106\2\u1ad0\u1ad1\7\u013b\2\2")
        buf.write("\u1ad1\u1ad2\7\u0086\2\2\u1ad2\u1ad3\5\u0584\u02c3\2\u1ad3")
        buf.write("\u1b79\3\2\2\2\u1ad4\u1ad5\7\u00b2\2\2\u1ad5\u1ad6\7\u00d7")
        buf.write("\2\2\u1ad6\u1ad7\5\u0568\u02b5\2\u1ad7\u1ad8\7\u013b\2")
        buf.write("\2\u1ad8\u1ad9\7\u0086\2\2\u1ad9\u1ada\5\u0584\u02c3\2")
        buf.write("\u1ada\u1b79\3\2\2\2\u1adb\u1adc\7\u00b2\2\2\u1adc\u1add")
        buf.write("\7\u00e5\2\2\u1add\u1ade\5\u020a\u0106\2\u1ade\u1adf\7")
        buf.write("\u013b\2\2\u1adf\u1ae0\7\u0086\2\2\u1ae0\u1ae1\5\u0584")
        buf.write("\u02c3\2\u1ae1\u1b79\3\2\2\2\u1ae2\u1ae3\7\u00b2\2\2\u1ae3")
        buf.write("\u1ae4\7\u00fb\2\2\u1ae4\u1ae5\5\u0272\u013a\2\u1ae5\u1ae6")
        buf.write("\7\u013b\2\2\u1ae6\u1ae7\7\u0086\2\2\u1ae7\u1ae8\5\u0584")
        buf.write("\u02c3\2\u1ae8\u1b79\3\2\2\2\u1ae9\u1aeb\7\u00b2\2\2\u1aea")
        buf.write("\u1aec\5\u0132\u009a\2\u1aeb\u1aea\3\2\2\2\u1aeb\u1aec")
        buf.write("\3\2\2\2\u1aec\u1aed\3\2\2\2\u1aed\u1aee\7\u0116\2\2\u1aee")
        buf.write("\u1aef\5\u0568\u02b5\2\u1aef\u1af0\7\u013b\2\2\u1af0\u1af1")
        buf.write("\7\u0086\2\2\u1af1\u1af2\5\u0584\u02c3\2\u1af2\u1b79\3")
        buf.write("\2\2\2\u1af3\u1af4\7\u00b2\2\2\u1af4\u1af5\7\u0117\2\2")
        buf.write("\u1af5\u1af6\7\u0133\2\2\u1af6\u1af7\5\u0122\u0092\2\u1af7")
        buf.write("\u1af8\7\u013b\2\2\u1af8\u1af9\7\u0086\2\2\u1af9\u1afa")
        buf.write("\5\u0584\u02c3\2\u1afa\u1b79\3\2\2\2\u1afb\u1afc\7\u00b2")
        buf.write("\2\2\u1afc\u1afd\7\u0137\2\2\u1afd\u1afe\5\u02b0\u0159")
        buf.write("\2\u1afe\u1aff\7\u013b\2\2\u1aff\u1b00\7\u0086\2\2\u1b00")
        buf.write("\u1b01\5\u0584\u02c3\2\u1b01\u1b79\3\2\2\2\u1b02\u1b03")
        buf.write("\7\u00b2\2\2\u1b03\u1b04\7\u0137\2\2\u1b04\u1b05\7\u00c4")
        buf.write("\2\2\u1b05\u1b06\5\u020a\u0106\2\u1b06\u1b07\7\u008c\2")
        buf.write("\2\u1b07\u1b08\5\u0568\u02b5\2\u1b08\u1b09\7\u013b\2\2")
        buf.write("\u1b09\u1b0a\7\u0086\2\2\u1b0a\u1b0b\5\u0584\u02c3\2\u1b0b")
        buf.write("\u1b79\3\2\2\2\u1b0c\u1b0d\7\u00b2\2\2\u1b0d\u1b0e\7\u0137")
        buf.write("\2\2\u1b0e\u1b0f\7\u00f6\2\2\u1b0f\u1b10\5\u020a\u0106")
        buf.write("\2\u1b10\u1b11\7\u008c\2\2\u1b11\u1b12\5\u0568\u02b5\2")
        buf.write("\u1b12\u1b13\7\u013b\2\2\u1b13\u1b14\7\u0086\2\2\u1b14")
        buf.write("\u1b15\5\u0584\u02c3\2\u1b15\u1b79\3\2\2\2\u1b16\u1b17")
        buf.write("\7\u00b2\2\2\u1b17\u1b18\7\u0149\2\2\u1b18\u1b19\5\u0272")
        buf.write("\u013a\2\u1b19\u1b1a\7\u013b\2\2\u1b1a\u1b1b\7\u0086\2")
        buf.write("\2\u1b1b\u1b1c\5\u0584\u02c3\2\u1b1c\u1b79\3\2\2\2\u1b1d")
        buf.write("\u1b1e\7\u00b2\2\2\u1b1e\u1b1f\7\u01e2\2\2\u1b1f\u1b20")
        buf.write("\5\u0272\u013a\2\u1b20\u1b21\7\u013b\2\2\u1b21\u1b22\7")
        buf.write("\u0086\2\2\u1b22\u1b23\5\u0584\u02c3\2\u1b23\u1b79\3\2")
        buf.write("\2\2\u1b24\u1b25\7\u00b2\2\2\u1b25\u1b26\7\u0164\2\2\u1b26")
        buf.write("\u1b27\5\u0568\u02b5\2\u1b27\u1b28\7\u013b\2\2\u1b28\u1b29")
        buf.write("\7\u0086\2\2\u1b29\u1b2a\5\u0584\u02c3\2\u1b2a\u1b79\3")
        buf.write("\2\2\2\u1b2b\u1b2c\7\u00b2\2\2\u1b2c\u1b2d\7\u0189\2\2")
        buf.write("\u1b2d\u1b2e\5\u020a\u0106\2\u1b2e\u1b2f\7\u013b\2\2\u1b2f")
        buf.write("\u1b30\7\u0086\2\2\u1b30\u1b31\5\u0584\u02c3\2\u1b31\u1b79")
        buf.write("\3\2\2\2\u1b32\u1b33\7\u00b2\2\2\u1b33\u1b34\7\u0180\2")
        buf.write("\2\u1b34\u1b35\5\u0568\u02b5\2\u1b35\u1b36\7\u013b\2\2")
        buf.write("\u1b36\u1b37\7\u0086\2\2\u1b37\u1b38\5\u0584\u02c3\2\u1b38")
        buf.write("\u1b79\3\2\2\2\u1b39\u1b3a\7\u00b2\2\2\u1b3a\u1b3b\7\u0177")
        buf.write("\2\2\u1b3b\u1b3c\5\u020a\u0106\2\u1b3c\u1b3d\7\u013b\2")
        buf.write("\2\u1b3d\u1b3e\7\u0086\2\2\u1b3e\u1b3f\5\u0584\u02c3\2")
        buf.write("\u1b3f\u1b79\3\2\2\2\u1b40\u1b41\7\u00b2\2\2\u1b41\u1b42")
        buf.write("\7\u0184\2\2\u1b42\u1b43\7\u0166\2\2\u1b43\u1b44\7\u00e1")
        buf.write("\2\2\u1b44\u1b45\5\u020a\u0106\2\u1b45\u1b46\7\u013b\2")
        buf.write("\2\u1b46\u1b47\7\u0086\2\2\u1b47\u1b48\5\u0584\u02c3\2")
        buf.write("\u1b48\u1b79\3\2\2\2\u1b49\u1b4a\7\u00b2\2\2\u1b4a\u1b4b")
        buf.write("\7\u0184\2\2\u1b4b\u1b4c\7\u0166\2\2\u1b4c\u1b4d\7\u00cb")
        buf.write("\2\2\u1b4d\u1b4e\5\u020a\u0106\2\u1b4e\u1b4f\7\u013b\2")
        buf.write("\2\u1b4f\u1b50\7\u0086\2\2\u1b50\u1b51\5\u0584\u02c3\2")
        buf.write("\u1b51\u1b79\3\2\2\2\u1b52\u1b53\7\u00b2\2\2\u1b53\u1b54")
        buf.write("\7g\2\2\u1b54\u1b55\7\u00d6\2\2\u1b55\u1b56\7\u019e\2")
        buf.write("\2\u1b56\u1b57\5\u0568\u02b5\2\u1b57\u1b58\7\u013b\2\2")
        buf.write("\u1b58\u1b59\7\u0086\2\2\u1b59\u1b5a\5\u0584\u02c3\2\u1b5a")
        buf.write("\u1b79\3\2\2\2\u1b5b\u1b5c\7\u00b2\2\2\u1b5c\u1b5d\7\u016c")
        buf.write("\2\2\u1b5d\u1b5e\5\u0568\u02b5\2\u1b5e\u1b5f\7\u013b\2")
        buf.write("\2\u1b5f\u1b60\7\u0086\2\2\u1b60\u1b61\5\u0584\u02c3\2")
        buf.write("\u1b61\u1b79\3\2\2\2\u1b62\u1b63\7\u00b2\2\2\u1b63\u1b64")
        buf.write("\7\u00ee\2\2\u1b64\u1b65\7\u0186\2\2\u1b65\u1b66\5\u0568")
        buf.write("\u02b5\2\u1b66\u1b67\7\u013b\2\2\u1b67\u1b68\7\u0086\2")
        buf.write("\2\u1b68\u1b69\5\u0584\u02c3\2\u1b69\u1b79\3\2\2\2\u1b6a")
        buf.write("\u1b6b\7\u00b2\2\2\u1b6b\u1b6c\7\u01ec\2\2\u1b6c\u1b6d")
        buf.write("\5\u0568\u02b5\2\u1b6d\u1b6e\7\u013b\2\2\u1b6e\u1b6f\7")
        buf.write("\u0086\2\2\u1b6f\u1b70\5\u0584\u02c3\2\u1b70\u1b79\3\2")
        buf.write("\2\2\u1b71\u1b72\7\u00b2\2\2\u1b72\u1b73\7\u01eb\2\2\u1b73")
        buf.write("\u1b74\5\u0568\u02b5\2\u1b74\u1b75\7\u013b\2\2\u1b75\u1b76")
        buf.write("\7\u0086\2\2\u1b76\u1b77\5\u0584\u02c3\2\u1b77\u1b79\3")
        buf.write("\2\2\2\u1b78\u1abf\3\2\2\2\u1b78\u1ac6\3\2\2\2\u1b78\u1acd")
        buf.write("\3\2\2\2\u1b78\u1ad4\3\2\2\2\u1b78\u1adb\3\2\2\2\u1b78")
        buf.write("\u1ae2\3\2\2\2\u1b78\u1ae9\3\2\2\2\u1b78\u1af3\3\2\2\2")
        buf.write("\u1b78\u1afb\3\2\2\2\u1b78\u1b02\3\2\2\2\u1b78\u1b0c\3")
        buf.write("\2\2\2\u1b78\u1b16\3\2\2\2\u1b78\u1b1d\3\2\2\2\u1b78\u1b24")
        buf.write("\3\2\2\2\u1b78\u1b2b\3\2\2\2\u1b78\u1b32\3\2\2\2\u1b78")
        buf.write("\u1b39\3\2\2\2\u1b78\u1b40\3\2\2\2\u1b78\u1b49\3\2\2\2")
        buf.write("\u1b78\u1b52\3\2\2\2\u1b78\u1b5b\3\2\2\2\u1b78\u1b62\3")
        buf.write("\2\2\2\u1b78\u1b6a\3\2\2\2\u1b78\u1b71\3\2\2\2\u1b79\u02e7")
        buf.write("\3\2\2\2\u1b7a\u1b7b\7V\2\2\u1b7b\u1b7c\7\u01ec\2\2\u1b7c")
        buf.write("\u1b7e\5\u0568\u02b5\2\u1b7d\u1b7f\5\u02ea\u0176\2\u1b7e")
        buf.write("\u1b7d\3\2\2\2\u1b7e\u1b7f\3\2\2\2\u1b7f\u1b81\3\2\2\2")
        buf.write("\u1b80\u1b82\5\u0298\u014d\2\u1b81\u1b80\3\2\2\2\u1b81")
        buf.write("\u1b82\3\2\2\2\u1b82\u02e9\3\2\2\2\u1b83\u1b84\5\u02ec")
        buf.write("\u0177\2\u1b84\u02eb\3\2\2\2\u1b85\u1b86\7f\2\2\u1b86")
        buf.write("\u1b87\7\u0084\2\2\u1b87\u1b8c\5\u0434\u021b\2\u1b88\u1b89")
        buf.write("\7f\2\2\u1b89\u1b8a\7F\2\2\u1b8a\u1b8c\7\u017f\2\2\u1b8b")
        buf.write("\u1b85\3\2\2\2\u1b8b\u1b88\3\2\2\2\u1b8c\u02ed\3\2\2\2")
        buf.write("\u1b8d\u1b8e\7\u00b2\2\2\u1b8e\u1b8f\7\u01ec\2\2\u1b8f")
        buf.write("\u1b90\5\u0568\u02b5\2\u1b90\u1b91\7\u016e\2\2\u1b91\u1b92")
        buf.write("\5\u01ca\u00e6\2\u1b92\u1ba9\3\2\2\2\u1b93\u1b94\7\u00b2")
        buf.write("\2\2\u1b94\u1b95\7\u01ec\2\2\u1b95\u1b96\5\u0568\u02b5")
        buf.write("\2\u1b96\u1b97\7\u00ad\2\2\u1b97\u1b98\7\u0084\2\2\u1b98")
        buf.write("\u1b99\5\u0434\u021b\2\u1b99\u1ba9\3\2\2\2\u1b9a\u1b9b")
        buf.write("\7\u00b2\2\2\u1b9b\u1b9c\7\u01ec\2\2\u1b9c\u1b9d\5\u0568")
        buf.write("\u02b5\2\u1b9d\u1b9e\7\u016e\2\2\u1b9e\u1b9f\7\u0084\2")
        buf.write("\2\u1b9f\u1ba0\5\u0434\u021b\2\u1ba0\u1ba9\3\2\2\2\u1ba1")
        buf.write("\u1ba2\7\u00b2\2\2\u1ba2\u1ba3\7\u01ec\2\2\u1ba3\u1ba4")
        buf.write("\5\u0568\u02b5\2\u1ba4\u1ba5\7\u00e7\2\2\u1ba5\u1ba6\7")
        buf.write("\u0084\2\2\u1ba6\u1ba7\5\u0434\u021b\2\u1ba7\u1ba9\3\2")
        buf.write("\2\2\u1ba8\u1b8d\3\2\2\2\u1ba8\u1b93\3\2\2\2\u1ba8\u1b9a")
        buf.write("\3\2\2\2\u1ba8\u1ba1\3\2\2\2\u1ba9\u02ef\3\2\2\2\u1baa")
        buf.write("\u1bab\7V\2\2\u1bab\u1bac\7\u01eb\2\2\u1bac\u1bad\5\u0568")
        buf.write("\u02b5\2\u1bad\u1bae\7\u00cc\2\2\u1bae\u1baf\5\u057a\u02be")
        buf.write("\2\u1baf\u1bb0\7\u01ec\2\2\u1bb0\u1bb2\5\u02f2\u017a\2")
        buf.write("\u1bb1\u1bb3\5\u0298\u014d\2\u1bb2\u1bb1\3\2\2\2\u1bb2")
        buf.write("\u1bb3\3\2\2\2\u1bb3\u02f1\3\2\2\2\u1bb4\u1bb9\5\u02f4")
        buf.write("\u017b\2\u1bb5\u1bb6\7\b\2\2\u1bb6\u1bb8\5\u02f4\u017b")
        buf.write("\2\u1bb7\u1bb5\3\2\2\2\u1bb8\u1bbb\3\2\2\2\u1bb9\u1bb7")
        buf.write("\3\2\2\2\u1bb9\u1bba\3\2\2\2\u1bba\u02f3\3\2\2\2\u1bbb")
        buf.write("\u1bb9\3\2\2\2\u1bbc\u1bbd\5\u058e\u02c8\2\u1bbd\u02f5")
        buf.write("\3\2\2\2\u1bbe\u1bbf\7\u00b2\2\2\u1bbf\u1bc0\7\u01eb\2")
        buf.write("\2\u1bc0\u1bc1\5\u0568\u02b5\2\u1bc1\u1bc2\7\u016e\2\2")
        buf.write("\u1bc2\u1bc3\5\u01ca\u00e6\2\u1bc3\u1be6\3\2\2\2\u1bc4")
        buf.write("\u1bc5\7\u00b2\2\2\u1bc5\u1bc6\7\u01eb\2\2\u1bc6\u1bc7")
        buf.write("\5\u0568\u02b5\2\u1bc7\u1bc8\7\u00cc\2\2\u1bc8\u1bc9\5")
        buf.write("\u057a\u02be\2\u1bc9\u1be6\3\2\2\2\u1bca\u1bcb\7\u00b2")
        buf.write("\2\2\u1bcb\u1bcc\7\u01eb\2\2\u1bcc\u1bcd\5\u0568\u02b5")
        buf.write("\2\u1bcd\u1bce\7\u0152\2\2\u1bce\u1bd0\7\u01ec\2\2\u1bcf")
        buf.write("\u1bd1\5\u0298\u014d\2\u1bd0\u1bcf\3\2\2\2\u1bd0\u1bd1")
        buf.write("\3\2\2\2\u1bd1\u1be6\3\2\2\2\u1bd2\u1bd3\7\u00b2\2\2\u1bd3")
        buf.write("\u1bd4\7\u01eb\2\2\u1bd4\u1bd5\5\u0568\u02b5\2\u1bd5\u1bd6")
        buf.write("\7\u016e\2\2\u1bd6\u1bd7\7\u01ec\2\2\u1bd7\u1bd9\5\u02f2")
        buf.write("\u017a\2\u1bd8\u1bda\5\u0298\u014d\2\u1bd9\u1bd8\3\2\2")
        buf.write("\2\u1bd9\u1bda\3\2\2\2\u1bda\u1be6\3\2\2\2\u1bdb\u1bdc")
        buf.write("\7\u00b2\2\2\u1bdc\u1bdd\7\u01eb\2\2\u1bdd\u1bde\5\u0568")
        buf.write("\u02b5\2\u1bde\u1bdf\7\u00e9\2\2\u1bdf\u1be6\3\2\2\2\u1be0")
        buf.write("\u1be1\7\u00b2\2\2\u1be1\u1be2\7\u01eb\2\2\u1be2\u1be3")
        buf.write("\5\u0568\u02b5\2\u1be3\u1be4\7\u00e2\2\2\u1be4\u1be6\3")
        buf.write("\2\2\2\u1be5\u1bbe\3\2\2\2\u1be5\u1bc4\3\2\2\2\u1be5\u1bca")
        buf.write("\3\2\2\2\u1be5\u1bd2\3\2\2\2\u1be5\u1bdb\3\2\2\2\u1be5")
        buf.write("\u1be0\3\2\2\2\u1be6\u02f7\3\2\2\2\u1be7\u1be8\7\u00e7")
        buf.write("\2\2\u1be8\u1be9\7\u01eb\2\2\u1be9\u1beb\5\u0568\u02b5")
        buf.write("\2\u1bea\u1bec\5j\66\2\u1beb\u1bea\3\2\2\2\u1beb\u1bec")
        buf.write("\3\2\2\2\u1bec\u1bf6\3\2\2\2\u1bed\u1bee\7\u00e7\2\2\u1bee")
        buf.write("\u1bef\7\u01eb\2\2\u1bef\u1bf0\7\u0104\2\2\u1bf0\u1bf1")
        buf.write("\7\u01ad\2\2\u1bf1\u1bf3\5\u0568\u02b5\2\u1bf2\u1bf4\5")
        buf.write("j\66\2\u1bf3\u1bf2\3\2\2\2\u1bf3\u1bf4\3\2\2\2\u1bf4\u1bf6")
        buf.write("\3\2\2\2\u1bf5\u1be7\3\2\2\2\u1bf5\u1bed\3\2\2\2\u1bf6")
        buf.write("\u02f9\3\2\2\2\u1bf7\u1bf9\7V\2\2\u1bf8\u1bfa\5\u026a")
        buf.write("\u0136\2\u1bf9\u1bf8\3\2\2\2\u1bf9\u1bfa\3\2\2\2\u1bfa")
        buf.write("\u1bfb\3\2\2\2\u1bfb\u1bfc\7\u0162\2\2\u1bfc\u1bfd\5\u0568")
        buf.write("\u02b5\2\u1bfd\u1bfe\7L\2\2\u1bfe\u1bff\7x\2\2\u1bff\u1c00")
        buf.write("\5\u0304\u0183\2\u1c00\u1c01\7\u0086\2\2\u1c01\u1c03\5")
        buf.write("\u0564\u02b3\2\u1c02\u1c04\5\u0446\u0224\2\u1c03\u1c02")
        buf.write("\3\2\2\2\u1c03\u1c04\3\2\2\2\u1c04\u1c05\3\2\2\2\u1c05")
        buf.write("\u1c07\7a\2\2\u1c06\u1c08\5\u0306\u0184\2\u1c07\u1c06")
        buf.write("\3\2\2\2\u1c07\u1c08\3\2\2\2\u1c08\u1c09\3\2\2\2\u1c09")
        buf.write("\u1c0a\5\u02fc\u017f\2\u1c0a\u02fb\3\2\2\2\u1c0b\u1c12")
        buf.write("\7\u012f\2\2\u1c0c\u1c12\5\u0300\u0181\2\u1c0d\u1c0e\7")
        buf.write("\4\2\2\u1c0e\u1c0f\5\u02fe\u0180\2\u1c0f\u1c10\7\5\2\2")
        buf.write("\u1c10\u1c12\3\2\2\2\u1c11\u1c0b\3\2\2\2\u1c11\u1c0c\3")
        buf.write("\2\2\2\u1c11\u1c0d\3\2\2\2\u1c12\u02fd\3\2\2\2\u1c13\u1c15")
        buf.write("\5\u0302\u0182\2\u1c14\u1c13\3\2\2\2\u1c14\u1c15\3\2\2")
        buf.write("\2\u1c15\u1c1c\3\2\2\2\u1c16\u1c18\7\t\2\2\u1c17\u1c19")
        buf.write("\5\u0302\u0182\2\u1c18\u1c17\3\2\2\2\u1c18\u1c19\3\2\2")
        buf.write("\2\u1c19\u1c1b\3\2\2\2\u1c1a\u1c16\3\2\2\2\u1c1b\u1c1e")
        buf.write("\3\2\2\2\u1c1c\u1c1a\3\2\2\2\u1c1c\u1c1d\3\2\2\2\u1c1d")
        buf.write("\u02ff\3\2\2\2\u1c1e\u1c1c\3\2\2\2\u1c1f\u1c25\5\u03c6")
        buf.write("\u01e4\2\u1c20\u1c25\5\u038c\u01c7\2\u1c21\u1c25\5\u03b4")
        buf.write("\u01db\2\u1c22\u1c25\5\u03a6\u01d4\2\u1c23\u1c25\5\u0308")
        buf.write("\u0185\2\u1c24\u1c1f\3\2\2\2\u1c24\u1c20\3\2\2\2\u1c24")
        buf.write("\u1c21\3\2\2\2\u1c24\u1c22\3\2\2\2\u1c24\u1c23\3\2\2\2")
        buf.write("\u1c25\u0301\3\2\2\2\u1c26\u1c27\5\u0300\u0181\2\u1c27")
        buf.write("\u0303\3\2\2\2\u1c28\u1c29\t!\2\2\u1c29\u0305\3\2\2\2")
        buf.write("\u1c2a\u1c2b\t\"\2\2\u1c2b\u0307\3\2\2\2\u1c2c\u1c2d\7")
        buf.write("\u0130\2\2\u1c2d\u1c2f\5\u0588\u02c5\2\u1c2e\u1c30\5\u030a")
        buf.write("\u0186\2\u1c2f\u1c2e\3\2\2\2\u1c2f\u1c30\3\2\2\2\u1c30")
        buf.write("\u0309\3\2\2\2\u1c31\u1c32\7\b\2\2\u1c32\u1c33\5\u057a")
        buf.write("\u02be\2\u1c33\u030b\3\2\2\2\u1c34\u1c35\7\u011b\2\2\u1c35")
        buf.write("\u1c36\5\u0588\u02c5\2\u1c36\u030d\3\2\2\2\u1c37\u1c38")
        buf.write("\7\u018f\2\2\u1c38\u1c3c\5\u0588\u02c5\2\u1c39\u1c3a\7")
        buf.write("\u018f\2\2\u1c3a\u1c3c\7\13\2\2\u1c3b\u1c37\3\2\2\2\u1c3b")
        buf.write("\u1c39\3\2\2\2\u1c3c\u030f\3\2\2\2\u1c3d\u1c3f\7\u00a9")
        buf.write("\2\2\u1c3e\u1c40\5\u0312\u018a\2\u1c3f\u1c3e\3\2\2\2\u1c3f")
        buf.write("\u1c40\3\2\2\2\u1c40\u1c42\3\2\2\2\u1c41\u1c43\5\u031a")
        buf.write("\u018e\2\u1c42\u1c41\3\2\2\2\u1c42\u1c43\3\2\2\2\u1c43")
        buf.write("\u1c83\3\2\2\2\u1c44\u1c46\7\u00ba\2\2\u1c45\u1c47\5\u0312")
        buf.write("\u018a\2\u1c46\u1c45\3\2\2\2\u1c46\u1c47\3\2\2\2\u1c47")
        buf.write("\u1c49\3\2\2\2\u1c48\u1c4a\5\u0318\u018d\2\u1c49\u1c48")
        buf.write("\3\2\2\2\u1c49\u1c4a\3\2\2\2\u1c4a\u1c83\3\2\2\2\u1c4b")
        buf.write("\u1c4c\7\u0175\2\2\u1c4c\u1c4e\7\u0185\2\2\u1c4d\u1c4f")
        buf.write("\5\u0318\u018d\2\u1c4e\u1c4d\3\2\2\2\u1c4e\u1c4f\3\2\2")
        buf.write("\2\u1c4f\u1c83\3\2\2\2\u1c50\u1c52\7\u00c9\2\2\u1c51\u1c53")
        buf.write("\5\u0312\u018a\2\u1c52\u1c51\3\2\2\2\u1c52\u1c53\3\2\2")
        buf.write("\2\u1c53\u1c55\3\2\2\2\u1c54\u1c56\5\u031a\u018e\2\u1c55")
        buf.write("\u1c54\3\2\2\2\u1c55\u1c56\3\2\2\2\u1c56\u1c83\3\2\2\2")
        buf.write("\u1c57\u1c59\7\u01ee\2\2\u1c58\u1c5a\5\u0312\u018a\2\u1c59")
        buf.write("\u1c58\3\2\2\2\u1c59\u1c5a\3\2\2\2\u1c5a\u1c5c\3\2\2\2")
        buf.write("\u1c5b\u1c5d\5\u031a\u018e\2\u1c5c\u1c5b\3\2\2\2\u1c5c")
        buf.write("\u1c5d\3\2\2\2\u1c5d\u1c83\3\2\2\2\u1c5e\u1c60\7\u0160")
        buf.write("\2\2\u1c5f\u1c61\5\u0312\u018a\2\u1c60\u1c5f\3\2\2\2\u1c60")
        buf.write("\u1c61\3\2\2\2\u1c61\u1c63\3\2\2\2\u1c62\u1c64\5\u031a")
        buf.write("\u018e\2\u1c63\u1c62\3\2\2\2\u1c63\u1c64\3\2\2\2\u1c64")
        buf.write("\u1c83\3\2\2\2\u1c65\u1c66\7\u0163\2\2\u1c66\u1c83\5\u0588")
        buf.write("\u02c5\2\u1c67\u1c68\7\u0155\2\2\u1c68\u1c69\7\u0163\2")
        buf.write("\2\u1c69\u1c83\5\u0588\u02c5\2\u1c6a\u1c6b\7\u0155\2\2")
        buf.write("\u1c6b\u1c83\5\u0588\u02c5\2\u1c6c\u1c6e\7\u0160\2\2\u1c6d")
        buf.write("\u1c6f\5\u0312\u018a\2\u1c6e\u1c6d\3\2\2\2\u1c6e\u1c6f")
        buf.write("\3\2\2\2\u1c6f\u1c70\3\2\2\2\u1c70\u1c71\7\u0086\2\2\u1c71")
        buf.write("\u1c72\7\u0163\2\2\u1c72\u1c83\5\u0588\u02c5\2\u1c73\u1c75")
        buf.write("\7\u0160\2\2\u1c74\u1c76\5\u0312\u018a\2\u1c75\u1c74\3")
        buf.write("\2\2\2\u1c75\u1c76\3\2\2\2\u1c76\u1c77\3\2\2\2\u1c77\u1c78")
        buf.write("\7\u0086\2\2\u1c78\u1c83\5\u0588\u02c5\2\u1c79\u1c7a\7")
        buf.write("\u0143\2\2\u1c7a\u1c7b\7\u0185\2\2\u1c7b\u1c83\5\u057a")
        buf.write("\u02be\2\u1c7c\u1c7d\7\u00c9\2\2\u1c7d\u1c7e\7\u0144\2")
        buf.write("\2\u1c7e\u1c83\5\u057a\u02be\2\u1c7f\u1c80\7\u0160\2\2")
        buf.write("\u1c80\u1c81\7\u0144\2\2\u1c81\u1c83\5\u057a\u02be\2\u1c82")
        buf.write("\u1c3d\3\2\2\2\u1c82\u1c44\3\2\2\2\u1c82\u1c4b\3\2\2\2")
        buf.write("\u1c82\u1c50\3\2\2\2\u1c82\u1c57\3\2\2\2\u1c82\u1c5e\3")
        buf.write("\2\2\2\u1c82\u1c65\3\2\2\2\u1c82\u1c67\3\2\2\2\u1c82\u1c6a")
        buf.write("\3\2\2\2\u1c82\u1c6c\3\2\2\2\u1c82\u1c73\3\2\2\2\u1c82")
        buf.write("\u1c79\3\2\2\2\u1c82\u1c7c\3\2\2\2\u1c82\u1c7f\3\2\2\2")
        buf.write("\u1c83\u0311\3\2\2\2\u1c84\u1c85\t#\2\2\u1c85\u0313\3")
        buf.write("\2\2\2\u1c86\u1c87\7\u0113\2\2\u1c87\u1c88\7\u011a\2\2")
        buf.write("\u1c88\u1c91\5> \2\u1c89\u1c8a\7\u014d\2\2\u1c8a\u1c91")
        buf.write("\7y\2\2\u1c8b\u1c8c\7\u014d\2\2\u1c8c\u1c91\7\u019f\2")
        buf.write("\2\u1c8d\u1c91\7^\2\2\u1c8e\u1c8f\7u\2\2\u1c8f\u1c91\7")
        buf.write("^\2\2\u1c90\u1c86\3\2\2\2\u1c90\u1c89\3\2\2\2\u1c90\u1c8b")
        buf.write("\3\2\2\2\u1c90\u1c8d\3\2\2\2\u1c90\u1c8e\3\2\2\2\u1c91")
        buf.write("\u0315\3\2\2\2\u1c92\u1c99\5\u0314\u018b\2\u1c93\u1c95")
        buf.write("\7\b\2\2\u1c94\u1c93\3\2\2\2\u1c94\u1c95\3\2\2\2\u1c95")
        buf.write("\u1c96\3\2\2\2\u1c96\u1c98\5\u0314\u018b\2\u1c97\u1c94")
        buf.write("\3\2\2\2\u1c98\u1c9b\3\2\2\2\u1c99\u1c97\3\2\2\2\u1c99")
        buf.write("\u1c9a\3\2\2\2\u1c9a\u0317\3\2\2\2\u1c9b\u1c99\3\2\2\2")
        buf.write("\u1c9c\u1c9d\5\u0316\u018c\2\u1c9d\u0319\3\2\2\2\u1c9e")
        buf.write("\u1ca0\7I\2\2\u1c9f\u1ca1\7\u012e\2\2\u1ca0\u1c9f\3\2")
        buf.write("\2\2\u1ca0\u1ca1\3\2\2\2\u1ca1\u1ca2\3\2\2\2\u1ca2\u1ca3")
        buf.write("\7\u00c1\2\2\u1ca3\u031b\3\2\2\2\u1ca4\u1ca7\7V\2\2\u1ca5")
        buf.write("\u1ca6\7z\2\2\u1ca6\u1ca8\7\u0158\2\2\u1ca7\u1ca5\3\2")
        buf.write("\2\2\u1ca7\u1ca8\3\2\2\2\u1ca8\u1caa\3\2\2\2\u1ca9\u1cab")
        buf.write("\5\u00acW\2\u1caa\u1ca9\3\2\2\2\u1caa\u1cab\3\2\2\2\u1cab")
        buf.write("\u1cbd\3\2\2\2\u1cac\u1cad\7\u0199\2\2\u1cad\u1caf\5\u0564")
        buf.write("\u02b3\2\u1cae\u1cb0\5\u00d4k\2\u1caf\u1cae\3\2\2\2\u1caf")
        buf.write("\u1cb0\3\2\2\2\u1cb0\u1cb2\3\2\2\2\u1cb1\u1cb3\5t;\2\u1cb2")
        buf.write("\u1cb1\3\2\2\2\u1cb2\u1cb3\3\2\2\2\u1cb3\u1cbe\3\2\2\2")
        buf.write("\u1cb4\u1cb5\7\u0150\2\2\u1cb5\u1cb6\7\u0199\2\2\u1cb6")
        buf.write("\u1cb7\5\u0564\u02b3\2\u1cb7\u1cb8\7\4\2\2\u1cb8\u1cb9")
        buf.write("\5\u00d6l\2\u1cb9\u1cbb\7\5\2\2\u1cba\u1cbc\5t;\2\u1cbb")
        buf.write("\u1cba\3\2\2\2\u1cbb\u1cbc\3\2\2\2\u1cbc\u1cbe\3\2\2\2")
        buf.write("\u1cbd\u1cac\3\2\2\2\u1cbd\u1cb4\3\2\2\2\u1cbe\u1cbf\3")
        buf.write("\2\2\2\u1cbf\u1cc0\7L\2\2\u1cc0\u1cc2\5\u03c6\u01e4\2")
        buf.write("\u1cc1\u1cc3\5\u031e\u0190\2\u1cc2\u1cc1\3\2\2\2\u1cc2")
        buf.write("\u1cc3\3\2\2\2\u1cc3\u031d\3\2\2\2\u1cc4\u1cc6\7\u0091")
        buf.write("\2\2\u1cc5\u1cc7\t$\2\2\u1cc6\u1cc5\3\2\2\2\u1cc6\u1cc7")
        buf.write("\3\2\2\2\u1cc7\u1cc8\3\2\2\2\u1cc8\u1cc9\7R\2\2\u1cc9")
        buf.write("\u1cca\7\u0138\2\2\u1cca\u031f\3\2\2\2\u1ccb\u1ccc\7\u011c")
        buf.write("\2\2\u1ccc\u1ccd\5\u056c\u02b7\2\u1ccd\u0321\3\2\2\2\u1cce")
        buf.write("\u1ccf\7V\2\2\u1ccf\u1cd0\7\u00d7\2\2\u1cd0\u1cd2\5\u0568")
        buf.write("\u02b5\2\u1cd1\u1cd3\5\16\b\2\u1cd2\u1cd1\3\2\2\2\u1cd2")
        buf.write("\u1cd3\3\2\2\2\u1cd3\u1cd5\3\2\2\2\u1cd4\u1cd6\5\u0324")
        buf.write("\u0193\2\u1cd5\u1cd4\3\2\2\2\u1cd5\u1cd6\3\2\2\2\u1cd6")
        buf.write("\u0323\3\2\2\2\u1cd7\u1cd8\5\u0326\u0194\2\u1cd8\u0325")
        buf.write("\3\2\2\2\u1cd9\u1cdb\5\u0328\u0195\2\u1cda\u1cd9\3\2\2")
        buf.write("\2\u1cdb\u1cdc\3\2\2\2\u1cdc\u1cda\3\2\2\2\u1cdc\u1cdd")
        buf.write("\3\2\2\2\u1cdd\u0327\3\2\2\2\u1cde\u1ce0\5\u032a\u0196")
        buf.write("\2\u1cdf\u1ce1\5\u032c\u0197\2\u1ce0\u1cdf\3\2\2\2\u1ce0")
        buf.write("\u1ce1\3\2\2\2\u1ce1\u1ce5\3\2\2\2\u1ce2\u1ce6\5\u0580")
        buf.write("\u02c1\2\u1ce3\u1ce6\5@!\2\u1ce4\u1ce6\7]\2\2\u1ce5\u1ce2")
        buf.write("\3\2\2\2\u1ce5\u1ce3\3\2\2\2\u1ce5\u1ce4\3\2\2\2\u1ce6")
        buf.write("\u0329\3\2\2\2\u1ce7\u1cf0\5\u059e\u02d0\2\u1ce8\u1ce9")
        buf.write("\7\u00cc\2\2\u1ce9\u1cf0\7r\2\2\u1cea\u1cf0\7\u00ea\2")
        buf.write("\2\u1ceb\u1cf0\7\u011e\2\2\u1cec\u1cf0\7\u013b\2\2\u1ced")
        buf.write("\u1cf0\7\u0180\2\2\u1cee\u1cf0\7\u0182\2\2\u1cef\u1ce7")
        buf.write("\3\2\2\2\u1cef\u1ce8\3\2\2\2\u1cef\u1cea\3\2\2\2\u1cef")
        buf.write("\u1ceb\3\2\2\2\u1cef\u1cec\3\2\2\2\u1cef\u1ced\3\2\2\2")
        buf.write("\u1cef\u1cee\3\2\2\2\u1cf0\u032b\3\2\2\2\u1cf1\u1cf2\7")
        buf.write("\f\2\2\u1cf2\u032d\3\2\2\2\u1cf3\u1cf4\7\u00b2\2\2\u1cf4")
        buf.write("\u1cf5\7\u00d7\2\2\u1cf5\u1d00\5\u0568\u02b5\2\u1cf6\u1cf8")
        buf.write("\7\u0091\2\2\u1cf7\u1cf9\5\u0324\u0193\2\u1cf8\u1cf7\3")
        buf.write("\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1d01\3\2\2\2\u1cfa\u1cfc")
        buf.write("\5\u0324\u0193\2\u1cfb\u1cfa\3\2\2\2\u1cfb\u1cfc\3\2\2")
        buf.write("\2\u1cfc\u1d01\3\2\2\2\u1cfd\u1cfe\7\u016e\2\2\u1cfe\u1cff")
        buf.write("\7\u0180\2\2\u1cff\u1d01\5\u0568\u02b5\2\u1d00\u1cf6\3")
        buf.write("\2\2\2\u1d00\u1cfb\3\2\2\2\u1d00\u1cfd\3\2\2\2\u1d01\u032f")
        buf.write("\3\2\2\2\u1d02\u1d03\7\u00b2\2\2\u1d03\u1d04\7\u00d7\2")
        buf.write("\2\u1d04\u1d05\5\u0568\u02b5\2\u1d05\u1d06\5N(\2\u1d06")
        buf.write("\u0331\3\2\2\2\u1d07\u1d08\7\u00e7\2\2\u1d08\u1d0b\7\u00d7")
        buf.write("\2\2\u1d09\u1d0a\7\u0104\2\2\u1d0a\u1d0c\7\u01ad\2\2\u1d0b")
        buf.write("\u1d09\3\2\2\2\u1d0b\u1d0c\3\2\2\2\u1d0c\u1d0d\3\2\2\2")
        buf.write("\u1d0d\u1d15\5\u0568\u02b5\2\u1d0e\u1d10\5\16\b\2\u1d0f")
        buf.write("\u1d0e\3\2\2\2\u1d0f\u1d10\3\2\2\2\u1d10\u1d11\3\2\2\2")
        buf.write("\u1d11\u1d12\7\4\2\2\u1d12\u1d13\5\u0334\u019b\2\u1d13")
        buf.write("\u1d14\7\5\2\2\u1d14\u1d16\3\2\2\2\u1d15\u1d0f\3\2\2\2")
        buf.write("\u1d15\u1d16\3\2\2\2\u1d16\u0333\3\2\2\2\u1d17\u1d1c\5")
        buf.write("\u0336\u019c\2\u1d18\u1d19\7\b\2\2\u1d19\u1d1b\5\u0336")
        buf.write("\u019c\2\u1d1a\u1d18\3\2\2\2\u1d1b\u1d1e\3\2\2\2\u1d1c")
        buf.write("\u1d1a\3\2\2\2\u1d1c\u1d1d\3\2\2\2\u1d1d\u0335\3\2\2\2")
        buf.write("\u1d1e\u1d1c\3\2\2\2\u1d1f\u1d20\7\u00f9\2\2\u1d20\u0337")
        buf.write("\3\2\2\2\u1d21\u1d22\7\u00b2\2\2\u1d22\u1d23\7\u0094\2")
        buf.write("\2\u1d23\u1d24\5\u020a\u0106\2\u1d24\u1d25\7\u0152\2\2")
        buf.write("\u1d25\u1d26\7\u0198\2\2\u1d26\u0339\3\2\2\2\u1d27\u1d28")
        buf.write("\7\u00b2\2\2\u1d28\u1d29\7\u017e\2\2\u1d29\u1d2a\t%\2")
        buf.write("\2\u1d2a\u1d2b\5\64\33\2\u1d2b\u033b\3\2\2\2\u1d2c\u1d2d")
        buf.write("\7V\2\2\u1d2d\u1d2e\7\u00e5\2\2\u1d2e\u1d30\5\u020a\u0106")
        buf.write("\2\u1d2f\u1d31\5\u0340\u01a1\2\u1d30\u1d2f\3\2\2\2\u1d30")
        buf.write("\u1d31\3\2\2\2\u1d31\u1d32\3\2\2\2\u1d32\u1d33\5\u045e")
        buf.write("\u0230\2\u1d33\u1d34\5\u00be`\2\u1d34\u033d\3\2\2\2\u1d35")
        buf.write("\u1d36\7\u00b2\2\2\u1d36\u1d37\7\u00e5\2\2\u1d37\u1d4e")
        buf.write("\5\u020a\u0106\2\u1d38\u1d4f\5h\65\2\u1d39\u1d3a\7\u00e7")
        buf.write("\2\2\u1d3a\u1d3b\7u\2\2\u1d3b\u1d4f\7v\2\2\u1d3c\u1d3d")
        buf.write("\7\u016e\2\2\u1d3d\u1d3e\7u\2\2\u1d3e\u1d4f\7v\2\2\u1d3f")
        buf.write("\u1d40\7\u00ad\2\2\u1d40\u1d4f\5\u00ceh\2\u1d41\u1d42")
        buf.write("\7\u00e7\2\2\u1d42\u1d45\7U\2\2\u1d43\u1d44\7\u0104\2")
        buf.write("\2\u1d44\u1d46\7\u01ad\2\2\u1d45\u1d43\3\2\2\2\u1d45\u1d46")
        buf.write("\3\2\2\2\u1d46\u1d47\3\2\2\2\u1d47\u1d49\5\u0568\u02b5")
        buf.write("\2\u1d48\u1d4a\5j\66\2\u1d49\u1d48\3\2\2\2\u1d49\u1d4a")
        buf.write("\3\2\2\2\u1d4a\u1d4f\3\2\2\2\u1d4b\u1d4c\7\u0195\2\2\u1d4c")
        buf.write("\u1d4d\7U\2\2\u1d4d\u1d4f\5\u0568\u02b5\2\u1d4e\u1d38")
        buf.write("\3\2\2\2\u1d4e\u1d39\3\2\2\2\u1d4e\u1d3c\3\2\2\2\u1d4e")
        buf.write("\u1d3f\3\2\2\2\u1d4e\u1d41\3\2\2\2\u1d4e\u1d4b\3\2\2\2")
        buf.write("\u1d4f\u033f\3\2\2\2\u1d50\u1d51\7L\2\2\u1d51\u0341\3")
        buf.write("\2\2\2\u1d52\u1d53\7\u00b2\2\2\u1d53\u1d54\7\u0184\2\2")
        buf.write("\u1d54\u1d55\7\u0166\2\2\u1d55\u1d56\7\u00e1\2\2\u1d56")
        buf.write("\u1d57\5\u020a\u0106\2\u1d57\u1d58\5\u01ca\u00e6\2\u1d58")
        buf.write("\u0343\3\2\2\2\u1d59\u1d5a\7\u00b2\2\2\u1d5a\u1d5b\7\u0184")
        buf.write("\2\2\u1d5b\u1d5c\7\u0166\2\2\u1d5c\u1d5d\7\u00cb\2\2\u1d5d")
        buf.write("\u1d5e\5\u020a\u0106\2\u1d5e\u1d5f\7\u00ad\2\2\u1d5f\u1d60")
        buf.write("\7\u0120\2\2\u1d60\u1d61\7f\2\2\u1d61\u1d62\5\u0566\u02b4")
        buf.write("\2\u1d62\u1d63\5\u0346\u01a4\2\u1d63\u1d64\5\u0208\u0105")
        buf.write("\2\u1d64\u1da2\3\2\2\2\u1d65\u1d66\7\u00b2\2\2\u1d66\u1d67")
        buf.write("\7\u0184\2\2\u1d67\u1d68\7\u0166\2\2\u1d68\u1d69\7\u00cb")
        buf.write("\2\2\u1d69\u1d6a\5\u020a\u0106\2\u1d6a\u1d6b\7\u00b2\2")
        buf.write("\2\u1d6b\u1d6c\7\u0120\2\2\u1d6c\u1d6d\7f\2\2\u1d6d\u1d6e")
        buf.write("\5\u0566\u02b4\2\u1d6e\u1d6f\5\u0346\u01a4\2\u1d6f\u1d70")
        buf.write("\5\u0208\u0105\2\u1d70\u1da2\3\2\2\2\u1d71\u1d72\7\u00b2")
        buf.write("\2\2\u1d72\u1d73\7\u0184\2\2\u1d73\u1d74\7\u0166\2\2\u1d74")
        buf.write("\u1d75\7\u00cb\2\2\u1d75\u1d76\5\u020a\u0106\2\u1d76\u1d77")
        buf.write("\7\u00b2\2\2\u1d77\u1d78\7\u0120\2\2\u1d78\u1d79\7\u0158")
        buf.write("\2\2\u1d79\u1d7a\5\u020a\u0106\2\u1d7a\u1d7b\5\u0346\u01a4")
        buf.write("\2\u1d7b\u1d7c\5\u020a\u0106\2\u1d7c\u1da2\3\2\2\2\u1d7d")
        buf.write("\u1d7e\7\u00b2\2\2\u1d7e\u1d7f\7\u0184\2\2\u1d7f\u1d80")
        buf.write("\7\u0166\2\2\u1d80\u1d81\7\u00cb\2\2\u1d81\u1d82\5\u020a")
        buf.write("\u0106\2\u1d82\u1d83\7\u00b2\2\2\u1d83\u1d84\7\u0120\2")
        buf.write("\2\u1d84\u1d85\7f\2\2\u1d85\u1d86\5\u0566\u02b4\2\u1d86")
        buf.write("\u1d87\7\u0158\2\2\u1d87\u1d88\5\u020a\u0106\2\u1d88\u1d89")
        buf.write("\5\u0346\u01a4\2\u1d89\u1d8a\5\u020a\u0106\2\u1d8a\u1da2")
        buf.write("\3\2\2\2\u1d8b\u1d8c\7\u00b2\2\2\u1d8c\u1d8d\7\u0184\2")
        buf.write("\2\u1d8d\u1d8e\7\u0166\2\2\u1d8e\u1d8f\7\u00cb\2\2\u1d8f")
        buf.write("\u1d90\5\u020a\u0106\2\u1d90\u1d91\7\u00e7\2\2\u1d91\u1d92")
        buf.write("\7\u0120\2\2\u1d92\u1d93\7f\2\2\u1d93\u1d94\5\u0566\u02b4")
        buf.write("\2\u1d94\u1da2\3\2\2\2\u1d95\u1d96\7\u00b2\2\2\u1d96\u1d97")
        buf.write("\7\u0184\2\2\u1d97\u1d98\7\u0166\2\2\u1d98\u1d99\7\u00cb")
        buf.write("\2\2\u1d99\u1d9a\5\u020a\u0106\2\u1d9a\u1d9b\7\u00e7\2")
        buf.write("\2\u1d9b\u1d9c\7\u0120\2\2\u1d9c\u1d9d\7\u0104\2\2\u1d9d")
        buf.write("\u1d9e\7\u01ad\2\2\u1d9e\u1d9f\7f\2\2\u1d9f\u1da0\5\u0566")
        buf.write("\u02b4\2\u1da0\u1da2\3\2\2\2\u1da1\u1d59\3\2\2\2\u1da1")
        buf.write("\u1d65\3\2\2\2\u1da1\u1d71\3\2\2\2\u1da1\u1d7d\3\2\2\2")
        buf.write("\u1da1\u1d8b\3\2\2\2\u1da1\u1d95\3\2\2\2\u1da2\u0345\3")
        buf.write("\2\2\2\u1da3\u1da4\7\u0091\2\2\u1da4\u0347\3\2\2\2\u1da5")
        buf.write("\u1da7\7V\2\2\u1da6\u1da8\5\u01e6\u00f4\2\u1da7\u1da6")
        buf.write("\3\2\2\2\u1da7\u1da8\3\2\2\2\u1da8\u1da9\3\2\2\2\u1da9")
        buf.write("\u1daa\7\u00d0\2\2\u1daa\u1dab\5\u020a\u0106\2\u1dab\u1dac")
        buf.write("\7f\2\2\u1dac\u1dad\5\u057a\u02be\2\u1dad\u1dae\7\u0086")
        buf.write("\2\2\u1dae\u1daf\5\u057a\u02be\2\u1daf\u1db0\7h\2\2\u1db0")
        buf.write("\u1db1\5\u020a\u0106\2\u1db1\u0349\3\2\2\2\u1db2\u1db4")
        buf.write("\7\u00c6\2\2\u1db3\u1db5\5\u0366\u01b4\2\u1db4\u1db3\3")
        buf.write("\2\2\2\u1db4\u1db5\3\2\2\2\u1db5\u1db6\3\2\2\2\u1db6\u1db8")
        buf.write("\5\u0564\u02b3\2\u1db7\u1db9\5\u034c\u01a7\2\u1db8\u1db7")
        buf.write("\3\2\2\2\u1db8\u1db9\3\2\2\2\u1db9\u1dc7\3\2\2\2\u1dba")
        buf.write("\u1dbc\7\u00c6\2\2\u1dbb\u1dbd\5\u0366\u01b4\2\u1dbc\u1dbb")
        buf.write("\3\2\2\2\u1dbc\u1dbd\3\2\2\2\u1dbd\u1dc7\3\2\2\2\u1dbe")
        buf.write("\u1dc0\7\u00c6\2\2\u1dbf\u1dc1\5\u0366\u01b4\2\u1dc0\u1dbf")
        buf.write("\3\2\2\2\u1dc0\u1dc1\3\2\2\2\u1dc1\u1dc2\3\2\2\2\u1dc2")
        buf.write("\u1dc3\5\u0568\u02b5\2\u1dc3\u1dc4\7x\2\2\u1dc4\u1dc5")
        buf.write("\5\u0564\u02b3\2\u1dc5\u1dc7\3\2\2\2\u1dc6\u1db2\3\2\2")
        buf.write("\2\u1dc6\u1dba\3\2\2\2\u1dc6\u1dbe\3\2\2\2\u1dc7\u034b")
        buf.write("\3\2\2\2\u1dc8\u1dc9\7\u008c\2\2\u1dc9\u1dca\5\u0568\u02b5")
        buf.write("\2\u1dca\u034d\3\2\2\2\u1dcb\u1dcd\7\u0193\2\2\u1dcc\u1dce")
        buf.write("\5\u0368\u01b5\2\u1dcd\u1dcc\3\2\2\2\u1dcd\u1dce\3\2\2")
        buf.write("\2\u1dce\u1dd0\3\2\2\2\u1dcf\u1dd1\5\u036a\u01b6\2\u1dd0")
        buf.write("\u1dcf\3\2\2\2\u1dd0\u1dd1\3\2\2\2\u1dd1\u1dd3\3\2\2\2")
        buf.write("\u1dd2\u1dd4\5\u0366\u01b4\2\u1dd3\u1dd2\3\2\2\2\u1dd3")
        buf.write("\u1dd4\3\2\2\2\u1dd4\u1dd6\3\2\2\2\u1dd5\u1dd7\5\u0364")
        buf.write("\u01b3\2\u1dd6\u1dd5\3\2\2\2\u1dd6\u1dd7\3\2\2\2\u1dd7")
        buf.write("\u1dd9\3\2\2\2\u1dd8\u1dda\5\u0372\u01ba\2\u1dd9\u1dd8")
        buf.write("\3\2\2\2\u1dd9\u1dda\3\2\2\2\u1dda\u1de3\3\2\2\2\u1ddb")
        buf.write("\u1ddc\7\u0193\2\2\u1ddc\u1ddd\7\4\2\2\u1ddd\u1dde\5\u0354")
        buf.write("\u01ab\2\u1dde\u1de0\7\5\2\2\u1ddf\u1de1\5\u0372\u01ba")
        buf.write("\2\u1de0\u1ddf\3\2\2\2\u1de0\u1de1\3\2\2\2\u1de1\u1de3")
        buf.write("\3\2\2\2\u1de2\u1dcb\3\2\2\2\u1de2\u1ddb\3\2\2\2\u1de3")
        buf.write("\u034f\3\2\2\2\u1de4\u1de6\5\u0356\u01ac\2\u1de5\u1de7")
        buf.write("\5\u0366\u01b4\2\u1de6\u1de5\3\2\2\2\u1de6\u1de7\3\2\2")
        buf.write("\2\u1de7\u1de9\3\2\2\2\u1de8\u1dea\5\u0372\u01ba\2\u1de9")
        buf.write("\u1de8\3\2\2\2\u1de9\u1dea\3\2\2\2\u1dea\u1df3\3\2\2\2")
        buf.write("\u1deb\u1dec\5\u0356\u01ac\2\u1dec\u1ded\7\4\2\2\u1ded")
        buf.write("\u1dee\5\u0354\u01ab\2\u1dee\u1df0\7\5\2\2\u1def\u1df1")
        buf.write("\5\u0372\u01ba\2\u1df0\u1def\3\2\2\2\u1df0\u1df1\3\2\2")
        buf.write("\2\u1df1\u1df3\3\2\2\2\u1df2\u1de4\3\2\2\2\u1df2\u1deb")
        buf.write("\3\2\2\2\u1df3\u0351\3\2\2\2\u1df4\u1df9\5\u0358\u01ad")
        buf.write("\2\u1df5\u1df6\7\b\2\2\u1df6\u1df8\5\u0358\u01ad\2\u1df7")
        buf.write("\u1df5\3\2\2\2\u1df8\u1dfb\3\2\2\2\u1df9\u1df7\3\2\2\2")
        buf.write("\u1df9\u1dfa\3\2\2\2\u1dfa\u0353\3\2\2\2\u1dfb\u1df9\3")
        buf.write("\2\2\2\u1dfc\u1e01\5\u035e\u01b0\2\u1dfd\u1dfe\7\b\2\2")
        buf.write("\u1dfe\u1e00\5\u035e\u01b0\2\u1dff\u1dfd\3\2\2\2\u1e00")
        buf.write("\u1e03\3\2\2\2\u1e01\u1dff\3\2\2\2\u1e01\u1e02\3\2\2\2")
        buf.write("\u1e02\u0355\3\2\2\2\u1e03\u1e01\3\2\2\2\u1e04\u1e05\t")
        buf.write("&\2\2\u1e05\u0357\3\2\2\2\u1e06\u1e08\5\u035a\u01ae\2")
        buf.write("\u1e07\u1e09\5\u035c\u01af\2\u1e08\u1e07\3\2\2\2\u1e08")
        buf.write("\u1e09\3\2\2\2\u1e09\u0359\3\2\2\2\u1e0a\u1e0e\5\u058c")
        buf.write("\u02c7\2\u1e0b\u1e0e\5\u0356\u01ac\2\u1e0c\u1e0e\7E\2")
        buf.write("\2\u1e0d\u1e0a\3\2\2\2\u1e0d\u1e0b\3\2\2\2\u1e0d\u1e0c")
        buf.write("\3\2\2\2\u1e0e\u035b\3\2\2\2\u1e0f\u1e12\5@!\2\u1e10\u1e12")
        buf.write("\5\u0122\u0092\2\u1e11\u1e0f\3\2\2\2\u1e11\u1e10\3\2\2")
        buf.write("\2\u1e12\u035d\3\2\2\2\u1e13\u1e15\5\u0360\u01b1\2\u1e14")
        buf.write("\u1e16\5\u0362\u01b2\2\u1e15\u1e14\3\2\2\2\u1e15\u1e16")
        buf.write("\3\2\2\2\u1e16\u035f\3\2\2\2\u1e17\u1e1a\5\u058c\u02c7")
        buf.write("\2\u1e18\u1e1a\5\u0356\u01ac\2\u1e19\u1e17\3\2\2\2\u1e19")
        buf.write("\u1e18\3\2\2\2\u1e1a\u0361\3\2\2\2\u1e1b\u1e1e\5@!\2\u1e1c")
        buf.write("\u1e1e\5\u0122\u0092\2\u1e1d\u1e1b\3\2\2\2\u1e1d\u1e1c")
        buf.write("\3\2\2\2\u1e1e\u0363\3\2\2\2\u1e1f\u1e20\5\u0356\u01ac")
        buf.write("\2\u1e20\u0365\3\2\2\2\u1e21\u1e22\7\u00a8\2\2\u1e22\u0367")
        buf.write("\3\2\2\2\u1e23\u1e24\7\u0099\2\2\u1e24\u0369\3\2\2\2\u1e25")
        buf.write("\u1e26\7\u0098\2\2\u1e26\u036b\3\2\2\2\u1e27\u1e28\7\4")
        buf.write("\2\2\u1e28\u1e29\5\u0566\u02b4\2\u1e29\u1e2a\7\5\2\2\u1e2a")
        buf.write("\u036d\3\2\2\2\u1e2b\u1e2d\5\u0564\u02b3\2\u1e2c\u1e2e")
        buf.write("\5\u036c\u01b7\2\u1e2d\u1e2c\3\2\2\2\u1e2d\u1e2e\3\2\2")
        buf.write("\2\u1e2e\u036f\3\2\2\2\u1e2f\u1e34\5\u036e\u01b8\2\u1e30")
        buf.write("\u1e31\7\b\2\2\u1e31\u1e33\5\u036e\u01b8\2\u1e32\u1e30")
        buf.write("\3\2\2\2\u1e33\u1e36\3\2\2\2\u1e34\u1e32\3\2\2\2\u1e34")
        buf.write("\u1e35\3\2\2\2\u1e35\u0371\3\2\2\2\u1e36\u1e34\3\2\2\2")
        buf.write("\u1e37\u1e38\5\u0370\u01b9\2\u1e38\u0373\3\2\2\2\u1e39")
        buf.write("\u1e3a\7\u00f3\2\2\u1e3a\u1e4c\5\u0376\u01bc\2\u1e3b\u1e3c")
        buf.write("\7\u00f3\2\2\u1e3c\u1e3e\5\u0356\u01ac\2\u1e3d\u1e3f\5")
        buf.write("\u0366\u01b4\2\u1e3e\u1e3d\3\2\2\2\u1e3e\u1e3f\3\2\2\2")
        buf.write("\u1e3f\u1e40\3\2\2\2\u1e40\u1e41\5\u0376\u01bc\2\u1e41")
        buf.write("\u1e4c\3\2\2\2\u1e42\u1e43\7\u00f3\2\2\u1e43\u1e44\7\u00a8")
        buf.write("\2\2\u1e44\u1e4c\5\u0376\u01bc\2\u1e45\u1e46\7\u00f3\2")
        buf.write("\2\u1e46\u1e47\7\4\2\2\u1e47\u1e48\5\u0378\u01bd\2\u1e48")
        buf.write("\u1e49\7\5\2\2\u1e49\u1e4a\5\u0376\u01bc\2\u1e4a\u1e4c")
        buf.write("\3\2\2\2\u1e4b\u1e39\3\2\2\2\u1e4b\u1e3b\3\2\2\2\u1e4b")
        buf.write("\u1e42\3\2\2\2\u1e4b\u1e45\3\2\2\2\u1e4c\u0375\3\2\2\2")
        buf.write("\u1e4d\u1e57\5\u03c6\u01e4\2\u1e4e\u1e57\5\u038c\u01c7")
        buf.write("\2\u1e4f\u1e57\5\u03b4\u01db\2\u1e50\u1e57\5\u03a6\u01d4")
        buf.write("\2\u1e51\u1e57\5\u03be\u01e0\2\u1e52\u1e57\5\u0106\u0084")
        buf.write("\2\u1e53\u1e57\5\u010c\u0087\2\u1e54\u1e57\5\u0112\u008a")
        buf.write("\2\u1e55\u1e57\5\u0386\u01c4\2\u1e56\u1e4d\3\2\2\2\u1e56")
        buf.write("\u1e4e\3\2\2\2\u1e56\u1e4f\3\2\2\2\u1e56\u1e50\3\2\2\2")
        buf.write("\u1e56\u1e51\3\2\2\2\u1e56\u1e52\3\2\2\2\u1e56\u1e53\3")
        buf.write("\2\2\2\u1e56\u1e54\3\2\2\2\u1e56\u1e55\3\2\2\2\u1e57\u0377")
        buf.write("\3\2\2\2\u1e58\u1e5d\5\u037a\u01be\2\u1e59\u1e5a\7\b\2")
        buf.write("\2\u1e5a\u1e5c\5\u037a\u01be\2\u1e5b\u1e59\3\2\2\2\u1e5c")
        buf.write("\u1e5f\3\2\2\2\u1e5d\u1e5b\3\2\2\2\u1e5d\u1e5e\3\2\2\2")
        buf.write("\u1e5e\u0379\3\2\2\2\u1e5f\u1e5d\3\2\2\2\u1e60\u1e62\5")
        buf.write("\u037c\u01bf\2\u1e61\u1e63\5\u037e\u01c0\2\u1e62\u1e61")
        buf.write("\3\2\2\2\u1e62\u1e63\3\2\2\2\u1e63\u037b\3\2\2\2\u1e64")
        buf.write("\u1e67\5\u058c\u02c7\2\u1e65\u1e67\5\u0356\u01ac\2\u1e66")
        buf.write("\u1e64\3\2\2\2\u1e66\u1e65\3\2\2\2\u1e67\u037d\3\2\2\2")
        buf.write("\u1e68\u1e6b\5@!\2\u1e69\u1e6b\5\u0122\u0092\2\u1e6a\u1e68")
        buf.write("\3\2\2\2\u1e6a\u1e69\3\2\2\2\u1e6b\u037f\3\2\2\2\u1e6c")
        buf.write("\u1e6d\7\u0143\2\2\u1e6d\u1e6f\5\u0568\u02b5\2\u1e6e\u1e70")
        buf.write("\5\u0382\u01c2\2\u1e6f\u1e6e\3\2\2\2\u1e6f\u1e70\3\2\2")
        buf.write("\2\u1e70\u1e71\3\2\2\2\u1e71\u1e72\7L\2\2\u1e72\u1e73")
        buf.write("\5\u0384\u01c3\2\u1e73\u0381\3\2\2\2\u1e74\u1e75\7\4\2")
        buf.write("\2\u1e75\u1e76\5\u0508\u0285\2\u1e76\u1e77\7\5\2\2\u1e77")
        buf.write("\u0383\3\2\2\2\u1e78\u1e7d\5\u03c6\u01e4\2\u1e79\u1e7d")
        buf.write("\5\u038c\u01c7\2\u1e7a\u1e7d\5\u03b4\u01db\2\u1e7b\u1e7d")
        buf.write("\5\u03a6\u01d4\2\u1e7c\u1e78\3\2\2\2\u1e7c\u1e79\3\2\2")
        buf.write("\2\u1e7c\u1e7a\3\2\2\2\u1e7c\u1e7b\3\2\2\2\u1e7d\u0385")
        buf.write("\3\2\2\2\u1e7e\u1e7f\7\u00f2\2\2\u1e7f\u1e81\5\u0568\u02b5")
        buf.write("\2\u1e80\u1e82\5\u0388\u01c5\2\u1e81\u1e80\3\2\2\2\u1e81")
        buf.write("\u1e82\3\2\2\2\u1e82\u1ea5\3\2\2\2\u1e83\u1e85\7V\2\2")
        buf.write("\u1e84\u1e86\5\u00acW\2\u1e85\u1e84\3\2\2\2\u1e85\u1e86")
        buf.write("\3\2\2\2\u1e86\u1e87\3\2\2\2\u1e87\u1e88\7\u0084\2\2\u1e88")
        buf.write("\u1e89\5\u0108\u0085\2\u1e89\u1e8a\7L\2\2\u1e8a\u1e8b")
        buf.write("\7\u00f2\2\2\u1e8b\u1e8d\5\u0568\u02b5\2\u1e8c\u1e8e\5")
        buf.write("\u0388\u01c5\2\u1e8d\u1e8c\3\2\2\2\u1e8d\u1e8e\3\2\2\2")
        buf.write("\u1e8e\u1e90\3\2\2\2\u1e8f\u1e91\5\u010a\u0086\2\u1e90")
        buf.write("\u1e8f\3\2\2\2\u1e90\u1e91\3\2\2\2\u1e91\u1ea5\3\2\2\2")
        buf.write("\u1e92\u1e94\7V\2\2\u1e93\u1e95\5\u00acW\2\u1e94\u1e93")
        buf.write("\3\2\2\2\u1e94\u1e95\3\2\2\2\u1e95\u1e96\3\2\2\2\u1e96")
        buf.write("\u1e97\7\u0084\2\2\u1e97\u1e98\7\u0104\2\2\u1e98\u1e99")
        buf.write("\7u\2\2\u1e99\u1e9a\7\u01ad\2\2\u1e9a\u1e9b\5\u0108\u0085")
        buf.write("\2\u1e9b\u1e9c\7L\2\2\u1e9c\u1e9d\7\u00f2\2\2\u1e9d\u1e9f")
        buf.write("\5\u0568\u02b5\2\u1e9e\u1ea0\5\u0388\u01c5\2\u1e9f\u1e9e")
        buf.write("\3\2\2\2\u1e9f\u1ea0\3\2\2\2\u1ea0\u1ea2\3\2\2\2\u1ea1")
        buf.write("\u1ea3\5\u010a\u0086\2\u1ea2\u1ea1\3\2\2\2\u1ea2\u1ea3")
        buf.write("\3\2\2\2\u1ea3\u1ea5\3\2\2\2\u1ea4\u1e7e\3\2\2\2\u1ea4")
        buf.write("\u1e83\3\2\2\2\u1ea4\u1e92\3\2\2\2\u1ea5\u0387\3\2\2\2")
        buf.write("\u1ea6\u1ea7\7\4\2\2\u1ea7\u1ea8\5\u0502\u0282\2\u1ea8")
        buf.write("\u1ea9\7\5\2\2\u1ea9\u0389\3\2\2\2\u1eaa\u1eab\7\u00d9")
        buf.write("\2\2\u1eab\u1eb5\5\u0568\u02b5\2\u1eac\u1ead\7\u00d9\2")
        buf.write("\2\u1ead\u1eae\7\u0143\2\2\u1eae\u1eb5\5\u0568\u02b5\2")
        buf.write("\u1eaf\u1eb0\7\u00d9\2\2\u1eb0\u1eb5\7F\2\2\u1eb1\u1eb2")
        buf.write("\7\u00d9\2\2\u1eb2\u1eb3\7\u0143\2\2\u1eb3\u1eb5\7F\2")
        buf.write("\2\u1eb4\u1eaa\3\2\2\2\u1eb4\u1eac\3\2\2\2\u1eb4\u1eaf")
        buf.write("\3\2\2\2\u1eb4\u1eb1\3\2\2\2\u1eb5\u038b\3\2\2\2\u1eb6")
        buf.write("\u1eb8\5\u03da\u01ee\2\u1eb7\u1eb6\3\2\2\2\u1eb7\u1eb8")
        buf.write("\3\2\2\2\u1eb8\u1eb9\3\2\2\2\u1eb9\u1eba\7\u0110\2\2\u1eba")
        buf.write("\u1ebb\7o\2\2\u1ebb\u1ebc\5\u038e\u01c8\2\u1ebc\u1ebe")
        buf.write("\5\u0390\u01c9\2\u1ebd\u1ebf\5\u0398\u01cd\2\u1ebe\u1ebd")
        buf.write("\3\2\2\2\u1ebe\u1ebf\3\2\2\2\u1ebf\u1ec1\3\2\2\2\u1ec0")
        buf.write("\u1ec2\5\u039c\u01cf\2\u1ec1\u1ec0\3\2\2\2\u1ec1\u1ec2")
        buf.write("\3\2\2\2\u1ec2\u038d\3\2\2\2\u1ec3\u1ec6\5\u0564\u02b3")
        buf.write("\2\u1ec4\u1ec5\7L\2\2\u1ec5\u1ec7\5\u0588\u02c5\2\u1ec6")
        buf.write("\u1ec4\3\2\2\2\u1ec6\u1ec7\3\2\2\2\u1ec7\u038f\3\2\2\2")
        buf.write("\u1ec8\u1edc\5\u03c6\u01e4\2\u1ec9\u1eca\7\u01f7\2\2\u1eca")
        buf.write("\u1ecb\5\u0392\u01ca\2\u1ecb\u1ecc\7\u01ea\2\2\u1ecc\u1ecd")
        buf.write("\5\u03c6\u01e4\2\u1ecd\u1edc\3\2\2\2\u1ece\u1ecf\7\4\2")
        buf.write("\2\u1ecf\u1ed0\5\u0394\u01cb\2\u1ed0\u1ed5\7\5\2\2\u1ed1")
        buf.write("\u1ed2\7\u01f7\2\2\u1ed2\u1ed3\5\u0392\u01ca\2\u1ed3\u1ed4")
        buf.write("\7\u01ea\2\2\u1ed4\u1ed6\3\2\2\2\u1ed5\u1ed1\3\2\2\2\u1ed5")
        buf.write("\u1ed6\3\2\2\2\u1ed6\u1ed7\3\2\2\2\u1ed7\u1ed8\5\u03c6")
        buf.write("\u01e4\2\u1ed8\u1edc\3\2\2\2\u1ed9\u1eda\7]\2\2\u1eda")
        buf.write("\u1edc\7\u01c7\2\2\u1edb\u1ec8\3\2\2\2\u1edb\u1ec9\3\2")
        buf.write("\2\2\u1edb\u1ece\3\2\2\2\u1edb\u1ed9\3\2\2\2\u1edc\u0391")
        buf.write("\3\2\2\2\u1edd\u1ede\t\'\2\2\u1ede\u0393\3\2\2\2\u1edf")
        buf.write("\u1ee4\5\u0396\u01cc\2\u1ee0\u1ee1\7\b\2\2\u1ee1\u1ee3")
        buf.write("\5\u0396\u01cc\2\u1ee2\u1ee0\3\2\2\2\u1ee3\u1ee6\3\2\2")
        buf.write("\2\u1ee4\u1ee2\3\2\2\2\u1ee4\u1ee5\3\2\2\2\u1ee5\u0395")
        buf.write("\3\2\2\2\u1ee6\u1ee4\3\2\2\2\u1ee7\u1ee8\5\u0588\u02c5")
        buf.write("\2\u1ee8\u1ee9\5\u0530\u0299\2\u1ee9\u0397\3\2\2\2\u1eea")
        buf.write("\u1eeb\7x\2\2\u1eeb\u1eed\7\u01f8\2\2\u1eec\u1eee\5\u039a")
        buf.write("\u01ce\2\u1eed\u1eec\3\2\2\2\u1eed\u1eee\3\2\2\2\u1eee")
        buf.write("\u1eef\3\2\2\2\u1eef\u1ef7\7a\2\2\u1ef0\u1ef1\7\u0192")
        buf.write("\2\2\u1ef1\u1ef2\7\u016e\2\2\u1ef2\u1ef4\5\u03b6\u01dc")
        buf.write("\2\u1ef3\u1ef5\5\u0446\u0224\2\u1ef4\u1ef3\3\2\2\2\u1ef4")
        buf.write("\u1ef5\3\2\2\2\u1ef5\u1ef8\3\2\2\2\u1ef6\u1ef8\7\u012f")
        buf.write("\2\2\u1ef7\u1ef0\3\2\2\2\u1ef7\u1ef6\3\2\2\2\u1ef8\u0399")
        buf.write("\3\2\2\2\u1ef9\u1efa\7\4\2\2\u1efa\u1efb\5\u0256\u012c")
        buf.write("\2\u1efb\u1efd\7\5\2\2\u1efc\u1efe\5\u0446\u0224\2\u1efd")
        buf.write("\u1efc\3\2\2\2\u1efd\u1efe\3\2\2\2\u1efe\u1f03\3\2\2\2")
        buf.write("\u1eff\u1f00\7x\2\2\u1f00\u1f01\7U\2\2\u1f01\u1f03\5\u0568")
        buf.write("\u02b5\2\u1f02\u1ef9\3\2\2\2\u1f02\u1eff\3\2\2\2\u1f03")
        buf.write("\u039b\3\2\2\2\u1f04\u1f05\7\177\2\2\u1f05\u1f06\5\u055e")
        buf.write("\u02b0\2\u1f06\u039d\3\2\2\2\u1f07\u1f09\7\u0125\2\2\u1f08")
        buf.write("\u1f0a\7o\2\2\u1f09\u1f08\3\2\2\2\u1f09\u1f0a\3\2\2\2")
        buf.write("\u1f0a\u1f0b\3\2\2\2\u1f0b\u1f0d\5\u0564\u02b3\2\u1f0c")
        buf.write("\u1f0e\5\u042a\u0216\2\u1f0d\u1f0c\3\2\2\2\u1f0d\u1f0e")
        buf.write("\3\2\2\2\u1f0e\u1f0f\3\2\2\2\u1f0f\u1f12\7\u008c\2\2\u1f10")
        buf.write("\u1f13\5\u03c8\u01e5\2\u1f11\u1f13\5\u0564\u02b3\2\u1f12")
        buf.write("\u1f10\3\2\2\2\u1f12\u1f11\3\2\2\2\u1f13\u1f15\3\2\2\2")
        buf.write("\u1f14\u1f16\5\u042a\u0216\2\u1f15\u1f14\3\2\2\2\u1f15")
        buf.write("\u1f16\3\2\2\2\u1f16\u1f17\3\2\2\2\u1f17\u1f18\7x\2\2")
        buf.write("\u1f18\u1f21\5\u048c\u0247\2\u1f19\u1f1b\5\u03a0\u01d1")
        buf.write("\2\u1f1a\u1f1c\5\u03a2\u01d2\2\u1f1b\u1f1a\3\2\2\2\u1f1b")
        buf.write("\u1f1c\3\2\2\2\u1f1c\u1f22\3\2\2\2\u1f1d\u1f1f\5\u03a2")
        buf.write("\u01d2\2\u1f1e\u1f20\5\u03a0\u01d1\2\u1f1f\u1f1e\3\2\2")
        buf.write("\2\u1f1f\u1f20\3\2\2\2\u1f20\u1f22\3\2\2\2\u1f21\u1f19")
        buf.write("\3\2\2\2\u1f21\u1f1d\3\2\2\2\u1f22\u1f24\3\2\2\2\u1f23")
        buf.write("\u1f25\5\u03a4\u01d3\2\u1f24\u1f23\3\2\2\2\u1f24\u1f25")
        buf.write("\3\2\2\2\u1f25\u039f\3\2\2\2\u1f26\u1f27\7\u008e\2\2\u1f27")
        buf.write("\u1f28\7u\2\2\u1f28\u1f2b\7\u0122\2\2\u1f29\u1f2a\7I\2")
        buf.write("\2\u1f2a\u1f2c\5\u048c\u0247\2\u1f2b\u1f29\3\2\2\2\u1f2b")
        buf.write("\u1f2c\3\2\2\2\u1f2c\u1f2e\3\2\2\2\u1f2d\u1f2f\7\u0085")
        buf.write("\2\2\u1f2e\u1f2d\3\2\2\2\u1f2e\u1f2f\3\2\2\2\u1f2f\u1f30")
        buf.write("\3\2\2\2\u1f30\u1f35\7\u0110\2\2\u1f31\u1f32\7\4\2\2\u1f32")
        buf.write("\u1f33\5\u0394\u01cb\2\u1f33\u1f34\7\5\2\2\u1f34\u1f36")
        buf.write("\3\2\2\2\u1f35\u1f31\3\2\2\2\u1f35\u1f36\3\2\2\2\u1f36")
        buf.write("\u1f37\3\2\2\2\u1f37\u1f38\5\u0422\u0212\2\u1f38\u03a1")
        buf.write("\3\2\2\2\u1f39\u1f3a\7\u008e\2\2\u1f3a\u1f3d\7\u0122\2")
        buf.write("\2\u1f3b\u1f3c\7I\2\2\u1f3c\u1f3e\5\u048c\u0247\2\u1f3d")
        buf.write("\u1f3b\3\2\2\2\u1f3d\u1f3e\3\2\2\2\u1f3e\u1f40\3\2\2\2")
        buf.write("\u1f3f\u1f41\7\u0085\2\2\u1f40\u1f3f\3\2\2\2\u1f40\u1f41")
        buf.write("\3\2\2\2\u1f41\u1f42\3\2\2\2\u1f42\u1f43\7\u0192\2\2\u1f43")
        buf.write("\u1f44\7\u016e\2\2\u1f44\u1f45\5\u03b6\u01dc\2\u1f45\u03a3")
        buf.write("\3\2\2\2\u1f46\u1f47\7\u008e\2\2\u1f47\u1f49\7\u0122\2")
        buf.write("\2\u1f48\u1f4a\7\u0085\2\2\u1f49\u1f48\3\2\2\2\u1f49\u1f4a")
        buf.write("\3\2\2\2\u1f4a\u1f4b\3\2\2\2\u1f4b\u1f4c\7\u00de\2\2\u1f4c")
        buf.write("\u03a5\3\2\2\2\u1f4d\u1f4f\5\u03da\u01ee\2\u1f4e\u1f4d")
        buf.write("\3\2\2\2\u1f4e\u1f4f\3\2\2\2\u1f4f\u1f50\3\2\2\2\u1f50")
        buf.write("\u1f51\7\u00de\2\2\u1f51\u1f52\7h\2\2\u1f52\u1f54\5\u0436")
        buf.write("\u021c\2\u1f53\u1f55\5\u03a8\u01d5\2\u1f54\u1f53\3\2\2")
        buf.write("\2\u1f54\u1f55\3\2\2\2\u1f55\u1f57\3\2\2\2\u1f56\u1f58")
        buf.write("\5\u0448\u0225\2\u1f57\u1f56\3\2\2\2\u1f57\u1f58\3\2\2")
        buf.write("\2\u1f58\u1f5a\3\2\2\2\u1f59\u1f5b\5\u039c\u01cf\2\u1f5a")
        buf.write("\u1f59\3\2\2\2\u1f5a\u1f5b\3\2\2\2\u1f5b\u03a7\3\2\2\2")
        buf.write("\u1f5c\u1f5d\7\u008c\2\2\u1f5d\u1f5e\5\u0426\u0214\2\u1f5e")
        buf.write("\u03a9\3\2\2\2\u1f5f\u1f61\7\u011f\2\2\u1f60\u1f62\5\u03e2")
        buf.write("\u01f2\2\u1f61\u1f60\3\2\2\2\u1f61\u1f62\3\2\2\2\u1f62")
        buf.write("\u1f63\3\2\2\2\u1f63\u1f65\5\u0434\u021b\2\u1f64\u1f66")
        buf.write("\5\u03ac\u01d7\2\u1f65\u1f64\3\2\2\2\u1f65\u1f66\3\2\2")
        buf.write("\2\u1f66\u1f68\3\2\2\2\u1f67\u1f69\5\u03b0\u01d9\2\u1f68")
        buf.write("\u1f67\3\2\2\2\u1f68\u1f69\3\2\2\2\u1f69\u03ab\3\2\2\2")
        buf.write("\u1f6a\u1f6b\7l\2\2\u1f6b\u1f6c\5\u03ae\u01d8\2\u1f6c")
        buf.write("\u1f6d\7\u0128\2\2\u1f6d\u03ad\3\2\2\2\u1f6e\u1f6f\7\u00ab")
        buf.write("\2\2\u1f6f\u1f7b\t(\2\2\u1f70\u1f71\7\u01bf\2\2\u1f71")
        buf.write("\u1f7b\t(\2\2\u1f72\u1f77\7\u016f\2\2\u1f73\u1f74\7\u0192")
        buf.write("\2\2\u1f74\u1f78\7\u00f1\2\2\u1f75\u1f76\7\u01bf\2\2\u1f76")
        buf.write("\u1f78\7\u00f1\2\2\u1f77\u1f73\3\2\2\2\u1f77\u1f75\3\2")
        buf.write("\2\2\u1f77\u1f78\3\2\2\2\u1f78\u1f7b\3\2\2\2\u1f79\u1f7b")
        buf.write("\7\u00f1\2\2\u1f7a\u1f6e\3\2\2\2\u1f7a\u1f70\3\2\2\2\u1f7a")
        buf.write("\u1f72\3\2\2\2\u1f7a\u1f79\3\2\2\2\u1f7b\u03af\3\2\2\2")
        buf.write("\u1f7c\u1f7d\7\u0131\2\2\u1f7d\u03b1\3\2\2\2\u1f7e\u1f82")
        buf.write("\7\u0131\2\2\u1f7f\u1f80\7\u01f9\2\2\u1f80\u1f82\7\u01fa")
        buf.write("\2\2\u1f81\u1f7e\3\2\2\2\u1f81\u1f7f\3\2\2\2\u1f82\u03b3")
        buf.write("\3\2\2\2\u1f83\u1f85\5\u03da\u01ee\2\u1f84\u1f83\3\2\2")
        buf.write("\2\u1f84\u1f85\3\2\2\2\u1f85\u1f86\3\2\2\2\u1f86\u1f87")
        buf.write("\7\u0192\2\2\u1f87\u1f88\5\u0436\u021c\2\u1f88\u1f89\7")
        buf.write("\u016e\2\2\u1f89\u1f8b\5\u03b6\u01dc\2\u1f8a\u1f8c\5\u0424")
        buf.write("\u0213\2\u1f8b\u1f8a\3\2\2\2\u1f8b\u1f8c\3\2\2\2\u1f8c")
        buf.write("\u1f8e\3\2\2\2\u1f8d\u1f8f\5\u0448\u0225\2\u1f8e\u1f8d")
        buf.write("\3\2\2\2\u1f8e\u1f8f\3\2\2\2\u1f8f\u1f91\3\2\2\2\u1f90")
        buf.write("\u1f92\5\u039c\u01cf\2\u1f91\u1f90\3\2\2\2\u1f91\u1f92")
        buf.write("\3\2\2\2\u1f92\u03b5\3\2\2\2\u1f93\u1f98\5\u03b8\u01dd")
        buf.write("\2\u1f94\u1f95\7\b\2\2\u1f95\u1f97\5\u03b8\u01dd\2\u1f96")
        buf.write("\u1f94\3\2\2\2\u1f97\u1f9a\3\2\2\2\u1f98\u1f96\3\2\2\2")
        buf.write("\u1f98\u1f99\3\2\2\2\u1f99\u03b7\3\2\2\2\u1f9a\u1f98\3")
        buf.write("\2\2\2\u1f9b\u1f9c\5\u03ba\u01de\2\u1f9c\u1f9d\7\f\2\2")
        buf.write("\u1f9d\u1f9e\5\u048c\u0247\2\u1f9e\u1fa6\3\2\2\2\u1f9f")
        buf.write("\u1fa0\7\4\2\2\u1fa0\u1fa1\5\u03bc\u01df\2\u1fa1\u1fa2")
        buf.write("\7\5\2\2\u1fa2\u1fa3\7\f\2\2\u1fa3\u1fa4\5\u048c\u0247")
        buf.write("\2\u1fa4\u1fa6\3\2\2\2\u1fa5\u1f9b\3\2\2\2\u1fa5\u1f9f")
        buf.write("\3\2\2\2\u1fa6\u03b9\3\2\2\2\u1fa7\u1fa8\5\u0588\u02c5")
        buf.write("\2\u1fa8\u1fa9\5\u0530\u0299\2\u1fa9\u03bb\3\2\2\2\u1faa")
        buf.write("\u1faf\5\u03ba\u01de\2\u1fab\u1fac\7\b\2\2\u1fac\u1fae")
        buf.write("\5\u03ba\u01de\2\u1fad\u1fab\3\2\2\2\u1fae\u1fb1\3\2\2")
        buf.write("\2\u1faf\u1fad\3\2\2\2\u1faf\u1fb0\3\2\2\2\u1fb0\u03bd")
        buf.write("\3\2\2\2\u1fb1\u1faf\3\2\2\2\u1fb2\u1fb3\7\u00da\2\2\u1fb3")
        buf.write("\u1fb4\5\u03c0\u01e1\2\u1fb4\u1fb5\5\u03c2\u01e2\2\u1fb5")
        buf.write("\u1fb7\7\u00d4\2\2\u1fb6\u1fb8\5\u03c4\u01e3\2\u1fb7\u1fb6")
        buf.write("\3\2\2\2\u1fb7\u1fb8\3\2\2\2\u1fb8\u1fb9\3\2\2\2\u1fb9")
        buf.write("\u1fba\7f\2\2\u1fba\u1fbb\5\u03c6\u01e4\2\u1fbb\u03bf")
        buf.write("\3\2\2\2\u1fbc\u1fbd\5\u0568\u02b5\2\u1fbd\u03c1\3\2\2")
        buf.write("\2\u1fbe\u1fbf\7\u012e\2\2\u1fbf\u1fc4\7\u0165\2\2\u1fc0")
        buf.write("\u1fc4\7\u0165\2\2\u1fc1\u1fc4\7\u0093\2\2\u1fc2\u1fc4")
        buf.write("\7\u010f\2\2\u1fc3\u1fbe\3\2\2\2\u1fc3\u1fc0\3\2\2\2\u1fc3")
        buf.write("\u1fc1\3\2\2\2\u1fc3\u1fc2\3\2\2\2\u1fc4\u1fc7\3\2\2\2")
        buf.write("\u1fc5\u1fc3\3\2\2\2\u1fc5\u1fc6\3\2\2\2\u1fc6\u03c3\3")
        buf.write("\2\2\2\u1fc7\u1fc5\3\2\2\2\u1fc8\u1fc9\7\u0091\2\2\u1fc9")
        buf.write("\u1fcd\7\u0101\2\2\u1fca\u1fcb\7\u019c\2\2\u1fcb\u1fcd")
        buf.write("\7\u0101\2\2\u1fcc\u1fc8\3\2\2\2\u1fcc\u1fca\3\2\2\2\u1fcd")
        buf.write("\u03c5\3\2\2\2\u1fce\u1fd1\5\u03ca\u01e6\2\u1fcf\u1fd1")
        buf.write("\5\u03c8\u01e5\2\u1fd0\u1fce\3\2\2\2\u1fd0\u1fcf\3\2\2")
        buf.write("\2\u1fd1\u03c7\3\2\2\2\u1fd2\u1fd3\7\4\2\2\u1fd3\u1fd4")
        buf.write("\5\u03ca\u01e6\2\u1fd4\u1fd5\7\5\2\2\u1fd5\u1fdb\3\2\2")
        buf.write("\2\u1fd6\u1fd7\7\4\2\2\u1fd7\u1fd8\5\u03c8\u01e5\2\u1fd8")
        buf.write("\u1fd9\7\5\2\2\u1fd9\u1fdb\3\2\2\2\u1fda\u1fd2\3\2\2\2")
        buf.write("\u1fda\u1fd6\3\2\2\2\u1fdb\u03c9\3\2\2\2\u1fdc\u1fde\5")
        buf.write("\u03cc\u01e7\2\u1fdd\u1fdf\5\u03ea\u01f6\2\u1fde\u1fdd")
        buf.write("\3\2\2\2\u1fde\u1fdf\3\2\2\2\u1fdf\u1fe8\3\2\2\2\u1fe0")
        buf.write("\u1fe2\5\u0416\u020c\2\u1fe1\u1fe3\5\u03f4\u01fb\2\u1fe2")
        buf.write("\u1fe1\3\2\2\2\u1fe2\u1fe3\3\2\2\2\u1fe3\u1fe9\3\2\2\2")
        buf.write("\u1fe4\u1fe6\5\u03f2\u01fa\2\u1fe5\u1fe7\5\u0418\u020d")
        buf.write("\2\u1fe6\u1fe5\3\2\2\2\u1fe6\u1fe7\3\2\2\2\u1fe7\u1fe9")
        buf.write("\3\2\2\2\u1fe8\u1fe0\3\2\2\2\u1fe8\u1fe4\3\2\2\2\u1fe8")
        buf.write("\u1fe9\3\2\2\2\u1fe9\u1ffa\3\2\2\2\u1fea\u1feb\5\u03d2")
        buf.write("\u01ea\2\u1feb\u1fed\5\u03cc\u01e7\2\u1fec\u1fee\5\u03ea")
        buf.write("\u01f6\2\u1fed\u1fec\3\2\2\2\u1fed\u1fee\3\2\2\2\u1fee")
        buf.write("\u1ff7\3\2\2\2\u1fef\u1ff1\5\u0416\u020c\2\u1ff0\u1ff2")
        buf.write("\5\u03f4\u01fb\2\u1ff1\u1ff0\3\2\2\2\u1ff1\u1ff2\3\2\2")
        buf.write("\2\u1ff2\u1ff8\3\2\2\2\u1ff3\u1ff5\5\u03f2\u01fa\2\u1ff4")
        buf.write("\u1ff6\5\u0418\u020d\2\u1ff5\u1ff4\3\2\2\2\u1ff5\u1ff6")
        buf.write("\3\2\2\2\u1ff6\u1ff8\3\2\2\2\u1ff7\u1fef\3\2\2\2\u1ff7")
        buf.write("\u1ff3\3\2\2\2\u1ff7\u1ff8\3\2\2\2\u1ff8\u1ffa\3\2\2\2")
        buf.write("\u1ff9\u1fdc\3\2\2\2\u1ff9\u1fea\3\2\2\2\u1ffa\u03cb\3")
        buf.write("\2\2\2\u1ffb\u2003\5\u03ce\u01e8\2\u1ffc\u1ffe\t)\2\2")
        buf.write("\u1ffd\u1fff\5\u03e4\u01f3\2\u1ffe\u1ffd\3\2\2\2\u1ffe")
        buf.write("\u1fff\3\2\2\2\u1fff\u2000\3\2\2\2\u2000\u2002\5\u03ce")
        buf.write("\u01e8\2\u2001\u1ffc\3\2\2\2\u2002\u2005\3\2\2\2\u2003")
        buf.write("\u2001\3\2\2\2\u2003\u2004\3\2\2\2\u2004\u03cd\3\2\2\2")
        buf.write("\u2005\u2003\3\2\2\2\u2006\u200e\5\u03d0\u01e9\2\u2007")
        buf.write("\u2009\7n\2\2\u2008\u200a\5\u03e4\u01f3\2\u2009\u2008")
        buf.write("\3\2\2\2\u2009\u200a\3\2\2\2\u200a\u200b\3\2\2\2\u200b")
        buf.write("\u200d\5\u03d0\u01e9\2\u200c\u2007\3\2\2\2\u200d\u2010")
        buf.write("\3\2\2\2\u200e\u200c\3\2\2\2\u200e\u200f\3\2\2\2\u200f")
        buf.write("\u03cf\3\2\2\2\u2010\u200e\3\2\2\2\u2011\u203e\7\u0080")
        buf.write("\2\2\u2012\u2014\5\u03e8\u01f5\2\u2013\u2012\3\2\2\2\u2013")
        buf.write("\u2014\3\2\2\2\u2014\u2016\3\2\2\2\u2015\u2017\5\u055c")
        buf.write("\u02af\2\u2016\u2015\3\2\2\2\u2016\u2017\3\2\2\2\u2017")
        buf.write("\u2019\3\2\2\2\u2018\u201a\5\u03dc\u01ef\2\u2019\u2018")
        buf.write("\3\2\2\2\u2019\u201a\3\2\2\2\u201a\u201c\3\2\2\2\u201b")
        buf.write("\u201d\5\u0424\u0213\2\u201c\u201b\3\2\2\2\u201c\u201d")
        buf.write("\3\2\2\2\u201d\u201f\3\2\2\2\u201e\u2020\5\u0446\u0224")
        buf.write("\2\u201f\u201e\3\2\2\2\u201f\u2020\3\2\2\2\u2020\u2022")
        buf.write("\3\2\2\2\u2021\u2023\5\u0406\u0204\2\u2022\u2021\3\2\2")
        buf.write("\2\u2022\u2023\3\2\2\2\u2023\u2025\3\2\2\2\u2024\u2026")
        buf.write("\5\u0414\u020b\2\u2025\u2024\3\2\2\2\u2025\u2026\3\2\2")
        buf.write("\2\u2026\u2028\3\2\2\2\u2027\u2029\5\u04da\u026e\2\u2028")
        buf.write("\u2027\3\2\2\2\u2028\u2029\3\2\2\2\u2029\u203f\3\2\2\2")
        buf.write("\u202a\u202b\5\u03e6\u01f4\2\u202b\u202d\5\u055e\u02b0")
        buf.write("\2\u202c\u202e\5\u03dc\u01ef\2\u202d\u202c\3\2\2\2\u202d")
        buf.write("\u202e\3\2\2\2\u202e\u2030\3\2\2\2\u202f\u2031\5\u0424")
        buf.write("\u0213\2\u2030\u202f\3\2\2\2\u2030\u2031\3\2\2\2\u2031")
        buf.write("\u2033\3\2\2\2\u2032\u2034\5\u0446\u0224\2\u2033\u2032")
        buf.write("\3\2\2\2\u2033\u2034\3\2\2\2\u2034\u2036\3\2\2\2\u2035")
        buf.write("\u2037\5\u0406\u0204\2\u2036\u2035\3\2\2\2\u2036\u2037")
        buf.write("\3\2\2\2\u2037\u2039\3\2\2\2\u2038\u203a\5\u0414\u020b")
        buf.write("\2\u2039\u2038\3\2\2\2\u2039\u203a\3\2\2\2\u203a\u203c")
        buf.write("\3\2\2\2\u203b\u203d\5\u04da\u026e\2\u203c\u203b\3\2\2")
        buf.write("\2\u203c\u203d\3\2\2\2\u203d\u203f\3\2\2\2\u203e\u2013")
        buf.write("\3\2\2\2\u203e\u202a\3\2\2\2\u203f\u2045\3\2\2\2\u2040")
        buf.write("\u2045\5\u0422\u0212\2\u2041\u2042\7\u0084\2\2\u2042\u2045")
        buf.write("\5\u0432\u021a\2\u2043\u2045\5\u03c8\u01e5\2\u2044\u2011")
        buf.write("\3\2\2\2\u2044\u2040\3\2\2\2\u2044\u2041\3\2\2\2\u2044")
        buf.write("\u2043\3\2\2\2\u2045\u03d1\3\2\2\2\u2046\u2048\7\u0091")
        buf.write("\2\2\u2047\u2049\7\u0150\2\2\u2048\u2047\3\2\2\2\u2048")
        buf.write("\u2049\3\2\2\2\u2049\u204a\3\2\2\2\u204a\u204b\5\u03d4")
        buf.write("\u01eb\2\u204b\u03d3\3\2\2\2\u204c\u2051\5\u03d6\u01ec")
        buf.write("\2\u204d\u204e\7\b\2\2\u204e\u2050\5\u03d6\u01ec\2\u204f")
        buf.write("\u204d\3\2\2\2\u2050\u2053\3\2\2\2\u2051\u204f\3\2\2\2")
        buf.write("\u2051\u2052\3\2\2\2\u2052\u03d5\3\2\2\2\u2053\u2051\3")
        buf.write("\2\2\2\u2054\u2056\5\u0568\u02b5\2\u2055\u2057\5\u036c")
        buf.write("\u01b7\2\u2056\u2055\3\2\2\2\u2056\u2057\3\2\2\2\u2057")
        buf.write("\u2058\3\2\2\2\u2058\u205a\7L\2\2\u2059\u205b\5\u03d8")
        buf.write("\u01ed\2\u205a\u2059\3\2\2\2\u205a\u205b\3\2\2\2\u205b")
        buf.write("\u205c\3\2\2\2\u205c\u205d\7\4\2\2\u205d\u205e\5\u0384")
        buf.write("\u01c3\2\u205e\u205f\7\5\2\2\u205f\u03d7\3\2\2\2\u2060")
        buf.write("\u2064\7\u0123\2\2\u2061\u2062\7u\2\2\u2062\u2064\7\u0123")
        buf.write("\2\2\u2063\u2060\3\2\2\2\u2063\u2061\3\2\2\2\u2064\u03d9")
        buf.write("\3\2\2\2\u2065\u2066\5\u03d2\u01ea\2\u2066\u03db\3\2\2")
        buf.write("\2\u2067\u2068\7o\2\2\u2068\u2069\5\u03e0\u01f1\2\u2069")
        buf.write("\u03dd\3\2\2\2\u206a\u206b\7\u017b\2\2\u206b\u03df\3\2")
        buf.write("\2\2\u206c\u206e\t*\2\2\u206d\u206c\3\2\2\2\u206d\u206e")
        buf.write("\3\2\2\2\u206e\u206f\3\2\2\2\u206f\u2071\t\16\2\2\u2070")
        buf.write("\u2072\5\u03e2\u01f2\2\u2071\u2070\3\2\2\2\u2071\u2072")
        buf.write("\3\2\2\2\u2072\u2073\3\2\2\2\u2073\u207d\5\u0564\u02b3")
        buf.write("\2\u2074\u2076\7\u0190\2\2\u2075\u2077\5\u03e2\u01f2\2")
        buf.write("\u2076\u2075\3\2\2\2\u2076\u2077\3\2\2\2\u2077\u2078\3")
        buf.write("\2\2\2\u2078\u207d\5\u0564\u02b3\2\u2079\u207a\7\u0084")
        buf.write("\2\2\u207a\u207d\5\u0564\u02b3\2\u207b\u207d\5\u0564\u02b3")
        buf.write("\2\u207c\u206d\3\2\2\2\u207c\u2074\3\2\2\2\u207c\u2079")
        buf.write("\3\2\2\2\u207c\u207b\3\2\2\2\u207d\u03e1\3\2\2\2\u207e")
        buf.write("\u207f\7\u0084\2\2\u207f\u03e3\3\2\2\2\u2080\u2081\t+")
        buf.write("\2\2\u2081\u03e5\3\2\2\2\u2082\u2088\7`\2\2\u2083\u2084")
        buf.write("\7x\2\2\u2084\u2085\7\4\2\2\u2085\u2086\5\u0502\u0282")
        buf.write("\2\u2086\u2087\7\5\2\2\u2087\u2089\3\2\2\2\u2088\u2083")
        buf.write("\3\2\2\2\u2088\u2089\3\2\2\2\u2089\u03e7\3\2\2\2\u208a")
        buf.write("\u208b\7F\2\2\u208b\u03e9\3\2\2\2\u208c\u208d\5\u03ec")
        buf.write("\u01f7\2\u208d\u03eb\3\2\2\2\u208e\u208f\7{\2\2\u208f")
        buf.write("\u2090\7\u00bb\2\2\u2090\u2091\5\u03ee\u01f8\2\u2091\u03ed")
        buf.write("\3\2\2\2\u2092\u2097\5\u03f0\u01f9\2\u2093\u2094\7\b\2")
        buf.write("\2\u2094\u2096\5\u03f0\u01f9\2\u2095\u2093\3\2\2\2\u2096")
        buf.write("\u2099\3\2\2\2\u2097\u2095\3\2\2\2\u2097\u2098\3\2\2\2")
        buf.write("\u2098\u03ef\3\2\2\2\u2099\u2097\3\2\2\2\u209a\u20a0\5")
        buf.write("\u048c\u0247\2\u209b\u209c\7\u008c\2\2\u209c\u20a1\5\u04fe")
        buf.write("\u0280\2\u209d\u209f\5\u0264\u0133\2\u209e\u209d\3\2\2")
        buf.write("\2\u209e\u209f\3\2\2\2\u209f\u20a1\3\2\2\2\u20a0\u209b")
        buf.write("\3\2\2\2\u20a0\u209e\3\2\2\2\u20a1\u20a3\3\2\2\2\u20a2")
        buf.write("\u20a4\5\u0266\u0134\2\u20a3\u20a2\3\2\2\2\u20a3\u20a4")
        buf.write("\3\2\2\2\u20a4\u03f1\3\2\2\2\u20a5\u20a7\5\u03f6\u01fc")
        buf.write("\2\u20a6\u20a8\5\u03f8\u01fd\2\u20a7\u20a6\3\2\2\2\u20a7")
        buf.write("\u20a8\3\2\2\2\u20a8\u20ae\3\2\2\2\u20a9\u20ab\5\u03f8")
        buf.write("\u01fd\2\u20aa\u20ac\5\u03f6\u01fc\2\u20ab\u20aa\3\2\2")
        buf.write("\2\u20ab\u20ac\3\2\2\2\u20ac\u20ae\3\2\2\2\u20ad\u20a5")
        buf.write("\3\2\2\2\u20ad\u20a9\3\2\2\2\u20ae\u03f3\3\2\2\2\u20af")
        buf.write("\u20b0\5\u03f2\u01fa\2\u20b0\u03f5\3\2\2\2\u20b1\u20b2")
        buf.write("\7r\2\2\u20b2\u20b5\5\u03fa\u01fe\2\u20b3\u20b4\7\b\2")
        buf.write("\2\u20b4\u20b6\5\u03fc\u01ff\2\u20b5\u20b3\3\2\2\2\u20b5")
        buf.write("\u20b6\3\2\2\2\u20b6\u20c9\3\2\2\2\u20b7\u20b8\7e\2\2")
        buf.write("\u20b8\u20c6\5\u0404\u0203\2\u20b9\u20ba\5\u03fe\u0200")
        buf.write("\2\u20ba\u20be\5\u0402\u0202\2\u20bb\u20bf\7y\2\2\u20bc")
        buf.write("\u20bd\7\u0091\2\2\u20bd\u20bf\7\u01fb\2\2\u20be\u20bb")
        buf.write("\3\2\2\2\u20be\u20bc\3\2\2\2\u20bf\u20c7\3\2\2\2\u20c0")
        buf.write("\u20c4\5\u0402\u0202\2\u20c1\u20c5\7y\2\2\u20c2\u20c3")
        buf.write("\7\u0091\2\2\u20c3\u20c5\7\u01fb\2\2\u20c4\u20c1\3\2\2")
        buf.write("\2\u20c4\u20c2\3\2\2\2\u20c5\u20c7\3\2\2\2\u20c6\u20b9")
        buf.write("\3\2\2\2\u20c6\u20c0\3\2\2\2\u20c7\u20c9\3\2\2\2\u20c8")
        buf.write("\u20b1\3\2\2\2\u20c8\u20b7\3\2\2\2\u20c9\u03f7\3\2\2\2")
        buf.write("\u20ca\u20cf\7w\2\2\u20cb\u20d0\5\u03fc\u01ff\2\u20cc")
        buf.write("\u20cd\5\u03fe\u0200\2\u20cd\u20ce\5\u0402\u0202\2\u20ce")
        buf.write("\u20d0\3\2\2\2\u20cf\u20cb\3\2\2\2\u20cf\u20cc\3\2\2\2")
        buf.write("\u20d0\u03f9\3\2\2\2\u20d1\u20d4\5\u048c\u0247\2\u20d2")
        buf.write("\u20d4\7F\2\2\u20d3\u20d1\3\2\2\2\u20d3\u20d2\3\2\2\2")
        buf.write("\u20d4\u03fb\3\2\2\2\u20d5\u20d6\5\u048c\u0247\2\u20d6")
        buf.write("\u03fd\3\2\2\2\u20d7\u20dd\5\u04b8\u025d\2\u20d8\u20d9")
        buf.write("\7\16\2\2\u20d9\u20dd\5\u0400\u0201\2\u20da\u20db\7\17")
        buf.write("\2\2\u20db\u20dd\5\u0400\u0201\2\u20dc\u20d7\3\2\2\2\u20dc")
        buf.write("\u20d8\3\2\2\2\u20dc\u20da\3\2\2\2\u20dd\u03ff\3\2\2\2")
        buf.write("\u20de\u20e1\5\u0578\u02bd\2\u20df\u20e1\5\u0576\u02bc")
        buf.write("\2\u20e0\u20de\3\2\2\2\u20e0\u20df\3\2\2\2\u20e1\u0401")
        buf.write("\3\2\2\2\u20e2\u20e3\t,\2\2\u20e3\u0403\3\2\2\2\u20e4")
        buf.write("\u20e5\t-\2\2\u20e5\u0405\3\2\2\2\u20e6\u20e7\7j\2\2\u20e7")
        buf.write("\u20e8\7\u00bb\2\2\u20e8\u20e9\5\u0408\u0205\2\u20e9\u0407")
        buf.write("\3\2\2\2\u20ea\u20ef\5\u040a\u0206\2\u20eb\u20ec\7\b\2")
        buf.write("\2\u20ec\u20ee\5\u040a\u0206\2\u20ed\u20eb\3\2\2\2\u20ee")
        buf.write("\u20f1\3\2\2\2\u20ef\u20ed\3\2\2\2\u20ef\u20f0\3\2\2\2")
        buf.write("\u20f0\u0409\3\2\2\2\u20f1\u20ef\3\2\2\2\u20f2\u20f8\5")
        buf.write("\u040c\u0207\2\u20f3\u20f8\5\u0410\u0209\2\u20f4\u20f8")
        buf.write("\5\u040e\u0208\2\u20f5\u20f8\5\u0412\u020a\2\u20f6\u20f8")
        buf.write("\5\u048c\u0247\2\u20f7\u20f2\3\2\2\2\u20f7\u20f3\3\2\2")
        buf.write("\2\u20f7\u20f4\3\2\2\2\u20f7\u20f5\3\2\2\2\u20f7\u20f6")
        buf.write("\3\2\2\2\u20f8\u040b\3\2\2\2\u20f9\u20fa\7\4\2\2\u20fa")
        buf.write("\u20fb\7\5\2\2\u20fb\u040d\3\2\2\2\u20fc\u20fd\7\u01fc")
        buf.write("\2\2\u20fd\u20fe\7\4\2\2\u20fe\u20ff\5\u0502\u0282\2\u20ff")
        buf.write("\u2100\7\5\2\2\u2100\u040f\3\2\2\2\u2101\u2102\7\u01fd")
        buf.write("\2\2\u2102\u2103\7\4\2\2\u2103\u2104\5\u0502\u0282\2\u2104")
        buf.write("\u2105\7\5\2\2\u2105\u0411\3\2\2\2\u2106\u2107\7\u01fe")
        buf.write("\2\2\u2107\u2108\7\u01ff\2\2\u2108\u2109\7\4\2\2\u2109")
        buf.write("\u210a\5\u0408\u0205\2\u210a\u210b\7\5\2\2\u210b\u0413")
        buf.write("\3\2\2\2\u210c\u210d\7k\2\2\u210d\u210e\5\u048c\u0247")
        buf.write("\2\u210e\u0415\3\2\2\2\u210f\u2114\5\u041a\u020e\2\u2110")
        buf.write("\u2111\7f\2\2\u2111\u2112\7\u014d\2\2\u2112\u2114\7y\2")
        buf.write("\2\u2113\u210f\3\2\2\2\u2113\u2110\3\2\2\2\u2114\u0417")
        buf.write("\3\2\2\2\u2115\u2116\5\u0416\u020c\2\u2116\u0419\3\2\2")
        buf.write("\2\u2117\u2119\5\u041c\u020f\2\u2118\u2117\3\2\2\2\u2119")
        buf.write("\u211a\3\2\2\2\u211a\u2118\3\2\2\2\u211a\u211b\3\2\2\2")
        buf.write("\u211b\u041b\3\2\2\2\u211c\u211e\5\u041e\u0210\2\u211d")
        buf.write("\u211f\5\u0420\u0211\2\u211e\u211d\3\2\2\2\u211e\u211f")
        buf.write("\3\2\2\2\u211f\u2121\3\2\2\2\u2120\u2122\5\u03b2\u01da")
        buf.write("\2\u2121\u2120\3\2\2\2\u2121\u2122\3\2\2\2\u2122\u041d")
        buf.write("\3\2\2\2\u2123\u212d\7f\2\2\u2124\u2125\7\u012e\2\2\u2125")
        buf.write("\u2127\7\u0114\2\2\u2126\u2124\3\2\2\2\u2126\u2127\3\2")
        buf.write("\2\2\u2127\u2128\3\2\2\2\u2128\u212e\7\u0192\2\2\u2129")
        buf.write("\u212b\7\u0114\2\2\u212a\u2129\3\2\2\2\u212a\u212b\3\2")
        buf.write("\2\2\u212b\u212c\3\2\2\2\u212c\u212e\7\u016f\2\2\u212d")
        buf.write("\u2126\3\2\2\2\u212d\u212a\3\2\2\2\u212e\u041f\3\2\2\2")
        buf.write("\u212f\u2130\7\u0134\2\2\u2130\u2131\5\u0562\u02b2\2\u2131")
        buf.write("\u0421\3\2\2\2\u2132\u2133\7\u01c7\2\2\u2133\u2134\7\4")
        buf.write("\2\2\u2134\u2135\5\u0502\u0282\2\u2135\u213d\7\5\2\2\u2136")
        buf.write("\u2137\7\b\2\2\u2137\u2138\7\4\2\2\u2138\u2139\5\u0502")
        buf.write("\u0282\2\u2139\u213a\7\5\2\2\u213a\u213c\3\2\2\2\u213b")
        buf.write("\u2136\3\2\2\2\u213c\u213f\3\2\2\2\u213d\u213b\3\2\2\2")
        buf.write("\u213d\u213e\3\2\2\2\u213e\u0423\3\2\2\2\u213f\u213d\3")
        buf.write("\2\2\2\u2140\u2141\7h\2\2\u2141\u2142\5\u0426\u0214\2")
        buf.write("\u2142\u0425\3\2\2\2\u2143\u2148\5\u0428\u0215\2\u2144")
        buf.write("\u2145\7\b\2\2\u2145\u2147\5\u0428\u0215\2\u2146\u2144")
        buf.write("\3\2\2\2\u2147\u214a\3\2\2\2\u2148\u2146\3\2\2\2\u2148")
        buf.write("\u2149\3\2\2\2\u2149\u0427\3\2\2\2\u214a\u2148\3\2\2\2")
        buf.write("\u214b\u214d\5\u0432\u021a\2\u214c\u214e\5\u042a\u0216")
        buf.write("\2\u214d\u214c\3\2\2\2\u214d\u214e\3\2\2\2\u214e\u2150")
        buf.write("\3\2\2\2\u214f\u2151\5\u0438\u021d\2\u2150\u214f\3\2\2")
        buf.write("\2\u2150\u2151\3\2\2\2\u2151\u2186\3\2\2\2\u2152\u2154")
        buf.write("\5\u043c\u021f\2\u2153\u2155\5\u042c\u0217\2\u2154\u2153")
        buf.write("\3\2\2\2\u2154\u2155\3\2\2\2\u2155\u2186\3\2\2\2\u2156")
        buf.write("\u2158\5\u0450\u0229\2\u2157\u2159\5\u042a\u0216\2\u2158")
        buf.write("\u2157\3\2\2\2\u2158\u2159\3\2\2\2\u2159\u2186\3\2\2\2")
        buf.write("\u215a\u215c\5\u03c8\u01e5\2\u215b\u215d\5\u042a\u0216")
        buf.write("\2\u215c\u215b\3\2\2\2\u215c\u215d\3\2\2\2\u215d\u2186")
        buf.write("\3\2\2\2\u215e\u216b\7p\2\2\u215f\u2161\5\u0450\u0229")
        buf.write("\2\u2160\u2162\5\u042a\u0216\2\u2161\u2160\3\2\2\2\u2161")
        buf.write("\u2162\3\2\2\2\u2162\u216c\3\2\2\2\u2163\u2165\5\u043c")
        buf.write("\u021f\2\u2164\u2166\5\u042c\u0217\2\u2165\u2164\3\2\2")
        buf.write("\2\u2165\u2166\3\2\2\2\u2166\u216c\3\2\2\2\u2167\u2169")
        buf.write("\5\u03c8\u01e5\2\u2168\u216a\5\u042a\u0216\2\u2169\u2168")
        buf.write("\3\2\2\2\u2169\u216a\3\2\2\2\u216a\u216c\3\2\2\2\u216b")
        buf.write("\u215f\3\2\2\2\u216b\u2163\3\2\2\2\u216b\u2167\3\2\2\2")
        buf.write("\u216c\u2186\3\2\2\2\u216d\u216e\7\4\2\2\u216e\u217f\5")
        buf.write("\u0428\u0215\2\u216f\u2170\7\u0096\2\2\u2170\u2171\7\u009e")
        buf.write("\2\2\u2171\u2180\5\u0428\u0215\2\u2172\u2174\7\u00a1\2")
        buf.write("\2\u2173\u2175\5\u042e\u0218\2\u2174\u2173\3\2\2\2\u2174")
        buf.write("\u2175\3\2\2\2\u2175\u2176\3\2\2\2\u2176\u2177\7\u009e")
        buf.write("\2\2\u2177\u2180\5\u0428\u0215\2\u2178\u217a\5\u042e\u0218")
        buf.write("\2\u2179\u2178\3\2\2\2\u2179\u217a\3\2\2\2\u217a\u217b")
        buf.write("\3\2\2\2\u217b\u217c\7\u009e\2\2\u217c\u217d\5\u0428\u0215")
        buf.write("\2\u217d\u217e\5\u0430\u0219\2\u217e\u2180\3\2\2\2\u217f")
        buf.write("\u216f\3\2\2\2\u217f\u2172\3\2\2\2\u217f\u2179\3\2\2\2")
        buf.write("\u217f\u2180\3\2\2\2\u2180\u2181\3\2\2\2\u2181\u2183\7")
        buf.write("\5\2\2\u2182\u2184\5\u042a\u0216\2\u2183\u2182\3\2\2\2")
        buf.write("\u2183\u2184\3\2\2\2\u2184\u2186\3\2\2\2\u2185\u214b\3")
        buf.write("\2\2\2\u2185\u2152\3\2\2\2\u2185\u2156\3\2\2\2\u2185\u215a")
        buf.write("\3\2\2\2\u2185\u215e\3\2\2\2\u2185\u216d\3\2\2\2\u2186")
        buf.write("\u2199\3\2\2\2\u2187\u2188\7\u0096\2\2\u2188\u2189\7\u009e")
        buf.write("\2\2\u2189\u2198\5\u0428\u0215\2\u218a\u218c\7\u00a1\2")
        buf.write("\2\u218b\u218d\5\u042e\u0218\2\u218c\u218b\3\2\2\2\u218c")
        buf.write("\u218d\3\2\2\2\u218d\u218e\3\2\2\2\u218e\u218f\7\u009e")
        buf.write("\2\2\u218f\u2198\5\u0428\u0215\2\u2190\u2192\5\u042e\u0218")
        buf.write("\2\u2191\u2190\3\2\2\2\u2191\u2192\3\2\2\2\u2192\u2193")
        buf.write("\3\2\2\2\u2193\u2194\7\u009e\2\2\u2194\u2195\5\u0428\u0215")
        buf.write("\2\u2195\u2196\5\u0430\u0219\2\u2196\u2198\3\2\2\2\u2197")
        buf.write("\u2187\3\2\2\2\u2197\u218a\3\2\2\2\u2197\u2191\3\2\2\2")
        buf.write("\u2198\u219b\3\2\2\2\u2199\u2197\3\2\2\2\u2199\u219a\3")
        buf.write("\2\2\2\u219a\u0429\3\2\2\2\u219b\u2199\3\2\2\2\u219c\u219e")
        buf.write("\7L\2\2\u219d\u219c\3\2\2\2\u219d\u219e\3\2\2\2\u219e")
        buf.write("\u219f\3\2\2\2\u219f\u21a4\5\u0588\u02c5\2\u21a0\u21a1")
        buf.write("\7\4\2\2\u21a1\u21a2\5\u0566\u02b4\2\u21a2\u21a3\7\5\2")
        buf.write("\2\u21a3\u21a5\3\2\2\2\u21a4\u21a0\3\2\2\2\u21a4\u21a5")
        buf.write("\3\2\2\2\u21a5\u042b\3\2\2\2\u21a6\u21b3\5\u042a\u0216")
        buf.write("\2\u21a7\u21a9\7L\2\2\u21a8\u21aa\5\u0588\u02c5\2\u21a9")
        buf.write("\u21a8\3\2\2\2\u21a9\u21aa\3\2\2\2\u21aa\u21ad\3\2\2\2")
        buf.write("\u21ab\u21ad\5\u0588\u02c5\2\u21ac\u21a7\3\2\2\2\u21ac")
        buf.write("\u21ab\3\2\2\2\u21ad\u21ae\3\2\2\2\u21ae\u21af\7\4\2\2")
        buf.write("\u21af\u21b0\5\u044c\u0227\2\u21b0\u21b1\7\5\2\2\u21b1")
        buf.write("\u21b3\3\2\2\2\u21b2\u21a6\3\2\2\2\u21b2\u21ac\3\2\2\2")
        buf.write("\u21b3\u042d\3\2\2\2\u21b4\u21b6\t.\2\2\u21b5\u21b7\7")
        buf.write("\u00a3\2\2\u21b6\u21b5\3\2\2\2\u21b6\u21b7\3\2\2\2\u21b7")
        buf.write("\u042f\3\2\2\2\u21b8\u21b9\7\u008c\2\2\u21b9\u21ba\7\4")
        buf.write("\2\2\u21ba\u21bb\5\u0566\u02b4\2\u21bb\u21bc\7\5\2\2\u21bc")
        buf.write("\u21c0\3\2\2\2\u21bd\u21be\7x\2\2\u21be\u21c0\5\u048c")
        buf.write("\u0247\2\u21bf\u21b8\3\2\2\2\u21bf\u21bd\3\2\2\2\u21c0")
        buf.write("\u0431\3\2\2\2\u21c1\u21c3\5\u0564\u02b3\2\u21c2\u21c4")
        buf.write("\7\13\2\2\u21c3\u21c2\3\2\2\2\u21c3\u21c4\3\2\2\2\u21c4")
        buf.write("\u21ce\3\2\2\2\u21c5\u21cb\7y\2\2\u21c6\u21cc\5\u0564")
        buf.write("\u02b3\2\u21c7\u21c8\7\4\2\2\u21c8\u21c9\5\u0564\u02b3")
        buf.write("\2\u21c9\u21ca\7\5\2\2\u21ca\u21cc\3\2\2\2\u21cb\u21c6")
        buf.write("\3\2\2\2\u21cb\u21c7\3\2\2\2\u21cc\u21ce\3\2\2\2\u21cd")
        buf.write("\u21c1\3\2\2\2\u21cd\u21c5\3\2\2\2\u21ce\u0433\3\2\2\2")
        buf.write("\u21cf\u21d4\5\u0432\u021a\2\u21d0\u21d1\7\b\2\2\u21d1")
        buf.write("\u21d3\5\u0432\u021a\2\u21d2\u21d0\3\2\2\2\u21d3\u21d6")
        buf.write("\3\2\2\2\u21d4\u21d2\3\2\2\2\u21d4\u21d5\3\2\2\2\u21d5")
        buf.write("\u0435\3\2\2\2\u21d6\u21d4\3\2\2\2\u21d7\u21dc\5\u0432")
        buf.write("\u021a\2\u21d8\u21da\7L\2\2\u21d9\u21d8\3\2\2\2\u21d9")
        buf.write("\u21da\3\2\2\2\u21da\u21db\3\2\2\2\u21db\u21dd\5\u0588")
        buf.write("\u02c5\2\u21dc\u21d9\3\2\2\2\u21dc\u21dd\3\2\2\2\u21dd")
        buf.write("\u0437\3\2\2\2\u21de\u21df\7\u0200\2\2\u21df\u21e0\5\u056e")
        buf.write("\u02b8\2\u21e0\u21e1\7\4\2\2\u21e1\u21e2\5\u0502\u0282")
        buf.write("\2\u21e2\u21e4\7\5\2\2\u21e3\u21e5\5\u043a\u021e\2\u21e4")
        buf.write("\u21e3\3\2\2\2\u21e4\u21e5\3\2\2\2\u21e5\u0439\3\2\2\2")
        buf.write("\u21e6\u21e7\7\u0157\2\2\u21e7\u21e8\7\4\2\2\u21e8\u21e9")
        buf.write("\5\u048c\u0247\2\u21e9\u21ea\7\5\2\2\u21ea\u043b\3\2\2")
        buf.write("\2\u21eb\u21ed\5\u04c0\u0261\2\u21ec\u21ee\5\u0444\u0223")
        buf.write("\2\u21ed\u21ec\3\2\2\2\u21ed\u21ee\3\2\2\2\u21ee\u21f8")
        buf.write("\3\2\2\2\u21ef\u21f0\7\u0161\2\2\u21f0\u21f1\7h\2\2\u21f1")
        buf.write("\u21f2\7\4\2\2\u21f2\u21f3\5\u0440\u0221\2\u21f3\u21f5")
        buf.write("\7\5\2\2\u21f4\u21f6\5\u0444\u0223\2\u21f5\u21f4\3\2\2")
        buf.write("\2\u21f5\u21f6\3\2\2\2\u21f6\u21f8\3\2\2\2\u21f7\u21eb")
        buf.write("\3\2\2\2\u21f7\u21ef\3\2\2\2\u21f8\u043d\3\2\2\2\u21f9")
        buf.write("\u21fb\5\u04c0\u0261\2\u21fa\u21fc\5\u0442\u0222\2\u21fb")
        buf.write("\u21fa\3\2\2\2\u21fb\u21fc\3\2\2\2\u21fc\u043f\3\2\2\2")
        buf.write("\u21fd\u2202\5\u043e\u0220\2\u21fe\u21ff\7\b\2\2\u21ff")
        buf.write("\u2201\5\u043e\u0220\2\u2200\u21fe\3\2\2\2\u2201\u2204")
        buf.write("\3\2\2\2\u2202\u2200\3\2\2\2\u2202\u2203\3\2\2\2\u2203")
        buf.write("\u0441\3\2\2\2\u2204\u2202\3\2\2\2\u2205\u2206\7L\2\2")
        buf.write("\u2206\u2207\7\4\2\2\u2207\u2208\5\u044c\u0227\2\u2208")
        buf.write("\u2209\7\5\2\2\u2209\u0443\3\2\2\2\u220a\u220b\7\u0091")
        buf.write("\2\2\u220b\u220c\7\u0201\2\2\u220c\u0445\3\2\2\2\u220d")
        buf.write("\u220e\7\u008f\2\2\u220e\u220f\5\u048c\u0247\2\u220f\u0447")
        buf.write("\3\2\2\2\u2210\u2215\7\u008f\2\2\u2211\u2212\7\u01da\2")
        buf.write("\2\u2212\u2213\7\u0134\2\2\u2213\u2216\5\u03c0\u01e1\2")
        buf.write("\u2214\u2216\5\u048c\u0247\2\u2215\u2211\3\2\2\2\u2215")
        buf.write("\u2214\3\2\2\2\u2216\u0449\3\2\2\2\u2217\u2218\5\u044c")
        buf.write("\u0227\2\u2218\u044b\3\2\2\2\u2219\u221e\5\u044e\u0228")
        buf.write("\2\u221a\u221b\7\b\2\2\u221b\u221d\5\u044e\u0228\2\u221c")
        buf.write("\u221a\3\2\2\2\u221d\u2220\3\2\2\2\u221e\u221c\3\2\2\2")
        buf.write("\u221e\u221f\3\2\2\2\u221f\u044d\3\2\2\2\u2220\u221e\3")
        buf.write("\2\2\2\u2221\u2222\5\u0588\u02c5\2\u2222\u2224\5\u045e")
        buf.write("\u0230\2\u2223\u2225\5l\67\2\u2224\u2223\3\2\2\2\u2224")
        buf.write("\u2225\3\2\2\2\u2225\u044f\3\2\2\2\u2226\u2227\7\u0202")
        buf.write("\2\2\u2227\u2237\7\4\2\2\u2228\u2229\5\u04b8\u025d\2\u2229")
        buf.write("\u222a\5\u04d2\u026a\2\u222a\u222b\7\u0203\2\2\u222b\u222c")
        buf.write("\5\u0452\u022a\2\u222c\u2238\3\2\2\2\u222d\u222e\7\u0204")
        buf.write("\2\2\u222e\u222f\7\4\2\2\u222f\u2230\5\u045a\u022e\2\u2230")
        buf.write("\u2231\7\5\2\2\u2231\u2232\7\b\2\2\u2232\u2233\5\u04b8")
        buf.write("\u025d\2\u2233\u2234\5\u04d2\u026a\2\u2234\u2235\7\u0203")
        buf.write("\2\2\u2235\u2236\5\u0452\u022a\2\u2236\u2238\3\2\2\2\u2237")
        buf.write("\u2228\3\2\2\2\u2237\u222d\3\2\2\2\u2238\u2239\3\2\2\2")
        buf.write("\u2239\u223a\7\5\2\2\u223a\u0451\3\2\2\2\u223b\u2240\5")
        buf.write("\u0454\u022b\2\u223c\u223d\7\b\2\2\u223d\u223f\5\u0454")
        buf.write("\u022b\2\u223e\u223c\3\2\2\2\u223f\u2242\3\2\2\2\u2240")
        buf.write("\u223e\3\2\2\2\u2240\u2241\3\2\2\2\u2241\u0453\3\2\2\2")
        buf.write("\u2242\u2240\3\2\2\2\u2243\u224a\5\u0588\u02c5\2\u2244")
        buf.write("\u2246\5\u045e\u0230\2\u2245\u2247\5\u0456\u022c\2\u2246")
        buf.write("\u2245\3\2\2\2\u2246\u2247\3\2\2\2\u2247\u224b\3\2\2\2")
        buf.write("\u2248\u2249\7f\2\2\u2249\u224b\7\u0201\2\2\u224a\u2244")
        buf.write("\3\2\2\2\u224a\u2248\3\2\2\2\u224b\u0455\3\2\2\2\u224c")
        buf.write("\u224e\5\u0458\u022d\2\u224d\u224c\3\2\2\2\u224e\u224f")
        buf.write("\3\2\2\2\u224f\u224d\3\2\2\2\u224f\u2250\3\2\2\2\u2250")
        buf.write("\u0457\3\2\2\2\u2251\u2252\7]\2\2\u2252\u225a\5\u048c")
        buf.write("\u0247\2\u2253\u2254\5\u059e\u02d0\2\u2254\u2255\5\u048c")
        buf.write("\u0247\2\u2255\u225a\3\2\2\2\u2256\u2257\7u\2\2\u2257")
        buf.write("\u225a\7v\2\2\u2258\u225a\7v\2\2\u2259\u2251\3\2\2\2\u2259")
        buf.write("\u2253\3\2\2\2\u2259\u2256\3\2\2\2\u2259\u2258\3\2\2\2")
        buf.write("\u225a\u0459\3\2\2\2\u225b\u2260\5\u045c\u022f\2\u225c")
        buf.write("\u225d\7\b\2\2\u225d\u225f\5\u045c\u022f\2\u225e\u225c")
        buf.write("\3\2\2\2\u225f\u2262\3\2\2\2\u2260\u225e\3\2\2\2\u2260")
        buf.write("\u2261\3\2\2\2\u2261\u045b\3\2\2\2\u2262\u2260\3\2\2\2")
        buf.write("\u2263\u2264\5\u04b6\u025c\2\u2264\u2265\7L\2\2\u2265")
        buf.write("\u2266\5\u058e\u02c8\2\u2266\u226a\3\2\2\2\u2267\u2268")
        buf.write("\7]\2\2\u2268\u226a\5\u04b6\u025c\2\u2269\u2263\3\2\2")
        buf.write("\2\u2269\u2267\3\2\2\2\u226a\u045d\3\2\2\2\u226b\u226d")
        buf.write("\7\u01c0\2\2\u226c\u226b\3\2\2\2\u226c\u226d\3\2\2\2\u226d")
        buf.write("\u226e\3\2\2\2\u226e\u2277\5\u0462\u0232\2\u226f\u2278")
        buf.write("\5\u0460\u0231\2\u2270\u2275\7K\2\2\u2271\u2272\7\6\2")
        buf.write("\2\u2272\u2273\5\u0578\u02bd\2\u2273\u2274\7\7\2\2\u2274")
        buf.write("\u2276\3\2\2\2\u2275\u2271\3\2\2\2\u2275\u2276\3\2\2\2")
        buf.write("\u2276\u2278\3\2\2\2\u2277\u226f\3\2\2\2\u2277\u2270\3")
        buf.write("\2\2\2\u2278\u045f\3\2\2\2\u2279\u227b\7\6\2\2\u227a\u227c")
        buf.write("\5\u0578\u02bd\2\u227b\u227a\3\2\2\2\u227b\u227c\3\2\2")
        buf.write("\2\u227c\u227d\3\2\2\2\u227d\u227f\7\7\2\2\u227e\u2279")
        buf.write("\3\2\2\2\u227f\u2282\3\2\2\2\u2280\u227e\3\2\2\2\u2280")
        buf.write("\u2281\3\2\2\2\u2281\u0461\3\2\2\2\u2282\u2280\3\2\2\2")
        buf.write("\u2283\u2294\5\u0466\u0234\2\u2284\u2294\5\u046a\u0236")
        buf.write("\2\u2285\u2294\5\u046e\u0238\2\u2286\u2294\5\u0476\u023c")
        buf.write("\2\u2287\u2294\5\u047e\u0240\2\u2288\u2290\5\u0480\u0241")
        buf.write("\2\u2289\u228b\5\u0484\u0243\2\u228a\u2289\3\2\2\2\u228a")
        buf.write("\u228b\3\2\2\2\u228b\u2291\3\2\2\2\u228c\u228d\7\4\2\2")
        buf.write("\u228d\u228e\5\u0578\u02bd\2\u228e\u228f\7\5\2\2\u228f")
        buf.write("\u2291\3\2\2\2\u2290\u228a\3\2\2\2\u2290\u228c\3\2\2\2")
        buf.write("\u2291\u2294\3\2\2\2\u2292\u2294\5\u0488\u0245\2\u2293")
        buf.write("\u2283\3\2\2\2\u2293\u2284\3\2\2\2\u2293\u2285\3\2\2\2")
        buf.write("\u2293\u2286\3\2\2\2\u2293\u2287\3\2\2\2\u2293\u2288\3")
        buf.write("\2\2\2\u2293\u2292\3\2\2\2\u2294\u0463\3\2\2\2\u2295\u229b")
        buf.write("\5\u046a\u0236\2\u2296\u229b\5\u0470\u0239\2\u2297\u229b")
        buf.write("\5\u0478\u023d\2\u2298\u229b\5\u047e\u0240\2\u2299\u229b")
        buf.write("\5\u0488\u0245\2\u229a\u2295\3\2\2\2\u229a\u2296\3\2\2")
        buf.write("\2\u229a\u2297\3\2\2\2\u229a\u2298\3\2\2\2\u229a\u2299")
        buf.write("\3\2\2\2\u229b\u0465\3\2\2\2\u229c\u229e\5\u058a\u02c6")
        buf.write("\2\u229d\u229f\5\u020c\u0107\2\u229e\u229d\3\2\2\2\u229e")
        buf.write("\u229f\3\2\2\2\u229f\u22a1\3\2\2\2\u22a0\u22a2\5\u0468")
        buf.write("\u0235\2\u22a1\u22a0\3\2\2\2\u22a1\u22a2\3\2\2\2\u22a2")
        buf.write("\u0467\3\2\2\2\u22a3\u22a4\7\4\2\2\u22a4\u22a5\5\u0502")
        buf.write("\u0282\2\u22a5\u22a6\7\5\2\2\u22a6\u0469\3\2\2\2\u22a7")
        buf.write("\u22c0\7\u01b2\2\2\u22a8\u22c0\7\u01b3\2\2\u22a9\u22c0")
        buf.write("\7\u01c1\2\2\u22aa\u22c0\7\u01a5\2\2\u22ab\u22c0\7\u01be")
        buf.write("\2\2\u22ac\u22ae\7\u01af\2\2\u22ad\u22af\5\u046c\u0237")
        buf.write("\2\u22ae\u22ad\3\2\2\2\u22ae\u22af\3\2\2\2\u22af\u22c0")
        buf.write("\3\2\2\2\u22b0\u22b1\7\u00e6\2\2\u22b1\u22c0\7\u01bd\2")
        buf.write("\2\u22b2\u22b4\7\u01ac\2\2\u22b3\u22b5\5\u0468\u0235\2")
        buf.write("\u22b4\u22b3\3\2\2\2\u22b4\u22b5\3\2\2\2\u22b5\u22c0\3")
        buf.write("\2\2\2\u22b6\u22b8\7\u01ab\2\2\u22b7\u22b9\5\u0468\u0235")
        buf.write("\2\u22b8\u22b7\3\2\2\2\u22b8\u22b9\3\2\2\2\u22b9\u22c0")
        buf.write("\3\2\2\2\u22ba\u22bc\7\u01ba\2\2\u22bb\u22bd\5\u0468\u0235")
        buf.write("\2\u22bc\u22bb\3\2\2\2\u22bc\u22bd\3\2\2\2\u22bd\u22c0")
        buf.write("\3\2\2\2\u22be\u22c0\7\u01a7\2\2\u22bf\u22a7\3\2\2\2\u22bf")
        buf.write("\u22a8\3\2\2\2\u22bf\u22a9\3\2\2\2\u22bf\u22aa\3\2\2\2")
        buf.write("\u22bf\u22ab\3\2\2\2\u22bf\u22ac\3\2\2\2\u22bf\u22b0\3")
        buf.write("\2\2\2\u22bf\u22b2\3\2\2\2\u22bf\u22b6\3\2\2\2\u22bf\u22ba")
        buf.write("\3\2\2\2\u22bf\u22be\3\2\2\2\u22c0\u046b\3\2\2\2\u22c1")
        buf.write("\u22c2\7\4\2\2\u22c2\u22c3\5\u0578\u02bd\2\u22c3\u22c4")
        buf.write("\7\5\2\2\u22c4\u046d\3\2\2\2\u22c5\u22c8\5\u0472\u023a")
        buf.write("\2\u22c6\u22c8\5\u0474\u023b\2\u22c7\u22c5\3\2\2\2\u22c7")
        buf.write("\u22c6\3\2\2\2\u22c8\u046f\3\2\2\2\u22c9\u22cc\5\u0472")
        buf.write("\u023a\2\u22ca\u22cc\5\u0474\u023b\2\u22cb\u22c9\3\2\2")
        buf.write("\2\u22cb\u22ca\3\2\2\2\u22cc\u0471\3\2\2\2\u22cd\u22cf")
        buf.write("\7\u01a6\2\2\u22ce\u22d0\5\u047c\u023f\2\u22cf\u22ce\3")
        buf.write("\2\2\2\u22cf\u22d0\3\2\2\2\u22d0\u22d1\3\2\2\2\u22d1\u22d2")
        buf.write("\7\4\2\2\u22d2\u22d3\5\u0502\u0282\2\u22d3\u22d4\7\5\2")
        buf.write("\2\u22d4\u0473\3\2\2\2\u22d5\u22d7\7\u01a6\2\2\u22d6\u22d8")
        buf.write("\5\u047c\u023f\2\u22d7\u22d6\3\2\2\2\u22d7\u22d8\3\2\2")
        buf.write("\2\u22d8\u0475\3\2\2\2\u22d9\u22de\5\u047a\u023e\2\u22da")
        buf.write("\u22db\7\4\2\2\u22db\u22dc\5\u0578\u02bd\2\u22dc\u22dd")
        buf.write("\7\5\2\2\u22dd\u22df\3\2\2\2\u22de\u22da\3\2\2\2\u22de")
        buf.write("\u22df\3\2\2\2\u22df\u0477\3\2\2\2\u22e0\u22e5\5\u047a")
        buf.write("\u023e\2\u22e1\u22e2\7\4\2\2\u22e2\u22e3\5\u0578\u02bd")
        buf.write("\2\u22e3\u22e4\7\5\2\2\u22e4\u22e6\3\2\2\2\u22e5\u22e1")
        buf.write("\3\2\2\2\u22e5\u22e6\3\2\2\2\u22e6\u0479\3\2\2\2\u22e7")
        buf.write("\u22e9\t/\2\2\u22e8\u22ea\5\u047c\u023f\2\u22e9\u22e8")
        buf.write("\3\2\2\2\u22e9\u22ea\3\2\2\2\u22ea\u22f2\3\2\2\2\u22eb")
        buf.write("\u22f2\7\u01c8\2\2\u22ec\u22ed\7\u01b6\2\2\u22ed\u22ef")
        buf.write("\t\60\2\2\u22ee\u22f0\5\u047c\u023f\2\u22ef\u22ee\3\2")
        buf.write("\2\2\u22ef\u22f0\3\2\2\2\u22f0\u22f2\3\2\2\2\u22f1\u22e7")
        buf.write("\3\2\2\2\u22f1\u22eb\3\2\2\2\u22f1\u22ec\3\2\2\2\u22f2")
        buf.write("\u047b\3\2\2\2\u22f3\u22f4\7\u0197\2\2\u22f4\u047d\3\2")
        buf.write("\2\2\u22f5\u22fa\t\61\2\2\u22f6\u22f7\7\4\2\2\u22f7\u22f8")
        buf.write("\5\u0578\u02bd\2\u22f8\u22f9\7\5\2\2\u22f9\u22fb\3\2\2")
        buf.write("\2\u22fa\u22f6\3\2\2\2\u22fa\u22fb\3\2\2\2\u22fb\u22fd")
        buf.write("\3\2\2\2\u22fc\u22fe\5\u0482\u0242\2\u22fd\u22fc\3\2\2")
        buf.write("\2\u22fd\u22fe\3\2\2\2\u22fe\u047f\3\2\2\2\u22ff\u2300")
        buf.write("\7\u01b4\2\2\u2300\u0481\3\2\2\2\u2301\u2302\7\u0091\2")
        buf.write("\2\u2302\u2303\7\u01c3\2\2\u2303\u2308\7\u01a3\2\2\u2304")
        buf.write("\u2305\7\u019c\2\2\u2305\u2306\7\u01c3\2\2\u2306\u2308")
        buf.write("\7\u01a3\2\2\u2307\u2301\3\2\2\2\u2307\u2304\3\2\2\2\u2308")
        buf.write("\u0483\3\2\2\2\u2309\u2323\7\u01a1\2\2\u230a\u2323\7\u0129")
        buf.write("\2\2\u230b\u2323\7\u00d8\2\2\u230c\u2323\7\u0102\2\2\u230d")
        buf.write("\u2323\7\u0126\2\2\u230e\u2323\5\u0486\u0244\2\u230f\u2310")
        buf.write("\7\u01a1\2\2\u2310\u2311\7\u0086\2\2\u2311\u2323\7\u0129")
        buf.write("\2\2\u2312\u2313\7\u00d8\2\2\u2313\u2317\7\u0086\2\2\u2314")
        buf.write("\u2318\7\u0102\2\2\u2315\u2318\7\u0126\2\2\u2316\u2318")
        buf.write("\5\u0486\u0244\2\u2317\u2314\3\2\2\2\u2317\u2315\3\2\2")
        buf.write("\2\u2317\u2316\3\2\2\2\u2318\u2323\3\2\2\2\u2319\u231a")
        buf.write("\7\u0102\2\2\u231a\u231d\7\u0086\2\2\u231b\u231e\7\u0126")
        buf.write("\2\2\u231c\u231e\5\u0486\u0244\2\u231d\u231b\3\2\2\2\u231d")
        buf.write("\u231c\3\2\2\2\u231e\u2323\3\2\2\2\u231f\u2320\7\u0126")
        buf.write("\2\2\u2320\u2321\7\u0086\2\2\u2321\u2323\5\u0486\u0244")
        buf.write("\2\u2322\u2309\3\2\2\2\u2322\u230a\3\2\2\2\u2322\u230b")
        buf.write("\3\2\2\2\u2322\u230c\3\2\2\2\u2322\u230d\3\2\2\2\u2322")
        buf.write("\u230e\3\2\2\2\u2322\u230f\3\2\2\2\u2322\u2312\3\2\2\2")
        buf.write("\u2322\u2319\3\2\2\2\u2322\u231f\3\2\2\2\u2323\u0485\3")
        buf.write("\2\2\2\u2324\u2329\7\u0167\2\2\u2325\u2326\7\4\2\2\u2326")
        buf.write("\u2327\5\u0578\u02bd\2\u2327\u2328\7\5\2\2\u2328\u232a")
        buf.write("\3\2\2\2\u2329\u2325\3\2\2\2\u2329\u232a\3\2\2\2\u232a")
        buf.write("\u0487\3\2\2\2\u232b\u232c\7 \2\2\u232c\u0489\3\2\2\2")
        buf.write("\u232d\u232e\7\u00ed\2\2\u232e\u232f\5\u048c\u0247\2\u232f")
        buf.write("\u048b\3\2\2\2\u2330\u2331\5\u048e\u0248\2\u2331\u048d")
        buf.write("\3\2\2\2\u2332\u2336\5\u0490\u0249\2\u2333\u2334\6\u0248")
        buf.write("\2\2\u2334\u2337\5\u04fc\u027f\2\u2335\u2337\3\2\2\2\u2336")
        buf.write("\u2333\3\2\2\2\u2336\u2335\3\2\2\2\u2337\u048f\3\2\2\2")
        buf.write("\u2338\u233d\5\u0492\u024a\2\u2339\u233a\t\62\2\2\u233a")
        buf.write("\u233c\5\u0492\u024a\2\u233b\u2339\3\2\2\2\u233c\u233f")
        buf.write("\3\2\2\2\u233d\u233b\3\2\2\2\u233d\u233e\3\2\2\2\u233e")
        buf.write("\u0491\3\2\2\2\u233f\u233d\3\2\2\2\u2340\u2345\5\u0494")
        buf.write("\u024b\2\u2341\u2342\7z\2\2\u2342\u2344\5\u0494\u024b")
        buf.write("\2\u2343\u2341\3\2\2\2\u2344\u2347\3\2\2\2\u2345\u2343")
        buf.write("\3\2\2\2\u2345\u2346\3\2\2\2\u2346\u0493\3\2\2\2\u2347")
        buf.write("\u2345\3\2\2\2\u2348\u234d\5\u0496\u024c\2\u2349\u234a")
        buf.write("\7I\2\2\u234a\u234c\5\u0496\u024c\2\u234b\u2349\3\2\2")
        buf.write("\2\u234c\u234f\3\2\2\2\u234d\u234b\3\2\2\2\u234d\u234e")
        buf.write("\3\2\2\2\u234e\u0495\3\2\2\2\u234f\u234d\3\2\2\2\u2350")
        buf.write("\u235c\5\u0498\u024d\2\u2351\u2353\7u\2\2\u2352\u2351")
        buf.write("\3\2\2\2\u2352\u2353\3\2\2\2\u2353\u2354\3\2\2\2\u2354")
        buf.write("\u2356\7\u01a4\2\2\u2355\u2357\7\u0083\2\2\u2356\u2355")
        buf.write("\3\2\2\2\u2356\u2357\3\2\2\2\u2357\u2358\3\2\2\2\u2358")
        buf.write("\u2359\5\u0498\u024d\2\u2359\u235a\7I\2\2\u235a\u235b")
        buf.write("\5\u0498\u024d\2\u235b\u235d\3\2\2\2\u235c\u2352\3\2\2")
        buf.write("\2\u235c\u235d\3\2\2\2\u235d\u0497\3\2\2\2\u235e\u2364")
        buf.write("\5\u049a\u024e\2\u235f\u2361\7u\2\2\u2360\u235f\3\2\2")
        buf.write("\2\u2360\u2361\3\2\2\2\u2361\u2362\3\2\2\2\u2362\u2363")
        buf.write("\7l\2\2\u2363\u2365\5\u051c\u028f\2\u2364\u2360\3\2\2")
        buf.write("\2\u2364\u2365\3\2\2\2\u2365\u0499\3\2\2\2\u2366\u2368")
        buf.write("\7u\2\2\u2367\u2366\3\2\2\2\u2367\u2368\3\2\2\2\u2368")
        buf.write("\u2369\3\2\2\2\u2369\u236a\5\u049c\u024f\2\u236a\u049b")
        buf.write("\3\2\2\2\u236b\u236d\5\u049e\u0250\2\u236c\u236e\t\63")
        buf.write("\2\2\u236d\u236c\3\2\2\2\u236d\u236e\3\2\2\2\u236e\u049d")
        buf.write("\3\2\2\2\u236f\u2387\5\u04a0\u0251\2\u2370\u2372\7\u009c")
        buf.write("\2\2\u2371\u2373\7u\2\2\u2372\u2371\3\2\2\2\u2372\u2373")
        buf.write("\3\2\2\2\u2373\u2385\3\2\2\2\u2374\u2386\7v\2\2\u2375")
        buf.write("\u2386\7\u0088\2\2\u2376\u2386\7d\2\2\u2377\u2386\7\u018e")
        buf.write("\2\2\u2378\u2379\7`\2\2\u2379\u237a\7h\2\2\u237a\u2386")
        buf.write("\5\u048c\u0247\2\u237b\u237c\7\u0134\2\2\u237c\u237d\7")
        buf.write("\4\2\2\u237d\u237e\5\u0508\u0285\2\u237e\u237f\7\5\2\2")
        buf.write("\u237f\u2386\3\2\2\2\u2380\u2386\7\u00e4\2\2\u2381\u2383")
        buf.write("\5\u0512\u028a\2\u2382\u2381\3\2\2\2\u2382\u2383\3\2\2")
        buf.write("\2\u2383\u2384\3\2\2\2\u2384\u2386\7\u0206\2\2\u2385\u2374")
        buf.write("\3\2\2\2\u2385\u2375\3\2\2\2\u2385\u2376\3\2\2\2\u2385")
        buf.write("\u2377\3\2\2\2\u2385\u2378\3\2\2\2\u2385\u237b\3\2\2\2")
        buf.write("\u2385\u2380\3\2\2\2\u2385\u2382\3\2\2\2\u2386\u2388\3")
        buf.write("\2\2\2\u2387\u2370\3\2\2\2\u2387\u2388\3\2\2\2\u2388\u049f")
        buf.write("\3\2\2\2\u2389\u2395\5\u04a2\u0252\2\u238a\u238b\t\64")
        buf.write("\2\2\u238b\u2396\5\u04a2\u0252\2\u238c\u238d\5\u0500\u0281")
        buf.write("\2\u238d\u2393\5\u04f6\u027c\2\u238e\u2394\5\u03c8\u01e5")
        buf.write("\2\u238f\u2390\7\4\2\2\u2390\u2391\5\u048c\u0247\2\u2391")
        buf.write("\u2392\7\5\2\2\u2392\u2394\3\2\2\2\u2393\u238e\3\2\2\2")
        buf.write("\u2393\u238f\3\2\2\2\u2394\u2396\3\2\2\2\u2395\u238a\3")
        buf.write("\2\2\2\u2395\u238c\3\2\2\2\u2395\u2396\3\2\2\2\u2396\u04a1")
        buf.write("\3\2\2\2\u2397\u23a5\5\u04a4\u0253\2\u2398\u239a\7u\2")
        buf.write("\2\u2399\u2398\3\2\2\2\u2399\u239a\3\2\2\2\u239a\u239f")
        buf.write("\3\2\2\2\u239b\u23a0\7\u00a0\2\2\u239c\u23a0\7\u009a\2")
        buf.write("\2\u239d\u239e\7\u00a7\2\2\u239e\u23a0\7\u0086\2\2\u239f")
        buf.write("\u239b\3\2\2\2\u239f\u239c\3\2\2\2\u239f\u239d\3\2\2\2")
        buf.write("\u23a0\u23a1\3\2\2\2\u23a1\u23a3\5\u04a4\u0253\2\u23a2")
        buf.write("\u23a4\5\u048a\u0246\2\u23a3\u23a2\3\2\2\2\u23a3\u23a4")
        buf.write("\3\2\2\2\u23a4\u23a6\3\2\2\2\u23a5\u2399\3\2\2\2\u23a5")
        buf.write("\u23a6\3\2\2\2\u23a6\u04a3\3\2\2\2\u23a7\u23ad\5\u04a6")
        buf.write("\u0254\2\u23a8\u23a9\5\u04fc\u027f\2\u23a9\u23aa\5\u04a6")
        buf.write("\u0254\2\u23aa\u23ac\3\2\2\2\u23ab\u23a8\3\2\2\2\u23ac")
        buf.write("\u23af\3\2\2\2\u23ad\u23ab\3\2\2\2\u23ad\u23ae\3\2\2\2")
        buf.write("\u23ae\u04a5\3\2\2\2\u23af\u23ad\3\2\2\2\u23b0\u23b2\5")
        buf.write("\u04fc\u027f\2\u23b1\u23b0\3\2\2\2\u23b1\u23b2\3\2\2\2")
        buf.write("\u23b2\u23b3\3\2\2\2\u23b3\u23b4\5\u04a8\u0255\2\u23b4")
        buf.write("\u04a7\3\2\2\2\u23b5\u23ba\5\u04aa\u0256\2\u23b6\u23b7")
        buf.write("\t\65\2\2\u23b7\u23b9\5\u04aa\u0256\2\u23b8\u23b6\3\2")
        buf.write("\2\2\u23b9\u23bc\3\2\2\2\u23ba\u23b8\3\2\2\2\u23ba\u23bb")
        buf.write("\3\2\2\2\u23bb\u04a9\3\2\2\2\u23bc\u23ba\3\2\2\2\u23bd")
        buf.write("\u23c2\5\u04ac\u0257\2\u23be\u23bf\t\66\2\2\u23bf\u23c1")
        buf.write("\5\u04ac\u0257\2\u23c0\u23be\3\2\2\2\u23c1\u23c4\3\2\2")
        buf.write("\2\u23c2\u23c0\3\2\2\2\u23c2\u23c3\3\2\2\2\u23c3\u04ab")
        buf.write("\3\2\2\2\u23c4\u23c2\3\2\2\2\u23c5\u23c8\5\u04ae\u0258")
        buf.write("\2\u23c6\u23c7\7\21\2\2\u23c7\u23c9\5\u04ae\u0258\2\u23c8")
        buf.write("\u23c6\3\2\2\2\u23c8\u23c9\3\2\2\2\u23c9\u04ad\3\2\2\2")
        buf.write("\u23ca\u23cc\t\65\2\2\u23cb\u23ca\3\2\2\2\u23cb\u23cc")
        buf.write("\3\2\2\2\u23cc\u23cd\3\2\2\2\u23cd\u23ce\5\u04b0\u0259")
        buf.write("\2\u23ce\u04af\3\2\2\2\u23cf\u23d4\5\u04b2\u025a\2\u23d0")
        buf.write("\u23d1\7\u00b6\2\2\u23d1\u23d2\7\u01c3\2\2\u23d2\u23d3")
        buf.write("\7\u01a3\2\2\u23d3\u23d5\5\u048c\u0247\2\u23d4\u23d0\3")
        buf.write("\2\2\2\u23d4\u23d5\3\2\2\2\u23d5\u04b1\3\2\2\2\u23d6\u23d9")
        buf.write("\5\u04b4\u025b\2\u23d7\u23d8\7S\2\2\u23d8\u23da\5\u020a")
        buf.write("\u0106\2\u23d9\u23d7\3\2\2\2\u23d9\u23da\3\2\2\2\u23da")
        buf.write("\u04b3\3\2\2\2\u23db\u23e0\5\u04b8\u025d\2\u23dc\u23dd")
        buf.write("\7\34\2\2\u23dd\u23df\5\u045e\u0230\2\u23de\u23dc\3\2")
        buf.write("\2\2\u23df\u23e2\3\2\2\2\u23e0\u23de\3\2\2\2\u23e0\u23e1")
        buf.write("\3\2\2\2\u23e1\u04b5\3\2\2\2\u23e2\u23e0\3\2\2\2\u23e3")
        buf.write("\u23e4\b\u025c\1\2\u23e4\u23eb\5\u04b8\u025d\2\u23e5\u23e6")
        buf.write("\t\65\2\2\u23e6\u23eb\5\u04b6\u025c\13\u23e7\u23e8\5\u04fc")
        buf.write("\u027f\2\u23e8\u23e9\5\u04b6\u025c\5\u23e9\u23eb\3\2\2")
        buf.write("\2\u23ea\u23e3\3\2\2\2\u23ea\u23e5\3\2\2\2\u23ea\u23e7")
        buf.write("\3\2\2\2\u23eb\u2413\3\2\2\2\u23ec\u23ed\f\n\2\2\u23ed")
        buf.write("\u23ee\7\21\2\2\u23ee\u2412\5\u04b6\u025c\13\u23ef\u23f0")
        buf.write("\f\t\2\2\u23f0\u23f1\t\66\2\2\u23f1\u2412\5\u04b6\u025c")
        buf.write("\n\u23f2\u23f3\f\b\2\2\u23f3\u23f4\t\65\2\2\u23f4\u2412")
        buf.write("\5\u04b6\u025c\t\u23f5\u23f6\f\7\2\2\u23f6\u23f7\5\u04fc")
        buf.write("\u027f\2\u23f7\u23f8\5\u04b6\u025c\b\u23f8\u2412\3\2\2")
        buf.write("\2\u23f9\u23fa\f\6\2\2\u23fa\u23fb\t\64\2\2\u23fb\u2412")
        buf.write("\5\u04b6\u025c\7\u23fc\u23fd\f\f\2\2\u23fd\u23fe\7\34")
        buf.write("\2\2\u23fe\u2412\5\u045e\u0230\2\u23ff\u2400\f\4\2\2\u2400")
        buf.write("\u2412\5\u04fc\u027f\2\u2401\u2402\f\3\2\2\u2402\u2404")
        buf.write("\7\u009c\2\2\u2403\u2405\7u\2\2\u2404\u2403\3\2\2\2\u2404")
        buf.write("\u2405\3\2\2\2\u2405\u240f\3\2\2\2\u2406\u2407\7`\2\2")
        buf.write("\u2407\u2408\7h\2\2\u2408\u2410\5\u04b6\u025c\2\u2409")
        buf.write("\u240a\7\u0134\2\2\u240a\u240b\7\4\2\2\u240b\u240c\5\u0508")
        buf.write("\u0285\2\u240c\u240d\7\5\2\2\u240d\u2410\3\2\2\2\u240e")
        buf.write("\u2410\7\u00e4\2\2\u240f\u2406\3\2\2\2\u240f\u2409\3\2")
        buf.write("\2\2\u240f\u240e\3\2\2\2\u2410\u2412\3\2\2\2\u2411\u23ec")
        buf.write("\3\2\2\2\u2411\u23ef\3\2\2\2\u2411\u23f2\3\2\2\2\u2411")
        buf.write("\u23f5\3\2\2\2\u2411\u23f9\3\2\2\2\u2411\u23fc\3\2\2\2")
        buf.write("\u2411\u23ff\3\2\2\2\u2411\u2401\3\2\2\2\u2412\u2415\3")
        buf.write("\2\2\2\u2413\u2411\3\2\2\2\u2413\u2414\3\2\2\2\u2414\u04b7")
        buf.write("\3\2\2\2\u2415\u2413\3\2\2\2\u2416\u2417\7\u01ad\2\2\u2417")
        buf.write("\u243b\5\u03c8\u01e5\2\u2418\u241b\7K\2\2\u2419\u241c")
        buf.write("\5\u03c8\u01e5\2\u241a\u241c\5\u050a\u0286\2\u241b\u2419")
        buf.write("\3\2\2\2\u241b\u241a\3\2\2\2\u241c\u243b\3\2\2\2\u241d")
        buf.write("\u241e\7\36\2\2\u241e\u243b\5\u0530\u0299\2\u241f\u2420")
        buf.write("\7\u01fe\2\2\u2420\u2421\7\4\2\2\u2421\u2422\5\u0502\u0282")
        buf.write("\2\u2422\u2423\7\5\2\2\u2423\u243b\3\2\2\2\u2424\u2425")
        buf.write("\7\u008a\2\2\u2425\u243b\5\u03c8\u01e5\2\u2426\u243b\5")
        buf.write("\u0528\u0295\2\u2427\u243b\5\u0570\u02b9\2\u2428\u2429")
        buf.write("\7\4\2\2\u2429\u242a\5\u048c\u0247\2\u242a\u242b\7\5\2")
        buf.write("\2\u242b\u242c\5\u0530\u0299\2\u242c\u243b\3\2\2\2\u242d")
        buf.write("\u243b\5\u051e\u0290\2\u242e\u243b\5\u04be\u0260\2\u242f")
        buf.write("\u2431\5\u03c8\u01e5\2\u2430\u2432\5\u052e\u0298\2\u2431")
        buf.write("\u2430\3\2\2\2\u2431\u2432\3\2\2\2\u2432\u243b\3\2\2\2")
        buf.write("\u2433\u243b\5\u04f2\u027a\2\u2434\u243b\5\u04f4\u027b")
        buf.write("\2\u2435\u2436\5\u04f0\u0279\2\u2436\u2437\7\u00a5\2\2")
        buf.write("\u2437\u2438\5\u04f0\u0279\2\u2438\u243b\3\2\2\2\u2439")
        buf.write("\u243b\7]\2\2\u243a\u2416\3\2\2\2\u243a\u2418\3\2\2\2")
        buf.write("\u243a\u241d\3\2\2\2\u243a\u241f\3\2\2\2\u243a\u2424\3")
        buf.write("\2\2\2\u243a\u2426\3\2\2\2\u243a\u2427\3\2\2\2\u243a\u2428")
        buf.write("\3\2\2\2\u243a\u242d\3\2\2\2\u243a\u242e\3\2\2\2\u243a")
        buf.write("\u242f\3\2\2\2\u243a\u2433\3\2\2\2\u243a\u2434\3\2\2\2")
        buf.write("\u243a\u2435\3\2\2\2\u243a\u2439\3\2\2\2\u243b\u04b9\3")
        buf.write("\2\2\2\u243c\u243d\7\u0248\2\2\u243d\u04bb\3\2\2\2\u243e")
        buf.write("\u243f\5\u056e\u02b8\2\u243f\u2455\7\4\2\2\u2440\u2444")
        buf.write("\5\u0504\u0283\2\u2441\u2442\7\b\2\2\u2442\u2443\7\u008d")
        buf.write("\2\2\u2443\u2445\5\u0506\u0284\2\u2444\u2441\3\2\2\2\u2444")
        buf.write("\u2445\3\2\2\2\u2445\u2447\3\2\2\2\u2446\u2448\5\u03ea")
        buf.write("\u01f6\2\u2447\u2446\3\2\2\2\u2447\u2448\3\2\2\2\u2448")
        buf.write("\u2456\3\2\2\2\u2449\u244a\7\u008d\2\2\u244a\u244c\5\u0506")
        buf.write("\u0284\2\u244b\u244d\5\u03ea\u01f6\2\u244c\u244b\3\2\2")
        buf.write("\2\u244c\u244d\3\2\2\2\u244d\u2456\3\2\2\2\u244e\u244f")
        buf.write("\t+\2\2\u244f\u2451\5\u0504\u0283\2\u2450\u2452\5\u03ea")
        buf.write("\u01f6\2\u2451\u2450\3\2\2\2\u2451\u2452\3\2\2\2\u2452")
        buf.write("\u2456\3\2\2\2\u2453\u2456\7\13\2\2\u2454\u2456\3\2\2")
        buf.write("\2\u2455\u2440\3\2\2\2\u2455\u2449\3\2\2\2\u2455\u244e")
        buf.write("\3\2\2\2\u2455\u2453\3\2\2\2\u2455\u2454\3\2\2\2\u2456")
        buf.write("\u2457\3\2\2\2\u2457\u2458\7\5\2\2\u2458\u04bd\3\2\2\2")
        buf.write("\u2459\u245b\5\u04bc\u025f\2\u245a\u245c\5\u04d6\u026c")
        buf.write("\2\u245b\u245a\3\2\2\2\u245b\u245c\3\2\2\2\u245c\u245e")
        buf.write("\3\2\2\2\u245d\u245f\5\u04d8\u026d\2\u245e\u245d\3\2\2")
        buf.write("\2\u245e\u245f\3\2\2\2\u245f\u2461\3\2\2\2\u2460\u2462")
        buf.write("\5\u04e0\u0271\2\u2461\u2460\3\2\2\2\u2461\u2462\3\2\2")
        buf.write("\2\u2462\u2465\3\2\2\2\u2463\u2465\5\u04c2\u0262\2\u2464")
        buf.write("\u2459\3\2\2\2\u2464\u2463\3\2\2\2\u2465\u04bf\3\2\2\2")
        buf.write("\u2466\u2469\5\u04bc\u025f\2\u2467\u2469\5\u04c2\u0262")
        buf.write("\2\u2468\u2466\3\2\2\2\u2468\u2467\3\2\2\2\u2469\u04c1")
        buf.write("\3\2\2\2\u246a\u246b\7\u0094\2\2\u246b\u246c\7f\2\2\u246c")
        buf.write("\u246d\7\4\2\2\u246d\u246e\5\u048c\u0247\2\u246e\u246f")
        buf.write("\7\5\2\2\u246f\u259d\3\2\2\2\u2470\u259d\7X\2\2\u2471")
        buf.write("\u2476\7Z\2\2\u2472\u2473\7\4\2\2\u2473\u2474\5\u0578")
        buf.write("\u02bd\2\u2474\u2475\7\5\2\2\u2475\u2477\3\2\2\2\u2476")
        buf.write("\u2472\3\2\2\2\u2476\u2477\3\2\2\2\u2477\u259d\3\2\2\2")
        buf.write("\u2478\u247d\7[\2\2\u2479\u247a\7\4\2\2\u247a\u247b\5")
        buf.write("\u0578\u02bd\2\u247b\u247c\7\5\2\2\u247c\u247e\3\2\2\2")
        buf.write("\u247d\u2479\3\2\2\2\u247d\u247e\3\2\2\2\u247e\u259d\3")
        buf.write("\2\2\2\u247f\u2484\7s\2\2\u2480\u2481\7\4\2\2\u2481\u2482")
        buf.write("\5\u0578\u02bd\2\u2482\u2483\7\5\2\2\u2483\u2485\3\2\2")
        buf.write("\2\u2484\u2480\3\2\2\2\u2484\u2485\3\2\2\2\u2485\u259d")
        buf.write("\3\2\2\2\u2486\u248b\7t\2\2\u2487\u2488\7\4\2\2\u2488")
        buf.write("\u2489\5\u0578\u02bd\2\u2489\u248a\7\5\2\2\u248a\u248c")
        buf.write("\3\2\2\2\u248b\u2487\3\2\2\2\u248b\u248c\3\2\2\2\u248c")
        buf.write("\u259d\3\2\2\2\u248d\u259d\7Y\2\2\u248e\u259d\7\\\2\2")
        buf.write("\u248f\u259d\7\u0081\2\2\u2490\u259d\7,\2\2\u2491\u259d")
        buf.write("\7\u008b\2\2\u2492\u259d\7W\2\2\u2493\u259d\7\u0097\2")
        buf.write("\2\u2494\u2495\7Q\2\2\u2495\u2496\7\4\2\2\u2496\u2497")
        buf.write("\5\u048c\u0247\2\u2497\u2498\7L\2\2\u2498\u2499\5\u045e")
        buf.write("\u0230\2\u2499\u249a\7\5\2\2\u249a\u259d\3\2\2\2\u249b")
        buf.write("\u249c\7\u01ae\2\2\u249c\u249e\7\4\2\2\u249d\u249f\5\u050e")
        buf.write("\u0288\2\u249e\u249d\3\2\2\2\u249e\u249f\3\2\2\2\u249f")
        buf.write("\u24a0\3\2\2\2\u24a0\u259d\7\5\2\2\u24a1\u24a2\7\u0211")
        buf.write("\2\2\u24a2\u24a3\7\4\2\2\u24a3\u24a6\5\u048c\u0247\2\u24a4")
        buf.write("\u24a5\7\b\2\2\u24a5\u24a7\5\u0512\u028a\2\u24a6\u24a4")
        buf.write("\3\2\2\2\u24a6\u24a7\3\2\2\2\u24a7\u24a8\3\2\2\2\u24a8")
        buf.write("\u24a9\7\5\2\2\u24a9\u259d\3\2\2\2\u24aa\u24ab\7\u01bb")
        buf.write("\2\2\u24ab\u24b0\7\4\2\2\u24ac\u24b1\5\u0514\u028b\2\u24ad")
        buf.write("\u24af\5\u0504\u0283\2\u24ae\u24ad\3\2\2\2\u24ae\u24af")
        buf.write("\3\2\2\2\u24af\u24b1\3\2\2\2\u24b0\u24ac\3\2\2\2\u24b0")
        buf.write("\u24ae\3\2\2\2\u24b1\u24b2\3\2\2\2\u24b2\u259d\7\5\2\2")
        buf.write("\u24b3\u24b4\7\u01bc\2\2\u24b4\u24b6\7\4\2\2\u24b5\u24b7")
        buf.write("\5\u0516\u028c\2\u24b6\u24b5\3\2\2\2\u24b6\u24b7\3\2\2")
        buf.write("\2\u24b7\u24b8\3\2\2\2\u24b8\u259d\7\5\2\2\u24b9\u24ba")
        buf.write("\7\u01c2\2\2\u24ba\u24bf\7\4\2\2\u24bb\u24c0\5\u0518\u028d")
        buf.write("\2\u24bc\u24be\5\u0504\u0283\2\u24bd\u24bc\3\2\2\2\u24bd")
        buf.write("\u24be\3\2\2\2\u24be\u24c0\3\2\2\2\u24bf\u24bb\3\2\2\2")
        buf.write("\u24bf\u24bd\3\2\2\2\u24c0\u24c1\3\2\2\2\u24c1\u259d\7")
        buf.write("\5\2\2\u24c2\u24c3\7\u01c5\2\2\u24c3\u24c4\7\4\2\2\u24c4")
        buf.write("\u24c5\5\u048c\u0247\2\u24c5\u24c6\7L\2\2\u24c6\u24c7")
        buf.write("\5\u045e\u0230\2\u24c7\u24c8\7\5\2\2\u24c8\u259d\3\2\2")
        buf.write("\2\u24c9\u24ca\7\u01c6\2\2\u24ca\u24cc\7\4\2\2\u24cb\u24cd")
        buf.write("\t\67\2\2\u24cc\u24cb\3\2\2\2\u24cc\u24cd\3\2\2\2\u24cd")
        buf.write("\u24ce\3\2\2\2\u24ce\u24cf\5\u051a\u028e\2\u24cf\u24d0")
        buf.write("\7\5\2\2\u24d0\u259d\3\2\2\2\u24d1\u24d2\7\u01b9\2\2\u24d2")
        buf.write("\u24d3\7\4\2\2\u24d3\u24d4\5\u048c\u0247\2\u24d4\u24d5")
        buf.write("\7\b\2\2\u24d5\u24d6\5\u048c\u0247\2\u24d6\u24d7\7\5\2")
        buf.write("\2\u24d7\u259d\3\2\2\2\u24d8\u24d9\7\u01aa\2\2\u24d9\u24da")
        buf.write("\7\4\2\2\u24da\u24db\5\u0502\u0282\2\u24db\u24dc\7\5\2")
        buf.write("\2\u24dc\u259d\3\2\2\2\u24dd\u24de\7\u01b0\2\2\u24de\u24df")
        buf.write("\7\4\2\2\u24df\u24e0\5\u0502\u0282\2\u24e0\u24e1\7\5\2")
        buf.write("\2\u24e1\u259d\3\2\2\2\u24e2\u24e3\7\u01b5\2\2\u24e3\u24e4")
        buf.write("\7\4\2\2\u24e4\u24e5\5\u0502\u0282\2\u24e5\u24e6\7\5\2")
        buf.write("\2\u24e6\u259d\3\2\2\2\u24e7\u24e8\7\u01d1\2\2\u24e8\u24e9")
        buf.write("\7\4\2\2\u24e9\u24ea\5\u0502\u0282\2\u24ea\u24eb\7\5\2")
        buf.write("\2\u24eb\u259d\3\2\2\2\u24ec\u24ed\7\u01d2\2\2\u24ed\u24ee")
        buf.write("\7\4\2\2\u24ee\u24ef\7\u012b\2\2\u24ef\u24f5\5\u058e\u02c8")
        buf.write("\2\u24f0\u24f3\7\b\2\2\u24f1\u24f4\5\u04c8\u0265\2\u24f2")
        buf.write("\u24f4\5\u0502\u0282\2\u24f3\u24f1\3\2\2\2\u24f3\u24f2")
        buf.write("\3\2\2\2\u24f4\u24f6\3\2\2\2\u24f5\u24f0\3\2\2\2\u24f5")
        buf.write("\u24f6\3\2\2\2\u24f6\u24f7\3\2\2\2\u24f7\u24f8\7\5\2\2")
        buf.write("\u24f8\u259d\3\2\2\2\u24f9\u24fa\7\u01d3\2\2\u24fa\u24fb")
        buf.write("\7\4\2\2\u24fb\u24fc\5\u04b8\u025d\2\u24fc\u24fd\5\u04d2")
        buf.write("\u026a\2\u24fd\u24fe\7\5\2\2\u24fe\u259d\3\2\2\2\u24ff")
        buf.write("\u2500\7\u01d4\2\2\u2500\u2501\7\4\2\2\u2501\u2502\5\u04ca")
        buf.write("\u0266\2\u2502\u2503\7\5\2\2\u2503\u259d\3\2\2\2\u2504")
        buf.write("\u2505\7\u01d5\2\2\u2505\u2506\7\4\2\2\u2506\u2507\5\u04ce")
        buf.write("\u0268\2\u2507\u2509\5\u048c\u0247\2\u2508\u250a\5\u04d0")
        buf.write("\u0269\2\u2509\u2508\3\2\2\2\u2509\u250a\3\2\2\2\u250a")
        buf.write("\u250b\3\2\2\2\u250b\u250c\7\5\2\2\u250c\u259d\3\2\2\2")
        buf.write("\u250d\u250e\7\u01d6\2\2\u250e\u250f\7\4\2\2\u250f\u2510")
        buf.write("\7\u012b\2\2\u2510\u2513\5\u058e\u02c8\2\u2511\u2512\7")
        buf.write("\b\2\2\u2512\u2514\5\u048c\u0247\2\u2513\u2511\3\2\2\2")
        buf.write("\u2513\u2514\3\2\2\2\u2514\u2515\3\2\2\2\u2515\u2516\7")
        buf.write("\5\2\2\u2516\u259d\3\2\2\2\u2517\u2518\7\u01d7\2\2\u2518")
        buf.write("\u2519\7\4\2\2\u2519\u251a\7\u01a0\2\2\u251a\u251b\5\u048c")
        buf.write("\u0247\2\u251b\u251c\7\b\2\2\u251c\u251e\5\u04c4\u0263")
        buf.write("\2\u251d\u251f\5\u04c6\u0264\2\u251e\u251d\3\2\2\2\u251e")
        buf.write("\u251f\3\2\2\2\u251f\u2520\3\2\2\2\u2520\u2521\7\5\2\2")
        buf.write("\u2521\u259d\3\2\2\2\u2522\u2523\7\u01d8\2\2\u2523\u2524")
        buf.write("\7\4\2\2\u2524\u2525\5\u04ce\u0268\2\u2525\u2526\5\u048c")
        buf.write("\u0247\2\u2526\u2527\7L\2\2\u2527\u2528\5\u0462\u0232")
        buf.write("\2\u2528\u2529\7\5\2\2\u2529\u259d\3\2\2\2\u252a\u252b")
        buf.write("\7$\2\2\u252b\u253a\7\4\2\2\u252c\u253b\5\u0504\u0283")
        buf.write("\2\u252d\u252f\5\u054e\u02a8\2\u252e\u2530\5\u0552\u02aa")
        buf.write("\2\u252f\u252e\3\2\2\2\u252f\u2530\3\2\2\2\u2530\u2532")
        buf.write("\3\2\2\2\u2531\u2533\5\u054c\u02a7\2\u2532\u2531\3\2\2")
        buf.write("\2\u2532\u2533\3\2\2\2\u2533\u2535\3\2\2\2\u2534\u2536")
        buf.write("\5\u0548\u02a5\2\u2535\u2534\3\2\2\2\u2535\u2536\3\2\2")
        buf.write("\2\u2536\u253b\3\2\2\2\u2537\u2539\5\u0548\u02a5\2\u2538")
        buf.write("\u2537\3\2\2\2\u2538\u2539\3\2\2\2\u2539\u253b\3\2\2\2")
        buf.write("\u253a\u252c\3\2\2\2\u253a\u252d\3\2\2\2\u253a\u2538\3")
        buf.write("\2\2\2\u253b\u253c\3\2\2\2\u253c\u259d\7\5\2\2\u253d\u253e")
        buf.write("\7!\2\2\u253e\u2550\7\4\2\2\u253f\u2541\5\u0556\u02ac")
        buf.write("\2\u2540\u2542\5\u0554\u02ab\2\u2541\u2540\3\2\2\2\u2541")
        buf.write("\u2542\3\2\2\2\u2542\u2544\3\2\2\2\u2543\u2545\5\u0548")
        buf.write("\u02a5\2\u2544\u2543\3\2\2\2\u2544\u2545\3\2\2\2\u2545")
        buf.write("\u2551\3\2\2\2\u2546\u2548\5\u03ca\u01e6\2\u2547\u2549")
        buf.write("\5\u0544\u02a3\2\u2548\u2547\3\2\2\2\u2548\u2549\3\2\2")
        buf.write("\2\u2549\u254b\3\2\2\2\u254a\u254c\5\u0548\u02a5\2\u254b")
        buf.write("\u254a\3\2\2\2\u254b\u254c\3\2\2\2\u254c\u2551\3\2\2\2")
        buf.write("\u254d\u254f\5\u0548\u02a5\2\u254e\u254d\3\2\2\2\u254e")
        buf.write("\u254f\3\2\2\2\u254f\u2551\3\2\2\2\u2550\u253f\3\2\2\2")
        buf.write("\u2550\u2546\3\2\2\2\u2550\u254e\3\2\2\2\u2551\u2552\3")
        buf.write("\2\2\2\u2552\u259d\7\5\2\2\u2553\u2554\7 \2\2\u2554\u2555")
        buf.write("\7\4\2\2\u2555\u2557\5\u0542\u02a2\2\u2556\u2558\5\u054c")
        buf.write("\u02a7\2\u2557\u2556\3\2\2\2\u2557\u2558\3\2\2\2\u2558")
        buf.write("\u2559\3\2\2\2\u2559\u255a\7\5\2\2\u255a\u259d\3\2\2\2")
        buf.write("\u255b\u255c\7\'\2\2\u255c\u255d\7\4\2\2\u255d\u255e\5")
        buf.write("\u048c\u0247\2\u255e\u255f\7\5\2\2\u255f\u259d\3\2\2\2")
        buf.write("\u2560\u2561\7(\2\2\u2561\u2562\7\4\2\2\u2562\u2564\5")
        buf.write("\u0542\u02a2\2\u2563\u2565\5\u0548\u02a5\2\u2564\u2563")
        buf.write("\3\2\2\2\u2564\u2565\3\2\2\2\u2565\u2566\3\2\2\2\u2566")
        buf.write("\u2567\7\5\2\2\u2567\u259d\3\2\2\2\u2568\u2569\7+\2\2")
        buf.write("\u2569\u256a\7\4\2\2\u256a\u259d\7\5\2\2\u256b\u256c\7")
        buf.write("&\2\2\u256c\u256d\7\4\2\2\u256d\u256e\5\u0542\u02a2\2")
        buf.write("\u256e\u256f\7\b\2\2\u256f\u2571\5\u048c\u0247\2\u2570")
        buf.write("\u2572\5\u0532\u029a\2\u2571\u2570\3\2\2\2\u2571\u2572")
        buf.write("\3\2\2\2\u2572\u2574\3\2\2\2\u2573\u2575\5\u0548\u02a5")
        buf.write("\2\u2574\u2573\3\2\2\2\u2574\u2575\3\2\2\2\u2575\u2576")
        buf.write("\3\2\2\2\u2576\u2578\5\u0538\u029d\2\u2577\u2579\5\u0546")
        buf.write("\u02a4\2\u2578\u2577\3\2\2\2\u2578\u2579\3\2\2\2\u2579")
        buf.write("\u257b\3\2\2\2\u257a\u257c\5\u053e\u02a0\2\u257b\u257a")
        buf.write("\3\2\2\2\u257b\u257c\3\2\2\2\u257c\u257d\3\2\2\2\u257d")
        buf.write("\u257e\7\5\2\2\u257e\u259d\3\2\2\2\u257f\u2580\7#\2\2")
        buf.write("\u2580\u2581\7\4\2\2\u2581\u2582\5\u0542\u02a2\2\u2582")
        buf.write("\u2583\7\b\2\2\u2583\u2585\5\u048c\u0247\2\u2584\u2586")
        buf.write("\5\u0532\u029a\2\u2585\u2584\3\2\2\2\u2585\u2586\3\2\2")
        buf.write("\2\u2586\u2588\3\2\2\2\u2587\u2589\5\u0540\u02a1\2\u2588")
        buf.write("\u2587\3\2\2\2\u2588\u2589\3\2\2\2\u2589\u258a\3\2\2\2")
        buf.write("\u258a\u258b\7\5\2\2\u258b\u259d\3\2\2\2\u258c\u258d\7")
        buf.write("*\2\2\u258d\u258e\7\4\2\2\u258e\u258f\5\u0542\u02a2\2")
        buf.write("\u258f\u2590\7\b\2\2\u2590\u2592\5\u048c\u0247\2\u2591")
        buf.write("\u2593\5\u0532\u029a\2\u2592\u2591\3\2\2\2\u2592\u2593")
        buf.write("\3\2\2\2\u2593\u2595\3\2\2\2\u2594\u2596\5\u0548\u02a5")
        buf.write("\2\u2595\u2594\3\2\2\2\u2595\u2596\3\2\2\2\u2596\u2598")
        buf.write("\3\2\2\2\u2597\u2599\5\u053e\u02a0\2\u2598\u2597\3\2\2")
        buf.write("\2\u2598\u2599\3\2\2\2\u2599\u259a\3\2\2\2\u259a\u259b")
        buf.write("\7\5\2\2\u259b\u259d\3\2\2\2\u259c\u246a\3\2\2\2\u259c")
        buf.write("\u2470\3\2\2\2\u259c\u2471\3\2\2\2\u259c\u2478\3\2\2\2")
        buf.write("\u259c\u247f\3\2\2\2\u259c\u2486\3\2\2\2\u259c\u248d\3")
        buf.write("\2\2\2\u259c\u248e\3\2\2\2\u259c\u248f\3\2\2\2\u259c\u2490")
        buf.write("\3\2\2\2\u259c\u2491\3\2\2\2\u259c\u2492\3\2\2\2\u259c")
        buf.write("\u2493\3\2\2\2\u259c\u2494\3\2\2\2\u259c\u249b\3\2\2\2")
        buf.write("\u259c\u24a1\3\2\2\2\u259c\u24aa\3\2\2\2\u259c\u24b3\3")
        buf.write("\2\2\2\u259c\u24b9\3\2\2\2\u259c\u24c2\3\2\2\2\u259c\u24c9")
        buf.write("\3\2\2\2\u259c\u24d1\3\2\2\2\u259c\u24d8\3\2\2\2\u259c")
        buf.write("\u24dd\3\2\2\2\u259c\u24e2\3\2\2\2\u259c\u24e7\3\2\2\2")
        buf.write("\u259c\u24ec\3\2\2\2\u259c\u24f9\3\2\2\2\u259c\u24ff\3")
        buf.write("\2\2\2\u259c\u2504\3\2\2\2\u259c\u250d\3\2\2\2\u259c\u2517")
        buf.write("\3\2\2\2\u259c\u2522\3\2\2\2\u259c\u252a\3\2\2\2\u259c")
        buf.write("\u253d\3\2\2\2\u259c\u2553\3\2\2\2\u259c\u255b\3\2\2\2")
        buf.write("\u259c\u2560\3\2\2\2\u259c\u2568\3\2\2\2\u259c\u256b\3")
        buf.write("\2\2\2\u259c\u257f\3\2\2\2\u259c\u258c\3\2\2\2\u259d\u04c3")
        buf.write("\3\2\2\2\u259e\u259f\7\u0198\2\2\u259f\u25a4\5\u048c\u0247")
        buf.write("\2\u25a0\u25a1\7\u0198\2\2\u25a1\u25a2\7\u012e\2\2\u25a2")
        buf.write("\u25a4\7\u01ea\2\2\u25a3\u259e\3\2\2\2\u25a3\u25a0\3\2")
        buf.write("\2\2\u25a4\u04c5\3\2\2\2\u25a5\u25a6\7\b\2\2\u25a6\u25a7")
        buf.write("\7\u0174\2\2\u25a7\u25b0\7\u01a2\2\2\u25a8\u25a9\7\b\2")
        buf.write("\2\u25a9\u25aa\7\u0174\2\2\u25aa\u25b0\7\u012e\2\2\u25ab")
        buf.write("\u25ac\7\b\2\2\u25ac\u25ad\7\u0174\2\2\u25ad\u25ae\7\u012e")
        buf.write("\2\2\u25ae\u25b0\7\u01ea\2\2\u25af\u25a5\3\2\2\2\u25af")
        buf.write("\u25a8\3\2\2\2\u25af\u25ab\3\2\2\2\u25b0\u04c7\3\2\2\2")
        buf.write("\u25b1\u25b2\7\u01c9\2\2\u25b2\u25b3\7\4\2\2\u25b3\u25b4")
        buf.write("\5\u04ca\u0266\2\u25b4\u25b5\7\5\2\2\u25b5\u04c9\3\2\2")
        buf.write("\2\u25b6\u25bb\5\u04cc\u0267\2\u25b7\u25b8\7\b\2\2\u25b8")
        buf.write("\u25ba\5\u04cc\u0267\2\u25b9\u25b7\3\2\2\2\u25ba\u25bd")
        buf.write("\3\2\2\2\u25bb\u25b9\3\2\2\2\u25bb\u25bc\3\2\2\2\u25bc")
        buf.write("\u04cb\3\2\2\2\u25bd\u25bb\3\2\2\2\u25be\u25c1\5\u048c")
        buf.write("\u0247\2\u25bf\u25c0\7L\2\2\u25c0\u25c2\5\u058e\u02c8")
        buf.write("\2\u25c1\u25bf\3\2\2\2\u25c1\u25c2\3\2\2\2\u25c2\u04cd")
        buf.write("\3\2\2\2\u25c3\u25c4\t8\2\2\u25c4\u04cf\3\2\2\2\u25c5")
        buf.write("\u25c6\7\u0145\2\2\u25c6\u25ca\7\u019b\2\2\u25c7\u25c8")
        buf.write("\7\u017c\2\2\u25c8\u25ca\7\u019b\2\2\u25c9\u25c5\3\2\2")
        buf.write("\2\u25c9\u25c7\3\2\2\2\u25ca\u04d1\3\2\2\2\u25cb\u25cc")
        buf.write("\7\u013f\2\2\u25cc\u25db\5\u04b8\u025d\2\u25cd\u25ce\7")
        buf.write("\u013f\2\2\u25ce\u25cf\5\u04b8\u025d\2\u25cf\u25d0\5\u04d4")
        buf.write("\u026b\2\u25d0\u25db\3\2\2\2\u25d1\u25d2\7\u013f\2\2\u25d2")
        buf.write("\u25d3\5\u04d4\u026b\2\u25d3\u25d4\5\u04b8\u025d\2\u25d4")
        buf.write("\u25db\3\2\2\2\u25d5\u25d6\7\u013f\2\2\u25d6\u25d7\5\u04d4")
        buf.write("\u026b\2\u25d7\u25d8\5\u04b8\u025d\2\u25d8\u25d9\5\u04d4")
        buf.write("\u026b\2\u25d9\u25db\3\2\2\2\u25da\u25cb\3\2\2\2\u25da")
        buf.write("\u25cd\3\2\2\2\u25da\u25d1\3\2\2\2\u25da\u25d5\3\2\2\2")
        buf.write("\u25db\u04d3\3\2\2\2\u25dc\u25dd\7\u00bb\2\2\u25dd\u25de")
        buf.write("\t9\2\2\u25de\u04d5\3\2\2\2\u25df\u25e0\7\u0207\2\2\u25e0")
        buf.write("\u25e1\7j\2\2\u25e1\u25e2\7\4\2\2\u25e2\u25e3\5\u03ec")
        buf.write("\u01f7\2\u25e3\u25e4\7\5\2\2\u25e4\u04d7\3\2\2\2\u25e5")
        buf.write("\u25e6\7\u0208\2\2\u25e6\u25e7\7\4\2\2\u25e7\u25e8\7\u008f")
        buf.write("\2\2\u25e8\u25e9\5\u048c\u0247\2\u25e9\u25ea\7\5\2\2\u25ea")
        buf.write("\u04d9\3\2\2\2\u25eb\u25ec\7\u0090\2\2\u25ec\u25ed\5\u04dc")
        buf.write("\u026f\2\u25ed\u04db\3\2\2\2\u25ee\u25f3\5\u04de\u0270")
        buf.write("\2\u25ef\u25f0\7\b\2\2\u25f0\u25f2\5\u04de\u0270\2\u25f1")
        buf.write("\u25ef\3\2\2\2\u25f2\u25f5\3\2\2\2\u25f3\u25f1\3\2\2\2")
        buf.write("\u25f3\u25f4\3\2\2\2\u25f4\u04dd\3\2\2\2\u25f5\u25f3\3")
        buf.write("\2\2\2\u25f6\u25f7\5\u0588\u02c5\2\u25f7\u25f8\7L\2\2")
        buf.write("\u25f8\u25f9\5\u04e2\u0272\2\u25f9\u04df\3\2\2\2\u25fa")
        buf.write("\u25fd\7\u00a4\2\2\u25fb\u25fe\5\u04e2\u0272\2\u25fc\u25fe")
        buf.write("\5\u0588\u02c5\2\u25fd\u25fb\3\2\2\2\u25fd\u25fc\3\2\2")
        buf.write("\2\u25fe\u04e1\3\2\2\2\u25ff\u2601\7\4\2\2\u2600\u2602")
        buf.write("\5\u04e4\u0273\2\u2601\u2600\3\2\2\2\u2601\u2602\3\2\2")
        buf.write("\2\u2602\u2604\3\2\2\2\u2603\u2605\5\u04e6\u0274\2\u2604")
        buf.write("\u2603\3\2\2\2\u2604\u2605\3\2\2\2\u2605\u2607\3\2\2\2")
        buf.write("\u2606\u2608\5\u03ea\u01f6\2\u2607\u2606\3\2\2\2\u2607")
        buf.write("\u2608\3\2\2\2\u2608\u260a\3\2\2\2\u2609\u260b\5\u04e8")
        buf.write("\u0275\2\u260a\u2609\3\2\2\2\u260a\u260b\3\2\2\2\u260b")
        buf.write("\u260c\3\2\2\2\u260c\u260d\7\5\2\2\u260d\u04e3\3\2\2\2")
        buf.write("\u260e\u260f\5\u0588\u02c5\2\u260f\u04e5\3\2\2\2\u2610")
        buf.write("\u2611\7\u013e\2\2\u2611\u2612\7\u00bb\2\2\u2612\u2613")
        buf.write("\5\u0502\u0282\2\u2613\u04e7\3\2\2\2\u2614\u2615\7\u014c")
        buf.write("\2\2\u2615\u2617\5\u04ea\u0276\2\u2616\u2618\5\u04ee\u0278")
        buf.write("\2\u2617\u2616\3\2\2\2\u2617\u2618\3\2\2\2\u2618\u2624")
        buf.write("\3\2\2\2\u2619\u261a\7\u0161\2\2\u261a\u261c\5\u04ea\u0276")
        buf.write("\2\u261b\u261d\5\u04ee\u0278\2\u261c\u261b\3\2\2\2\u261c")
        buf.write("\u261d\3\2\2\2\u261d\u2624\3\2\2\2\u261e\u261f\7\u0209")
        buf.write("\2\2\u261f\u2621\5\u04ea\u0276\2\u2620\u2622\5\u04ee\u0278")
        buf.write("\2\u2621\u2620\3\2\2\2\u2621\u2622\3\2\2\2\u2622\u2624")
        buf.write("\3\2\2\2\u2623\u2614\3\2\2\2\u2623\u2619\3\2\2\2\u2623")
        buf.write("\u261e\3\2\2\2\u2624\u04e9\3\2\2\2\u2625\u262c\5\u04ec")
        buf.write("\u0277\2\u2626\u2627\7\u01a4\2\2\u2627\u2628\5\u04ec\u0277")
        buf.write("\2\u2628\u2629\7I\2\2\u2629\u262a\5\u04ec\u0277\2\u262a")
        buf.write("\u262c\3\2\2\2\u262b\u2625\3\2\2\2\u262b\u2626\3\2\2\2")
        buf.write("\u262c\u04eb\3\2\2\2\u262d\u262e\7\u018b\2\2\u262e\u2635")
        buf.write("\t:\2\2\u262f\u2630\7\u01da\2\2\u2630\u2635\7\u01bf\2")
        buf.write("\2\u2631\u2632\5\u048c\u0247\2\u2632\u2633\t:\2\2\u2633")
        buf.write("\u2635\3\2\2\2\u2634\u262d\3\2\2\2\u2634\u262f\3\2\2\2")
        buf.write("\u2634\u2631\3\2\2\2\u2635\u04ed\3\2\2\2\u2636\u263d\7")
        buf.write("\u00ef\2\2\u2637\u2638\7\u01da\2\2\u2638\u263e\7\u01bf")
        buf.write("\2\2\u2639\u263e\7j\2\2\u263a\u263e\7\u01fb\2\2\u263b")
        buf.write("\u263c\7\u012e\2\2\u263c\u263e\7\u020a\2\2\u263d\u2637")
        buf.write("\3\2\2\2\u263d\u2639\3\2\2\2\u263d\u263a\3\2\2\2\u263d")
        buf.write("\u263b\3\2\2\2\u263e\u04ef\3\2\2\2\u263f\u2640\7\u01bf")
        buf.write("\2\2\u2640\u2642\7\4\2\2\u2641\u2643\5\u0502\u0282\2\u2642")
        buf.write("\u2641\3\2\2\2\u2642\u2643\3\2\2\2\u2643\u2644\3\2\2\2")
        buf.write("\u2644\u264c\7\5\2\2\u2645\u2646\7\4\2\2\u2646\u2647\5")
        buf.write("\u0502\u0282\2\u2647\u2648\7\b\2\2\u2648\u2649\5\u048c")
        buf.write("\u0247\2\u2649\u264a\7\5\2\2\u264a\u264c\3\2\2\2\u264b")
        buf.write("\u263f\3\2\2\2\u264b\u2645\3\2\2\2\u264c\u04f1\3\2\2\2")
        buf.write("\u264d\u264e\7\u01bf\2\2\u264e\u2650\7\4\2\2\u264f\u2651")
        buf.write("\5\u0502\u0282\2\u2650\u264f\3\2\2\2\u2650\u2651\3\2\2")
        buf.write("\2\u2651\u2652\3\2\2\2\u2652\u2653\7\5\2\2\u2653\u04f3")
        buf.write("\3\2\2\2\u2654\u2655\7\4\2\2\u2655\u2656\5\u0502\u0282")
        buf.write("\2\u2656\u2657\7\b\2\2\u2657\u2658\5\u048c\u0247\2\u2658")
        buf.write("\u2659\7\5\2\2\u2659\u04f5\3\2\2\2\u265a\u265b\t;\2\2")
        buf.write("\u265b\u04f7\3\2\2\2\u265c\u265f\7\37\2\2\u265d\u265f")
        buf.write("\5\u04fa\u027e\2\u265e\u265c\3\2\2\2\u265e\u265d\3\2\2")
        buf.write("\2\u265f\u04f9\3\2\2\2\u2660\u2661\t<\2\2\u2661\u04fb")
        buf.write("\3\2\2\2\u2662\u2669\7\37\2\2\u2663\u2664\7\u0137\2\2")
        buf.write("\u2664\u2665\7\4\2\2\u2665\u2666\5\u02ac\u0157\2\u2666")
        buf.write("\u2667\7\5\2\2\u2667\u2669\3\2\2\2\u2668\u2662\3\2\2\2")
        buf.write("\u2668\u2663\3\2\2\2\u2669\u04fd\3\2\2\2\u266a\u2671\5")
        buf.write("\u04f8\u027d\2\u266b\u266c\7\u0137\2\2\u266c\u266d\7\4")
        buf.write("\2\2\u266d\u266e\5\u02ac\u0157\2\u266e\u266f\7\5\2\2\u266f")
        buf.write("\u2671\3\2\2\2\u2670\u266a\3\2\2\2\u2670\u266b\3\2\2\2")
        buf.write("\u2671\u04ff\3\2\2\2\u2672\u267f\5\u04f8\u027d\2\u2673")
        buf.write("\u2674\7\u0137\2\2\u2674\u2675\7\4\2\2\u2675\u2676\5\u02ac")
        buf.write("\u0157\2\u2676\u2677\7\5\2\2\u2677\u267f\3\2\2\2\u2678")
        buf.write("\u267f\7\u00a0\2\2\u2679\u267a\7u\2\2\u267a\u267f\7\u00a0")
        buf.write("\2\2\u267b\u267f\7\u009a\2\2\u267c\u267d\7u\2\2\u267d")
        buf.write("\u267f\7\u009a\2\2\u267e\u2672\3\2\2\2\u267e\u2673\3\2")
        buf.write("\2\2\u267e\u2678\3\2\2\2\u267e\u2679\3\2\2\2\u267e\u267b")
        buf.write("\3\2\2\2\u267e\u267c\3\2\2\2\u267f\u0501\3\2\2\2\u2680")
        buf.write("\u2685\5\u048c\u0247\2\u2681\u2682\7\b\2\2\u2682\u2684")
        buf.write("\5\u048c\u0247\2\u2683\u2681\3\2\2\2\u2684\u2687\3\2\2")
        buf.write("\2\u2685\u2683\3\2\2\2\u2685\u2686\3\2\2\2\u2686\u0503")
        buf.write("\3\2\2\2\u2687\u2685\3\2\2\2\u2688\u268d\5\u0506\u0284")
        buf.write("\2\u2689\u268a\7\b\2\2\u268a\u268c\5\u0506\u0284\2\u268b")
        buf.write("\u2689\3\2\2\2\u268c\u268f\3\2\2\2\u268d\u268b\3\2\2\2")
        buf.write("\u268d\u268e\3\2\2\2\u268e\u0505\3\2\2\2\u268f\u268d\3")
        buf.write("\2\2\2\u2690\u2696\5\u048c\u0247\2\u2691\u2692\5\u027c")
        buf.write("\u013f\2\u2692\u2693\t=\2\2\u2693\u2694\5\u048c\u0247")
        buf.write("\2\u2694\u2696\3\2\2\2\u2695\u2690\3\2\2\2\u2695\u2691")
        buf.write("\3\2\2\2\u2696\u0507\3\2\2\2\u2697\u269c\5\u045e\u0230")
        buf.write("\2\u2698\u2699\7\b\2\2\u2699\u269b\5\u045e\u0230\2\u269a")
        buf.write("\u2698\3\2\2\2\u269b\u269e\3\2\2\2\u269c\u269a\3\2\2\2")
        buf.write("\u269c\u269d\3\2\2\2\u269d\u0509\3\2\2\2\u269e\u269c\3")
        buf.write("\2\2\2\u269f\u26a2\7\6\2\2\u26a0\u26a3\5\u0502\u0282\2")
        buf.write("\u26a1\u26a3\5\u050c\u0287\2\u26a2\u26a0\3\2\2\2\u26a2")
        buf.write("\u26a1\3\2\2\2\u26a2\u26a3\3\2\2\2\u26a3\u26a4\3\2\2\2")
        buf.write("\u26a4\u26a5\7\7\2\2\u26a5\u050b\3\2\2\2\u26a6\u26ab\5")
        buf.write("\u050a\u0286\2\u26a7\u26a8\7\b\2\2\u26a8\u26aa\5\u050a")
        buf.write("\u0286\2\u26a9\u26a7\3\2\2\2\u26aa\u26ad\3\2\2\2\u26ab")
        buf.write("\u26a9\3\2\2\2\u26ab\u26ac\3\2\2\2\u26ac\u050d\3\2\2\2")
        buf.write("\u26ad\u26ab\3\2\2\2\u26ae\u26af\5\u0510\u0289\2\u26af")
        buf.write("\u26b0\7h\2\2\u26b0\u26b1\5\u048c\u0247\2\u26b1\u050f")
        buf.write("\3\2\2\2\u26b2\u26bb\5\u059e\u02d0\2\u26b3\u26bb\7\u01a1")
        buf.write("\2\2\u26b4\u26bb\7\u0129\2\2\u26b5\u26bb\7\u00d8\2\2\u26b6")
        buf.write("\u26bb\7\u0102\2\2\u26b7\u26bb\7\u0126\2\2\u26b8\u26bb")
        buf.write("\7\u0167\2\2\u26b9\u26bb\5\u057a\u02be\2\u26ba\u26b2\3")
        buf.write("\2\2\2\u26ba\u26b3\3\2\2\2\u26ba\u26b4\3\2\2\2\u26ba\u26b5")
        buf.write("\3\2\2\2\u26ba\u26b6\3\2\2\2\u26ba\u26b7\3\2\2\2\u26ba")
        buf.write("\u26b8\3\2\2\2\u26ba\u26b9\3\2\2\2\u26bb\u0511\3\2\2\2")
        buf.write("\u26bc\u26bd\t>\2\2\u26bd\u0513\3\2\2\2\u26be\u26bf\5")
        buf.write("\u048c\u0247\2\u26bf\u26c0\7|\2\2\u26c0\u26c1\5\u048c")
        buf.write("\u0247\2\u26c1\u26c2\7h\2\2\u26c2\u26c5\5\u048c\u0247")
        buf.write("\2\u26c3\u26c4\7f\2\2\u26c4\u26c6\5\u048c\u0247\2\u26c5")
        buf.write("\u26c3\3\2\2\2\u26c5\u26c6\3\2\2\2\u26c6\u0515\3\2\2\2")
        buf.write("\u26c7\u26c8\5\u04b6\u025c\2\u26c8\u26c9\7l\2\2\u26c9")
        buf.write("\u26ca\5\u04b6\u025c\2\u26ca\u0517\3\2\2\2\u26cb\u26cc")
        buf.write("\5\u048c\u0247\2\u26cc\u26cd\7h\2\2\u26cd\u26ce\5\u048c")
        buf.write("\u0247\2\u26ce\u26cf\7f\2\2\u26cf\u26d0\5\u048c\u0247")
        buf.write("\2\u26d0\u26e6\3\2\2\2\u26d1\u26d2\5\u048c\u0247\2\u26d2")
        buf.write("\u26d3\7f\2\2\u26d3\u26d4\5\u048c\u0247\2\u26d4\u26d5")
        buf.write("\7h\2\2\u26d5\u26d6\5\u048c\u0247\2\u26d6\u26e6\3\2\2")
        buf.write("\2\u26d7\u26d8\5\u048c\u0247\2\u26d8\u26d9\7h\2\2\u26d9")
        buf.write("\u26da\5\u048c\u0247\2\u26da\u26e6\3\2\2\2\u26db\u26dc")
        buf.write("\5\u048c\u0247\2\u26dc\u26dd\7f\2\2\u26dd\u26de\5\u048c")
        buf.write("\u0247\2\u26de\u26e6\3\2\2\2\u26df\u26e0\5\u048c\u0247")
        buf.write("\2\u26e0\u26e1\7\u00a7\2\2\u26e1\u26e2\5\u048c\u0247\2")
        buf.write("\u26e2\u26e3\7\u00ed\2\2\u26e3\u26e4\5\u048c\u0247\2\u26e4")
        buf.write("\u26e6\3\2\2\2\u26e5\u26cb\3\2\2\2\u26e5\u26d1\3\2\2\2")
        buf.write("\u26e5\u26d7\3\2\2\2\u26e5\u26db\3\2\2\2\u26e5\u26df\3")
        buf.write("\2\2\2\u26e6\u0519\3\2\2\2\u26e7\u26e8\5\u048c\u0247\2")
        buf.write("\u26e8\u26e9\7h\2\2\u26e9\u26ea\5\u0502\u0282\2\u26ea")
        buf.write("\u26ef\3\2\2\2\u26eb\u26ec\7h\2\2\u26ec\u26ef\5\u0502")
        buf.write("\u0282\2\u26ed\u26ef\5\u0502\u0282\2\u26ee\u26e7\3\2\2")
        buf.write("\2\u26ee\u26eb\3\2\2\2\u26ee\u26ed\3\2\2\2\u26ef\u051b")
        buf.write("\3\2\2\2\u26f0\u26f6\5\u03c8\u01e5\2\u26f1\u26f2\7\4\2")
        buf.write("\2\u26f2\u26f3\5\u0502\u0282\2\u26f3\u26f4\7\5\2\2\u26f4")
        buf.write("\u26f6\3\2\2\2\u26f5\u26f0\3\2\2\2\u26f5\u26f1\3\2\2\2")
        buf.write("\u26f6\u051d\3\2\2\2\u26f7\u26f9\7P\2\2\u26f8\u26fa\5")
        buf.write("\u0526\u0294\2\u26f9\u26f8\3\2\2\2\u26f9\u26fa\3\2\2\2")
        buf.write("\u26fa\u26fb\3\2\2\2\u26fb\u26fd\5\u0520\u0291\2\u26fc")
        buf.write("\u26fe\5\u0524\u0293\2\u26fd\u26fc\3\2\2\2\u26fd\u26fe")
        buf.write("\3\2\2\2\u26fe\u26ff\3\2\2\2\u26ff\u2700\7\u01ee\2\2\u2700")
        buf.write("\u051f\3\2\2\2\u2701\u2703\5\u0522\u0292\2\u2702\u2701")
        buf.write("\3\2\2\2\u2703\u2704\3\2\2\2\u2704\u2702\3\2\2\2\u2704")
        buf.write("\u2705\3\2\2\2\u2705\u0521\3\2\2\2\u2706\u2707\7\u008e")
        buf.write("\2\2\u2707\u2708\5\u048c\u0247\2\u2708\u2709\7\u0085\2")
        buf.write("\2\u2709\u270a\5\u048c\u0247\2\u270a\u0523\3\2\2\2\u270b")
        buf.write("\u270c\7b\2\2\u270c\u270d\5\u048c\u0247\2\u270d\u0525")
        buf.write("\3\2\2\2\u270e\u270f\5\u048c\u0247\2\u270f\u0527\3\2\2")
        buf.write("\2\u2710\u2712\5\u0588\u02c5\2\u2711\u2713\5\u052e\u0298")
        buf.write("\2\u2712\u2711\3\2\2\2\u2712\u2713\3\2\2\2\u2713\u0529")
        buf.write("\3\2\2\2\u2714\u2717\7\r\2\2\u2715\u2718\5\u056a\u02b6")
        buf.write("\2\u2716\u2718\7\13\2\2\u2717\u2715\3\2\2\2\u2717\u2716")
        buf.write("\3\2\2\2\u2718\u2726\3\2\2\2\u2719\u2722\7\6\2\2\u271a")
        buf.write("\u2723\5\u048c\u0247\2\u271b\u271d\5\u052c\u0297\2\u271c")
        buf.write("\u271b\3\2\2\2\u271c\u271d\3\2\2\2\u271d\u271e\3\2\2\2")
        buf.write("\u271e\u2720\7\n\2\2\u271f\u2721\5\u052c\u0297\2\u2720")
        buf.write("\u271f\3\2\2\2\u2720\u2721\3\2\2\2\u2721\u2723\3\2\2\2")
        buf.write("\u2722\u271a\3\2\2\2\u2722\u271c\3\2\2\2\u2723\u2724\3")
        buf.write("\2\2\2\u2724\u2726\7\7\2\2\u2725\u2714\3\2\2\2\u2725\u2719")
        buf.write("\3\2\2\2\u2726\u052b\3\2\2\2\u2727\u2728\5\u048c\u0247")
        buf.write("\2\u2728\u052d\3\2\2\2\u2729\u272b\5\u052a\u0296\2\u272a")
        buf.write("\u2729\3\2\2\2\u272b\u272c\3\2\2\2\u272c\u272a\3\2\2\2")
        buf.write("\u272c\u272d\3\2\2\2\u272d\u052f\3\2\2\2\u272e\u2730\5")
        buf.write("\u052a\u0296\2\u272f\u272e\3\2\2\2\u2730\u2733\3\2\2\2")
        buf.write("\u2731\u272f\3\2\2\2\u2731\u2732\3\2\2\2\u2732\u0531\3")
        buf.write("\2\2\2\u2733\u2731\3\2\2\2\u2734\u2735\7\u013f\2\2\u2735")
        buf.write("\u2736\5\u0534\u029b\2\u2736\u0533\3\2\2\2\u2737\u2738")
        buf.write("\b\u029b\1\2\u2738\u2739\5\u0536\u029c\2\u2739\u273f\3")
        buf.write("\2\2\2\u273a\u273b\f\3\2\2\u273b\u273c\7\b\2\2\u273c\u273e")
        buf.write("\5\u0536\u029c\2\u273d\u273a\3\2\2\2\u273e\u2741\3\2\2")
        buf.write("\2\u273f\u273d\3\2\2\2\u273f\u2740\3\2\2\2\u2740\u0535")
        buf.write("\3\2\2\2\u2741\u273f\3\2\2\2\u2742\u2743\5\u0542\u02a2")
        buf.write("\2\u2743\u2744\7L\2\2\u2744\u2745\5\u058e\u02c8\2\u2745")
        buf.write("\u0537\3\2\2\2\u2746\u2747\7\u019c\2\2\u2747\u2760\7\u019e")
        buf.write("\2\2\u2748\u2749\7\u019c\2\2\u2749\u274a\7K\2\2\u274a")
        buf.write("\u2760\7\u019e\2\2\u274b\u274c\7\u0091\2\2\u274c\u2760")
        buf.write("\7\u019e\2\2\u274d\u274e\7\u0091\2\2\u274e\u274f\7K\2")
        buf.write("\2\u274f\u2760\7\u019e\2\2\u2750\u2751\7\u0091\2\2\u2751")
        buf.write("\u2752\7\62\2\2\u2752\u2753\7K\2\2\u2753\u2760\7\u019e")
        buf.write("\2\2\u2754\u2755\7\u0091\2\2\u2755\u2756\7C\2\2\u2756")
        buf.write("\u2757\7K\2\2\u2757\u2760\7\u019e\2\2\u2758\u2759\7\u0091")
        buf.write("\2\2\u2759\u275a\7\62\2\2\u275a\u2760\7\u019e\2\2\u275b")
        buf.write("\u275c\7\u0091\2\2\u275c\u275d\7C\2\2\u275d\u2760\7\u019e")
        buf.write("\2\2\u275e\u2760\3\2\2\2\u275f\u2746\3\2\2\2\u275f\u2748")
        buf.write("\3\2\2\2\u275f\u274b\3\2\2\2\u275f\u274d\3\2\2\2\u275f")
        buf.write("\u2750\3\2\2\2\u275f\u2754\3\2\2\2\u275f\u2758\3\2\2\2")
        buf.write("\u275f\u275b\3\2\2\2\u275f\u275e\3\2\2\2\u2760\u0539\3")
        buf.write("\2\2\2\u2761\u2762\7]\2\2\u2762\u2765\5\u048c\u0247\2")
        buf.write("\u2763\u2765\5\u053c\u029f\2\u2764\u2761\3\2\2\2\u2764")
        buf.write("\u2763\3\2\2\2\u2765\u053b\3\2\2\2\u2766\u2771\7\u0213")
        buf.write("\2\2\u2767\u2771\7v\2\2\u2768\u2771\7\u0088\2\2\u2769")
        buf.write("\u2771\7d\2\2\u276a\u2771\7\u018e\2\2\u276b\u276c\7\64")
        buf.write("\2\2\u276c\u2771\7K\2\2\u276d\u276e\7\64\2\2\u276e\u2771")
        buf.write("\7\u0133\2\2\u276f\u2771\7\64\2\2\u2770\u2766\3\2\2\2")
        buf.write("\u2770\u2767\3\2\2\2\u2770\u2768\3\2\2\2\u2770\u2769\3")
        buf.write("\2\2\2\u2770\u276a\3\2\2\2\u2770\u276b\3\2\2\2\u2770\u276d")
        buf.write("\3\2\2\2\u2770\u276f\3\2\2\2\u2771\u053d\3\2\2\2\u2772")
        buf.write("\u2773\5\u053a\u029e\2\u2773\u2774\7x\2\2\u2774\u2775")
        buf.write("\7\64\2\2\u2775\u2782\3\2\2\2\u2776\u2777\5\u053a\u029e")
        buf.write("\2\u2777\u2778\7x\2\2\u2778\u2779\7\u0213\2\2\u2779\u2782")
        buf.write("\3\2\2\2\u277a\u277b\5\u053a\u029e\2\u277b\u277c\7x\2")
        buf.write("\2\u277c\u277d\7\64\2\2\u277d\u277e\5\u053a\u029e\2\u277e")
        buf.write("\u277f\7x\2\2\u277f\u2780\7\u0213\2\2\u2780\u2782\3\2")
        buf.write("\2\2\u2781\u2772\3\2\2\2\u2781\u2776\3\2\2\2\u2781\u277a")
        buf.write("\3\2\2\2\u2782\u053f\3\2\2\2\u2783\u2784\5\u053a\u029e")
        buf.write("\2\u2784\u2785\7x\2\2\u2785\u2786\7\u0213\2\2\u2786\u0541")
        buf.write("\3\2\2\2\u2787\u2789\5\u048c\u0247\2\u2788\u278a\5\u0544")
        buf.write("\u02a3\2\u2789\u2788\3\2\2\2\u2789\u278a\3\2\2\2\u278a")
        buf.write("\u0543\3\2\2\2\u278b\u278c\7E\2\2\u278c\u278d\7 \2\2\u278d")
        buf.write("\u278e\7\u00ea\2\2\u278e\u2792\5\u0568\u02b5\2\u278f\u2790")
        buf.write("\7E\2\2\u2790\u2792\7 \2\2\u2791\u278b\3\2\2\2\u2791\u278f")
        buf.write("\3\2\2\2\u2792\u0545\3\2\2\2\u2793\u2794\7\67\2\2\u2794")
        buf.write("\u2795\7>\2\2\u2795\u2796\7x\2\2\u2796\u2797\7?\2\2\u2797")
        buf.write("\u27a2\7A\2\2\u2798\u2799\7\67\2\2\u2799\u27a2\7>\2\2")
        buf.write("\u279a\u279b\7:\2\2\u279b\u279c\7>\2\2\u279c\u279d\7x")
        buf.write("\2\2\u279d\u279e\7?\2\2\u279e\u27a2\7A\2\2\u279f\u27a0")
        buf.write("\7:\2\2\u27a0\u27a2\7>\2\2\u27a1\u2793\3\2\2\2\u27a1\u2798")
        buf.write("\3\2\2\2\u27a1\u279a\3\2\2\2\u27a1\u279f\3\2\2\2\u27a2")
        buf.write("\u0547\3\2\2\2\u27a3\u27a4\7\177\2\2\u27a4\u27a6\5\u045e")
        buf.write("\u0230\2\u27a5\u27a7\5\u0544\u02a3\2\u27a6\u27a5\3\2\2")
        buf.write("\2\u27a6\u27a7\3\2\2\2\u27a7\u0549\3\2\2\2\u27a8\u27b2")
        buf.write("\7 \2\2\u27a9\u27aa\7 \2\2\u27aa\u27b2\7\u01ea\2\2\u27ab")
        buf.write("\u27ac\7 \2\2\u27ac\u27b2\7K\2\2\u27ad\u27ae\7 \2\2\u27ae")
        buf.write("\u27b2\7\u0133\2\2\u27af\u27b0\7 \2\2\u27b0\u27b2\7?\2")
        buf.write("\2\u27b1\u27a8\3\2\2\2\u27b1\u27a9\3\2\2\2\u27b1\u27ab")
        buf.write("\3\2\2\2\u27b1\u27ad\3\2\2\2\u27b1\u27af\3\2\2\2\u27b2")
        buf.write("\u054b\3\2\2\2\u27b3\u27b4\7\u0091\2\2\u27b4\u27b5\7\u008a")
        buf.write("\2\2\u27b5\u27be\78\2\2\u27b6\u27b7\7\u0091\2\2\u27b7")
        buf.write("\u27be\7\u008a\2\2\u27b8\u27b9\7\u019c\2\2\u27b9\u27ba")
        buf.write("\7\u008a\2\2\u27ba\u27be\78\2\2\u27bb\u27bc\7\u019c\2")
        buf.write("\2\u27bc\u27be\7\u008a\2\2\u27bd\u27b3\3\2\2\2\u27bd\u27b6")
        buf.write("\3\2\2\2\u27bd\u27b8\3\2\2\2\u27bd\u27bb\3\2\2\2\u27be")
        buf.write("\u054d\3\2\2\2\u27bf\u27c0\b\u02a8\1\2\u27c0\u27c1\5\u0550")
        buf.write("\u02a9\2\u27c1\u27c7\3\2\2\2\u27c2\u27c3\f\3\2\2\u27c3")
        buf.write("\u27c4\7\b\2\2\u27c4\u27c6\5\u0550\u02a9\2\u27c5\u27c2")
        buf.write("\3\2\2\2\u27c6\u27c9\3\2\2\2\u27c7\u27c5\3\2\2\2\u27c7")
        buf.write("\u27c8\3\2\2\2\u27c8\u054f\3\2\2\2\u27c9\u27c7\3\2\2\2")
        buf.write("\u27ca\u27cb\5\u04b8\u025d\2\u27cb\u27cc\7\u01ea\2\2\u27cc")
        buf.write("\u27cd\5\u0542\u02a2\2\u27cd\u27d3\3\2\2\2\u27ce\u27cf")
        buf.write("\5\u048c\u0247\2\u27cf\u27d0\7\n\2\2\u27d0\u27d1\5\u0542")
        buf.write("\u02a2\2\u27d1\u27d3\3\2\2\2\u27d2\u27ca\3\2\2\2\u27d2")
        buf.write("\u27ce\3\2\2\2\u27d3\u0551\3\2\2\2\u27d4\u27d5\7v\2\2")
        buf.write("\u27d5\u27d6\7x\2\2\u27d6\u27db\7v\2\2\u27d7\u27d8\7-")
        buf.write("\2\2\u27d8\u27d9\7x\2\2\u27d9\u27db\7v\2\2\u27da\u27d4")
        buf.write("\3\2\2\2\u27da\u27d7\3\2\2\2\u27db\u0553\3\2\2\2\u27dc")
        buf.write("\u27dd\7v\2\2\u27dd\u27de\7x\2\2\u27de\u27e3\7v\2\2\u27df")
        buf.write("\u27e0\7-\2\2\u27e0\u27e1\7x\2\2\u27e1\u27e3\7v\2\2\u27e2")
        buf.write("\u27dc\3\2\2\2\u27e2\u27df\3\2\2\2\u27e3\u0555\3\2\2\2")
        buf.write("\u27e4\u27e5\b\u02ac\1\2\u27e5\u27e6\5\u0542\u02a2\2\u27e6")
        buf.write("\u27ec\3\2\2\2\u27e7\u27e8\f\3\2\2\u27e8\u27e9\7\b\2\2")
        buf.write("\u27e9\u27eb\5\u0542\u02a2\2\u27ea\u27e7\3\2\2\2\u27eb")
        buf.write("\u27ee\3\2\2\2\u27ec\u27ea\3\2\2\2\u27ec\u27ed\3\2\2\2")
        buf.write("\u27ed\u0557\3\2\2\2\u27ee\u27ec\3\2\2\2\u27ef\u27f0\7")
        buf.write("%\2\2\u27f0\u27f1\7\4\2\2\u27f1\u27f3\5\u0550\u02a9\2")
        buf.write("\u27f2\u27f4\5\u0552\u02aa\2\u27f3\u27f2\3\2\2\2\u27f3")
        buf.write("\u27f4\3\2\2\2\u27f4\u27f6\3\2\2\2\u27f5\u27f7\5\u054c")
        buf.write("\u02a7\2\u27f6\u27f5\3\2\2\2\u27f6\u27f7\3\2\2\2\u27f7")
        buf.write("\u27f8\3\2\2\2\u27f8\u27f9\5\u0548\u02a5\2\u27f9\u27fa")
        buf.write("\7\5\2\2\u27fa\u2808\3\2\2\2\u27fb\u27fc\7\"\2\2\u27fc")
        buf.write("\u27fd\7\4\2\2\u27fd\u27ff\5\u0542\u02a2\2\u27fe\u2800")
        buf.write("\5\u055a\u02ae\2\u27ff\u27fe\3\2\2\2\u27ff\u2800\3\2\2")
        buf.write("\2\u2800\u2802\3\2\2\2\u2801\u2803\5\u0554\u02ab\2\u2802")
        buf.write("\u2801\3\2\2\2\u2802\u2803\3\2\2\2\u2803\u2804\3\2\2\2")
        buf.write("\u2804\u2805\5\u0548\u02a5\2\u2805\u2806\7\5\2\2\u2806")
        buf.write("\u2808\3\2\2\2\u2807\u27ef\3\2\2\2\u2807\u27fb\3\2\2\2")
        buf.write("\u2808\u0559\3\2\2\2\u2809\u280a\7{\2\2\u280a\u280b\7")
        buf.write("\u00bb\2\2\u280b\u280c\5\u03ee\u01f8\2\u280c\u055b\3\2")
        buf.write("\2\2\u280d\u280e\5\u055e\u02b0\2\u280e\u055d\3\2\2\2\u280f")
        buf.write("\u2814\5\u0560\u02b1\2\u2810\u2811\7\b\2\2\u2811\u2813")
        buf.write("\5\u0560\u02b1\2\u2812\u2810\3\2\2\2\u2813\u2816\3\2\2")
        buf.write("\2\u2814\u2812\3\2\2\2\u2814\u2815\3\2\2\2\u2815\u055f")
        buf.write("\3\2\2\2\u2816\u2814\3\2\2\2\u2817\u281c\5\u048c\u0247")
        buf.write("\2\u2818\u2819\7L\2\2\u2819\u281d\5\u058e\u02c8\2\u281a")
        buf.write("\u281d\5\u0590\u02c9\2\u281b\u281d\3\2\2\2\u281c\u2818")
        buf.write("\3\2\2\2\u281c\u281a\3\2\2\2\u281c\u281b\3\2\2\2\u281d")
        buf.write("\u2820\3\2\2\2\u281e\u2820\7\13\2\2\u281f\u2817\3\2\2")
        buf.write("\2\u281f\u281e\3\2\2\2\u2820\u0561\3\2\2\2\u2821\u2826")
        buf.write("\5\u0564\u02b3\2\u2822\u2823\7\b\2\2\u2823\u2825\5\u0564")
        buf.write("\u02b3\2\u2824\u2822\3\2\2\2\u2825\u2828\3\2\2\2\u2826")
        buf.write("\u2824\3\2\2\2\u2826\u2827\3\2\2\2\u2827\u0563\3\2\2\2")
        buf.write("\u2828\u2826\3\2\2\2\u2829\u282b\5\u0588\u02c5\2\u282a")
        buf.write("\u282c\5\u052e\u0298\2\u282b\u282a\3\2\2\2\u282b\u282c")
        buf.write("\3\2\2\2\u282c\u0565\3\2\2\2\u282d\u2832\5\u0568\u02b5")
        buf.write("\2\u282e\u282f\7\b\2\2\u282f\u2831\5\u0568\u02b5\2\u2830")
        buf.write("\u282e\3\2\2\2\u2831\u2834\3\2\2\2\u2832\u2830\3\2\2\2")
        buf.write("\u2832\u2833\3\2\2\2\u2833\u0567\3\2\2\2\u2834\u2832\3")
        buf.write("\2\2\2\u2835\u2836\5\u0588\u02c5\2\u2836\u0569\3\2\2\2")
        buf.write("\u2837\u2838\5\u058e\u02c8\2\u2838\u056b\3\2\2\2\u2839")
        buf.write("\u283a\5\u057a\u02be\2\u283a\u056d\3\2\2\2\u283b\u2840")
        buf.write("\5\u058a\u02c6\2\u283c\u283d\5\u0588\u02c5\2\u283d\u283e")
        buf.write("\5\u052e\u0298\2\u283e\u2840\3\2\2\2\u283f\u283b\3\2\2")
        buf.write("\2\u283f\u283c\3\2\2\2\u2840\u056f\3\2\2\2\u2841\u2865")
        buf.write("\5\u0578\u02bd\2\u2842\u2865\5\u0576\u02bc\2\u2843\u2865")
        buf.write("\5\u057a\u02be\2\u2844\u2865\5\u0574\u02bb\2\u2845\u2865")
        buf.write("\5\u0572\u02ba\2\u2846\u2850\5\u056e\u02b8\2\u2847\u2851")
        buf.write("\5\u057a\u02be\2\u2848\u2849\7\4\2\2\u2849\u284b\5\u0504")
        buf.write("\u0283\2\u284a\u284c\5\u03ea\u01f6\2\u284b\u284a\3\2\2")
        buf.write("\2\u284b\u284c\3\2\2\2\u284c\u284d\3\2\2\2\u284d\u284e")
        buf.write("\7\5\2\2\u284e\u284f\5\u057a\u02be\2\u284f\u2851\3\2\2")
        buf.write("\2\u2850\u2847\3\2\2\2\u2850\u2848\3\2\2\2\u2851\u2865")
        buf.write("\3\2\2\2\u2852\u2853\5\u0464\u0233\2\u2853\u2854\5\u057a")
        buf.write("\u02be\2\u2854\u2865\3\2\2\2\u2855\u285f\5\u0480\u0241")
        buf.write("\2\u2856\u2858\5\u057a\u02be\2\u2857\u2859\5\u0484\u0243")
        buf.write("\2\u2858\u2857\3\2\2\2\u2858\u2859\3\2\2\2\u2859\u2860")
        buf.write("\3\2\2\2\u285a\u285b\7\4\2\2\u285b\u285c\5\u0578\u02bd")
        buf.write("\2\u285c\u285d\7\5\2\2\u285d\u285e\5\u057a\u02be\2\u285e")
        buf.write("\u2860\3\2\2\2\u285f\u2856\3\2\2\2\u285f\u285a\3\2\2\2")
        buf.write("\u2860\u2865\3\2\2\2\u2861\u2865\7\u0088\2\2\u2862\u2865")
        buf.write("\7d\2\2\u2863\u2865\7v\2\2\u2864\u2841\3\2\2\2\u2864\u2842")
        buf.write("\3\2\2\2\u2864\u2843\3\2\2\2\u2864\u2844\3\2\2\2\u2864")
        buf.write("\u2845\3\2\2\2\u2864\u2846\3\2\2\2\u2864\u2852\3\2\2\2")
        buf.write("\u2864\u2855\3\2\2\2\u2864\u2861\3\2\2\2\u2864\u2862\3")
        buf.write("\2\2\2\u2864\u2863\3\2\2\2\u2865\u0571\3\2\2\2\u2866\u2867")
        buf.write("\7\u023e\2\2\u2867\u0573\3\2\2\2\u2868\u2869\7\u023a\2")
        buf.write("\2\u2869\u0575\3\2\2\2\u286a\u286b\7\u0247\2\2\u286b\u0577")
        buf.write("\3\2\2\2\u286c\u286d\t?\2\2\u286d\u0579\3\2\2\2\u286e")
        buf.write("\u2870\5\u057c\u02bf\2\u286f\u2871\5\u057e\u02c0\2\u2870")
        buf.write("\u286f\3\2\2\2\u2870\u2871\3\2\2\2\u2871\u057b\3\2\2\2")
        buf.write("\u2872\u287e\7\u0235\2\2\u2873\u287e\7\u0237\2\2\u2874")
        buf.write("\u2878\7\u0239\2\2\u2875\u2877\7\u0256\2\2\u2876\u2875")
        buf.write("\3\2\2\2\u2877\u287a\3\2\2\2\u2878\u2876\3\2\2\2\u2878")
        buf.write("\u2879\3\2\2\2\u2879\u287b\3\2\2\2\u287a\u2878\3\2\2\2")
        buf.write("\u287b\u287e\7\u0257\2\2\u287c\u287e\7\u0250\2\2\u287d")
        buf.write("\u2872\3\2\2\2\u287d\u2873\3\2\2\2\u287d\u2874\3\2\2\2")
        buf.write("\u287d\u287c\3\2\2\2\u287e\u057d\3\2\2\2\u287f\u2880\7")
        buf.write("\u020f\2\2\u2880\u2881\5\u057c\u02bf\2\u2881\u057f\3\2")
        buf.write("\2\2\u2882\u2888\5\u0578\u02bd\2\u2883\u2884\7\16\2\2")
        buf.write("\u2884\u2888\5\u0578\u02bd\2\u2885\u2886\7\17\2\2\u2886")
        buf.write("\u2888\5\u0578\u02bd\2\u2887\u2882\3\2\2\2\u2887\u2883")
        buf.write("\3\2\2\2\u2887\u2885\3\2\2\2\u2888\u0581\3\2\2\2\u2889")
        buf.write("\u288a\5\u0584\u02c3\2\u288a\u0583\3\2\2\2\u288b\u288f")
        buf.write("\5\u058c\u02c7\2\u288c\u288f\7\\\2\2\u288d\u288f\7\u0081")
        buf.write("\2\2\u288e\u288b\3\2\2\2\u288e\u288c\3\2\2\2\u288e\u288d")
        buf.write("\3\2\2\2\u288f\u0585\3\2\2\2\u2890\u2895\5\u0584\u02c3")
        buf.write("\2\u2891\u2892\7\b\2\2\u2892\u2894\5\u0584\u02c3\2\u2893")
        buf.write("\u2891\3\2\2\2\u2894\u2897\3\2\2\2\u2895\u2893\3\2\2\2")
        buf.write("\u2895\u2896\3\2\2\2\u2896\u0587\3\2\2\2\u2897\u2895\3")
        buf.write("\2\2\2\u2898\u289c\5\u059e\u02d0\2\u2899\u289c\5\u0592")
        buf.write("\u02ca\2\u289a\u289c\5\u0594\u02cb\2\u289b\u2898\3\2\2")
        buf.write("\2\u289b\u2899\3\2\2\2\u289b\u289a\3\2\2\2\u289c\u0589")
        buf.write("\3\2\2\2\u289d\u28a1\5\u059e\u02d0\2\u289e\u28a1\5\u0592")
        buf.write("\u02ca\2\u289f\u28a1\5\u0596\u02cc\2\u28a0\u289d\3\2\2")
        buf.write("\2\u28a0\u289e\3\2\2\2\u28a0\u289f\3\2\2\2\u28a1\u058b")
        buf.write("\3\2\2\2\u28a2\u28a7\5\u059e\u02d0\2\u28a3\u28a7\5\u0592")
        buf.write("\u02ca\2\u28a4\u28a7\5\u0594\u02cb\2\u28a5\u28a7\5\u0596")
        buf.write("\u02cc\2\u28a6\u28a2\3\2\2\2\u28a6\u28a3\3\2\2\2\u28a6")
        buf.write("\u28a4\3\2\2\2\u28a6\u28a5\3\2\2\2\u28a7\u058d\3\2\2\2")
        buf.write("\u28a8\u28af\5\u059e\u02d0\2\u28a9\u28af\5\u0592\u02ca")
        buf.write("\2\u28aa\u28af\5\u0594\u02cb\2\u28ab\u28af\5\u0596\u02cc")
        buf.write("\2\u28ac\u28af\5\u0598\u02cd\2\u28ad\u28af\7\u021f\2\2")
        buf.write("\u28ae\u28a8\3\2\2\2\u28ae\u28a9\3\2\2\2\u28ae\u28aa\3")
        buf.write("\2\2\2\u28ae\u28ab\3\2\2\2\u28ae\u28ac\3\2\2\2\u28ae\u28ad")
        buf.write("\3\2\2\2\u28af\u058f\3\2\2\2\u28b0\u28b3\5\u059e\u02d0")
        buf.write("\2\u28b1\u28b3\5\u059a\u02ce\2\u28b2\u28b0\3\2\2\2\u28b2")
        buf.write("\u28b1\3\2\2\2\u28b3\u0591\3\2\2\2\u28b4\u28b5\t@\2\2")
        buf.write("\u28b5\u0593\3\2\2\2\u28b6\u28f6\7\u01a4\2\2\u28b7\u28f6")
        buf.write("\7\u01a5\2\2\u28b8\u28f6\7\u01a6\2\2\u28b9\u28f6\7\u01a7")
        buf.write("\2\2\u28ba\u28f6\7\u01a8\2\2\u28bb\u28f6\5\u0476\u023c")
        buf.write("\2\u28bc\u28f6\7\u01aa\2\2\u28bd\u28f6\7\u01ab\2\2\u28be")
        buf.write("\u28f6\7\u01ac\2\2\u28bf\u28f6\7\u01ad\2\2\u28c0\u28f6")
        buf.write("\7\u01ae\2\2\u28c1\u28f6\7\u01af\2\2\u28c2\u28f6\7\u01b0")
        buf.write("\2\2\u28c3\u28f6\7\u01fe\2\2\u28c4\u28f6\7\u01b1\2\2\u28c5")
        buf.write("\u28f6\7\u01b2\2\2\u28c6\u28f6\7\u01b3\2\2\u28c7\u28f6")
        buf.write("\7\u01b4\2\2\u28c8\u28f6\7 \2\2\u28c9\u28f6\7!\2\2\u28ca")
        buf.write("\u28f6\7\"\2\2\u28cb\u28f6\7#\2\2\u28cc\u28f6\7$\2\2\u28cd")
        buf.write("\u28f6\7%\2\2\u28ce\u28f6\7&\2\2\u28cf\u28f6\7\'\2\2\u28d0")
        buf.write("\u28f6\7(\2\2\u28d1\u28f6\7)\2\2\u28d2\u28f6\7*\2\2\u28d3")
        buf.write("\u28f6\7\u01b5\2\2\u28d4\u28f6\7+\2\2\u28d5\u28f6\7\u01b6")
        buf.write("\2\2\u28d6\u28f6\7\u01b7\2\2\u28d7\u28f6\7\u01b8\2\2\u28d8")
        buf.write("\u28f6\7\u0211\2\2\u28d9\u28f6\7\u01b9\2\2\u28da\u28f6")
        buf.write("\7\u01ba\2\2\u28db\u28f6\7\u01ed\2\2\u28dc\u28f6\7\u01bb")
        buf.write("\2\2\u28dd\u28f6\7\u01bc\2\2\u28de\u28f6\7\u01bd\2\2\u28df")
        buf.write("\u28f6\7\u01be\2\2\u28e0\u28f6\7\u01bf\2\2\u28e1\u28f6")
        buf.write("\7\u01c0\2\2\u28e2\u28f6\7\u01c1\2\2\u28e3\u28f6\7\u01c2")
        buf.write("\2\2\u28e4\u28f6\7\u01c3\2\2\u28e5\u28f6\7\u01c4\2\2\u28e6")
        buf.write("\u28f6\7\u01c5\2\2\u28e7\u28f6\7\u01c6\2\2\u28e8\u28f6")
        buf.write("\7\u01c7\2\2\u28e9\u28f6\7\u01c8\2\2\u28ea\u28f6\7\u01c9")
        buf.write("\2\2\u28eb\u28f6\7\u01d1\2\2\u28ec\u28f6\7\u01d2\2\2\u28ed")
        buf.write("\u28f6\7\u01d3\2\2\u28ee\u28f6\7\u01d4\2\2\u28ef\u28f6")
        buf.write("\7\u0204\2\2\u28f0\u28f6\7\u01d5\2\2\u28f1\u28f6\7\u01d6")
        buf.write("\2\2\u28f2\u28f6\7\u01d7\2\2\u28f3\u28f6\7\u01d8\2\2\u28f4")
        buf.write("\u28f6\7\u0202\2\2\u28f5\u28b6\3\2\2\2\u28f5\u28b7\3\2")
        buf.write("\2\2\u28f5\u28b8\3\2\2\2\u28f5\u28b9\3\2\2\2\u28f5\u28ba")
        buf.write("\3\2\2\2\u28f5\u28bb\3\2\2\2\u28f5\u28bc\3\2\2\2\u28f5")
        buf.write("\u28bd\3\2\2\2\u28f5\u28be\3\2\2\2\u28f5\u28bf\3\2\2\2")
        buf.write("\u28f5\u28c0\3\2\2\2\u28f5\u28c1\3\2\2\2\u28f5\u28c2\3")
        buf.write("\2\2\2\u28f5\u28c3\3\2\2\2\u28f5\u28c4\3\2\2\2\u28f5\u28c5")
        buf.write("\3\2\2\2\u28f5\u28c6\3\2\2\2\u28f5\u28c7\3\2\2\2\u28f5")
        buf.write("\u28c8\3\2\2\2\u28f5\u28c9\3\2\2\2\u28f5\u28ca\3\2\2\2")
        buf.write("\u28f5\u28cb\3\2\2\2\u28f5\u28cc\3\2\2\2\u28f5\u28cd\3")
        buf.write("\2\2\2\u28f5\u28ce\3\2\2\2\u28f5\u28cf\3\2\2\2\u28f5\u28d0")
        buf.write("\3\2\2\2\u28f5\u28d1\3\2\2\2\u28f5\u28d2\3\2\2\2\u28f5")
        buf.write("\u28d3\3\2\2\2\u28f5\u28d4\3\2\2\2\u28f5\u28d5\3\2\2\2")
        buf.write("\u28f5\u28d6\3\2\2\2\u28f5\u28d7\3\2\2\2\u28f5\u28d8\3")
        buf.write("\2\2\2\u28f5\u28d9\3\2\2\2\u28f5\u28da\3\2\2\2\u28f5\u28db")
        buf.write("\3\2\2\2\u28f5\u28dc\3\2\2\2\u28f5\u28dd\3\2\2\2\u28f5")
        buf.write("\u28de\3\2\2\2\u28f5\u28df\3\2\2\2\u28f5\u28e0\3\2\2\2")
        buf.write("\u28f5\u28e1\3\2\2\2\u28f5\u28e2\3\2\2\2\u28f5\u28e3\3")
        buf.write("\2\2\2\u28f5\u28e4\3\2\2\2\u28f5\u28e5\3\2\2\2\u28f5\u28e6")
        buf.write("\3\2\2\2\u28f5\u28e7\3\2\2\2\u28f5\u28e8\3\2\2\2\u28f5")
        buf.write("\u28e9\3\2\2\2\u28f5\u28ea\3\2\2\2\u28f5\u28eb\3\2\2\2")
        buf.write("\u28f5\u28ec\3\2\2\2\u28f5\u28ed\3\2\2\2\u28f5\u28ee\3")
        buf.write("\2\2\2\u28f5\u28ef\3\2\2\2\u28f5\u28f0\3\2\2\2\u28f5\u28f1")
        buf.write("\3\2\2\2\u28f5\u28f2\3\2\2\2\u28f5\u28f3\3\2\2\2\u28f5")
        buf.write("\u28f4\3\2\2\2\u28f6\u0595\3\2\2\2\u28f7\u28f8\tA\2\2")
        buf.write("\u28f8\u0597\3\2\2\2\u28f9\u28fa\tB\2\2\u28fa\u0599\3")
        buf.write("\2\2\2\u28fb\u28fc\tC\2\2\u28fc\u059b\3\2\2\2\u28fd\u28fe")
        buf.write("\5\u0588\u02c5\2\u28fe\u059d\3\2\2\2\u28ff\u2901\7\u022c")
        buf.write("\2\2\u2900\u2902\5\u057e\u02c0\2\u2901\u2900\3\2\2\2\u2901")
        buf.write("\u2902\3\2\2\2\u2902\u2907\3\2\2\2\u2903\u2907\7\u022d")
        buf.write("\2\2\u2904\u2907\7\u0231\2\2\u2905\u2907\7\u0248\2\2\u2906")
        buf.write("\u28ff\3\2\2\2\u2906\u2903\3\2\2\2\u2906\u2904\3\2\2\2")
        buf.write("\u2906\u2905\3\2\2\2\u2907\u059f\3\2\2\2\u0418\u05a6\u05aa")
        buf.write("\u05ae\u062d\u0636\u063f\u0645\u064b\u065a\u0666\u066c")
        buf.write("\u0674\u067f\u0683\u068b\u0693\u06a5\u06a8\u06ad\u06b6")
        buf.write("\u06bf\u06c3\u06cf\u06d5\u06e5\u06f2\u06f9\u0701\u0706")
        buf.write("\u070d\u0713\u071a\u0725\u0729\u072d\u073a\u073e\u0743")
        buf.write("\u0748\u0754\u075d\u076a\u076f\u077a\u0780\u0786\u078b")
        buf.write("\u0796\u079c\u07a2\u07ab\u07b5\u07c4\u07ca\u07d1\u07d6")
        buf.write("\u07dd\u07e8\u0800\u0807\u0810\u0819\u0821\u082b\u0834")
        buf.write("\u083d\u0845\u084d\u0856\u085f\u0863\u086a\u0872\u087c")
        buf.write("\u0882\u0886\u088a\u088e\u0892\u0897\u089a\u089e\u08b3")
        buf.write("\u08b9\u0918\u091f\u092f\u093d\u0947\u0949\u094e\u0952")
        buf.write("\u0955\u095b\u095d\u0979\u0983\u0990\u0997\u099d\u09a1")
        buf.write("\u09a7\u09ac\u09af\u09b1\u09b6\u09ba\u09be\u09c2\u09c6")
        buf.write("\u09c9\u09cd\u09d5\u09d9\u09dd\u09e6\u09ed\u09f2\u09f9")
        buf.write("\u09fe\u0a05\u0a0a\u0a1c\u0a21\u0a2d\u0a32\u0a3b\u0a42")
        buf.write("\u0a49\u0a4f\u0a54\u0a58\u0a5b\u0a5e\u0a61\u0a64\u0a67")
        buf.write("\u0a6c\u0a6f\u0a72\u0a75\u0a78\u0a7b\u0a81\u0a85\u0a88")
        buf.write("\u0a8b\u0a8e\u0a91\u0a93\u0a9c\u0aa9\u0ab1\u0ab7\u0abb")
        buf.write("\u0ac0\u0ac7\u0ace\u0ad9\u0ae0\u0ae3\u0ae8\u0aeb\u0af2")
        buf.write("\u0afb\u0b02\u0b07\u0b0a\u0b0d\u0b0f\u0b14\u0b1b\u0b25")
        buf.write("\u0b2f\u0b3c\u0b3f\u0b42\u0b49\u0b51\u0b54\u0b57\u0b5e")
        buf.write("\u0b62\u0b68\u0b6b\u0b6e\u0b71\u0b7d\u0b80\u0b83\u0b87")
        buf.write("\u0b95\u0ba7\u0bb2\u0bc1\u0bd1\u0be6\u0beb\u0bee\u0bf2")
        buf.write("\u0bf5\u0bfb\u0bfe\u0c00\u0c09\u0c12\u0c25\u0c29\u0c34")
        buf.write("\u0c3d\u0c43\u0c49\u0c4d\u0c50\u0c53\u0c56\u0c59\u0c5f")
        buf.write("\u0c63\u0c6a\u0c70\u0c74\u0c77\u0c7a\u0c7d\u0c85\u0c89")
        buf.write("\u0c8d\u0c93\u0c97\u0c9d\u0cab\u0cb4\u0cc5\u0cca\u0ccd")
        buf.write("\u0ccf\u0cd9\u0ce0\u0ce5\u0ce8\u0ceb\u0cf2\u0cf5\u0cf7")
        buf.write("\u0cfd\u0d06\u0d10\u0d15\u0d1e\u0d27\u0d2b\u0d32\u0d3c")
        buf.write("\u0d47\u0db5\u0dbd\u0dc0\u0dca\u0dcf\u0dd9\u0de4\u0df0")
        buf.write("\u0dfd\u0e07\u0e14\u0e17\u0e1e\u0e27\u0e2a\u0e31\u0e33")
        buf.write("\u0e3b\u0e45\u0e47\u0e4f\u0e53\u0e58\u0e63\u0e67\u0e6c")
        buf.write("\u0e76\u0e7c\u0e89\u0e8f\u0e91\u0e98\u0ea0\u0ea5\u0eb4")
        buf.write("\u0ec1\u0ec3\u0ec7\u0edb\u0eec\u0eef\u0ef2\u0ef5\u0ef8")
        buf.write("\u0f00\u0f03\u0f06\u0f34\u0f37\u0f3a\u0f4c\u0f53\u0f5c")
        buf.write("\u0f62\u0f69\u0f73\u0f7b\u0f80\u0f8c\u0f9d\u0fa3\u0faa")
        buf.write("\u0fb2\u0fc0\u0fdc\u0fe3\u0ff1\u1000\u100d\u1016\u102f")
        buf.write("\u103a\u107d\u1088\u108e\u1096\u10a1\u10af\u10b8\u10c2")
        buf.write("\u10ce\u10dd\u10e8\u10f0\u10fa\u1101\u1104\u110a\u110d")
        buf.write("\u111c\u1129\u1146\u114d\u115c\u1165\u1170\u1172\u117b")
        buf.write("\u1186\u1188\u118f\u119e\u11a4\u11ac\u11b2\u11ba\u11c4")
        buf.write("\u11ca\u11d2\u11d8\u11e0\u11e7\u11f0\u11f2\u120b\u1212")
        buf.write("\u121d\u1223\u122c\u1231\u1237\u123e\u1243\u1247\u124a")
        buf.write("\u1250\u12e5\u12e9\u12ee\u12f9\u1304\u130f\u131a\u1325")
        buf.write("\u1330\u133b\u1347\u1352\u135a\u1361\u1367\u136f\u1374")
        buf.write("\u1379\u137e\u1384\u138b\u1391\u1397\u139c\u13a2\u13a9")
        buf.write("\u13ae\u13b4\u13bb\u13be\u13cb\u13d4\u13e0\u13e2\u13f3")
        buf.write("\u13fa\u13ff\u1403\u1407\u140b\u140d\u1449\u1450\u1456")
        buf.write("\u1461\u1464\u146b\u146e\u1478\u147b\u147d\u1490\u149c")
        buf.write("\u14a5\u14ae\u14ba\u14bc\u14c2\u14c6\u14c9\u14ce\u14d4")
        buf.write("\u14d7\u14da\u14dd\u14e1\u14e5\u14ee\u14f4\u14f7\u14fa")
        buf.write("\u14fd\u14ff\u1511\u1515\u1518\u151b\u151e\u1521\u1526")
        buf.write("\u1529\u152b\u1538\u1544\u1552\u1556\u1562\u1564\u156d")
        buf.write("\u1576\u157e\u1587\u1589\u158d\u1596\u159b\u15a1\u15a6")
        buf.write("\u15aa\u15af\u15b7\u15be\u15c3\u15d2\u15db\u15e6\u15ec")
        buf.write("\u1613\u161d\u1624\u162f\u163d\u1645\u164a\u1652\u165a")
        buf.write("\u1660\u1668\u166e\u1676\u1678\u167e\u1686\u1688\u168e")
        buf.write("\u1696\u1698\u16b0\u16b7\u16c1\u16cd\u16d2\u16df\u16eb")
        buf.write("\u16f7\u16f9\u16ff\u1704\u170c\u1713\u1740\u1745\u174c")
        buf.write("\u1750\u1754\u175a\u175e\u1763\u1767\u176a\u176c\u1782")
        buf.write("\u17c9\u188c\u1899\u18a4\u18b1\u18bd\u18cb\u18eb\u18f9")
        buf.write("\u1969\u196b\u1976\u1981\u198c\u1999\u19a5\u19b0\u19b7")
        buf.write("\u1a94\u1aa3\u1aae\u1ab5\u1aeb\u1b78\u1b7e\u1b81\u1b8b")
        buf.write("\u1ba8\u1bb2\u1bb9\u1bd0\u1bd9\u1be5\u1beb\u1bf3\u1bf5")
        buf.write("\u1bf9\u1c03\u1c07\u1c11\u1c14\u1c18\u1c1c\u1c24\u1c2f")
        buf.write("\u1c3b\u1c3f\u1c42\u1c46\u1c49\u1c4e\u1c52\u1c55\u1c59")
        buf.write("\u1c5c\u1c60\u1c63\u1c6e\u1c75\u1c82\u1c90\u1c94\u1c99")
        buf.write("\u1ca0\u1ca7\u1caa\u1caf\u1cb2\u1cbb\u1cbd\u1cc2\u1cc6")
        buf.write("\u1cd2\u1cd5\u1cdc\u1ce0\u1ce5\u1cef\u1cf8\u1cfb\u1d00")
        buf.write("\u1d0b\u1d0f\u1d15\u1d1c\u1d30\u1d45\u1d49\u1d4e\u1da1")
        buf.write("\u1da7\u1db4\u1db8\u1dbc\u1dc0\u1dc6\u1dcd\u1dd0\u1dd3")
        buf.write("\u1dd6\u1dd9\u1de0\u1de2\u1de6\u1de9\u1df0\u1df2\u1df9")
        buf.write("\u1e01\u1e08\u1e0d\u1e11\u1e15\u1e19\u1e1d\u1e2d\u1e34")
        buf.write("\u1e3e\u1e4b\u1e56\u1e5d\u1e62\u1e66\u1e6a\u1e6f\u1e7c")
        buf.write("\u1e81\u1e85\u1e8d\u1e90\u1e94\u1e9f\u1ea2\u1ea4\u1eb4")
        buf.write("\u1eb7\u1ebe\u1ec1\u1ec6\u1ed5\u1edb\u1ee4\u1eed\u1ef4")
        buf.write("\u1ef7\u1efd\u1f02\u1f09\u1f0d\u1f12\u1f15\u1f1b\u1f1f")
        buf.write("\u1f21\u1f24\u1f2b\u1f2e\u1f35\u1f3d\u1f40\u1f49\u1f4e")
        buf.write("\u1f54\u1f57\u1f5a\u1f61\u1f65\u1f68\u1f77\u1f7a\u1f81")
        buf.write("\u1f84\u1f8b\u1f8e\u1f91\u1f98\u1fa5\u1faf\u1fb7\u1fc3")
        buf.write("\u1fc5\u1fcc\u1fd0\u1fda\u1fde\u1fe2\u1fe6\u1fe8\u1fed")
        buf.write("\u1ff1\u1ff5\u1ff7\u1ff9\u1ffe\u2003\u2009\u200e\u2013")
        buf.write("\u2016\u2019\u201c\u201f\u2022\u2025\u2028\u202d\u2030")
        buf.write("\u2033\u2036\u2039\u203c\u203e\u2044\u2048\u2051\u2056")
        buf.write("\u205a\u2063\u206d\u2071\u2076\u207c\u2088\u2097\u209e")
        buf.write("\u20a0\u20a3\u20a7\u20ab\u20ad\u20b5\u20be\u20c4\u20c6")
        buf.write("\u20c8\u20cf\u20d3\u20dc\u20e0\u20ef\u20f7\u2113\u211a")
        buf.write("\u211e\u2121\u2126\u212a\u212d\u213d\u2148\u214d\u2150")
        buf.write("\u2154\u2158\u215c\u2161\u2165\u2169\u216b\u2174\u2179")
        buf.write("\u217f\u2183\u2185\u218c\u2191\u2197\u2199\u219d\u21a4")
        buf.write("\u21a9\u21ac\u21b2\u21b6\u21bf\u21c3\u21cb\u21cd\u21d4")
        buf.write("\u21d9\u21dc\u21e4\u21ed\u21f5\u21f7\u21fb\u2202\u2215")
        buf.write("\u221e\u2224\u2237\u2240\u2246\u224a\u224f\u2259\u2260")
        buf.write("\u2269\u226c\u2275\u2277\u227b\u2280\u228a\u2290\u2293")
        buf.write("\u229a\u229e\u22a1\u22ae\u22b4\u22b8\u22bc\u22bf\u22c7")
        buf.write("\u22cb\u22cf\u22d7\u22de\u22e5\u22e9\u22ef\u22f1\u22fa")
        buf.write("\u22fd\u2307\u2317\u231d\u2322\u2329\u2336\u233d\u2345")
        buf.write("\u234d\u2352\u2356\u235c\u2360\u2364\u2367\u236d\u2372")
        buf.write("\u2382\u2385\u2387\u2393\u2395\u2399\u239f\u23a3\u23a5")
        buf.write("\u23ad\u23b1\u23ba\u23c2\u23c8\u23cb\u23d4\u23d9\u23e0")
        buf.write("\u23ea\u2404\u240f\u2411\u2413\u241b\u2431\u243a\u2444")
        buf.write("\u2447\u244c\u2451\u2455\u245b\u245e\u2461\u2464\u2468")
        buf.write("\u2476\u247d\u2484\u248b\u249e\u24a6\u24ae\u24b0\u24b6")
        buf.write("\u24bd\u24bf\u24cc\u24f3\u24f5\u2509\u2513\u251e\u252f")
        buf.write("\u2532\u2535\u2538\u253a\u2541\u2544\u2548\u254b\u254e")
        buf.write("\u2550\u2557\u2564\u2571\u2574\u2578\u257b\u2585\u2588")
        buf.write("\u2592\u2595\u2598\u259c\u25a3\u25af\u25bb\u25c1\u25c9")
        buf.write("\u25da\u25f3\u25fd\u2601\u2604\u2607\u260a\u2617\u261c")
        buf.write("\u2621\u2623\u262b\u2634\u263d\u2642\u264b\u2650\u265e")
        buf.write("\u2668\u2670\u267e\u2685\u268d\u2695\u269c\u26a2\u26ab")
        buf.write("\u26ba\u26c5\u26e5\u26ee\u26f5\u26f9\u26fd\u2704\u2712")
        buf.write("\u2717\u271c\u2720\u2722\u2725\u272c\u2731\u273f\u275f")
        buf.write("\u2764\u2770\u2781\u2789\u2791\u27a1\u27a6\u27b1\u27bd")
        buf.write("\u27c7\u27d2\u27da\u27e2\u27ec\u27f3\u27f6\u27ff\u2802")
        buf.write("\u2807\u2814\u281c\u281f\u2826\u282b\u2832\u283f\u284b")
        buf.write("\u2850\u2858\u285f\u2864\u2870\u2878\u287d\u2887\u288e")
        buf.write("\u2895\u289b\u28a0\u28a6\u28ae\u28b2\u28f5\u2901\u2906")
        return buf.getvalue()


class PostgreSQLParser ( PostgreSQLParserBase ):

    grammarFileName = "PostgreSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'$'", "'('", "')'", "'['", "']'", "','", 
                     "';'", "':'", "'*'", "'='", "'.'", "'+'", "'-'", "'/'", 
                     "'^'", "'<'", "'>'", "'<<'", "'>>'", "':='", "'<='", 
                     "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", "<INVALID>", 
                     "<INVALID>", "'JSON'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", 
                     "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", 
                     "'JSON_QUERY'", "'JSON_SCALAR'", "'JSON_SERIALIZE'", 
                     "'JSON_TABLE'", "'JSON_VALUE'", "'MERGE_ACTION'", "'SYSTEM_USER'", 
                     "'ABSENT'", "'ASENSITIVE'", "'ATOMIC'", "'BREATH'", 
                     "'COMPRESSION'", "'CONDITIONAL'", "'DEPTH'", "'EMPTY'", 
                     "'FINALIZE'", "'INDENT'", "'KEEP'", "'KEYS'", "'NESTED'", 
                     "'OMIT'", "'PARAMETER'", "'PATH'", "'PLAN'", "'QUOTES'", 
                     "'SCALAR'", "'SOURCE'", "'STRING'", "'TARGET'", "'UNCONDITIONAL'", 
                     "'PERIOD'", "'FORMAT_LA'", "'ALL'", "'ANALYSE'", "'ANALYZE'", 
                     "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'ASYMMETRIC'", 
                     "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", 
                     "'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", 
                     "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
                     "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DEFAULT'", 
                     "'DEFERRABLE'", "'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", 
                     "'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", 
                     "'FROM'", "'GRANT'", "'GROUP'", "'HAVING'", "'IN'", 
                     "'INITIALLY'", "'INTERSECT'", "'INTO'", "'LATERAL'", 
                     "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
                     "'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", 
                     "'ORDER'", "'PLACING'", "'PRIMARY'", "'REFERENCES'", 
                     "'RETURNING'", "'SELECT'", "'SESSION_USER'", "'SOME'", 
                     "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", 
                     "'TRUE'", "'UNION'", "'UNIQUE'", "'USER'", "'USING'", 
                     "'VARIADIC'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", 
                     "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
                     "'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", 
                     "'ILIKE'", "'INNER'", "'IS'", "'ISNULL'", "'JOIN'", 
                     "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", "'OUTER'", 
                     "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", 
                     "'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", 
                     "'ADMIN'", "'AFTER'", "'AGGREGATE'", "'ALSO'", "'ALTER'", 
                     "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", "'AT'", 
                     "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", 
                     "'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", 
                     "'CATALOG'", "'CHAIN'", "'CHARACTERISTICS'", "'CHECKPOINT'", 
                     "'CLASS'", "'CLOSE'", "'CLUSTER'", "'COMMENT'", "'COMMENTS'", 
                     "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", "'CONNECTION'", 
                     "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
                     "'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", 
                     "'DATA'", "'DATABASE'", "'DAY'", "'DEALLOCATE'", "'DECLARE'", 
                     "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", "'DELETE'", 
                     "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", 
                     "'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", 
                     "'DROP'", "'EACH'", "'ENABLE'", "'ENCODING'", "'ENCRYPTED'", 
                     "'ENUM'", "'ESCAPE'", "'EVENT'", "'EXCLUDE'", "'EXCLUDING'", 
                     "'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", 
                     "'EXTERNAL'", "'FAMILY'", "'FIRST'", "'FOLLOWING'", 
                     "'FORCE'", "'FORWARD'", "'FUNCTION'", "'FUNCTIONS'", 
                     "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", "'HOLD'", 
                     "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", 
                     "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", 
                     "'INDEXES'", "'INHERIT'", "'INHERITS'", "'INLINE'", 
                     "'INSENSITIVE'", "'INSERT'", "'INSTEAD'", "'INVOKER'", 
                     "'ISOLATION'", "'KEY'", "'LABEL'", "'LANGUAGE'", "'LARGE'", 
                     "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", "'LOAD'", 
                     "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", 
                     "'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", "'MERGE'", 
                     "'MINUTE'", "'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", 
                     "'NAME'", "'NAMES'", "'NEXT'", "'NO'", "'NOTHING'", 
                     "'NOTIFY'", "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", 
                     "'OFF'", "'OIDS'", "'OPERATOR'", "'OPTION'", "'OPTIONS'", 
                     "'OWNED'", "'OWNER'", "'PARSER'", "'PARTIAL'", "'PARTITION'", 
                     "'PASSING'", "'PASSWORD'", "'PLANS'", "'PRECEDING'", 
                     "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", 
                     "'PRIVILEGES'", "'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", 
                     "'QUOTE'", "'RANGE'", "'READ'", "'REASSIGN'", "'RECHECK'", 
                     "'RECURSIVE'", "'REF'", "'REFRESH'", "'REINDEX'", "'RELATIVE'", 
                     "'RELEASE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", 
                     "'REPLICA'", "'RESET'", "'RESTART'", "'RESTRICT'", 
                     "'RETURNS'", "'REVOKE'", "'ROLE'", "'ROLLBACK'", "'ROWS'", 
                     "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", "'SEARCH'", 
                     "'SECOND'", "'SECURITY'", "'SEQUENCE'", "'SEQUENCES'", 
                     "'SERIALIZABLE'", "'SERVER'", "'SESSION'", "'SET'", 
                     "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", "'STABLE'", 
                     "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", 
                     "'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", 
                     "'SYSID'", "'SYSTEM'", "'TABLES'", "'TABLESPACE'", 
                     "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", "'TEXT'", "'TRANSACTION'", 
                     "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", "'TYPES'", 
                     "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", "'UNKNOWN'", 
                     "'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", 
                     "'VACUUM'", "'VALID'", "'VALIDATE'", "'VALIDATOR'", 
                     "'VARYING'", "'VERSION'", "'VIEW'", "'VOLATILE'", "'WHITESPACE'", 
                     "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", 
                     "'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", 
                     "'BIT'", "'BOOLEAN'", "'CHAR'", "'CHARACTER'", "'COALESCE'", 
                     "'DEC'", "'DECIMAL'", "'EXISTS'", "'EXTRACT'", "'FLOAT'", 
                     "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", "'INTERVAL'", 
                     "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", 
                     "'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", 
                     "'REAL'", "'ROW'", "'SETOF'", "'SMALLINT'", "'SUBSTRING'", 
                     "'TIME'", "'TIMESTAMP'", "'TREAT'", "'TRIM'", "'VALUES'", 
                     "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCOMMENT'", "'XMLAGG'", 
                     "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", 
                     "'XML_IS_WELL_FORMED_CONTENT'", "'XPATH'", "'XPATH_EXISTS'", 
                     "'XMLCONCAT'", "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", 
                     "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
                     "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", 
                     "'GENERATED'", "'LOGGED'", "'STORED'", "'INCLUDE'", 
                     "'ROUTINE'", "'TRANSFORM'", "'IMPORT'", "'POLICY'", 
                     "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", "'VALUE'", 
                     "'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", 
                     "'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", "'INPUT'", 
                     "'SUPPORT'", "'PARALLEL'", "'SQL'", "'DEPENDS'", "'OVERRIDING'", 
                     "'CONFLICT'", "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", 
                     "'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", 
                     "'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", "'XMLNAMESPACES'", 
                     "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", "'FILTER'", 
                     "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", 
                     "'NFKD'", "'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", 
                     "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'CONSTANT'", 
                     "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", 
                     "'ELSIF'", "'WHILE'", "'FOREACH'", "'SLICE'", "'EXIT'", 
                     "'RETURN'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", "'INFO'", 
                     "'NOTICE'", "'WARNING'", "'EXCEPTION'", "'ASSERT'", 
                     "'LOOP'", "'OPEN'", "'FORMAT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\\'", "'''" ]

    symbolicNames = [ "<INVALID>", "Dollar", "OPEN_PAREN", "CLOSE_PAREN", 
                      "OPEN_BRACKET", "CLOSE_BRACKET", "COMMA", "SEMI", 
                      "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", 
                      "SLASH", "CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", 
                      "COLON_EQUALS", "LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", 
                      "DOT_DOT", "NOT_EQUALS", "TYPECAST", "PERCENT", "PARAM", 
                      "Operator", "JSON", "JSON_ARRAY", "JSON_ARRAYAGG", 
                      "JSON_EXISTS", "JSON_OBJECT", "JSON_OBJECTAGG", "JSON_QUERY", 
                      "JSON_SCALAR", "JSON_SERIALIZE", "JSON_TABLE", "JSON_VALUE", 
                      "MERGE_ACTION", "SYSTEM_USER", "ABSENT", "ASENSITIVE", 
                      "ATOMIC", "BREADTH", "COMPRESSION", "CONDITIONAL", 
                      "DEPTH", "EMPTY_P", "FINALIZE", "INDENT", "KEEP", 
                      "KEYS", "NESTED", "OMIT", "PARAMETER", "PATH", "PLAN", 
                      "QUOTES", "SCALAR", "SOURCE", "STRING_P", "TARGET", 
                      "UNCONDITIONAL", "PERIOD", "FORMAT_LA", "ALL", "ANALYSE", 
                      "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", 
                      "BOTH", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", 
                      "CONSTRAINT", "CREATE", "CURRENT_CATALOG", "CURRENT_DATE", 
                      "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", 
                      "DO", "ELSE", "EXCEPT", "FALSE_P", "FETCH", "FOR", 
                      "FOREIGN", "FROM", "GRANT", "GROUP_P", "HAVING", "IN_P", 
                      "INITIALLY", "INTERSECT", "INTO", "LATERAL_P", "LEADING", 
                      "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL_P", 
                      "OFFSET", "ON", "ONLY", "OR", "ORDER", "PLACING", 
                      "PRIMARY", "REFERENCES", "RETURNING", "SELECT", "SESSION_USER", 
                      "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", "TRAILING", 
                      "TRUE_P", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", 
                      "BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", 
                      "FREEZE", "FULL", "ILIKE", "INNER_P", "IS", "ISNULL", 
                      "JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", "OUTER_P", 
                      "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", 
                      "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", 
                      "ADMIN", "AFTER", "AGGREGATE", "ALSO", "ALTER", "ALWAYS", 
                      "ASSERTION", "ASSIGNMENT", "AT", "ATTRIBUTE", "BACKWARD", 
                      "BEFORE", "BEGIN_P", "BY", "CACHE", "CALLED", "CASCADE", 
                      "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
                      "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COMMENT", 
                      "COMMENTS", "COMMIT", "COMMITTED", "CONFIGURATION", 
                      "CONNECTION", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", 
                      "CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", 
                      "DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DECLARE", 
                      "DEFAULTS", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", 
                      "DELIMITERS", "DICTIONARY", "DISABLE_P", "DISCARD", 
                      "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", 
                      "ENABLE_P", "ENCODING", "ENCRYPTED", "ENUM_P", "ESCAPE", 
                      "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
                      "EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FIRST_P", 
                      "FOLLOWING", "FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", 
                      "GLOBAL", "GRANTED", "HANDLER", "HEADER_P", "HOLD", 
                      "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", "IMMUTABLE", 
                      "IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", 
                      "INHERIT", "INHERITS", "INLINE_P", "INSENSITIVE", 
                      "INSERT", "INSTEAD", "INVOKER", "ISOLATION", "KEY", 
                      "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LEAKPROOF", 
                      "LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", 
                      "MAPPING", "MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", 
                      "MERGE", "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", 
                      "MOVE", "NAME_P", "NAMES", "NEXT", "NO", "NOTHING", 
                      "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", "OFF", 
                      "OIDS", "OPERATOR", "OPTION", "OPTIONS", "OWNED", 
                      "OWNER", "PARSER", "PARTIAL", "PARTITION", "PASSING", 
                      "PASSWORD", "PLANS", "PRECEDING", "PREPARE", "PREPARED", 
                      "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", 
                      "PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", 
                      "RECURSIVE", "REF", "REFRESH", "REINDEX", "RELATIVE_P", 
                      "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", 
                      "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", 
                      "ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", 
                      "SCROLL", "SEARCH", "SECOND_P", "SECURITY", "SEQUENCE", 
                      "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", 
                      "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", 
                      "STANDALONE_P", "START", "STATEMENT", "STATISTICS", 
                      "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", 
                      "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", "TEMP", 
                      "TEMPLATE", "TEMPORARY", "TEXT_P", "TRANSACTION", 
                      "TRIGGER", "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", 
                      "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", 
                      "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "VACUUM", 
                      "VALID", "VALIDATE", "VALIDATOR", "VARYING", "VERSION_P", 
                      "VIEW", "VOLATILE", "WHITESPACE_P", "WITHOUT", "WORK", 
                      "WRAPPER", "WRITE", "XML_P", "YEAR_P", "YES_P", "ZONE", 
                      "BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", 
                      "CHARACTER", "COALESCE", "DEC", "DECIMAL_P", "EXISTS", 
                      "EXTRACT", "FLOAT_P", "GREATEST", "INOUT", "INT_P", 
                      "INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", 
                      "NONE", "NULLIF", "NUMERIC", "OVERLAY", "POSITION", 
                      "PRECISION", "REAL", "ROW", "SETOF", "SMALLINT", "SUBSTRING", 
                      "TIME", "TIMESTAMP", "TREAT", "TRIM", "VALUES", "VARCHAR", 
                      "XMLATTRIBUTES", "XMLCOMMENT", "XMLAGG", "XML_IS_WELL_FORMED", 
                      "XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", 
                      "XPATH", "XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", 
                      "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
                      "XMLSERIALIZE", "CALL", "CURRENT_P", "ATTACH", "DETACH", 
                      "EXPRESSION", "GENERATED", "LOGGED", "STORED", "INCLUDE", 
                      "ROUTINE", "TRANSFORM", "IMPORT_P", "POLICY", "METHOD", 
                      "REFERENCING", "NEW", "OLD", "VALUE_P", "SUBSCRIPTION", 
                      "PUBLICATION", "OUT_P", "END_P", "ROUTINES", "SCHEMAS", 
                      "PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", "SQL_P", 
                      "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", 
                      "TIES", "ROLLUP", "CUBE", "GROUPING", "SETS", "TABLESAMPLE", 
                      "ORDINALITY", "XMLTABLE", "COLUMNS", "XMLNAMESPACES", 
                      "ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", "GROUPS", 
                      "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", 
                      "VIEWS", "NORMALIZE", "DUMP", "ERROR", "USE_VARIABLE", 
                      "USE_COLUMN", "CONSTANT", "PERFORM", "GET", "DIAGNOSTICS", 
                      "STACKED", "ELSIF", "WHILE", "FOREACH", "SLICE", "EXIT", 
                      "RETURN", "RAISE", "SQLSTATE", "DEBUG", "INFO", "NOTICE", 
                      "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", 
                      "FORMAT", "Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", 
                      "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
                      "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
                      "InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
                      "StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
                      "UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
                      "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
                      "InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
                      "HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
                      "InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
                      "Integral", "BinaryIntegral", "OctalIntegral", "HexadecimalIntegral", 
                      "NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", 
                      "Whitespace", "Newline", "LineComment", "BlockComment", 
                      "UnterminatedBlockComment", "ErrorCharacter", "EscapeStringConstant", 
                      "UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", 
                      "InvalidUnterminatedEscapeStringConstant", "AfterEscapeStringConstantMode_NotContinued", 
                      "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
                      "DollarText", "EndDollarStringConstant", "MetaCommand", 
                      "AfterEscapeStringConstantWithNewlineMode_Continued" ]

    RULE_root = 0
    RULE_stmtblock = 1
    RULE_stmtmulti = 2
    RULE_stmt = 3
    RULE_callstmt = 4
    RULE_createrolestmt = 5
    RULE_with_ = 6
    RULE_optrolelist = 7
    RULE_alteroptrolelist = 8
    RULE_alteroptroleelem = 9
    RULE_createoptroleelem = 10
    RULE_createuserstmt = 11
    RULE_alterrolestmt = 12
    RULE_in_database_ = 13
    RULE_alterrolesetstmt = 14
    RULE_droprolestmt = 15
    RULE_creategroupstmt = 16
    RULE_altergroupstmt = 17
    RULE_add_drop = 18
    RULE_createschemastmt = 19
    RULE_optschemaname = 20
    RULE_optschemaeltlist = 21
    RULE_schema_stmt = 22
    RULE_variablesetstmt = 23
    RULE_set_rest = 24
    RULE_generic_set = 25
    RULE_set_rest_more = 26
    RULE_var_name = 27
    RULE_var_list = 28
    RULE_var_value = 29
    RULE_iso_level = 30
    RULE_boolean_or_string_ = 31
    RULE_zone_value = 32
    RULE_encoding_ = 33
    RULE_nonreservedword_or_sconst = 34
    RULE_variableresetstmt = 35
    RULE_reset_rest = 36
    RULE_generic_reset = 37
    RULE_setresetclause = 38
    RULE_functionsetresetclause = 39
    RULE_variableshowstmt = 40
    RULE_constraintssetstmt = 41
    RULE_constraints_set_list = 42
    RULE_constraints_set_mode = 43
    RULE_checkpointstmt = 44
    RULE_discardstmt = 45
    RULE_altertablestmt = 46
    RULE_alter_table_cmds = 47
    RULE_partition_cmd = 48
    RULE_index_partition_cmd = 49
    RULE_alter_table_cmd = 50
    RULE_alter_column_default = 51
    RULE_drop_behavior_ = 52
    RULE_collate_clause_ = 53
    RULE_alter_using = 54
    RULE_replica_identity = 55
    RULE_reloptions = 56
    RULE_reloptions_ = 57
    RULE_reloption_list = 58
    RULE_reloption_elem = 59
    RULE_alter_identity_column_option_list = 60
    RULE_alter_identity_column_option = 61
    RULE_partitionboundspec = 62
    RULE_hash_partbound_elem = 63
    RULE_hash_partbound = 64
    RULE_altercompositetypestmt = 65
    RULE_alter_type_cmds = 66
    RULE_alter_type_cmd = 67
    RULE_closeportalstmt = 68
    RULE_copystmt = 69
    RULE_copy_from = 70
    RULE_program_ = 71
    RULE_copy_file_name = 72
    RULE_copy_options = 73
    RULE_copy_opt_list = 74
    RULE_copy_opt_item = 75
    RULE_binary_ = 76
    RULE_copy_delimiter = 77
    RULE_using_ = 78
    RULE_copy_generic_opt_list = 79
    RULE_copy_generic_opt_elem = 80
    RULE_copy_generic_opt_arg = 81
    RULE_copy_generic_opt_arg_list = 82
    RULE_copy_generic_opt_arg_list_item = 83
    RULE_createstmt = 84
    RULE_opttemp = 85
    RULE_opttableelementlist = 86
    RULE_opttypedtableelementlist = 87
    RULE_tableelementlist = 88
    RULE_typedtableelementlist = 89
    RULE_tableelement = 90
    RULE_typedtableelement = 91
    RULE_columnDef = 92
    RULE_columnOptions = 93
    RULE_colquallist = 94
    RULE_colconstraint = 95
    RULE_colconstraintelem = 96
    RULE_generated_when = 97
    RULE_constraintattr = 98
    RULE_tablelikeclause = 99
    RULE_tablelikeoptionlist = 100
    RULE_tablelikeoption = 101
    RULE_tableconstraint = 102
    RULE_constraintelem = 103
    RULE_no_inherit_ = 104
    RULE_column_list_ = 105
    RULE_columnlist = 106
    RULE_columnElem = 107
    RULE_c_include_ = 108
    RULE_key_match = 109
    RULE_exclusionconstraintlist = 110
    RULE_exclusionconstraintelem = 111
    RULE_exclusionwhereclause = 112
    RULE_key_actions = 113
    RULE_key_update = 114
    RULE_key_delete = 115
    RULE_key_action = 116
    RULE_optinherit = 117
    RULE_optpartitionspec = 118
    RULE_partitionspec = 119
    RULE_part_params = 120
    RULE_part_elem = 121
    RULE_table_access_method_clause = 122
    RULE_optwith = 123
    RULE_oncommitoption = 124
    RULE_opttablespace = 125
    RULE_optconstablespace = 126
    RULE_existingindex = 127
    RULE_createstatsstmt = 128
    RULE_alterstatsstmt = 129
    RULE_createasstmt = 130
    RULE_create_as_target = 131
    RULE_with_data_ = 132
    RULE_creatematviewstmt = 133
    RULE_create_mv_target = 134
    RULE_optnolog = 135
    RULE_refreshmatviewstmt = 136
    RULE_createseqstmt = 137
    RULE_alterseqstmt = 138
    RULE_optseqoptlist = 139
    RULE_optparenthesizedseqoptlist = 140
    RULE_seqoptlist = 141
    RULE_seqoptelem = 142
    RULE_by_ = 143
    RULE_numericonly = 144
    RULE_numericonly_list = 145
    RULE_createplangstmt = 146
    RULE_trusted_ = 147
    RULE_handler_name = 148
    RULE_inline_handler_ = 149
    RULE_validator_clause = 150
    RULE_validator_ = 151
    RULE_procedural_ = 152
    RULE_createtablespacestmt = 153
    RULE_opttablespaceowner = 154
    RULE_droptablespacestmt = 155
    RULE_createextensionstmt = 156
    RULE_create_extension_opt_list = 157
    RULE_create_extension_opt_item = 158
    RULE_alterextensionstmt = 159
    RULE_alter_extension_opt_list = 160
    RULE_alter_extension_opt_item = 161
    RULE_alterextensioncontentsstmt = 162
    RULE_createfdwstmt = 163
    RULE_fdw_option = 164
    RULE_fdw_options = 165
    RULE_fdw_options_ = 166
    RULE_alterfdwstmt = 167
    RULE_create_generic_options = 168
    RULE_generic_option_list = 169
    RULE_alter_generic_options = 170
    RULE_alter_generic_option_list = 171
    RULE_alter_generic_option_elem = 172
    RULE_generic_option_elem = 173
    RULE_generic_option_name = 174
    RULE_generic_option_arg = 175
    RULE_createforeignserverstmt = 176
    RULE_type_ = 177
    RULE_foreign_server_version = 178
    RULE_foreign_server_version_ = 179
    RULE_alterforeignserverstmt = 180
    RULE_createforeigntablestmt = 181
    RULE_importforeignschemastmt = 182
    RULE_import_qualification_type = 183
    RULE_import_qualification = 184
    RULE_createusermappingstmt = 185
    RULE_auth_ident = 186
    RULE_dropusermappingstmt = 187
    RULE_alterusermappingstmt = 188
    RULE_createpolicystmt = 189
    RULE_alterpolicystmt = 190
    RULE_rowsecurityoptionalexpr = 191
    RULE_rowsecurityoptionalwithcheck = 192
    RULE_rowsecuritydefaulttorole = 193
    RULE_rowsecurityoptionaltorole = 194
    RULE_rowsecuritydefaultpermissive = 195
    RULE_rowsecuritydefaultforcmd = 196
    RULE_row_security_cmd = 197
    RULE_createamstmt = 198
    RULE_am_type = 199
    RULE_createtrigstmt = 200
    RULE_triggeractiontime = 201
    RULE_triggerevents = 202
    RULE_triggeroneevent = 203
    RULE_triggerreferencing = 204
    RULE_triggertransitions = 205
    RULE_triggertransition = 206
    RULE_transitionoldornew = 207
    RULE_transitionrowortable = 208
    RULE_transitionrelname = 209
    RULE_triggerforspec = 210
    RULE_triggerforopteach = 211
    RULE_triggerfortype = 212
    RULE_triggerwhen = 213
    RULE_function_or_procedure = 214
    RULE_triggerfuncargs = 215
    RULE_triggerfuncarg = 216
    RULE_optconstrfromtable = 217
    RULE_constraintattributespec = 218
    RULE_constraintattributeElem = 219
    RULE_createeventtrigstmt = 220
    RULE_event_trigger_when_list = 221
    RULE_event_trigger_when_item = 222
    RULE_event_trigger_value_list = 223
    RULE_altereventtrigstmt = 224
    RULE_enable_trigger = 225
    RULE_createassertionstmt = 226
    RULE_definestmt = 227
    RULE_definition = 228
    RULE_def_list = 229
    RULE_def_elem = 230
    RULE_def_arg = 231
    RULE_old_aggr_definition = 232
    RULE_old_aggr_list = 233
    RULE_old_aggr_elem = 234
    RULE_enum_val_list_ = 235
    RULE_enum_val_list = 236
    RULE_alterenumstmt = 237
    RULE_if_not_exists_ = 238
    RULE_createopclassstmt = 239
    RULE_opclass_item_list = 240
    RULE_opclass_item = 241
    RULE_default_ = 242
    RULE_opfamily_ = 243
    RULE_opclass_purpose = 244
    RULE_recheck_ = 245
    RULE_createopfamilystmt = 246
    RULE_alteropfamilystmt = 247
    RULE_opclass_drop_list = 248
    RULE_opclass_drop = 249
    RULE_dropopclassstmt = 250
    RULE_dropopfamilystmt = 251
    RULE_dropownedstmt = 252
    RULE_reassignownedstmt = 253
    RULE_dropstmt = 254
    RULE_object_type_any_name = 255
    RULE_object_type_name = 256
    RULE_drop_type_name = 257
    RULE_object_type_name_on_any_name = 258
    RULE_any_name_list_ = 259
    RULE_any_name = 260
    RULE_attrs = 261
    RULE_type_name_list = 262
    RULE_truncatestmt = 263
    RULE_restart_seqs_ = 264
    RULE_commentstmt = 265
    RULE_comment_text = 266
    RULE_seclabelstmt = 267
    RULE_provider_ = 268
    RULE_security_label = 269
    RULE_fetchstmt = 270
    RULE_fetch_args = 271
    RULE_from_in = 272
    RULE_from_in_ = 273
    RULE_grantstmt = 274
    RULE_revokestmt = 275
    RULE_privileges = 276
    RULE_privilege_list = 277
    RULE_privilege = 278
    RULE_privilege_target = 279
    RULE_grantee_list = 280
    RULE_grantee = 281
    RULE_grant_grant_option_ = 282
    RULE_grantrolestmt = 283
    RULE_revokerolestmt = 284
    RULE_grant_admin_option_ = 285
    RULE_granted_by_ = 286
    RULE_alterdefaultprivilegesstmt = 287
    RULE_defacloptionlist = 288
    RULE_defacloption = 289
    RULE_defaclaction = 290
    RULE_defacl_privilege_target = 291
    RULE_indexstmt = 292
    RULE_unique_ = 293
    RULE_single_name_ = 294
    RULE_concurrently_ = 295
    RULE_index_name_ = 296
    RULE_access_method_clause = 297
    RULE_index_params = 298
    RULE_index_elem_options = 299
    RULE_index_elem = 300
    RULE_include_ = 301
    RULE_index_including_params = 302
    RULE_collate_ = 303
    RULE_class_ = 304
    RULE_asc_desc_ = 305
    RULE_nulls_order_ = 306
    RULE_createfunctionstmt = 307
    RULE_or_replace_ = 308
    RULE_func_args = 309
    RULE_func_args_list = 310
    RULE_function_with_argtypes_list = 311
    RULE_function_with_argtypes = 312
    RULE_func_args_with_defaults = 313
    RULE_func_args_with_defaults_list = 314
    RULE_func_arg = 315
    RULE_arg_class = 316
    RULE_param_name = 317
    RULE_func_return = 318
    RULE_func_type = 319
    RULE_func_arg_with_default = 320
    RULE_aggr_arg = 321
    RULE_aggr_args = 322
    RULE_aggr_args_list = 323
    RULE_aggregate_with_argtypes = 324
    RULE_aggregate_with_argtypes_list = 325
    RULE_createfunc_opt_list = 326
    RULE_common_func_opt_item = 327
    RULE_createfunc_opt_item = 328
    RULE_func_as = 329
    RULE_transform_type_list = 330
    RULE_definition_ = 331
    RULE_table_func_column = 332
    RULE_table_func_column_list = 333
    RULE_alterfunctionstmt = 334
    RULE_alterfunc_opt_list = 335
    RULE_restrict_ = 336
    RULE_removefuncstmt = 337
    RULE_removeaggrstmt = 338
    RULE_removeoperstmt = 339
    RULE_oper_argtypes = 340
    RULE_any_operator = 341
    RULE_operator_with_argtypes_list = 342
    RULE_operator_with_argtypes = 343
    RULE_dostmt = 344
    RULE_dostmt_opt_list = 345
    RULE_dostmt_opt_item = 346
    RULE_createcaststmt = 347
    RULE_cast_context = 348
    RULE_dropcaststmt = 349
    RULE_if_exists_ = 350
    RULE_createtransformstmt = 351
    RULE_transform_element_list = 352
    RULE_droptransformstmt = 353
    RULE_reindexstmt = 354
    RULE_reindex_target_relation = 355
    RULE_reindex_target_all = 356
    RULE_reindex_option_list = 357
    RULE_altertblspcstmt = 358
    RULE_renamestmt = 359
    RULE_column_ = 360
    RULE_set_data_ = 361
    RULE_alterobjectdependsstmt = 362
    RULE_no_ = 363
    RULE_alterobjectschemastmt = 364
    RULE_alteroperatorstmt = 365
    RULE_operator_def_list = 366
    RULE_operator_def_elem = 367
    RULE_operator_def_arg = 368
    RULE_altertypestmt = 369
    RULE_alterownerstmt = 370
    RULE_createpublicationstmt = 371
    RULE_publication_for_tables_ = 372
    RULE_publication_for_tables = 373
    RULE_alterpublicationstmt = 374
    RULE_createsubscriptionstmt = 375
    RULE_publication_name_list = 376
    RULE_publication_name_item = 377
    RULE_altersubscriptionstmt = 378
    RULE_dropsubscriptionstmt = 379
    RULE_rulestmt = 380
    RULE_ruleactionlist = 381
    RULE_ruleactionmulti = 382
    RULE_ruleactionstmt = 383
    RULE_ruleactionstmtOrEmpty = 384
    RULE_event = 385
    RULE_instead_ = 386
    RULE_notifystmt = 387
    RULE_notify_payload = 388
    RULE_listenstmt = 389
    RULE_unlistenstmt = 390
    RULE_transactionstmt = 391
    RULE_transaction_ = 392
    RULE_transaction_mode_item = 393
    RULE_transaction_mode_list = 394
    RULE_transaction_mode_list_or_empty = 395
    RULE_transaction_chain_ = 396
    RULE_viewstmt = 397
    RULE_check_option_ = 398
    RULE_loadstmt = 399
    RULE_createdbstmt = 400
    RULE_createdb_opt_list = 401
    RULE_createdb_opt_items = 402
    RULE_createdb_opt_item = 403
    RULE_createdb_opt_name = 404
    RULE_equal_ = 405
    RULE_alterdatabasestmt = 406
    RULE_alterdatabasesetstmt = 407
    RULE_dropdbstmt = 408
    RULE_drop_option_list = 409
    RULE_drop_option = 410
    RULE_altercollationstmt = 411
    RULE_altersystemstmt = 412
    RULE_createdomainstmt = 413
    RULE_alterdomainstmt = 414
    RULE_as_ = 415
    RULE_altertsdictionarystmt = 416
    RULE_altertsconfigurationstmt = 417
    RULE_any_with = 418
    RULE_createconversionstmt = 419
    RULE_clusterstmt = 420
    RULE_cluster_index_specification = 421
    RULE_vacuumstmt = 422
    RULE_analyzestmt = 423
    RULE_utility_option_list = 424
    RULE_vac_analyze_option_list = 425
    RULE_analyze_keyword = 426
    RULE_utility_option_elem = 427
    RULE_utility_option_name = 428
    RULE_utility_option_arg = 429
    RULE_vac_analyze_option_elem = 430
    RULE_vac_analyze_option_name = 431
    RULE_vac_analyze_option_arg = 432
    RULE_analyze_ = 433
    RULE_verbose_ = 434
    RULE_full_ = 435
    RULE_freeze_ = 436
    RULE_name_list_ = 437
    RULE_vacuum_relation = 438
    RULE_vacuum_relation_list = 439
    RULE_vacuum_relation_list_ = 440
    RULE_explainstmt = 441
    RULE_explainablestmt = 442
    RULE_explain_option_list = 443
    RULE_explain_option_elem = 444
    RULE_explain_option_name = 445
    RULE_explain_option_arg = 446
    RULE_preparestmt = 447
    RULE_prep_type_clause = 448
    RULE_preparablestmt = 449
    RULE_executestmt = 450
    RULE_execute_param_clause = 451
    RULE_deallocatestmt = 452
    RULE_insertstmt = 453
    RULE_insert_target = 454
    RULE_insert_rest = 455
    RULE_override_kind = 456
    RULE_insert_column_list = 457
    RULE_insert_column_item = 458
    RULE_on_conflict_ = 459
    RULE_conf_expr_ = 460
    RULE_returning_clause = 461
    RULE_mergestmt = 462
    RULE_merge_insert_clause = 463
    RULE_merge_update_clause = 464
    RULE_merge_delete_clause = 465
    RULE_deletestmt = 466
    RULE_using_clause = 467
    RULE_lockstmt = 468
    RULE_lock_ = 469
    RULE_lock_type = 470
    RULE_nowait_ = 471
    RULE_nowait_or_skip_ = 472
    RULE_updatestmt = 473
    RULE_set_clause_list = 474
    RULE_set_clause = 475
    RULE_set_target = 476
    RULE_set_target_list = 477
    RULE_declarecursorstmt = 478
    RULE_cursor_name = 479
    RULE_cursor_options = 480
    RULE_hold_ = 481
    RULE_selectstmt = 482
    RULE_select_with_parens = 483
    RULE_select_no_parens = 484
    RULE_select_clause = 485
    RULE_simple_select_intersect = 486
    RULE_simple_select_pramary = 487
    RULE_with_clause = 488
    RULE_cte_list = 489
    RULE_common_table_expr = 490
    RULE_materialized_ = 491
    RULE_with_clause_ = 492
    RULE_into_clause = 493
    RULE_strict_ = 494
    RULE_opttempTableName = 495
    RULE_table_ = 496
    RULE_all_or_distinct = 497
    RULE_distinct_clause = 498
    RULE_all_clause_ = 499
    RULE_sort_clause_ = 500
    RULE_sort_clause = 501
    RULE_sortby_list = 502
    RULE_sortby = 503
    RULE_select_limit = 504
    RULE_select_limit_ = 505
    RULE_limit_clause = 506
    RULE_offset_clause = 507
    RULE_select_limit_value = 508
    RULE_select_offset_value = 509
    RULE_select_fetch_first_value = 510
    RULE_i_or_f_const = 511
    RULE_row_or_rows = 512
    RULE_first_or_next = 513
    RULE_group_clause = 514
    RULE_group_by_list = 515
    RULE_group_by_item = 516
    RULE_empty_grouping_set = 517
    RULE_rollup_clause = 518
    RULE_cube_clause = 519
    RULE_grouping_sets_clause = 520
    RULE_having_clause = 521
    RULE_for_locking_clause = 522
    RULE_for_locking_clause_ = 523
    RULE_for_locking_items = 524
    RULE_for_locking_item = 525
    RULE_for_locking_strength = 526
    RULE_locked_rels_list = 527
    RULE_values_clause = 528
    RULE_from_clause = 529
    RULE_from_list = 530
    RULE_table_ref = 531
    RULE_alias_clause = 532
    RULE_func_alias_clause = 533
    RULE_join_type = 534
    RULE_join_qual = 535
    RULE_relation_expr = 536
    RULE_relation_expr_list = 537
    RULE_relation_expr_opt_alias = 538
    RULE_tablesample_clause = 539
    RULE_repeatable_clause_ = 540
    RULE_func_table = 541
    RULE_rowsfrom_item = 542
    RULE_rowsfrom_list = 543
    RULE_col_def_list_ = 544
    RULE_ordinality_ = 545
    RULE_where_clause = 546
    RULE_where_or_current_clause = 547
    RULE_opttablefuncelementlist = 548
    RULE_tablefuncelementlist = 549
    RULE_tablefuncelement = 550
    RULE_xmltable = 551
    RULE_xmltable_column_list = 552
    RULE_xmltable_column_el = 553
    RULE_xmltable_column_option_list = 554
    RULE_xmltable_column_option_el = 555
    RULE_xml_namespace_list = 556
    RULE_xml_namespace_el = 557
    RULE_typename = 558
    RULE_opt_array_bounds = 559
    RULE_simpletypename = 560
    RULE_consttypename = 561
    RULE_generictype = 562
    RULE_type_modifiers_ = 563
    RULE_numeric = 564
    RULE_float_ = 565
    RULE_bit = 566
    RULE_constbit = 567
    RULE_bitwithlength = 568
    RULE_bitwithoutlength = 569
    RULE_character = 570
    RULE_constcharacter = 571
    RULE_character_c = 572
    RULE_varying_ = 573
    RULE_constdatetime = 574
    RULE_constinterval = 575
    RULE_timezone_ = 576
    RULE_interval_ = 577
    RULE_interval_second = 578
    RULE_jsonType = 579
    RULE_escape_ = 580
    RULE_a_expr = 581
    RULE_a_expr_qual = 582
    RULE_a_expr_lessless = 583
    RULE_a_expr_or = 584
    RULE_a_expr_and = 585
    RULE_a_expr_between = 586
    RULE_a_expr_in = 587
    RULE_a_expr_unary_not = 588
    RULE_a_expr_isnull = 589
    RULE_a_expr_is_not = 590
    RULE_a_expr_compare = 591
    RULE_a_expr_like = 592
    RULE_a_expr_qual_op = 593
    RULE_a_expr_unary_qualop = 594
    RULE_a_expr_add = 595
    RULE_a_expr_mul = 596
    RULE_a_expr_caret = 597
    RULE_a_expr_unary_sign = 598
    RULE_a_expr_at_time_zone = 599
    RULE_a_expr_collate = 600
    RULE_a_expr_typecast = 601
    RULE_b_expr = 602
    RULE_c_expr = 603
    RULE_plsqlvariablename = 604
    RULE_func_application = 605
    RULE_func_expr = 606
    RULE_func_expr_windowless = 607
    RULE_func_expr_common_subexpr = 608
    RULE_xml_root_version = 609
    RULE_xml_root_standalone_ = 610
    RULE_xml_attributes = 611
    RULE_xml_attribute_list = 612
    RULE_xml_attribute_el = 613
    RULE_document_or_content = 614
    RULE_xml_whitespace_option = 615
    RULE_xmlexists_argument = 616
    RULE_xml_passing_mech = 617
    RULE_within_group_clause = 618
    RULE_filter_clause = 619
    RULE_window_clause = 620
    RULE_window_definition_list = 621
    RULE_window_definition = 622
    RULE_over_clause = 623
    RULE_window_specification = 624
    RULE_existing_window_name_ = 625
    RULE_partition_clause_ = 626
    RULE_frame_clause_ = 627
    RULE_frame_extent = 628
    RULE_frame_bound = 629
    RULE_window_exclusion_clause_ = 630
    RULE_row = 631
    RULE_explicit_row = 632
    RULE_implicit_row = 633
    RULE_sub_type = 634
    RULE_all_op = 635
    RULE_mathop = 636
    RULE_qual_op = 637
    RULE_qual_all_op = 638
    RULE_subquery_Op = 639
    RULE_expr_list = 640
    RULE_func_arg_list = 641
    RULE_func_arg_expr = 642
    RULE_type_list = 643
    RULE_array_expr = 644
    RULE_array_expr_list = 645
    RULE_extract_list = 646
    RULE_extract_arg = 647
    RULE_unicode_normal_form = 648
    RULE_overlay_list = 649
    RULE_position_list = 650
    RULE_substr_list = 651
    RULE_trim_list = 652
    RULE_in_expr = 653
    RULE_case_expr = 654
    RULE_when_clause_list = 655
    RULE_when_clause = 656
    RULE_case_default = 657
    RULE_case_arg = 658
    RULE_columnref = 659
    RULE_indirection_el = 660
    RULE_slice_bound_ = 661
    RULE_indirection = 662
    RULE_opt_indirection = 663
    RULE_json_passing_clause = 664
    RULE_json_arguments = 665
    RULE_json_argument = 666
    RULE_json_wrapper_behavior = 667
    RULE_json_behavior = 668
    RULE_json_behavior_type = 669
    RULE_json_behavior_clause = 670
    RULE_json_on_error_clause = 671
    RULE_json_value_expr = 672
    RULE_json_format_clause = 673
    RULE_json_quotes_clause = 674
    RULE_json_returning_clause = 675
    RULE_json_predicate_type_constraint = 676
    RULE_json_key_uniqueness_constraint = 677
    RULE_json_name_and_value_list = 678
    RULE_json_name_and_value = 679
    RULE_json_object_constructor_null_clause = 680
    RULE_json_array_constructor_null_clause = 681
    RULE_json_value_expr_list = 682
    RULE_json_aggregate_func = 683
    RULE_json_array_aggregate_order_by_clause = 684
    RULE_target_list_ = 685
    RULE_target_list = 686
    RULE_target_el = 687
    RULE_qualified_name_list = 688
    RULE_qualified_name = 689
    RULE_name_list = 690
    RULE_name = 691
    RULE_attr_name = 692
    RULE_file_name = 693
    RULE_func_name = 694
    RULE_aexprconst = 695
    RULE_xconst = 696
    RULE_bconst = 697
    RULE_fconst = 698
    RULE_iconst = 699
    RULE_sconst = 700
    RULE_anysconst = 701
    RULE_uescape_ = 702
    RULE_signediconst = 703
    RULE_roleid = 704
    RULE_rolespec = 705
    RULE_role_list = 706
    RULE_colid = 707
    RULE_type_function_name = 708
    RULE_nonreservedword = 709
    RULE_colLabel = 710
    RULE_bareColLabel = 711
    RULE_unreserved_keyword = 712
    RULE_col_name_keyword = 713
    RULE_type_func_name_keyword = 714
    RULE_reserved_keyword = 715
    RULE_bare_label_keyword = 716
    RULE_any_identifier = 717
    RULE_identifier = 718

    ruleNames =  [ "root", "stmtblock", "stmtmulti", "stmt", "callstmt", 
                   "createrolestmt", "with_", "optrolelist", "alteroptrolelist", 
                   "alteroptroleelem", "createoptroleelem", "createuserstmt", 
                   "alterrolestmt", "in_database_", "alterrolesetstmt", 
                   "droprolestmt", "creategroupstmt", "altergroupstmt", 
                   "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
                   "schema_stmt", "variablesetstmt", "set_rest", "generic_set", 
                   "set_rest_more", "var_name", "var_list", "var_value", 
                   "iso_level", "boolean_or_string_", "zone_value", "encoding_", 
                   "nonreservedword_or_sconst", "variableresetstmt", "reset_rest", 
                   "generic_reset", "setresetclause", "functionsetresetclause", 
                   "variableshowstmt", "constraintssetstmt", "constraints_set_list", 
                   "constraints_set_mode", "checkpointstmt", "discardstmt", 
                   "altertablestmt", "alter_table_cmds", "partition_cmd", 
                   "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
                   "drop_behavior_", "collate_clause_", "alter_using", "replica_identity", 
                   "reloptions", "reloptions_", "reloption_list", "reloption_elem", 
                   "alter_identity_column_option_list", "alter_identity_column_option", 
                   "partitionboundspec", "hash_partbound_elem", "hash_partbound", 
                   "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
                   "closeportalstmt", "copystmt", "copy_from", "program_", 
                   "copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item", 
                   "binary_", "copy_delimiter", "using_", "copy_generic_opt_list", 
                   "copy_generic_opt_elem", "copy_generic_opt_arg", "copy_generic_opt_arg_list", 
                   "copy_generic_opt_arg_list_item", "createstmt", "opttemp", 
                   "opttableelementlist", "opttypedtableelementlist", "tableelementlist", 
                   "typedtableelementlist", "tableelement", "typedtableelement", 
                   "columnDef", "columnOptions", "colquallist", "colconstraint", 
                   "colconstraintelem", "generated_when", "constraintattr", 
                   "tablelikeclause", "tablelikeoptionlist", "tablelikeoption", 
                   "tableconstraint", "constraintelem", "no_inherit_", "column_list_", 
                   "columnlist", "columnElem", "c_include_", "key_match", 
                   "exclusionconstraintlist", "exclusionconstraintelem", 
                   "exclusionwhereclause", "key_actions", "key_update", 
                   "key_delete", "key_action", "optinherit", "optpartitionspec", 
                   "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
                   "optwith", "oncommitoption", "opttablespace", "optconstablespace", 
                   "existingindex", "createstatsstmt", "alterstatsstmt", 
                   "createasstmt", "create_as_target", "with_data_", "creatematviewstmt", 
                   "create_mv_target", "optnolog", "refreshmatviewstmt", 
                   "createseqstmt", "alterseqstmt", "optseqoptlist", "optparenthesizedseqoptlist", 
                   "seqoptlist", "seqoptelem", "by_", "numericonly", "numericonly_list", 
                   "createplangstmt", "trusted_", "handler_name", "inline_handler_", 
                   "validator_clause", "validator_", "procedural_", "createtablespacestmt", 
                   "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
                   "create_extension_opt_list", "create_extension_opt_item", 
                   "alterextensionstmt", "alter_extension_opt_list", "alter_extension_opt_item", 
                   "alterextensioncontentsstmt", "createfdwstmt", "fdw_option", 
                   "fdw_options", "fdw_options_", "alterfdwstmt", "create_generic_options", 
                   "generic_option_list", "alter_generic_options", "alter_generic_option_list", 
                   "alter_generic_option_elem", "generic_option_elem", "generic_option_name", 
                   "generic_option_arg", "createforeignserverstmt", "type_", 
                   "foreign_server_version", "foreign_server_version_", 
                   "alterforeignserverstmt", "createforeigntablestmt", "importforeignschemastmt", 
                   "import_qualification_type", "import_qualification", 
                   "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
                   "alterusermappingstmt", "createpolicystmt", "alterpolicystmt", 
                   "rowsecurityoptionalexpr", "rowsecurityoptionalwithcheck", 
                   "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
                   "rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", 
                   "row_security_cmd", "createamstmt", "am_type", "createtrigstmt", 
                   "triggeractiontime", "triggerevents", "triggeroneevent", 
                   "triggerreferencing", "triggertransitions", "triggertransition", 
                   "transitionoldornew", "transitionrowortable", "transitionrelname", 
                   "triggerforspec", "triggerforopteach", "triggerfortype", 
                   "triggerwhen", "function_or_procedure", "triggerfuncargs", 
                   "triggerfuncarg", "optconstrfromtable", "constraintattributespec", 
                   "constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
                   "event_trigger_when_item", "event_trigger_value_list", 
                   "altereventtrigstmt", "enable_trigger", "createassertionstmt", 
                   "definestmt", "definition", "def_list", "def_elem", "def_arg", 
                   "old_aggr_definition", "old_aggr_list", "old_aggr_elem", 
                   "enum_val_list_", "enum_val_list", "alterenumstmt", "if_not_exists_", 
                   "createopclassstmt", "opclass_item_list", "opclass_item", 
                   "default_", "opfamily_", "opclass_purpose", "recheck_", 
                   "createopfamilystmt", "alteropfamilystmt", "opclass_drop_list", 
                   "opclass_drop", "dropopclassstmt", "dropopfamilystmt", 
                   "dropownedstmt", "reassignownedstmt", "dropstmt", "object_type_any_name", 
                   "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
                   "any_name_list_", "any_name", "attrs", "type_name_list", 
                   "truncatestmt", "restart_seqs_", "commentstmt", "comment_text", 
                   "seclabelstmt", "provider_", "security_label", "fetchstmt", 
                   "fetch_args", "from_in", "from_in_", "grantstmt", "revokestmt", 
                   "privileges", "privilege_list", "privilege", "privilege_target", 
                   "grantee_list", "grantee", "grant_grant_option_", "grantrolestmt", 
                   "revokerolestmt", "grant_admin_option_", "granted_by_", 
                   "alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", 
                   "defaclaction", "defacl_privilege_target", "indexstmt", 
                   "unique_", "single_name_", "concurrently_", "index_name_", 
                   "access_method_clause", "index_params", "index_elem_options", 
                   "index_elem", "include_", "index_including_params", "collate_", 
                   "class_", "asc_desc_", "nulls_order_", "createfunctionstmt", 
                   "or_replace_", "func_args", "func_args_list", "function_with_argtypes_list", 
                   "function_with_argtypes", "func_args_with_defaults", 
                   "func_args_with_defaults_list", "func_arg", "arg_class", 
                   "param_name", "func_return", "func_type", "func_arg_with_default", 
                   "aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
                   "aggregate_with_argtypes_list", "createfunc_opt_list", 
                   "common_func_opt_item", "createfunc_opt_item", "func_as", 
                   "transform_type_list", "definition_", "table_func_column", 
                   "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
                   "restrict_", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
                   "oper_argtypes", "any_operator", "operator_with_argtypes_list", 
                   "operator_with_argtypes", "dostmt", "dostmt_opt_list", 
                   "dostmt_opt_item", "createcaststmt", "cast_context", 
                   "dropcaststmt", "if_exists_", "createtransformstmt", 
                   "transform_element_list", "droptransformstmt", "reindexstmt", 
                   "reindex_target_relation", "reindex_target_all", "reindex_option_list", 
                   "altertblspcstmt", "renamestmt", "column_", "set_data_", 
                   "alterobjectdependsstmt", "no_", "alterobjectschemastmt", 
                   "alteroperatorstmt", "operator_def_list", "operator_def_elem", 
                   "operator_def_arg", "altertypestmt", "alterownerstmt", 
                   "createpublicationstmt", "publication_for_tables_", "publication_for_tables", 
                   "alterpublicationstmt", "createsubscriptionstmt", "publication_name_list", 
                   "publication_name_item", "altersubscriptionstmt", "dropsubscriptionstmt", 
                   "rulestmt", "ruleactionlist", "ruleactionmulti", "ruleactionstmt", 
                   "ruleactionstmtOrEmpty", "event", "instead_", "notifystmt", 
                   "notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", 
                   "transaction_", "transaction_mode_item", "transaction_mode_list", 
                   "transaction_mode_list_or_empty", "transaction_chain_", 
                   "viewstmt", "check_option_", "loadstmt", "createdbstmt", 
                   "createdb_opt_list", "createdb_opt_items", "createdb_opt_item", 
                   "createdb_opt_name", "equal_", "alterdatabasestmt", "alterdatabasesetstmt", 
                   "dropdbstmt", "drop_option_list", "drop_option", "altercollationstmt", 
                   "altersystemstmt", "createdomainstmt", "alterdomainstmt", 
                   "as_", "altertsdictionarystmt", "altertsconfigurationstmt", 
                   "any_with", "createconversionstmt", "clusterstmt", "cluster_index_specification", 
                   "vacuumstmt", "analyzestmt", "utility_option_list", "vac_analyze_option_list", 
                   "analyze_keyword", "utility_option_elem", "utility_option_name", 
                   "utility_option_arg", "vac_analyze_option_elem", "vac_analyze_option_name", 
                   "vac_analyze_option_arg", "analyze_", "verbose_", "full_", 
                   "freeze_", "name_list_", "vacuum_relation", "vacuum_relation_list", 
                   "vacuum_relation_list_", "explainstmt", "explainablestmt", 
                   "explain_option_list", "explain_option_elem", "explain_option_name", 
                   "explain_option_arg", "preparestmt", "prep_type_clause", 
                   "preparablestmt", "executestmt", "execute_param_clause", 
                   "deallocatestmt", "insertstmt", "insert_target", "insert_rest", 
                   "override_kind", "insert_column_list", "insert_column_item", 
                   "on_conflict_", "conf_expr_", "returning_clause", "mergestmt", 
                   "merge_insert_clause", "merge_update_clause", "merge_delete_clause", 
                   "deletestmt", "using_clause", "lockstmt", "lock_", "lock_type", 
                   "nowait_", "nowait_or_skip_", "updatestmt", "set_clause_list", 
                   "set_clause", "set_target", "set_target_list", "declarecursorstmt", 
                   "cursor_name", "cursor_options", "hold_", "selectstmt", 
                   "select_with_parens", "select_no_parens", "select_clause", 
                   "simple_select_intersect", "simple_select_pramary", "with_clause", 
                   "cte_list", "common_table_expr", "materialized_", "with_clause_", 
                   "into_clause", "strict_", "opttempTableName", "table_", 
                   "all_or_distinct", "distinct_clause", "all_clause_", 
                   "sort_clause_", "sort_clause", "sortby_list", "sortby", 
                   "select_limit", "select_limit_", "limit_clause", "offset_clause", 
                   "select_limit_value", "select_offset_value", "select_fetch_first_value", 
                   "i_or_f_const", "row_or_rows", "first_or_next", "group_clause", 
                   "group_by_list", "group_by_item", "empty_grouping_set", 
                   "rollup_clause", "cube_clause", "grouping_sets_clause", 
                   "having_clause", "for_locking_clause", "for_locking_clause_", 
                   "for_locking_items", "for_locking_item", "for_locking_strength", 
                   "locked_rels_list", "values_clause", "from_clause", "from_list", 
                   "table_ref", "alias_clause", "func_alias_clause", "join_type", 
                   "join_qual", "relation_expr", "relation_expr_list", "relation_expr_opt_alias", 
                   "tablesample_clause", "repeatable_clause_", "func_table", 
                   "rowsfrom_item", "rowsfrom_list", "col_def_list_", "ordinality_", 
                   "where_clause", "where_or_current_clause", "opttablefuncelementlist", 
                   "tablefuncelementlist", "tablefuncelement", "xmltable", 
                   "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
                   "xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
                   "typename", "opt_array_bounds", "simpletypename", "consttypename", 
                   "generictype", "type_modifiers_", "numeric", "float_", 
                   "bit", "constbit", "bitwithlength", "bitwithoutlength", 
                   "character", "constcharacter", "character_c", "varying_", 
                   "constdatetime", "constinterval", "timezone_", "interval_", 
                   "interval_second", "jsonType", "escape_", "a_expr", "a_expr_qual", 
                   "a_expr_lessless", "a_expr_or", "a_expr_and", "a_expr_between", 
                   "a_expr_in", "a_expr_unary_not", "a_expr_isnull", "a_expr_is_not", 
                   "a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
                   "a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", 
                   "a_expr_at_time_zone", "a_expr_collate", "a_expr_typecast", 
                   "b_expr", "c_expr", "plsqlvariablename", "func_application", 
                   "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
                   "xml_root_version", "xml_root_standalone_", "xml_attributes", 
                   "xml_attribute_list", "xml_attribute_el", "document_or_content", 
                   "xml_whitespace_option", "xmlexists_argument", "xml_passing_mech", 
                   "within_group_clause", "filter_clause", "window_clause", 
                   "window_definition_list", "window_definition", "over_clause", 
                   "window_specification", "existing_window_name_", "partition_clause_", 
                   "frame_clause_", "frame_extent", "frame_bound", "window_exclusion_clause_", 
                   "row", "explicit_row", "implicit_row", "sub_type", "all_op", 
                   "mathop", "qual_op", "qual_all_op", "subquery_Op", "expr_list", 
                   "func_arg_list", "func_arg_expr", "type_list", "array_expr", 
                   "array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
                   "overlay_list", "position_list", "substr_list", "trim_list", 
                   "in_expr", "case_expr", "when_clause_list", "when_clause", 
                   "case_default", "case_arg", "columnref", "indirection_el", 
                   "slice_bound_", "indirection", "opt_indirection", "json_passing_clause", 
                   "json_arguments", "json_argument", "json_wrapper_behavior", 
                   "json_behavior", "json_behavior_type", "json_behavior_clause", 
                   "json_on_error_clause", "json_value_expr", "json_format_clause", 
                   "json_quotes_clause", "json_returning_clause", "json_predicate_type_constraint", 
                   "json_key_uniqueness_constraint", "json_name_and_value_list", 
                   "json_name_and_value", "json_object_constructor_null_clause", 
                   "json_array_constructor_null_clause", "json_value_expr_list", 
                   "json_aggregate_func", "json_array_aggregate_order_by_clause", 
                   "target_list_", "target_list", "target_el", "qualified_name_list", 
                   "qualified_name", "name_list", "name", "attr_name", "file_name", 
                   "func_name", "aexprconst", "xconst", "bconst", "fconst", 
                   "iconst", "sconst", "anysconst", "uescape_", "signediconst", 
                   "roleid", "rolespec", "role_list", "colid", "type_function_name", 
                   "nonreservedword", "colLabel", "bareColLabel", "unreserved_keyword", 
                   "col_name_keyword", "type_func_name_keyword", "reserved_keyword", 
                   "bare_label_keyword", "any_identifier", "identifier" ]

    EOF = Token.EOF
    Dollar=1
    OPEN_PAREN=2
    CLOSE_PAREN=3
    OPEN_BRACKET=4
    CLOSE_BRACKET=5
    COMMA=6
    SEMI=7
    COLON=8
    STAR=9
    EQUAL=10
    DOT=11
    PLUS=12
    MINUS=13
    SLASH=14
    CARET=15
    LT=16
    GT=17
    LESS_LESS=18
    GREATER_GREATER=19
    COLON_EQUALS=20
    LESS_EQUALS=21
    EQUALS_GREATER=22
    GREATER_EQUALS=23
    DOT_DOT=24
    NOT_EQUALS=25
    TYPECAST=26
    PERCENT=27
    PARAM=28
    Operator=29
    JSON=30
    JSON_ARRAY=31
    JSON_ARRAYAGG=32
    JSON_EXISTS=33
    JSON_OBJECT=34
    JSON_OBJECTAGG=35
    JSON_QUERY=36
    JSON_SCALAR=37
    JSON_SERIALIZE=38
    JSON_TABLE=39
    JSON_VALUE=40
    MERGE_ACTION=41
    SYSTEM_USER=42
    ABSENT=43
    ASENSITIVE=44
    ATOMIC=45
    BREADTH=46
    COMPRESSION=47
    CONDITIONAL=48
    DEPTH=49
    EMPTY_P=50
    FINALIZE=51
    INDENT=52
    KEEP=53
    KEYS=54
    NESTED=55
    OMIT=56
    PARAMETER=57
    PATH=58
    PLAN=59
    QUOTES=60
    SCALAR=61
    SOURCE=62
    STRING_P=63
    TARGET=64
    UNCONDITIONAL=65
    PERIOD=66
    FORMAT_LA=67
    ALL=68
    ANALYSE=69
    ANALYZE=70
    AND=71
    ANY=72
    ARRAY=73
    AS=74
    ASC=75
    ASYMMETRIC=76
    BOTH=77
    CASE=78
    CAST=79
    CHECK=80
    COLLATE=81
    COLUMN=82
    CONSTRAINT=83
    CREATE=84
    CURRENT_CATALOG=85
    CURRENT_DATE=86
    CURRENT_ROLE=87
    CURRENT_TIME=88
    CURRENT_TIMESTAMP=89
    CURRENT_USER=90
    DEFAULT=91
    DEFERRABLE=92
    DESC=93
    DISTINCT=94
    DO=95
    ELSE=96
    EXCEPT=97
    FALSE_P=98
    FETCH=99
    FOR=100
    FOREIGN=101
    FROM=102
    GRANT=103
    GROUP_P=104
    HAVING=105
    IN_P=106
    INITIALLY=107
    INTERSECT=108
    INTO=109
    LATERAL_P=110
    LEADING=111
    LIMIT=112
    LOCALTIME=113
    LOCALTIMESTAMP=114
    NOT=115
    NULL_P=116
    OFFSET=117
    ON=118
    ONLY=119
    OR=120
    ORDER=121
    PLACING=122
    PRIMARY=123
    REFERENCES=124
    RETURNING=125
    SELECT=126
    SESSION_USER=127
    SOME=128
    SYMMETRIC=129
    TABLE=130
    THEN=131
    TO=132
    TRAILING=133
    TRUE_P=134
    UNION=135
    UNIQUE=136
    USER=137
    USING=138
    VARIADIC=139
    WHEN=140
    WHERE=141
    WINDOW=142
    WITH=143
    AUTHORIZATION=144
    BINARY=145
    COLLATION=146
    CONCURRENTLY=147
    CROSS=148
    CURRENT_SCHEMA=149
    FREEZE=150
    FULL=151
    ILIKE=152
    INNER_P=153
    IS=154
    ISNULL=155
    JOIN=156
    LEFT=157
    LIKE=158
    NATURAL=159
    NOTNULL=160
    OUTER_P=161
    OVER=162
    OVERLAPS=163
    RIGHT=164
    SIMILAR=165
    VERBOSE=166
    ABORT_P=167
    ABSOLUTE_P=168
    ACCESS=169
    ACTION=170
    ADD_P=171
    ADMIN=172
    AFTER=173
    AGGREGATE=174
    ALSO=175
    ALTER=176
    ALWAYS=177
    ASSERTION=178
    ASSIGNMENT=179
    AT=180
    ATTRIBUTE=181
    BACKWARD=182
    BEFORE=183
    BEGIN_P=184
    BY=185
    CACHE=186
    CALLED=187
    CASCADE=188
    CASCADED=189
    CATALOG=190
    CHAIN=191
    CHARACTERISTICS=192
    CHECKPOINT=193
    CLASS=194
    CLOSE=195
    CLUSTER=196
    COMMENT=197
    COMMENTS=198
    COMMIT=199
    COMMITTED=200
    CONFIGURATION=201
    CONNECTION=202
    CONSTRAINTS=203
    CONTENT_P=204
    CONTINUE_P=205
    CONVERSION_P=206
    COPY=207
    COST=208
    CSV=209
    CURSOR=210
    CYCLE=211
    DATA_P=212
    DATABASE=213
    DAY_P=214
    DEALLOCATE=215
    DECLARE=216
    DEFAULTS=217
    DEFERRED=218
    DEFINER=219
    DELETE_P=220
    DELIMITER=221
    DELIMITERS=222
    DICTIONARY=223
    DISABLE_P=224
    DISCARD=225
    DOCUMENT_P=226
    DOMAIN_P=227
    DOUBLE_P=228
    DROP=229
    EACH=230
    ENABLE_P=231
    ENCODING=232
    ENCRYPTED=233
    ENUM_P=234
    ESCAPE=235
    EVENT=236
    EXCLUDE=237
    EXCLUDING=238
    EXCLUSIVE=239
    EXECUTE=240
    EXPLAIN=241
    EXTENSION=242
    EXTERNAL=243
    FAMILY=244
    FIRST_P=245
    FOLLOWING=246
    FORCE=247
    FORWARD=248
    FUNCTION=249
    FUNCTIONS=250
    GLOBAL=251
    GRANTED=252
    HANDLER=253
    HEADER_P=254
    HOLD=255
    HOUR_P=256
    IDENTITY_P=257
    IF_P=258
    IMMEDIATE=259
    IMMUTABLE=260
    IMPLICIT_P=261
    INCLUDING=262
    INCREMENT=263
    INDEX=264
    INDEXES=265
    INHERIT=266
    INHERITS=267
    INLINE_P=268
    INSENSITIVE=269
    INSERT=270
    INSTEAD=271
    INVOKER=272
    ISOLATION=273
    KEY=274
    LABEL=275
    LANGUAGE=276
    LARGE_P=277
    LAST_P=278
    LEAKPROOF=279
    LEVEL=280
    LISTEN=281
    LOAD=282
    LOCAL=283
    LOCATION=284
    LOCK_P=285
    MAPPING=286
    MATCH=287
    MATCHED=288
    MATERIALIZED=289
    MAXVALUE=290
    MERGE=291
    MINUTE_P=292
    MINVALUE=293
    MODE=294
    MONTH_P=295
    MOVE=296
    NAME_P=297
    NAMES=298
    NEXT=299
    NO=300
    NOTHING=301
    NOTIFY=302
    NOWAIT=303
    NULLS_P=304
    OBJECT_P=305
    OF=306
    OFF=307
    OIDS=308
    OPERATOR=309
    OPTION=310
    OPTIONS=311
    OWNED=312
    OWNER=313
    PARSER=314
    PARTIAL=315
    PARTITION=316
    PASSING=317
    PASSWORD=318
    PLANS=319
    PRECEDING=320
    PREPARE=321
    PREPARED=322
    PRESERVE=323
    PRIOR=324
    PRIVILEGES=325
    PROCEDURAL=326
    PROCEDURE=327
    PROGRAM=328
    QUOTE=329
    RANGE=330
    READ=331
    REASSIGN=332
    RECHECK=333
    RECURSIVE=334
    REF=335
    REFRESH=336
    REINDEX=337
    RELATIVE_P=338
    RELEASE=339
    RENAME=340
    REPEATABLE=341
    REPLACE=342
    REPLICA=343
    RESET=344
    RESTART=345
    RESTRICT=346
    RETURNS=347
    REVOKE=348
    ROLE=349
    ROLLBACK=350
    ROWS=351
    RULE=352
    SAVEPOINT=353
    SCHEMA=354
    SCROLL=355
    SEARCH=356
    SECOND_P=357
    SECURITY=358
    SEQUENCE=359
    SEQUENCES=360
    SERIALIZABLE=361
    SERVER=362
    SESSION=363
    SET=364
    SHARE=365
    SHOW=366
    SIMPLE=367
    SNAPSHOT=368
    STABLE=369
    STANDALONE_P=370
    START=371
    STATEMENT=372
    STATISTICS=373
    STDIN=374
    STDOUT=375
    STORAGE=376
    STRICT_P=377
    STRIP_P=378
    SYSID=379
    SYSTEM_P=380
    TABLES=381
    TABLESPACE=382
    TEMP=383
    TEMPLATE=384
    TEMPORARY=385
    TEXT_P=386
    TRANSACTION=387
    TRIGGER=388
    TRUNCATE=389
    TRUSTED=390
    TYPE_P=391
    TYPES_P=392
    UNBOUNDED=393
    UNCOMMITTED=394
    UNENCRYPTED=395
    UNKNOWN=396
    UNLISTEN=397
    UNLOGGED=398
    UNTIL=399
    UPDATE=400
    VACUUM=401
    VALID=402
    VALIDATE=403
    VALIDATOR=404
    VARYING=405
    VERSION_P=406
    VIEW=407
    VOLATILE=408
    WHITESPACE_P=409
    WITHOUT=410
    WORK=411
    WRAPPER=412
    WRITE=413
    XML_P=414
    YEAR_P=415
    YES_P=416
    ZONE=417
    BETWEEN=418
    BIGINT=419
    BIT=420
    BOOLEAN_P=421
    CHAR_P=422
    CHARACTER=423
    COALESCE=424
    DEC=425
    DECIMAL_P=426
    EXISTS=427
    EXTRACT=428
    FLOAT_P=429
    GREATEST=430
    INOUT=431
    INT_P=432
    INTEGER=433
    INTERVAL=434
    LEAST=435
    NATIONAL=436
    NCHAR=437
    NONE=438
    NULLIF=439
    NUMERIC=440
    OVERLAY=441
    POSITION=442
    PRECISION=443
    REAL=444
    ROW=445
    SETOF=446
    SMALLINT=447
    SUBSTRING=448
    TIME=449
    TIMESTAMP=450
    TREAT=451
    TRIM=452
    VALUES=453
    VARCHAR=454
    XMLATTRIBUTES=455
    XMLCOMMENT=456
    XMLAGG=457
    XML_IS_WELL_FORMED=458
    XML_IS_WELL_FORMED_DOCUMENT=459
    XML_IS_WELL_FORMED_CONTENT=460
    XPATH=461
    XPATH_EXISTS=462
    XMLCONCAT=463
    XMLELEMENT=464
    XMLEXISTS=465
    XMLFOREST=466
    XMLPARSE=467
    XMLPI=468
    XMLROOT=469
    XMLSERIALIZE=470
    CALL=471
    CURRENT_P=472
    ATTACH=473
    DETACH=474
    EXPRESSION=475
    GENERATED=476
    LOGGED=477
    STORED=478
    INCLUDE=479
    ROUTINE=480
    TRANSFORM=481
    IMPORT_P=482
    POLICY=483
    METHOD=484
    REFERENCING=485
    NEW=486
    OLD=487
    VALUE_P=488
    SUBSCRIPTION=489
    PUBLICATION=490
    OUT_P=491
    END_P=492
    ROUTINES=493
    SCHEMAS=494
    PROCEDURES=495
    INPUT_P=496
    SUPPORT=497
    PARALLEL=498
    SQL_P=499
    DEPENDS=500
    OVERRIDING=501
    CONFLICT=502
    SKIP_P=503
    LOCKED=504
    TIES=505
    ROLLUP=506
    CUBE=507
    GROUPING=508
    SETS=509
    TABLESAMPLE=510
    ORDINALITY=511
    XMLTABLE=512
    COLUMNS=513
    XMLNAMESPACES=514
    ROWTYPE=515
    NORMALIZED=516
    WITHIN=517
    FILTER=518
    GROUPS=519
    OTHERS=520
    NFC=521
    NFD=522
    NFKC=523
    NFKD=524
    UESCAPE=525
    VIEWS=526
    NORMALIZE=527
    DUMP=528
    ERROR=529
    USE_VARIABLE=530
    USE_COLUMN=531
    CONSTANT=532
    PERFORM=533
    GET=534
    DIAGNOSTICS=535
    STACKED=536
    ELSIF=537
    WHILE=538
    FOREACH=539
    SLICE=540
    EXIT=541
    RETURN=542
    RAISE=543
    SQLSTATE=544
    DEBUG=545
    INFO=546
    NOTICE=547
    WARNING=548
    EXCEPTION=549
    ASSERT=550
    LOOP=551
    OPEN=552
    FORMAT=553
    Identifier=554
    QuotedIdentifier=555
    UnterminatedQuotedIdentifier=556
    InvalidQuotedIdentifier=557
    InvalidUnterminatedQuotedIdentifier=558
    UnicodeQuotedIdentifier=559
    UnterminatedUnicodeQuotedIdentifier=560
    InvalidUnicodeQuotedIdentifier=561
    InvalidUnterminatedUnicodeQuotedIdentifier=562
    StringConstant=563
    UnterminatedStringConstant=564
    UnicodeEscapeStringConstant=565
    UnterminatedUnicodeEscapeStringConstant=566
    BeginDollarStringConstant=567
    BinaryStringConstant=568
    UnterminatedBinaryStringConstant=569
    InvalidBinaryStringConstant=570
    InvalidUnterminatedBinaryStringConstant=571
    HexadecimalStringConstant=572
    UnterminatedHexadecimalStringConstant=573
    InvalidHexadecimalStringConstant=574
    InvalidUnterminatedHexadecimalStringConstant=575
    Integral=576
    BinaryIntegral=577
    OctalIntegral=578
    HexadecimalIntegral=579
    NumericFail=580
    Numeric=581
    PLSQLVARIABLENAME=582
    PLSQLIDENTIFIER=583
    Whitespace=584
    Newline=585
    LineComment=586
    BlockComment=587
    UnterminatedBlockComment=588
    ErrorCharacter=589
    EscapeStringConstant=590
    UnterminatedEscapeStringConstant=591
    InvalidEscapeStringConstant=592
    InvalidUnterminatedEscapeStringConstant=593
    AfterEscapeStringConstantMode_NotContinued=594
    AfterEscapeStringConstantWithNewlineMode_NotContinued=595
    DollarText=596
    EndDollarStringConstant=597
    MetaCommand=598
    AfterEscapeStringConstantWithNewlineMode_Continued=599

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmtblock(self):
            return self.getTypedRuleContext(PostgreSQLParser.StmtblockContext,0)


        def EOF(self):
            return self.getToken(PostgreSQLParser.EOF, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = PostgreSQLParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.stmtblock()
            self.state = 1439
            self.match(PostgreSQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmtmulti(self):
            return self.getTypedRuleContext(PostgreSQLParser.StmtmultiContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_stmtblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmtblock" ):
                listener.enterStmtblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmtblock" ):
                listener.exitStmtblock(self)




    def stmtblock(self):

        localctx = PostgreSQLParser.StmtblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmtblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.stmtmulti()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtmultiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.StmtContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SEMI)
            else:
                return self.getToken(PostgreSQLParser.SEMI, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_stmtmulti

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmtmulti" ):
                listener.enterStmtmulti(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmtmulti" ):
                listener.exitStmtmulti(self)




    def stmtmulti(self):

        localctx = PostgreSQLParser.StmtmultiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_stmtmulti)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (PostgreSQLParser.ANALYSE - 69)) | (1 << (PostgreSQLParser.ANALYZE - 69)) | (1 << (PostgreSQLParser.CREATE - 69)) | (1 << (PostgreSQLParser.DO - 69)) | (1 << (PostgreSQLParser.FETCH - 69)) | (1 << (PostgreSQLParser.GRANT - 69)) | (1 << (PostgreSQLParser.SELECT - 69)) | (1 << (PostgreSQLParser.TABLE - 69)))) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (PostgreSQLParser.WITH - 143)) | (1 << (PostgreSQLParser.ABORT_P - 143)) | (1 << (PostgreSQLParser.ALTER - 143)) | (1 << (PostgreSQLParser.BEGIN_P - 143)) | (1 << (PostgreSQLParser.CHECKPOINT - 143)) | (1 << (PostgreSQLParser.CLOSE - 143)) | (1 << (PostgreSQLParser.CLUSTER - 143)) | (1 << (PostgreSQLParser.COMMENT - 143)) | (1 << (PostgreSQLParser.COMMIT - 143)))) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (PostgreSQLParser.COPY - 207)) | (1 << (PostgreSQLParser.DEALLOCATE - 207)) | (1 << (PostgreSQLParser.DECLARE - 207)) | (1 << (PostgreSQLParser.DELETE_P - 207)) | (1 << (PostgreSQLParser.DISCARD - 207)) | (1 << (PostgreSQLParser.DROP - 207)) | (1 << (PostgreSQLParser.EXECUTE - 207)) | (1 << (PostgreSQLParser.EXPLAIN - 207)) | (1 << (PostgreSQLParser.INSERT - 207)))) != 0) or ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (PostgreSQLParser.LISTEN - 281)) | (1 << (PostgreSQLParser.LOAD - 281)) | (1 << (PostgreSQLParser.LOCK_P - 281)) | (1 << (PostgreSQLParser.MERGE - 281)) | (1 << (PostgreSQLParser.MOVE - 281)) | (1 << (PostgreSQLParser.NOTIFY - 281)) | (1 << (PostgreSQLParser.PREPARE - 281)) | (1 << (PostgreSQLParser.REASSIGN - 281)) | (1 << (PostgreSQLParser.REFRESH - 281)) | (1 << (PostgreSQLParser.REINDEX - 281)) | (1 << (PostgreSQLParser.RELEASE - 281)) | (1 << (PostgreSQLParser.RESET - 281)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.REVOKE - 348)) | (1 << (PostgreSQLParser.ROLLBACK - 348)) | (1 << (PostgreSQLParser.SAVEPOINT - 348)) | (1 << (PostgreSQLParser.SECURITY - 348)) | (1 << (PostgreSQLParser.SET - 348)) | (1 << (PostgreSQLParser.SHOW - 348)) | (1 << (PostgreSQLParser.START - 348)) | (1 << (PostgreSQLParser.TRUNCATE - 348)) | (1 << (PostgreSQLParser.UNLISTEN - 348)) | (1 << (PostgreSQLParser.UPDATE - 348)) | (1 << (PostgreSQLParser.VACUUM - 348)))) != 0) or ((((_la - 453)) & ~0x3f) == 0 and ((1 << (_la - 453)) & ((1 << (PostgreSQLParser.VALUES - 453)) | (1 << (PostgreSQLParser.CALL - 453)) | (1 << (PostgreSQLParser.IMPORT_P - 453)) | (1 << (PostgreSQLParser.END_P - 453)))) != 0):
                self.state = 1443
                self.stmt()


            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.SEMI:
                self.state = 1446
                self.match(PostgreSQLParser.SEMI)
                self.state = 1448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (PostgreSQLParser.ANALYSE - 69)) | (1 << (PostgreSQLParser.ANALYZE - 69)) | (1 << (PostgreSQLParser.CREATE - 69)) | (1 << (PostgreSQLParser.DO - 69)) | (1 << (PostgreSQLParser.FETCH - 69)) | (1 << (PostgreSQLParser.GRANT - 69)) | (1 << (PostgreSQLParser.SELECT - 69)) | (1 << (PostgreSQLParser.TABLE - 69)))) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (PostgreSQLParser.WITH - 143)) | (1 << (PostgreSQLParser.ABORT_P - 143)) | (1 << (PostgreSQLParser.ALTER - 143)) | (1 << (PostgreSQLParser.BEGIN_P - 143)) | (1 << (PostgreSQLParser.CHECKPOINT - 143)) | (1 << (PostgreSQLParser.CLOSE - 143)) | (1 << (PostgreSQLParser.CLUSTER - 143)) | (1 << (PostgreSQLParser.COMMENT - 143)) | (1 << (PostgreSQLParser.COMMIT - 143)))) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (PostgreSQLParser.COPY - 207)) | (1 << (PostgreSQLParser.DEALLOCATE - 207)) | (1 << (PostgreSQLParser.DECLARE - 207)) | (1 << (PostgreSQLParser.DELETE_P - 207)) | (1 << (PostgreSQLParser.DISCARD - 207)) | (1 << (PostgreSQLParser.DROP - 207)) | (1 << (PostgreSQLParser.EXECUTE - 207)) | (1 << (PostgreSQLParser.EXPLAIN - 207)) | (1 << (PostgreSQLParser.INSERT - 207)))) != 0) or ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (PostgreSQLParser.LISTEN - 281)) | (1 << (PostgreSQLParser.LOAD - 281)) | (1 << (PostgreSQLParser.LOCK_P - 281)) | (1 << (PostgreSQLParser.MERGE - 281)) | (1 << (PostgreSQLParser.MOVE - 281)) | (1 << (PostgreSQLParser.NOTIFY - 281)) | (1 << (PostgreSQLParser.PREPARE - 281)) | (1 << (PostgreSQLParser.REASSIGN - 281)) | (1 << (PostgreSQLParser.REFRESH - 281)) | (1 << (PostgreSQLParser.REINDEX - 281)) | (1 << (PostgreSQLParser.RELEASE - 281)) | (1 << (PostgreSQLParser.RESET - 281)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.REVOKE - 348)) | (1 << (PostgreSQLParser.ROLLBACK - 348)) | (1 << (PostgreSQLParser.SAVEPOINT - 348)) | (1 << (PostgreSQLParser.SECURITY - 348)) | (1 << (PostgreSQLParser.SET - 348)) | (1 << (PostgreSQLParser.SHOW - 348)) | (1 << (PostgreSQLParser.START - 348)) | (1 << (PostgreSQLParser.TRUNCATE - 348)) | (1 << (PostgreSQLParser.UNLISTEN - 348)) | (1 << (PostgreSQLParser.UPDATE - 348)) | (1 << (PostgreSQLParser.VACUUM - 348)))) != 0) or ((((_la - 453)) & ~0x3f) == 0 and ((1 << (_la - 453)) & ((1 << (PostgreSQLParser.VALUES - 453)) | (1 << (PostgreSQLParser.CALL - 453)) | (1 << (PostgreSQLParser.IMPORT_P - 453)) | (1 << (PostgreSQLParser.END_P - 453)))) != 0):
                    self.state = 1447
                    self.stmt()


                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def altereventtrigstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltereventtrigstmtContext,0)


        def altercollationstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltercollationstmtContext,0)


        def alterdatabasestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterdatabasestmtContext,0)


        def alterdatabasesetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterdatabasesetstmtContext,0)


        def alterdefaultprivilegesstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterdefaultprivilegesstmtContext,0)


        def alterdomainstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterdomainstmtContext,0)


        def alterenumstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterenumstmtContext,0)


        def alterextensionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterextensionstmtContext,0)


        def alterextensioncontentsstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterextensioncontentsstmtContext,0)


        def alterfdwstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterfdwstmtContext,0)


        def alterforeignserverstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterforeignserverstmtContext,0)


        def alterfunctionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterfunctionstmtContext,0)


        def altergroupstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltergroupstmtContext,0)


        def alterobjectdependsstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterobjectdependsstmtContext,0)


        def alterobjectschemastmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterobjectschemastmtContext,0)


        def alterownerstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterownerstmtContext,0)


        def alteroperatorstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlteroperatorstmtContext,0)


        def altertypestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertypestmtContext,0)


        def alterpolicystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterpolicystmtContext,0)


        def alterseqstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterseqstmtContext,0)


        def altersystemstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltersystemstmtContext,0)


        def altertablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertablestmtContext,0)


        def altertblspcstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertblspcstmtContext,0)


        def altercompositetypestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltercompositetypestmtContext,0)


        def alterpublicationstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterpublicationstmtContext,0)


        def alterrolesetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterrolesetstmtContext,0)


        def alterrolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterrolestmtContext,0)


        def altersubscriptionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltersubscriptionstmtContext,0)


        def alterstatsstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterstatsstmtContext,0)


        def altertsconfigurationstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertsconfigurationstmtContext,0)


        def altertsdictionarystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertsdictionarystmtContext,0)


        def alterusermappingstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterusermappingstmtContext,0)


        def analyzestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AnalyzestmtContext,0)


        def callstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CallstmtContext,0)


        def checkpointstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CheckpointstmtContext,0)


        def closeportalstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CloseportalstmtContext,0)


        def clusterstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ClusterstmtContext,0)


        def commentstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CommentstmtContext,0)


        def constraintssetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintssetstmtContext,0)


        def copystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CopystmtContext,0)


        def createamstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateamstmtContext,0)


        def createasstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateasstmtContext,0)


        def createassertionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateassertionstmtContext,0)


        def createcaststmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatecaststmtContext,0)


        def createconversionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateconversionstmtContext,0)


        def createdomainstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatedomainstmtContext,0)


        def createextensionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateextensionstmtContext,0)


        def createfdwstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatefdwstmtContext,0)


        def createforeignserverstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateforeignserverstmtContext,0)


        def createforeigntablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateforeigntablestmtContext,0)


        def createfunctionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatefunctionstmtContext,0)


        def creategroupstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreategroupstmtContext,0)


        def creatematviewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatematviewstmtContext,0)


        def createopclassstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateopclassstmtContext,0)


        def createopfamilystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateopfamilystmtContext,0)


        def createpublicationstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatepublicationstmtContext,0)


        def alteropfamilystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlteropfamilystmtContext,0)


        def createpolicystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatepolicystmtContext,0)


        def createplangstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateplangstmtContext,0)


        def createschemastmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateschemastmtContext,0)


        def createseqstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateseqstmtContext,0)


        def createstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatestmtContext,0)


        def createsubscriptionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatesubscriptionstmtContext,0)


        def createstatsstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatestatsstmtContext,0)


        def createtablespacestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatetablespacestmtContext,0)


        def createtransformstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatetransformstmtContext,0)


        def createtrigstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatetrigstmtContext,0)


        def createeventtrigstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateeventtrigstmtContext,0)


        def createrolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreaterolestmtContext,0)


        def createuserstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateuserstmtContext,0)


        def createusermappingstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateusermappingstmtContext,0)


        def createdbstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatedbstmtContext,0)


        def deallocatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeallocatestmtContext,0)


        def declarecursorstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeclarecursorstmtContext,0)


        def definestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinestmtContext,0)


        def deletestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeletestmtContext,0)


        def discardstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DiscardstmtContext,0)


        def dostmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DostmtContext,0)


        def dropcaststmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropcaststmtContext,0)


        def dropopclassstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropopclassstmtContext,0)


        def dropopfamilystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropopfamilystmtContext,0)


        def dropownedstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropownedstmtContext,0)


        def dropstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropstmtContext,0)


        def dropsubscriptionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropsubscriptionstmtContext,0)


        def droptablespacestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DroptablespacestmtContext,0)


        def droptransformstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DroptransformstmtContext,0)


        def droprolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DroprolestmtContext,0)


        def dropusermappingstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropusermappingstmtContext,0)


        def dropdbstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropdbstmtContext,0)


        def executestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExecutestmtContext,0)


        def explainstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExplainstmtContext,0)


        def fetchstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.FetchstmtContext,0)


        def grantstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.GrantstmtContext,0)


        def grantrolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.GrantrolestmtContext,0)


        def importforeignschemastmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ImportforeignschemastmtContext,0)


        def indexstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndexstmtContext,0)


        def insertstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.InsertstmtContext,0)


        def mergestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.MergestmtContext,0)


        def listenstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ListenstmtContext,0)


        def refreshmatviewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RefreshmatviewstmtContext,0)


        def loadstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.LoadstmtContext,0)


        def lockstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.LockstmtContext,0)


        def notifystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.NotifystmtContext,0)


        def preparestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.PreparestmtContext,0)


        def reassignownedstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReassignownedstmtContext,0)


        def reindexstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReindexstmtContext,0)


        def removeaggrstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RemoveaggrstmtContext,0)


        def removefuncstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RemovefuncstmtContext,0)


        def removeoperstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RemoveoperstmtContext,0)


        def renamestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RenamestmtContext,0)


        def revokestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RevokestmtContext,0)


        def revokerolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RevokerolestmtContext,0)


        def rulestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RulestmtContext,0)


        def seclabelstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeclabelstmtContext,0)


        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def transactionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.TransactionstmtContext,0)


        def truncatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.TruncatestmtContext,0)


        def unlistenstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UnlistenstmtContext,0)


        def updatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UpdatestmtContext,0)


        def vacuumstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VacuumstmtContext,0)


        def variableresetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariableresetstmtContext,0)


        def variablesetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariablesetstmtContext,0)


        def variableshowstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariableshowstmtContext,0)


        def viewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ViewstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = PostgreSQLParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stmt)
        try:
            self.state = 1579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                self.altereventtrigstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.altercollationstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                self.alterdatabasestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1458
                self.alterdatabasesetstmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1459
                self.alterdefaultprivilegesstmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1460
                self.alterdomainstmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1461
                self.alterenumstmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1462
                self.alterextensionstmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1463
                self.alterextensioncontentsstmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1464
                self.alterfdwstmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1465
                self.alterforeignserverstmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1466
                self.alterfunctionstmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1467
                self.altergroupstmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1468
                self.alterobjectdependsstmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1469
                self.alterobjectschemastmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1470
                self.alterownerstmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1471
                self.alteroperatorstmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1472
                self.altertypestmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1473
                self.alterpolicystmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1474
                self.alterseqstmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1475
                self.altersystemstmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1476
                self.altertablestmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1477
                self.altertblspcstmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1478
                self.altercompositetypestmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1479
                self.alterpublicationstmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1480
                self.alterrolesetstmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1481
                self.alterrolestmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1482
                self.altersubscriptionstmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1483
                self.alterstatsstmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1484
                self.altertsconfigurationstmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1485
                self.altertsdictionarystmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1486
                self.alterusermappingstmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1487
                self.analyzestmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1488
                self.callstmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1489
                self.checkpointstmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1490
                self.closeportalstmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1491
                self.clusterstmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1492
                self.commentstmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1493
                self.constraintssetstmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1494
                self.copystmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1495
                self.createamstmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1496
                self.createasstmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1497
                self.createassertionstmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1498
                self.createcaststmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1499
                self.createconversionstmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1500
                self.createdomainstmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1501
                self.createextensionstmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1502
                self.createfdwstmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1503
                self.createforeignserverstmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1504
                self.createforeigntablestmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1505
                self.createfunctionstmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1506
                self.creategroupstmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1507
                self.creatematviewstmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1508
                self.createopclassstmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1509
                self.createopfamilystmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1510
                self.createpublicationstmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1511
                self.alteropfamilystmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1512
                self.createpolicystmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1513
                self.createplangstmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1514
                self.createschemastmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1515
                self.createseqstmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1516
                self.createstmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1517
                self.createsubscriptionstmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1518
                self.createstatsstmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1519
                self.createtablespacestmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1520
                self.createtransformstmt()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1521
                self.createtrigstmt()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1522
                self.createeventtrigstmt()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1523
                self.createrolestmt()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1524
                self.createuserstmt()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1525
                self.createusermappingstmt()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1526
                self.createdbstmt()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1527
                self.deallocatestmt()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1528
                self.declarecursorstmt()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1529
                self.definestmt()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1530
                self.deletestmt()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1531
                self.discardstmt()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1532
                self.dostmt()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1533
                self.dropcaststmt()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1534
                self.dropopclassstmt()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1535
                self.dropopfamilystmt()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 1536
                self.dropownedstmt()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 1537
                self.dropstmt()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 1538
                self.dropsubscriptionstmt()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 1539
                self.droptablespacestmt()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 1540
                self.droptransformstmt()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 1541
                self.droprolestmt()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 1542
                self.dropusermappingstmt()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 1543
                self.dropdbstmt()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 1544
                self.executestmt()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 1545
                self.explainstmt()
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 1546
                self.fetchstmt()
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 1547
                self.grantstmt()
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 1548
                self.grantrolestmt()
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 1549
                self.importforeignschemastmt()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 1550
                self.indexstmt()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 1551
                self.insertstmt()
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 1552
                self.mergestmt()
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 1553
                self.listenstmt()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 1554
                self.refreshmatviewstmt()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 1555
                self.loadstmt()
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 1556
                self.lockstmt()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 1557
                self.notifystmt()
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 1558
                self.preparestmt()
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 1559
                self.reassignownedstmt()
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 1560
                self.reindexstmt()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 1561
                self.removeaggrstmt()
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 1562
                self.removefuncstmt()
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 1563
                self.removeoperstmt()
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 1564
                self.renamestmt()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)
                self.state = 1565
                self.revokestmt()
                pass

            elif la_ == 112:
                self.enterOuterAlt(localctx, 112)
                self.state = 1566
                self.revokerolestmt()
                pass

            elif la_ == 113:
                self.enterOuterAlt(localctx, 113)
                self.state = 1567
                self.rulestmt()
                pass

            elif la_ == 114:
                self.enterOuterAlt(localctx, 114)
                self.state = 1568
                self.seclabelstmt()
                pass

            elif la_ == 115:
                self.enterOuterAlt(localctx, 115)
                self.state = 1569
                self.selectstmt()
                pass

            elif la_ == 116:
                self.enterOuterAlt(localctx, 116)
                self.state = 1570
                self.transactionstmt()
                pass

            elif la_ == 117:
                self.enterOuterAlt(localctx, 117)
                self.state = 1571
                self.truncatestmt()
                pass

            elif la_ == 118:
                self.enterOuterAlt(localctx, 118)
                self.state = 1572
                self.unlistenstmt()
                pass

            elif la_ == 119:
                self.enterOuterAlt(localctx, 119)
                self.state = 1573
                self.updatestmt()
                pass

            elif la_ == 120:
                self.enterOuterAlt(localctx, 120)
                self.state = 1574
                self.vacuumstmt()
                pass

            elif la_ == 121:
                self.enterOuterAlt(localctx, 121)
                self.state = 1575
                self.variableresetstmt()
                pass

            elif la_ == 122:
                self.enterOuterAlt(localctx, 122)
                self.state = 1576
                self.variablesetstmt()
                pass

            elif la_ == 123:
                self.enterOuterAlt(localctx, 123)
                self.state = 1577
                self.variableshowstmt()
                pass

            elif la_ == 124:
                self.enterOuterAlt(localctx, 124)
                self.state = 1578
                self.viewstmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(PostgreSQLParser.CALL, 0)

        def func_application(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_applicationContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_callstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallstmt" ):
                listener.enterCallstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallstmt" ):
                listener.exitCallstmt(self)




    def callstmt(self):

        localctx = PostgreSQLParser.CallstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_callstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.match(PostgreSQLParser.CALL)
            self.state = 1582
            self.func_application()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreaterolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def roleid(self):
            return self.getTypedRuleContext(PostgreSQLParser.RoleidContext,0)


        def optrolelist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptrolelistContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createrolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreaterolestmt" ):
                listener.enterCreaterolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreaterolestmt" ):
                listener.exitCreaterolestmt(self)




    def createrolestmt(self):

        localctx = PostgreSQLParser.CreaterolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_createrolestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.match(PostgreSQLParser.CREATE)
            self.state = 1585
            self.match(PostgreSQLParser.ROLE)
            self.state = 1586
            self.roleid()
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 1587
                self.with_()


            self.state = 1590
            self.optrolelist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_with_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_" ):
                listener.enterWith_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_" ):
                listener.exitWith_(self)




    def with_(self):

        localctx = PostgreSQLParser.With_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_with_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(PostgreSQLParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptrolelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createoptroleelem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.CreateoptroleelemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.CreateoptroleelemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optrolelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptrolelist" ):
                listener.enterOptrolelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptrolelist" ):
                listener.exitOptrolelist(self)




    def optrolelist(self):

        localctx = PostgreSQLParser.OptrolelistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_optrolelist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.IN_P or _la==PostgreSQLParser.USER or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (PostgreSQLParser.ADMIN - 172)) | (1 << (PostgreSQLParser.CONNECTION - 172)) | (1 << (PostgreSQLParser.ENCRYPTED - 172)))) != 0) or _la==PostgreSQLParser.INHERIT or _la==PostgreSQLParser.PASSWORD or ((((_la - 349)) & ~0x3f) == 0 and ((1 << (_la - 349)) & ((1 << (PostgreSQLParser.ROLE - 349)) | (1 << (PostgreSQLParser.SYSID - 349)) | (1 << (PostgreSQLParser.UNENCRYPTED - 349)) | (1 << (PostgreSQLParser.VALID - 349)))) != 0) or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)))) != 0):
                self.state = 1594
                self.createoptroleelem()
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteroptrolelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alteroptroleelem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.AlteroptroleelemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.AlteroptroleelemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alteroptrolelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteroptrolelist" ):
                listener.enterAlteroptrolelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteroptrolelist" ):
                listener.exitAlteroptrolelist(self)




    def alteroptrolelist(self):

        localctx = PostgreSQLParser.AlteroptrolelistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_alteroptrolelist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.USER or _la==PostgreSQLParser.CONNECTION or _la==PostgreSQLParser.ENCRYPTED or _la==PostgreSQLParser.INHERIT or _la==PostgreSQLParser.PASSWORD or _la==PostgreSQLParser.UNENCRYPTED or _la==PostgreSQLParser.VALID or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)))) != 0):
                self.state = 1600
                self.alteroptroleelem()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteroptroleelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(PostgreSQLParser.PASSWORD, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def ENCRYPTED(self):
            return self.getToken(PostgreSQLParser.ENCRYPTED, 0)

        def UNENCRYPTED(self):
            return self.getToken(PostgreSQLParser.UNENCRYPTED, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def VALID(self):
            return self.getToken(PostgreSQLParser.VALID, 0)

        def UNTIL(self):
            return self.getToken(PostgreSQLParser.UNTIL, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alteroptroleelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteroptroleelem" ):
                listener.enterAlteroptroleelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteroptroleelem" ):
                listener.exitAlteroptroleelem(self)




    def alteroptroleelem(self):

        localctx = PostgreSQLParser.AlteroptroleelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_alteroptroleelem)
        self._la = 0 # Token type
        try:
            self.state = 1624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.PASSWORD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1606
                self.match(PostgreSQLParser.PASSWORD)
                self.state = 1609
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                    self.state = 1607
                    self.sconst()
                    pass
                elif token in [PostgreSQLParser.NULL_P]:
                    self.state = 1608
                    self.match(PostgreSQLParser.NULL_P)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PostgreSQLParser.ENCRYPTED, PostgreSQLParser.UNENCRYPTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ENCRYPTED or _la==PostgreSQLParser.UNENCRYPTED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1612
                self.match(PostgreSQLParser.PASSWORD)
                self.state = 1613
                self.sconst()
                pass
            elif token in [PostgreSQLParser.INHERIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1614
                self.match(PostgreSQLParser.INHERIT)
                pass
            elif token in [PostgreSQLParser.CONNECTION]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1615
                self.match(PostgreSQLParser.CONNECTION)
                self.state = 1616
                self.match(PostgreSQLParser.LIMIT)
                self.state = 1617
                self.signediconst()
                pass
            elif token in [PostgreSQLParser.VALID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1618
                self.match(PostgreSQLParser.VALID)
                self.state = 1619
                self.match(PostgreSQLParser.UNTIL)
                self.state = 1620
                self.sconst()
                pass
            elif token in [PostgreSQLParser.USER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1621
                self.match(PostgreSQLParser.USER)
                self.state = 1622
                self.role_list()
                pass
            elif token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1623
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateoptroleelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alteroptroleelem(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlteroptroleelemContext,0)


        def SYSID(self):
            return self.getToken(PostgreSQLParser.SYSID, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createoptroleelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateoptroleelem" ):
                listener.enterCreateoptroleelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateoptroleelem" ):
                listener.exitCreateoptroleelem(self)




    def createoptroleelem(self):

        localctx = PostgreSQLParser.CreateoptroleelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_createoptroleelem)
        self._la = 0 # Token type
        try:
            self.state = 1636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.USER, PostgreSQLParser.CONNECTION, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.INHERIT, PostgreSQLParser.PASSWORD, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.VALID, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1626
                self.alteroptroleelem()
                pass
            elif token in [PostgreSQLParser.SYSID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1627
                self.match(PostgreSQLParser.SYSID)
                self.state = 1628
                self.iconst()
                pass
            elif token in [PostgreSQLParser.ADMIN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1629
                self.match(PostgreSQLParser.ADMIN)
                self.state = 1630
                self.role_list()
                pass
            elif token in [PostgreSQLParser.ROLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1631
                self.match(PostgreSQLParser.ROLE)
                self.state = 1632
                self.role_list()
                pass
            elif token in [PostgreSQLParser.IN_P]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1633
                self.match(PostgreSQLParser.IN_P)
                self.state = 1634
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.GROUP_P or _la==PostgreSQLParser.ROLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1635
                self.role_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateuserstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def roleid(self):
            return self.getTypedRuleContext(PostgreSQLParser.RoleidContext,0)


        def optrolelist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptrolelistContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createuserstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateuserstmt" ):
                listener.enterCreateuserstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateuserstmt" ):
                listener.exitCreateuserstmt(self)




    def createuserstmt(self):

        localctx = PostgreSQLParser.CreateuserstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_createuserstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.match(PostgreSQLParser.CREATE)
            self.state = 1639
            self.match(PostgreSQLParser.USER)
            self.state = 1640
            self.roleid()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 1641
                self.with_()


            self.state = 1644
            self.optrolelist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterrolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def alteroptrolelist(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlteroptrolelistContext,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterrolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterrolestmt" ):
                listener.enterAlterrolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterrolestmt" ):
                listener.exitAlterrolestmt(self)




    def alterrolestmt(self):

        localctx = PostgreSQLParser.AlterrolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alterrolestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.match(PostgreSQLParser.ALTER)
            self.state = 1647
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.USER or _la==PostgreSQLParser.ROLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1648
            self.rolespec()
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 1649
                self.with_()


            self.state = 1652
            self.alteroptrolelist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_database_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_in_database_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_database_" ):
                listener.enterIn_database_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_database_" ):
                listener.exitIn_database_(self)




    def in_database_(self):

        localctx = PostgreSQLParser.In_database_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_in_database_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.match(PostgreSQLParser.IN_P)
            self.state = 1655
            self.match(PostgreSQLParser.DATABASE)
            self.state = 1656
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterrolesetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def setresetclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.SetresetclauseContext,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def in_database_(self):
            return self.getTypedRuleContext(PostgreSQLParser.In_database_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterrolesetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterrolesetstmt" ):
                listener.enterAlterrolesetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterrolesetstmt" ):
                listener.exitAlterrolesetstmt(self)




    def alterrolesetstmt(self):

        localctx = PostgreSQLParser.AlterrolesetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_alterrolesetstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.match(PostgreSQLParser.ALTER)
            self.state = 1659
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.USER or _la==PostgreSQLParser.ROLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ALL:
                self.state = 1660
                self.match(PostgreSQLParser.ALL)


            self.state = 1663
            self.rolespec()
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.IN_P:
                self.state = 1664
                self.in_database_()


            self.state = 1667
            self.setresetclause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DroprolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_droprolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDroprolestmt" ):
                listener.enterDroprolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDroprolestmt" ):
                listener.exitDroprolestmt(self)




    def droprolestmt(self):

        localctx = PostgreSQLParser.DroprolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_droprolestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.match(PostgreSQLParser.DROP)
            self.state = 1670
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.GROUP_P or _la==PostgreSQLParser.USER or _la==PostgreSQLParser.ROLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 1671
                self.match(PostgreSQLParser.IF_P)
                self.state = 1672
                self.match(PostgreSQLParser.EXISTS)


            self.state = 1675
            self.role_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreategroupstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def roleid(self):
            return self.getTypedRuleContext(PostgreSQLParser.RoleidContext,0)


        def optrolelist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptrolelistContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_creategroupstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreategroupstmt" ):
                listener.enterCreategroupstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreategroupstmt" ):
                listener.exitCreategroupstmt(self)




    def creategroupstmt(self):

        localctx = PostgreSQLParser.CreategroupstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_creategroupstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.match(PostgreSQLParser.CREATE)
            self.state = 1678
            self.match(PostgreSQLParser.GROUP_P)
            self.state = 1679
            self.roleid()
            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 1680
                self.with_()


            self.state = 1683
            self.optrolelist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltergroupstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def add_drop(self):
            return self.getTypedRuleContext(PostgreSQLParser.Add_dropContext,0)


        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altergroupstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltergroupstmt" ):
                listener.enterAltergroupstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltergroupstmt" ):
                listener.exitAltergroupstmt(self)




    def altergroupstmt(self):

        localctx = PostgreSQLParser.AltergroupstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_altergroupstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1685
            self.match(PostgreSQLParser.ALTER)
            self.state = 1686
            self.match(PostgreSQLParser.GROUP_P)
            self.state = 1687
            self.rolespec()
            self.state = 1688
            self.add_drop()
            self.state = 1689
            self.match(PostgreSQLParser.USER)
            self.state = 1690
            self.role_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_dropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_add_drop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_drop" ):
                listener.enterAdd_drop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_drop" ):
                listener.exitAdd_drop(self)




    def add_drop(self):

        localctx = PostgreSQLParser.Add_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_add_drop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ADD_P or _la==PostgreSQLParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateschemastmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def optschemaeltlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptschemaeltlistContext,0)


        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def optschemaname(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptschemanameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createschemastmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateschemastmt" ):
                listener.enterCreateschemastmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateschemastmt" ):
                listener.exitCreateschemastmt(self)




    def createschemastmt(self):

        localctx = PostgreSQLParser.CreateschemastmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createschemastmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.match(PostgreSQLParser.CREATE)
            self.state = 1695
            self.match(PostgreSQLParser.SCHEMA)
            self.state = 1699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 1696
                self.match(PostgreSQLParser.IF_P)
                self.state = 1697
                self.match(PostgreSQLParser.NOT)
                self.state = 1698
                self.match(PostgreSQLParser.EXISTS)


            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 1701
                    self.optschemaname()


                self.state = 1704
                self.match(PostgreSQLParser.AUTHORIZATION)
                self.state = 1705
                self.rolespec()
                pass

            elif la_ == 2:
                self.state = 1706
                self.colid()
                pass


            self.state = 1709
            self.optschemaeltlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptschemanameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optschemaname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptschemaname" ):
                listener.enterOptschemaname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptschemaname" ):
                listener.exitOptschemaname(self)




    def optschemaname(self):

        localctx = PostgreSQLParser.OptschemanameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_optschemaname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptschemaeltlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schema_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Schema_stmtContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Schema_stmtContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optschemaeltlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptschemaeltlist" ):
                listener.enterOptschemaeltlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptschemaeltlist" ):
                listener.exitOptschemaeltlist(self)




    def optschemaeltlist(self):

        localctx = PostgreSQLParser.OptschemaeltlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_optschemaeltlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.CREATE or _la==PostgreSQLParser.GRANT:
                self.state = 1713
                self.schema_stmt()
                self.state = 1718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatestmtContext,0)


        def indexstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndexstmtContext,0)


        def createseqstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateseqstmtContext,0)


        def createtrigstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatetrigstmtContext,0)


        def grantstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.GrantstmtContext,0)


        def viewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ViewstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_schema_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_stmt" ):
                listener.enterSchema_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_stmt" ):
                listener.exitSchema_stmt(self)




    def schema_stmt(self):

        localctx = PostgreSQLParser.Schema_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_schema_stmt)
        try:
            self.state = 1725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1719
                self.createstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1720
                self.indexstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1721
                self.createseqstmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1722
                self.createtrigstmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1723
                self.grantstmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1724
                self.viewstmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariablesetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_rest(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_restContext,0)


        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_variablesetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariablesetstmt" ):
                listener.enterVariablesetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariablesetstmt" ):
                listener.exitVariablesetstmt(self)




    def variablesetstmt(self):

        localctx = PostgreSQLParser.VariablesetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_variablesetstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(PostgreSQLParser.SET)
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 1728
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.LOCAL or _la==PostgreSQLParser.SESSION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1731
            self.set_rest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def transaction_mode_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_mode_listContext,0)


        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def CHARACTERISTICS(self):
            return self.getToken(PostgreSQLParser.CHARACTERISTICS, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def set_rest_more(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_rest_moreContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_rest" ):
                listener.enterSet_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_rest" ):
                listener.exitSet_rest(self)




    def set_rest(self):

        localctx = PostgreSQLParser.Set_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_set_rest)
        try:
            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1733
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1734
                self.transaction_mode_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.match(PostgreSQLParser.SESSION)
                self.state = 1736
                self.match(PostgreSQLParser.CHARACTERISTICS)
                self.state = 1737
                self.match(PostgreSQLParser.AS)
                self.state = 1738
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1739
                self.transaction_mode_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1740
                self.set_rest_more()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_nameContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def var_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_listContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_set" ):
                listener.enterGeneric_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_set" ):
                listener.exitGeneric_set(self)




    def generic_set(self):

        localctx = PostgreSQLParser.Generic_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_generic_set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            self.var_name()
            self.state = 1744
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.EQUAL or _la==PostgreSQLParser.TO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.FALSE_P, PostgreSQLParser.ON, PostgreSQLParser.TRUE_P, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.state = 1745
                self.var_list()
                pass
            elif token in [PostgreSQLParser.DEFAULT]:
                self.state = 1746
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_rest_moreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_set(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_setContext,0)


        def var_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_nameContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def zone_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Zone_valueContext,0)


        def CATALOG(self):
            return self.getToken(PostgreSQLParser.CATALOG, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def NAMES(self):
            return self.getToken(PostgreSQLParser.NAMES, 0)

        def encoding_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Encoding_Context,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def XML_P(self):
            return self.getToken(PostgreSQLParser.XML_P, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def document_or_content(self):
            return self.getTypedRuleContext(PostgreSQLParser.Document_or_contentContext,0)


        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def SNAPSHOT(self):
            return self.getToken(PostgreSQLParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_rest_more

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_rest_more" ):
                listener.enterSet_rest_more(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_rest_more" ):
                listener.exitSet_rest_more(self)




    def set_rest_more(self):

        localctx = PostgreSQLParser.Set_rest_moreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_set_rest_more)
        self._la = 0 # Token type
        try:
            self.state = 1776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1749
                self.generic_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1750
                self.var_name()
                self.state = 1751
                self.match(PostgreSQLParser.FROM)
                self.state = 1752
                self.match(PostgreSQLParser.CURRENT_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1754
                self.match(PostgreSQLParser.TIME)
                self.state = 1755
                self.match(PostgreSQLParser.ZONE)
                self.state = 1756
                self.zone_value()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1757
                self.match(PostgreSQLParser.CATALOG)
                self.state = 1758
                self.sconst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1759
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 1760
                self.sconst()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1761
                self.match(PostgreSQLParser.NAMES)
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.DEFAULT or ((((_la - 563)) & ~0x3f) == 0 and ((1 << (_la - 563)) & ((1 << (PostgreSQLParser.StringConstant - 563)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 563)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 563)) | (1 << (PostgreSQLParser.EscapeStringConstant - 563)))) != 0):
                    self.state = 1762
                    self.encoding_()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1765
                self.match(PostgreSQLParser.ROLE)
                self.state = 1766
                self.nonreservedword_or_sconst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1767
                self.match(PostgreSQLParser.SESSION)
                self.state = 1768
                self.match(PostgreSQLParser.AUTHORIZATION)
                self.state = 1769
                self.nonreservedword_or_sconst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1770
                self.match(PostgreSQLParser.XML_P)
                self.state = 1771
                self.match(PostgreSQLParser.OPTION)
                self.state = 1772
                self.document_or_content()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1773
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1774
                self.match(PostgreSQLParser.SNAPSHOT)
                self.state = 1775
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColidContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColidContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_name" ):
                listener.enterVar_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_name" ):
                listener.exitVar_name(self)




    def var_name(self):

        localctx = PostgreSQLParser.Var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_var_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.colid()
            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.DOT:
                self.state = 1779
                self.match(PostgreSQLParser.DOT)
                self.state = 1780
                self.colid()
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Var_valueContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Var_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_var_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_list" ):
                listener.enterVar_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_list" ):
                listener.exitVar_list(self)




    def var_list(self):

        localctx = PostgreSQLParser.Var_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_var_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.var_value()
            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 1787
                self.match(PostgreSQLParser.COMMA)
                self.state = 1788
                self.var_value()
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_var_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_value" ):
                listener.enterVar_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_value" ):
                listener.exitVar_value(self)




    def var_value(self):

        localctx = PostgreSQLParser.Var_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_var_value)
        try:
            self.state = 1796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.FALSE_P, PostgreSQLParser.ON, PostgreSQLParser.TRUE_P, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.boolean_or_string_()
                pass
            elif token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.numericonly()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Iso_levelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(PostgreSQLParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(PostgreSQLParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(PostgreSQLParser.REPEATABLE, 0)

        def SERIALIZABLE(self):
            return self.getToken(PostgreSQLParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_iso_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIso_level" ):
                listener.enterIso_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIso_level" ):
                listener.exitIso_level(self)




    def iso_level(self):

        localctx = PostgreSQLParser.Iso_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_iso_level)
        self._la = 0 # Token type
        try:
            self.state = 1803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.READ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1798
                self.match(PostgreSQLParser.READ)
                self.state = 1799
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.COMMITTED or _la==PostgreSQLParser.UNCOMMITTED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PostgreSQLParser.REPEATABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1800
                self.match(PostgreSQLParser.REPEATABLE)
                self.state = 1801
                self.match(PostgreSQLParser.READ)
                pass
            elif token in [PostgreSQLParser.SERIALIZABLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1802
                self.match(PostgreSQLParser.SERIALIZABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_or_string_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_boolean_or_string_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_or_string_" ):
                listener.enterBoolean_or_string_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_or_string_" ):
                listener.exitBoolean_or_string_(self)




    def boolean_or_string_(self):

        localctx = PostgreSQLParser.Boolean_or_string_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_boolean_or_string_)
        try:
            self.state = 1809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.TRUE_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1805
                self.match(PostgreSQLParser.TRUE_P)
                pass
            elif token in [PostgreSQLParser.FALSE_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1806
                self.match(PostgreSQLParser.FALSE_P)
                pass
            elif token in [PostgreSQLParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1807
                self.match(PostgreSQLParser.ON)
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1808
                self.nonreservedword_or_sconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zone_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def constinterval(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstintervalContext,0)


        def interval_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_Context,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_zone_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZone_value" ):
                listener.enterZone_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZone_value" ):
                listener.exitZone_value(self)




    def zone_value(self):

        localctx = PostgreSQLParser.Zone_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_zone_value)
        self._la = 0 # Token type
        try:
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1811
                self.sconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1812
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1813
                self.constinterval()
                self.state = 1814
                self.sconst()
                self.state = 1816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.DAY_P or _la==PostgreSQLParser.HOUR_P or _la==PostgreSQLParser.MINUTE_P or _la==PostgreSQLParser.MONTH_P or _la==PostgreSQLParser.SECOND_P or _la==PostgreSQLParser.YEAR_P:
                    self.state = 1815
                    self.interval_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1818
                self.constinterval()
                self.state = 1819
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 1820
                self.iconst()
                self.state = 1821
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 1822
                self.sconst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1824
                self.numericonly()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1825
                self.match(PostgreSQLParser.DEFAULT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1826
                self.match(PostgreSQLParser.LOCAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_encoding_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_" ):
                listener.enterEncoding_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_" ):
                listener.exitEncoding_(self)




    def encoding_(self):

        localctx = PostgreSQLParser.Encoding_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_encoding_)
        try:
            self.state = 1831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1829
                self.sconst()
                pass
            elif token in [PostgreSQLParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1830
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonreservedword_or_sconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nonreservedword_or_sconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreservedword_or_sconst" ):
                listener.enterNonreservedword_or_sconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreservedword_or_sconst" ):
                listener.exitNonreservedword_or_sconst(self)




    def nonreservedword_or_sconst(self):

        localctx = PostgreSQLParser.Nonreservedword_or_sconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_nonreservedword_or_sconst)
        try:
            self.state = 1835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.nonreservedword()
                pass
            elif token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1834
                self.sconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableresetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def reset_rest(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reset_restContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_variableresetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableresetstmt" ):
                listener.enterVariableresetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableresetstmt" ):
                listener.exitVariableresetstmt(self)




    def variableresetstmt(self):

        localctx = PostgreSQLParser.VariableresetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableresetstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.match(PostgreSQLParser.RESET)
            self.state = 1838
            self.reset_rest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reset_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_reset(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_resetContext,0)


        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reset_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReset_rest" ):
                listener.enterReset_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReset_rest" ):
                listener.exitReset_rest(self)




    def reset_rest(self):

        localctx = PostgreSQLParser.Reset_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_reset_rest)
        try:
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1840
                self.generic_reset()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                self.match(PostgreSQLParser.TIME)
                self.state = 1842
                self.match(PostgreSQLParser.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1843
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1844
                self.match(PostgreSQLParser.ISOLATION)
                self.state = 1845
                self.match(PostgreSQLParser.LEVEL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1846
                self.match(PostgreSQLParser.SESSION)
                self.state = 1847
                self.match(PostgreSQLParser.AUTHORIZATION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_resetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_nameContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_reset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_reset" ):
                listener.enterGeneric_reset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_reset" ):
                listener.exitGeneric_reset(self)




    def generic_reset(self):

        localctx = PostgreSQLParser.Generic_resetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_generic_reset)
        try:
            self.state = 1852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1850
                self.var_name()
                pass
            elif token in [PostgreSQLParser.ALL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1851
                self.match(PostgreSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetresetclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_rest(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_restContext,0)


        def variableresetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariableresetstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_setresetclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetresetclause" ):
                listener.enterSetresetclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetresetclause" ):
                listener.exitSetresetclause(self)




    def setresetclause(self):

        localctx = PostgreSQLParser.SetresetclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_setresetclause)
        try:
            self.state = 1857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self.match(PostgreSQLParser.SET)
                self.state = 1855
                self.set_rest()
                pass
            elif token in [PostgreSQLParser.RESET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1856
                self.variableresetstmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionsetresetclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_rest_more(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_rest_moreContext,0)


        def variableresetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariableresetstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_functionsetresetclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionsetresetclause" ):
                listener.enterFunctionsetresetclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionsetresetclause" ):
                listener.exitFunctionsetresetclause(self)




    def functionsetresetclause(self):

        localctx = PostgreSQLParser.FunctionsetresetclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functionsetresetclause)
        try:
            self.state = 1862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1859
                self.match(PostgreSQLParser.SET)
                self.state = 1860
                self.set_rest_more()
                pass
            elif token in [PostgreSQLParser.RESET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1861
                self.variableresetstmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableshowstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(PostgreSQLParser.SHOW, 0)

        def var_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_nameContext,0)


        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_variableshowstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableshowstmt" ):
                listener.enterVariableshowstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableshowstmt" ):
                listener.exitVariableshowstmt(self)




    def variableshowstmt(self):

        localctx = PostgreSQLParser.VariableshowstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variableshowstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(PostgreSQLParser.SHOW)
            self.state = 1874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 1865
                self.var_name()
                pass

            elif la_ == 2:
                self.state = 1866
                self.match(PostgreSQLParser.TIME)
                self.state = 1867
                self.match(PostgreSQLParser.ZONE)
                pass

            elif la_ == 3:
                self.state = 1868
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1869
                self.match(PostgreSQLParser.ISOLATION)
                self.state = 1870
                self.match(PostgreSQLParser.LEVEL)
                pass

            elif la_ == 4:
                self.state = 1871
                self.match(PostgreSQLParser.SESSION)
                self.state = 1872
                self.match(PostgreSQLParser.AUTHORIZATION)
                pass

            elif la_ == 5:
                self.state = 1873
                self.match(PostgreSQLParser.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintssetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def CONSTRAINTS(self):
            return self.getToken(PostgreSQLParser.CONSTRAINTS, 0)

        def constraints_set_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Constraints_set_listContext,0)


        def constraints_set_mode(self):
            return self.getTypedRuleContext(PostgreSQLParser.Constraints_set_modeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintssetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintssetstmt" ):
                listener.enterConstraintssetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintssetstmt" ):
                listener.exitConstraintssetstmt(self)




    def constraintssetstmt(self):

        localctx = PostgreSQLParser.ConstraintssetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_constraintssetstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(PostgreSQLParser.SET)
            self.state = 1877
            self.match(PostgreSQLParser.CONSTRAINTS)
            self.state = 1878
            self.constraints_set_list()
            self.state = 1879
            self.constraints_set_mode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraints_set_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraints_set_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraints_set_list" ):
                listener.enterConstraints_set_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraints_set_list" ):
                listener.exitConstraints_set_list(self)




    def constraints_set_list(self):

        localctx = PostgreSQLParser.Constraints_set_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_constraints_set_list)
        try:
            self.state = 1883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1881
                self.match(PostgreSQLParser.ALL)
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1882
                self.qualified_name_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraints_set_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraints_set_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraints_set_mode" ):
                listener.enterConstraints_set_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraints_set_mode" ):
                listener.exitConstraints_set_mode(self)




    def constraints_set_mode(self):

        localctx = PostgreSQLParser.Constraints_set_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_constraints_set_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.DEFERRED or _la==PostgreSQLParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckpointstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKPOINT(self):
            return self.getToken(PostgreSQLParser.CHECKPOINT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_checkpointstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckpointstmt" ):
                listener.enterCheckpointstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckpointstmt" ):
                listener.exitCheckpointstmt(self)




    def checkpointstmt(self):

        localctx = PostgreSQLParser.CheckpointstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_checkpointstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.match(PostgreSQLParser.CHECKPOINT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(PostgreSQLParser.DISCARD, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def PLANS(self):
            return self.getToken(PostgreSQLParser.PLANS, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_discardstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardstmt" ):
                listener.enterDiscardstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardstmt" ):
                listener.exitDiscardstmt(self)




    def discardstmt(self):

        localctx = PostgreSQLParser.DiscardstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_discardstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            self.match(PostgreSQLParser.DISCARD)
            self.state = 1890
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.PLANS or _la==PostgreSQLParser.SEQUENCES or _la==PostgreSQLParser.TEMP or _la==PostgreSQLParser.TEMPORARY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertablestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def alter_table_cmds(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_table_cmdsContext,0)


        def partition_cmd(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_cmdContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TABLESPACE)
            else:
                return self.getToken(PostgreSQLParser.TABLESPACE, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def nowait_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nowait_Context,0)


        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def index_partition_cmd(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_partition_cmdContext,0)


        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertablestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertablestmt" ):
                listener.enterAltertablestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertablestmt" ):
                listener.exitAltertablestmt(self)




    def altertablestmt(self):

        localctx = PostgreSQLParser.AltertablestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_altertablestmt)
        self._la = 0 # Token type
        try:
            self.state = 2004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1892
                self.match(PostgreSQLParser.ALTER)
                self.state = 1893
                self.match(PostgreSQLParser.TABLE)
                self.state = 1896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 1894
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1895
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1898
                self.relation_expr()
                self.state = 1901
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.NOT, PostgreSQLParser.ADD_P, PostgreSQLParser.ALTER, PostgreSQLParser.CLUSTER, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DROP, PostgreSQLParser.ENABLE_P, PostgreSQLParser.FORCE, PostgreSQLParser.INHERIT, PostgreSQLParser.NO, PostgreSQLParser.OF, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNER, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.SET, PostgreSQLParser.VALIDATE]:
                    self.state = 1899
                    self.alter_table_cmds()
                    pass
                elif token in [PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH]:
                    self.state = 1900
                    self.partition_cmd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1903
                self.match(PostgreSQLParser.ALTER)
                self.state = 1904
                self.match(PostgreSQLParser.TABLE)
                self.state = 1905
                self.match(PostgreSQLParser.ALL)
                self.state = 1906
                self.match(PostgreSQLParser.IN_P)
                self.state = 1907
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1908
                self.name()
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OWNED:
                    self.state = 1909
                    self.match(PostgreSQLParser.OWNED)
                    self.state = 1910
                    self.match(PostgreSQLParser.BY)
                    self.state = 1911
                    self.role_list()


                self.state = 1914
                self.match(PostgreSQLParser.SET)
                self.state = 1915
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1916
                self.name()
                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOWAIT:
                    self.state = 1917
                    self.nowait_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1920
                self.match(PostgreSQLParser.ALTER)
                self.state = 1921
                self.match(PostgreSQLParser.INDEX)
                self.state = 1924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 1922
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1923
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1926
                self.qualified_name()
                self.state = 1929
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.NOT, PostgreSQLParser.ADD_P, PostgreSQLParser.ALTER, PostgreSQLParser.CLUSTER, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DROP, PostgreSQLParser.ENABLE_P, PostgreSQLParser.FORCE, PostgreSQLParser.INHERIT, PostgreSQLParser.NO, PostgreSQLParser.OF, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNER, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.SET, PostgreSQLParser.VALIDATE]:
                    self.state = 1927
                    self.alter_table_cmds()
                    pass
                elif token in [PostgreSQLParser.ATTACH]:
                    self.state = 1928
                    self.index_partition_cmd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1931
                self.match(PostgreSQLParser.ALTER)
                self.state = 1932
                self.match(PostgreSQLParser.INDEX)
                self.state = 1933
                self.match(PostgreSQLParser.ALL)
                self.state = 1934
                self.match(PostgreSQLParser.IN_P)
                self.state = 1935
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1936
                self.name()
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OWNED:
                    self.state = 1937
                    self.match(PostgreSQLParser.OWNED)
                    self.state = 1938
                    self.match(PostgreSQLParser.BY)
                    self.state = 1939
                    self.role_list()


                self.state = 1942
                self.match(PostgreSQLParser.SET)
                self.state = 1943
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1944
                self.name()
                self.state = 1946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOWAIT:
                    self.state = 1945
                    self.nowait_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1948
                self.match(PostgreSQLParser.ALTER)
                self.state = 1949
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 1952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 1950
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1951
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1954
                self.qualified_name()
                self.state = 1955
                self.alter_table_cmds()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1957
                self.match(PostgreSQLParser.ALTER)
                self.state = 1958
                self.match(PostgreSQLParser.VIEW)
                self.state = 1961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 1959
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1960
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1963
                self.qualified_name()
                self.state = 1964
                self.alter_table_cmds()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1966
                self.match(PostgreSQLParser.ALTER)
                self.state = 1967
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 1968
                self.match(PostgreSQLParser.VIEW)
                self.state = 1971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 1969
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1970
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1973
                self.qualified_name()
                self.state = 1974
                self.alter_table_cmds()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1976
                self.match(PostgreSQLParser.ALTER)
                self.state = 1977
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 1978
                self.match(PostgreSQLParser.VIEW)
                self.state = 1979
                self.match(PostgreSQLParser.ALL)
                self.state = 1980
                self.match(PostgreSQLParser.IN_P)
                self.state = 1981
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1982
                self.name()
                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OWNED:
                    self.state = 1983
                    self.match(PostgreSQLParser.OWNED)
                    self.state = 1984
                    self.match(PostgreSQLParser.BY)
                    self.state = 1985
                    self.role_list()


                self.state = 1988
                self.match(PostgreSQLParser.SET)
                self.state = 1989
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1990
                self.name()
                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOWAIT:
                    self.state = 1991
                    self.nowait_()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1994
                self.match(PostgreSQLParser.ALTER)
                self.state = 1995
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 1996
                self.match(PostgreSQLParser.TABLE)
                self.state = 1999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 1997
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1998
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 2001
                self.relation_expr()
                self.state = 2002
                self.alter_table_cmds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_cmdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_cmd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_table_cmdContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_table_cmdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_table_cmds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_cmds" ):
                listener.enterAlter_table_cmds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_cmds" ):
                listener.exitAlter_table_cmds(self)




    def alter_table_cmds(self):

        localctx = PostgreSQLParser.Alter_table_cmdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alter_table_cmds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.alter_table_cmd()
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2007
                self.match(PostgreSQLParser.COMMA)
                self.state = 2008
                self.alter_table_cmd()
                self.state = 2013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH(self):
            return self.getToken(PostgreSQLParser.ATTACH, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def partitionboundspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.PartitionboundspecContext,0)


        def DETACH(self):
            return self.getToken(PostgreSQLParser.DETACH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_cmd" ):
                listener.enterPartition_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_cmd" ):
                listener.exitPartition_cmd(self)




    def partition_cmd(self):

        localctx = PostgreSQLParser.Partition_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_partition_cmd)
        try:
            self.state = 2022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ATTACH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2014
                self.match(PostgreSQLParser.ATTACH)
                self.state = 2015
                self.match(PostgreSQLParser.PARTITION)
                self.state = 2016
                self.qualified_name()
                self.state = 2017
                self.partitionboundspec()
                pass
            elif token in [PostgreSQLParser.DETACH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2019
                self.match(PostgreSQLParser.DETACH)
                self.state = 2020
                self.match(PostgreSQLParser.PARTITION)
                self.state = 2021
                self.qualified_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_partition_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH(self):
            return self.getToken(PostgreSQLParser.ATTACH, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_partition_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_partition_cmd" ):
                listener.enterIndex_partition_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_partition_cmd" ):
                listener.exitIndex_partition_cmd(self)




    def index_partition_cmd(self):

        localctx = PostgreSQLParser.Index_partition_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_index_partition_cmd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.match(PostgreSQLParser.ATTACH)
            self.state = 2025
            self.match(PostgreSQLParser.PARTITION)
            self.state = 2026
            self.qualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def columnDef(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnDefContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def colid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColidContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColidContext,i)


        def alter_column_default(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_column_defaultContext,0)


        def column_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_Context,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def EXPRESSION(self):
            return self.getToken(PostgreSQLParser.EXPRESSION, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def generated_when(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generated_whenContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def optparenthesizedseqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptparenthesizedseqoptlistContext,0)


        def alter_identity_column_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_identity_column_option_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def set_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_data_Context,0)


        def collate_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_clause_Context,0)


        def alter_using(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_usingContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_optionsContext,0)


        def tableconstraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableconstraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def constraintattributespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributespecContext,0)


        def VALIDATE(self):
            return self.getToken(PostgreSQLParser.VALIDATE, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def OIDS(self):
            return self.getToken(PostgreSQLParser.OIDS, 0)

        def CLUSTER(self):
            return self.getToken(PostgreSQLParser.CLUSTER, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def LOGGED(self):
            return self.getToken(PostgreSQLParser.LOGGED, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def REPLICA(self):
            return self.getToken(PostgreSQLParser.REPLICA, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def replica_identity(self):
            return self.getTypedRuleContext(PostgreSQLParser.Replica_identityContext,0)


        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_table_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_cmd" ):
                listener.enterAlter_table_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_cmd" ):
                listener.exitAlter_table_cmd(self)




    def alter_table_cmd(self):

        localctx = PostgreSQLParser.Alter_table_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alter_table_cmd)
        self._la = 0 # Token type
        try:
            self.state = 2326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2028
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2029
                self.columnDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2030
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2031
                self.match(PostgreSQLParser.IF_P)
                self.state = 2032
                self.match(PostgreSQLParser.NOT)
                self.state = 2033
                self.match(PostgreSQLParser.EXISTS)
                self.state = 2034
                self.columnDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2035
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2036
                self.match(PostgreSQLParser.COLUMN)
                self.state = 2037
                self.columnDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2038
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2039
                self.match(PostgreSQLParser.COLUMN)
                self.state = 2040
                self.match(PostgreSQLParser.IF_P)
                self.state = 2041
                self.match(PostgreSQLParser.NOT)
                self.state = 2042
                self.match(PostgreSQLParser.EXISTS)
                self.state = 2043
                self.columnDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2044
                self.match(PostgreSQLParser.ALTER)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2045
                    self.column_()


                self.state = 2048
                self.colid()
                self.state = 2049
                self.alter_column_default()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2051
                self.match(PostgreSQLParser.ALTER)
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2052
                    self.column_()


                self.state = 2055
                self.colid()
                self.state = 2056
                self.match(PostgreSQLParser.DROP)
                self.state = 2057
                self.match(PostgreSQLParser.NOT)
                self.state = 2058
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2060
                self.match(PostgreSQLParser.ALTER)
                self.state = 2062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2061
                    self.column_()


                self.state = 2064
                self.colid()
                self.state = 2065
                self.match(PostgreSQLParser.SET)
                self.state = 2066
                self.match(PostgreSQLParser.NOT)
                self.state = 2067
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2069
                self.match(PostgreSQLParser.ALTER)
                self.state = 2071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2070
                    self.column_()


                self.state = 2073
                self.colid()
                self.state = 2074
                self.match(PostgreSQLParser.DROP)
                self.state = 2075
                self.match(PostgreSQLParser.EXPRESSION)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2077
                self.match(PostgreSQLParser.ALTER)
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2078
                    self.column_()


                self.state = 2081
                self.colid()
                self.state = 2082
                self.match(PostgreSQLParser.DROP)
                self.state = 2083
                self.match(PostgreSQLParser.EXPRESSION)
                self.state = 2084
                self.match(PostgreSQLParser.IF_P)
                self.state = 2085
                self.match(PostgreSQLParser.EXISTS)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2087
                self.match(PostgreSQLParser.ALTER)
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2088
                    self.column_()


                self.state = 2091
                self.colid()
                self.state = 2092
                self.match(PostgreSQLParser.SET)
                self.state = 2093
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 2094
                self.signediconst()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2096
                self.match(PostgreSQLParser.ALTER)
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2097
                    self.column_()


                self.state = 2100
                self.iconst()
                self.state = 2101
                self.match(PostgreSQLParser.SET)
                self.state = 2102
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 2103
                self.signediconst()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2105
                self.match(PostgreSQLParser.ALTER)
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2106
                    self.column_()


                self.state = 2109
                self.colid()
                self.state = 2110
                self.match(PostgreSQLParser.SET)
                self.state = 2111
                self.reloptions()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2113
                self.match(PostgreSQLParser.ALTER)
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2114
                    self.column_()


                self.state = 2117
                self.colid()
                self.state = 2118
                self.match(PostgreSQLParser.RESET)
                self.state = 2119
                self.reloptions()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2121
                self.match(PostgreSQLParser.ALTER)
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2122
                    self.column_()


                self.state = 2125
                self.colid()
                self.state = 2126
                self.match(PostgreSQLParser.SET)
                self.state = 2127
                self.match(PostgreSQLParser.STORAGE)
                self.state = 2128
                self.colid()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2130
                self.match(PostgreSQLParser.ALTER)
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2131
                    self.column_()


                self.state = 2134
                self.colid()
                self.state = 2135
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2136
                self.match(PostgreSQLParser.GENERATED)
                self.state = 2137
                self.generated_when()
                self.state = 2138
                self.match(PostgreSQLParser.AS)
                self.state = 2139
                self.match(PostgreSQLParser.IDENTITY_P)
                self.state = 2141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 2140
                    self.optparenthesizedseqoptlist()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2143
                self.match(PostgreSQLParser.ALTER)
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2144
                    self.column_()


                self.state = 2147
                self.colid()
                self.state = 2148
                self.alter_identity_column_option_list()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2150
                self.match(PostgreSQLParser.ALTER)
                self.state = 2152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2151
                    self.column_()


                self.state = 2154
                self.colid()
                self.state = 2155
                self.match(PostgreSQLParser.DROP)
                self.state = 2156
                self.match(PostgreSQLParser.IDENTITY_P)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2158
                self.match(PostgreSQLParser.ALTER)
                self.state = 2160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2159
                    self.column_()


                self.state = 2162
                self.colid()
                self.state = 2163
                self.match(PostgreSQLParser.DROP)
                self.state = 2164
                self.match(PostgreSQLParser.IDENTITY_P)
                self.state = 2165
                self.match(PostgreSQLParser.IF_P)
                self.state = 2166
                self.match(PostgreSQLParser.EXISTS)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2168
                self.match(PostgreSQLParser.DROP)
                self.state = 2170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2169
                    self.column_()


                self.state = 2172
                self.match(PostgreSQLParser.IF_P)
                self.state = 2173
                self.match(PostgreSQLParser.EXISTS)
                self.state = 2174
                self.colid()
                self.state = 2176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 2175
                    self.drop_behavior_()


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2178
                self.match(PostgreSQLParser.DROP)
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2179
                    self.column_()


                self.state = 2182
                self.colid()
                self.state = 2184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 2183
                    self.drop_behavior_()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2186
                self.match(PostgreSQLParser.ALTER)
                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2187
                    self.column_()


                self.state = 2190
                self.colid()
                self.state = 2192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.SET:
                    self.state = 2191
                    self.set_data_()


                self.state = 2194
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 2195
                self.typename()
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLLATE:
                    self.state = 2196
                    self.collate_clause_()


                self.state = 2200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 2199
                    self.alter_using()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2202
                self.match(PostgreSQLParser.ALTER)
                self.state = 2204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 2203
                    self.column_()


                self.state = 2206
                self.colid()
                self.state = 2207
                self.alter_generic_options()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2209
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2210
                self.tableconstraint()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2211
                self.match(PostgreSQLParser.ALTER)
                self.state = 2212
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2213
                self.name()
                self.state = 2214
                self.constraintattributespec()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2216
                self.match(PostgreSQLParser.VALIDATE)
                self.state = 2217
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2218
                self.name()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2219
                self.match(PostgreSQLParser.DROP)
                self.state = 2220
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2221
                self.match(PostgreSQLParser.IF_P)
                self.state = 2222
                self.match(PostgreSQLParser.EXISTS)
                self.state = 2223
                self.name()
                self.state = 2225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 2224
                    self.drop_behavior_()


                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2227
                self.match(PostgreSQLParser.DROP)
                self.state = 2228
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2229
                self.name()
                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 2230
                    self.drop_behavior_()


                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2233
                self.match(PostgreSQLParser.SET)
                self.state = 2234
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 2235
                self.match(PostgreSQLParser.OIDS)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2236
                self.match(PostgreSQLParser.CLUSTER)
                self.state = 2237
                self.match(PostgreSQLParser.ON)
                self.state = 2238
                self.name()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2239
                self.match(PostgreSQLParser.SET)
                self.state = 2240
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 2241
                self.match(PostgreSQLParser.CLUSTER)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2242
                self.match(PostgreSQLParser.SET)
                self.state = 2243
                self.match(PostgreSQLParser.LOGGED)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2244
                self.match(PostgreSQLParser.SET)
                self.state = 2245
                self.match(PostgreSQLParser.UNLOGGED)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2246
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2247
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2248
                self.name()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2249
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2250
                self.match(PostgreSQLParser.ALWAYS)
                self.state = 2251
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2252
                self.name()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2253
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2254
                self.match(PostgreSQLParser.REPLICA)
                self.state = 2255
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2256
                self.name()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2257
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2258
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2259
                self.match(PostgreSQLParser.ALL)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2260
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2261
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2262
                self.match(PostgreSQLParser.USER)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2263
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2264
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2265
                self.name()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2266
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2267
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2268
                self.match(PostgreSQLParser.ALL)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2269
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2270
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2271
                self.match(PostgreSQLParser.USER)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2272
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2273
                self.match(PostgreSQLParser.RULE)
                self.state = 2274
                self.name()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2275
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2276
                self.match(PostgreSQLParser.ALWAYS)
                self.state = 2277
                self.match(PostgreSQLParser.RULE)
                self.state = 2278
                self.name()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2279
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2280
                self.match(PostgreSQLParser.REPLICA)
                self.state = 2281
                self.match(PostgreSQLParser.RULE)
                self.state = 2282
                self.name()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 2283
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2284
                self.match(PostgreSQLParser.RULE)
                self.state = 2285
                self.name()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 2286
                self.match(PostgreSQLParser.INHERIT)
                self.state = 2287
                self.qualified_name()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 2288
                self.match(PostgreSQLParser.NO)
                self.state = 2289
                self.match(PostgreSQLParser.INHERIT)
                self.state = 2290
                self.qualified_name()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 2291
                self.match(PostgreSQLParser.OF)
                self.state = 2292
                self.any_name()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 2293
                self.match(PostgreSQLParser.NOT)
                self.state = 2294
                self.match(PostgreSQLParser.OF)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 2295
                self.match(PostgreSQLParser.OWNER)
                self.state = 2296
                self.match(PostgreSQLParser.TO)
                self.state = 2297
                self.rolespec()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 2298
                self.match(PostgreSQLParser.SET)
                self.state = 2299
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 2300
                self.name()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 2301
                self.match(PostgreSQLParser.SET)
                self.state = 2302
                self.reloptions()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 2303
                self.match(PostgreSQLParser.RESET)
                self.state = 2304
                self.reloptions()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 2305
                self.match(PostgreSQLParser.REPLICA)
                self.state = 2306
                self.match(PostgreSQLParser.IDENTITY_P)
                self.state = 2307
                self.replica_identity()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 2308
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2309
                self.match(PostgreSQLParser.ROW)
                self.state = 2310
                self.match(PostgreSQLParser.LEVEL)
                self.state = 2311
                self.match(PostgreSQLParser.SECURITY)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 2312
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2313
                self.match(PostgreSQLParser.ROW)
                self.state = 2314
                self.match(PostgreSQLParser.LEVEL)
                self.state = 2315
                self.match(PostgreSQLParser.SECURITY)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 2316
                self.match(PostgreSQLParser.FORCE)
                self.state = 2317
                self.match(PostgreSQLParser.ROW)
                self.state = 2318
                self.match(PostgreSQLParser.LEVEL)
                self.state = 2319
                self.match(PostgreSQLParser.SECURITY)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 2320
                self.match(PostgreSQLParser.NO)
                self.state = 2321
                self.match(PostgreSQLParser.FORCE)
                self.state = 2322
                self.match(PostgreSQLParser.ROW)
                self.state = 2323
                self.match(PostgreSQLParser.LEVEL)
                self.state = 2324
                self.match(PostgreSQLParser.SECURITY)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 2325
                self.alter_generic_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_column_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_default" ):
                listener.enterAlter_column_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_default" ):
                listener.exitAlter_column_default(self)




    def alter_column_default(self):

        localctx = PostgreSQLParser.Alter_column_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_alter_column_default)
        try:
            self.state = 2333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2328
                self.match(PostgreSQLParser.SET)
                self.state = 2329
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 2330
                self.a_expr()
                pass
            elif token in [PostgreSQLParser.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2331
                self.match(PostgreSQLParser.DROP)
                self.state = 2332
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_behavior_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_drop_behavior_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_behavior_" ):
                listener.enterDrop_behavior_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_behavior_" ):
                listener.exitDrop_behavior_(self)




    def drop_behavior_(self):

        localctx = PostgreSQLParser.Drop_behavior_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_drop_behavior_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2335
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collate_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_collate_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate_clause_" ):
                listener.enterCollate_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate_clause_" ):
                listener.exitCollate_clause_(self)




    def collate_clause_(self):

        localctx = PostgreSQLParser.Collate_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_collate_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.match(PostgreSQLParser.COLLATE)
            self.state = 2338
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_usingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_using

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_using" ):
                listener.enterAlter_using(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_using" ):
                listener.exitAlter_using(self)




    def alter_using(self):

        localctx = PostgreSQLParser.Alter_usingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_alter_using)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            self.match(PostgreSQLParser.USING)
            self.state = 2341
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replica_identityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_replica_identity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplica_identity" ):
                listener.enterReplica_identity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplica_identity" ):
                listener.exitReplica_identity(self)




    def replica_identity(self):

        localctx = PostgreSQLParser.Replica_identityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_replica_identity)
        try:
            self.state = 2349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.NOTHING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2343
                self.match(PostgreSQLParser.NOTHING)
                pass
            elif token in [PostgreSQLParser.FULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2344
                self.match(PostgreSQLParser.FULL)
                pass
            elif token in [PostgreSQLParser.DEFAULT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2345
                self.match(PostgreSQLParser.DEFAULT)
                pass
            elif token in [PostgreSQLParser.USING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2346
                self.match(PostgreSQLParser.USING)
                self.state = 2347
                self.match(PostgreSQLParser.INDEX)
                self.state = 2348
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReloptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def reloption_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloption_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reloptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloptions" ):
                listener.enterReloptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloptions" ):
                listener.exitReloptions(self)




    def reloptions(self):

        localctx = PostgreSQLParser.ReloptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_reloptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2351
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2352
            self.reloption_list()
            self.state = 2353
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reloptions_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reloptions_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloptions_" ):
                listener.enterReloptions_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloptions_" ):
                listener.exitReloptions_(self)




    def reloptions_(self):

        localctx = PostgreSQLParser.Reloptions_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_reloptions_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(PostgreSQLParser.WITH)
            self.state = 2356
            self.reloptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reloption_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reloption_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Reloption_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Reloption_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reloption_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloption_list" ):
                listener.enterReloption_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloption_list" ):
                listener.exitReloption_list(self)




    def reloption_list(self):

        localctx = PostgreSQLParser.Reloption_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_reloption_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self.reloption_elem()
            self.state = 2363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2359
                self.match(PostgreSQLParser.COMMA)
                self.state = 2360
                self.reloption_elem()
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reloption_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColLabelContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,i)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def def_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Def_argContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reloption_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloption_elem" ):
                listener.enterReloption_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloption_elem" ):
                listener.exitReloption_elem(self)




    def reloption_elem(self):

        localctx = PostgreSQLParser.Reloption_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_reloption_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.colLabel()
            self.state = 2375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.EQUAL]:
                self.state = 2367
                self.match(PostgreSQLParser.EQUAL)
                self.state = 2368
                self.def_arg()
                pass
            elif token in [PostgreSQLParser.DOT]:
                self.state = 2369
                self.match(PostgreSQLParser.DOT)
                self.state = 2370
                self.colLabel()
                self.state = 2373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.EQUAL:
                    self.state = 2371
                    self.match(PostgreSQLParser.EQUAL)
                    self.state = 2372
                    self.def_arg()


                pass
            elif token in [PostgreSQLParser.CLOSE_PAREN, PostgreSQLParser.COMMA]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_identity_column_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_identity_column_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_identity_column_optionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_identity_column_optionContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_identity_column_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_identity_column_option_list" ):
                listener.enterAlter_identity_column_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_identity_column_option_list" ):
                listener.exitAlter_identity_column_option_list(self)




    def alter_identity_column_option_list(self):

        localctx = PostgreSQLParser.Alter_identity_column_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alter_identity_column_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2377
                self.alter_identity_column_option()
                self.state = 2380 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.RESTART or _la==PostgreSQLParser.SET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_identity_column_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def seqoptelem(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeqoptelemContext,0)


        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def generated_when(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generated_whenContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_identity_column_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_identity_column_option" ):
                listener.enterAlter_identity_column_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_identity_column_option" ):
                listener.exitAlter_identity_column_option(self)




    def alter_identity_column_option(self):

        localctx = PostgreSQLParser.Alter_identity_column_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alter_identity_column_option)
        self._la = 0 # Token type
        try:
            self.state = 2395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.RESTART]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2382
                self.match(PostgreSQLParser.RESTART)
                self.state = 2387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS or _la==PostgreSQLParser.WITH or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (PostgreSQLParser.Integral - 576)) | (1 << (PostgreSQLParser.BinaryIntegral - 576)) | (1 << (PostgreSQLParser.OctalIntegral - 576)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 576)) | (1 << (PostgreSQLParser.Numeric - 576)))) != 0):
                    self.state = 2384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.WITH:
                        self.state = 2383
                        self.with_()


                    self.state = 2386
                    self.numericonly()


                pass
            elif token in [PostgreSQLParser.SET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2389
                self.match(PostgreSQLParser.SET)
                self.state = 2393
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.AS, PostgreSQLParser.CACHE, PostgreSQLParser.CYCLE, PostgreSQLParser.INCREMENT, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MINVALUE, PostgreSQLParser.NO, PostgreSQLParser.OWNED, PostgreSQLParser.RESTART, PostgreSQLParser.SEQUENCE, PostgreSQLParser.START]:
                    self.state = 2390
                    self.seqoptelem()
                    pass
                elif token in [PostgreSQLParser.GENERATED]:
                    self.state = 2391
                    self.match(PostgreSQLParser.GENERATED)
                    self.state = 2392
                    self.generated_when()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionboundspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OPEN_PAREN)
            else:
                return self.getToken(PostgreSQLParser.OPEN_PAREN, i)

        def hash_partbound(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hash_partboundContext,0)


        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CLOSE_PAREN)
            else:
                return self.getToken(PostgreSQLParser.CLOSE_PAREN, i)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def expr_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expr_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,i)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partitionboundspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionboundspec" ):
                listener.enterPartitionboundspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionboundspec" ):
                listener.exitPartitionboundspec(self)




    def partitionboundspec(self):

        localctx = PostgreSQLParser.PartitionboundspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_partitionboundspec)
        try:
            self.state = 2423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2397
                self.match(PostgreSQLParser.FOR)
                self.state = 2398
                self.match(PostgreSQLParser.VALUES)
                self.state = 2399
                self.match(PostgreSQLParser.WITH)
                self.state = 2400
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2401
                self.hash_partbound()
                self.state = 2402
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2404
                self.match(PostgreSQLParser.FOR)
                self.state = 2405
                self.match(PostgreSQLParser.VALUES)
                self.state = 2406
                self.match(PostgreSQLParser.IN_P)
                self.state = 2407
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2408
                self.expr_list()
                self.state = 2409
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2411
                self.match(PostgreSQLParser.FOR)
                self.state = 2412
                self.match(PostgreSQLParser.VALUES)
                self.state = 2413
                self.match(PostgreSQLParser.FROM)
                self.state = 2414
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2415
                self.expr_list()
                self.state = 2416
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2417
                self.match(PostgreSQLParser.TO)
                self.state = 2418
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2419
                self.expr_list()
                self.state = 2420
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2422
                self.match(PostgreSQLParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partbound_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hash_partbound_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_partbound_elem" ):
                listener.enterHash_partbound_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_partbound_elem" ):
                listener.exitHash_partbound_elem(self)




    def hash_partbound_elem(self):

        localctx = PostgreSQLParser.Hash_partbound_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_hash_partbound_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2425
            self.nonreservedword()
            self.state = 2426
            self.iconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partboundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hash_partbound_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Hash_partbound_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Hash_partbound_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hash_partbound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_partbound" ):
                listener.enterHash_partbound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_partbound" ):
                listener.exitHash_partbound(self)




    def hash_partbound(self):

        localctx = PostgreSQLParser.Hash_partboundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_hash_partbound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428
            self.hash_partbound_elem()
            self.state = 2433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2429
                self.match(PostgreSQLParser.COMMA)
                self.state = 2430
                self.hash_partbound_elem()
                self.state = 2435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltercompositetypestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def alter_type_cmds(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_type_cmdsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altercompositetypestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltercompositetypestmt" ):
                listener.enterAltercompositetypestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltercompositetypestmt" ):
                listener.exitAltercompositetypestmt(self)




    def altercompositetypestmt(self):

        localctx = PostgreSQLParser.AltercompositetypestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_altercompositetypestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(PostgreSQLParser.ALTER)
            self.state = 2437
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 2438
            self.any_name()
            self.state = 2439
            self.alter_type_cmds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_type_cmdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_type_cmd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_type_cmdContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_type_cmdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_type_cmds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type_cmds" ):
                listener.enterAlter_type_cmds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type_cmds" ):
                listener.exitAlter_type_cmds(self)




    def alter_type_cmds(self):

        localctx = PostgreSQLParser.Alter_type_cmdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alter_type_cmds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.alter_type_cmd()
            self.state = 2446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2442
                self.match(PostgreSQLParser.COMMA)
                self.state = 2443
                self.alter_type_cmd()
                self.state = 2448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_type_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def ATTRIBUTE(self):
            return self.getToken(PostgreSQLParser.ATTRIBUTE, 0)

        def tablefuncelement(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def set_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_data_Context,0)


        def collate_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_type_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type_cmd" ):
                listener.enterAlter_type_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type_cmd" ):
                listener.exitAlter_type_cmd(self)




    def alter_type_cmd(self):

        localctx = PostgreSQLParser.Alter_type_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alter_type_cmd)
        self._la = 0 # Token type
        try:
            self.state = 2479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ADD_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2449
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2450
                self.match(PostgreSQLParser.ATTRIBUTE)
                self.state = 2451
                self.tablefuncelement()
                self.state = 2453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 2452
                    self.drop_behavior_()


                pass
            elif token in [PostgreSQLParser.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2455
                self.match(PostgreSQLParser.DROP)
                self.state = 2456
                self.match(PostgreSQLParser.ATTRIBUTE)
                self.state = 2459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 2457
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 2458
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 2461
                self.colid()
                self.state = 2463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 2462
                    self.drop_behavior_()


                pass
            elif token in [PostgreSQLParser.ALTER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2465
                self.match(PostgreSQLParser.ALTER)
                self.state = 2466
                self.match(PostgreSQLParser.ATTRIBUTE)
                self.state = 2467
                self.colid()
                self.state = 2469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.SET:
                    self.state = 2468
                    self.set_data_()


                self.state = 2471
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 2472
                self.typename()
                self.state = 2474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLLATE:
                    self.state = 2473
                    self.collate_clause_()


                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 2476
                    self.drop_behavior_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseportalstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(PostgreSQLParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_nameContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_closeportalstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseportalstmt" ):
                listener.enterCloseportalstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseportalstmt" ):
                listener.exitCloseportalstmt(self)




    def closeportalstmt(self):

        localctx = PostgreSQLParser.CloseportalstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_closeportalstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2481
            self.match(PostgreSQLParser.CLOSE)
            self.state = 2484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.state = 2482
                self.cursor_name()
                pass
            elif token in [PostgreSQLParser.ALL]:
                self.state = 2483
                self.match(PostgreSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(PostgreSQLParser.COPY, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def copy_from(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_fromContext,0)


        def copy_file_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_file_nameContext,0)


        def copy_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_optionsContext,0)


        def binary_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Binary_Context,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def program_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Program_Context,0)


        def copy_delimiter(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_delimiterContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def preparablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.PreparablestmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopystmt" ):
                listener.enterCopystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopystmt" ):
                listener.exitCopystmt(self)




    def copystmt(self):

        localctx = PostgreSQLParser.CopystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_copystmt)
        self._la = 0 # Token type
        try:
            self.state = 2523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2486
                self.match(PostgreSQLParser.COPY)
                self.state = 2488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.BINARY:
                    self.state = 2487
                    self.binary_()


                self.state = 2490
                self.qualified_name()
                self.state = 2492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 2491
                    self.column_list_()


                self.state = 2494
                self.copy_from()
                self.state = 2496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PROGRAM:
                    self.state = 2495
                    self.program_()


                self.state = 2498
                self.copy_file_name()
                self.state = 2500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING or _la==PostgreSQLParser.DELIMITERS:
                    self.state = 2499
                    self.copy_delimiter()


                self.state = 2503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 2502
                    self.with_()


                self.state = 2505
                self.copy_options()
                self.state = 2507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 2506
                    self.where_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2509
                self.match(PostgreSQLParser.COPY)
                self.state = 2510
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2511
                self.preparablestmt()
                self.state = 2512
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2513
                self.match(PostgreSQLParser.TO)
                self.state = 2515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PROGRAM:
                    self.state = 2514
                    self.program_()


                self.state = 2517
                self.copy_file_name()
                self.state = 2519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 2518
                    self.with_()


                self.state = 2521
                self.copy_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_from" ):
                listener.enterCopy_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_from" ):
                listener.exitCopy_from(self)




    def copy_from(self):

        localctx = PostgreSQLParser.Copy_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_copy_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2525
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FROM or _la==PostgreSQLParser.TO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM(self):
            return self.getToken(PostgreSQLParser.PROGRAM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_program_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_" ):
                listener.enterProgram_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_" ):
                listener.exitProgram_(self)




    def program_(self):

        localctx = PostgreSQLParser.Program_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_program_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2527
            self.match(PostgreSQLParser.PROGRAM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_file_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def STDIN(self):
            return self.getToken(PostgreSQLParser.STDIN, 0)

        def STDOUT(self):
            return self.getToken(PostgreSQLParser.STDOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_file_name" ):
                listener.enterCopy_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_file_name" ):
                listener.exitCopy_file_name(self)




    def copy_file_name(self):

        localctx = PostgreSQLParser.Copy_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_copy_file_name)
        try:
            self.state = 2532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2529
                self.sconst()
                pass
            elif token in [PostgreSQLParser.STDIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2530
                self.match(PostgreSQLParser.STDIN)
                pass
            elif token in [PostgreSQLParser.STDOUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2531
                self.match(PostgreSQLParser.STDOUT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_opt_listContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def copy_generic_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_options" ):
                listener.enterCopy_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_options" ):
                listener.exitCopy_options(self)




    def copy_options(self):

        localctx = PostgreSQLParser.Copy_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_copy_options)
        try:
            self.state = 2539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.EOF, PostgreSQLParser.SEMI, PostgreSQLParser.NULL_P, PostgreSQLParser.WHERE, PostgreSQLParser.BINARY, PostgreSQLParser.FREEZE, PostgreSQLParser.CSV, PostgreSQLParser.DELIMITER, PostgreSQLParser.ENCODING, PostgreSQLParser.ESCAPE, PostgreSQLParser.FORCE, PostgreSQLParser.HEADER_P, PostgreSQLParser.QUOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2534
                self.copy_opt_list()
                pass
            elif token in [PostgreSQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2535
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2536
                self.copy_generic_opt_list()
                self.state = 2537
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Copy_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Copy_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_opt_list" ):
                listener.enterCopy_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_opt_list" ):
                listener.exitCopy_opt_list(self)




    def copy_opt_list(self):

        localctx = PostgreSQLParser.Copy_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_copy_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (PostgreSQLParser.NULL_P - 116)) | (1 << (PostgreSQLParser.BINARY - 116)) | (1 << (PostgreSQLParser.FREEZE - 116)))) != 0) or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (PostgreSQLParser.CSV - 209)) | (1 << (PostgreSQLParser.DELIMITER - 209)) | (1 << (PostgreSQLParser.ENCODING - 209)) | (1 << (PostgreSQLParser.ESCAPE - 209)) | (1 << (PostgreSQLParser.FORCE - 209)) | (1 << (PostgreSQLParser.HEADER_P - 209)))) != 0) or _la==PostgreSQLParser.QUOTE:
                self.state = 2541
                self.copy_opt_item()
                self.state = 2546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def FREEZE(self):
            return self.getToken(PostgreSQLParser.FREEZE, 0)

        def DELIMITER(self):
            return self.getToken(PostgreSQLParser.DELIMITER, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def as_(self):
            return self.getTypedRuleContext(PostgreSQLParser.As_Context,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def CSV(self):
            return self.getToken(PostgreSQLParser.CSV, 0)

        def HEADER_P(self):
            return self.getToken(PostgreSQLParser.HEADER_P, 0)

        def QUOTE(self):
            return self.getToken(PostgreSQLParser.QUOTE, 0)

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_opt_item" ):
                listener.enterCopy_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_opt_item" ):
                listener.exitCopy_opt_item(self)




    def copy_opt_item(self):

        localctx = PostgreSQLParser.Copy_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_copy_opt_item)
        self._la = 0 # Token type
        try:
            self.state = 2586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2547
                self.match(PostgreSQLParser.BINARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2548
                self.match(PostgreSQLParser.FREEZE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2549
                self.match(PostgreSQLParser.DELIMITER)
                self.state = 2551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS:
                    self.state = 2550
                    self.as_()


                self.state = 2553
                self.sconst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2554
                self.match(PostgreSQLParser.NULL_P)
                self.state = 2556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS:
                    self.state = 2555
                    self.as_()


                self.state = 2558
                self.sconst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2559
                self.match(PostgreSQLParser.CSV)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2560
                self.match(PostgreSQLParser.HEADER_P)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2561
                self.match(PostgreSQLParser.QUOTE)
                self.state = 2563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS:
                    self.state = 2562
                    self.as_()


                self.state = 2565
                self.sconst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2566
                self.match(PostgreSQLParser.ESCAPE)
                self.state = 2568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS:
                    self.state = 2567
                    self.as_()


                self.state = 2570
                self.sconst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2571
                self.match(PostgreSQLParser.FORCE)
                self.state = 2572
                self.match(PostgreSQLParser.QUOTE)
                self.state = 2573
                self.columnlist()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2574
                self.match(PostgreSQLParser.FORCE)
                self.state = 2575
                self.match(PostgreSQLParser.QUOTE)
                self.state = 2576
                self.match(PostgreSQLParser.STAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2577
                self.match(PostgreSQLParser.FORCE)
                self.state = 2578
                self.match(PostgreSQLParser.NOT)
                self.state = 2579
                self.match(PostgreSQLParser.NULL_P)
                self.state = 2580
                self.columnlist()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2581
                self.match(PostgreSQLParser.FORCE)
                self.state = 2582
                self.match(PostgreSQLParser.NULL_P)
                self.state = 2583
                self.columnlist()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2584
                self.match(PostgreSQLParser.ENCODING)
                self.state = 2585
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_binary_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_" ):
                listener.enterBinary_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_" ):
                listener.exitBinary_(self)




    def binary_(self):

        localctx = PostgreSQLParser.Binary_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_binary_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(PostgreSQLParser.BINARY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_delimiterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELIMITERS(self):
            return self.getToken(PostgreSQLParser.DELIMITERS, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def using_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Using_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_delimiter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_delimiter" ):
                listener.enterCopy_delimiter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_delimiter" ):
                listener.exitCopy_delimiter(self)




    def copy_delimiter(self):

        localctx = PostgreSQLParser.Copy_delimiterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_copy_delimiter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.USING:
                self.state = 2590
                self.using_()


            self.state = 2593
            self.match(PostgreSQLParser.DELIMITERS)
            self.state = 2594
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_using_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_" ):
                listener.enterUsing_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_" ):
                listener.exitUsing_(self)




    def using_(self):

        localctx = PostgreSQLParser.Using_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_using_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self.match(PostgreSQLParser.USING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Copy_generic_opt_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_list" ):
                listener.enterCopy_generic_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_list" ):
                listener.exitCopy_generic_opt_list(self)




    def copy_generic_opt_list(self):

        localctx = PostgreSQLParser.Copy_generic_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_copy_generic_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2598
            self.copy_generic_opt_elem()
            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2599
                self.match(PostgreSQLParser.COMMA)
                self.state = 2600
                self.copy_generic_opt_elem()
                self.state = 2605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def copy_generic_opt_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_elem" ):
                listener.enterCopy_generic_opt_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_elem" ):
                listener.exitCopy_generic_opt_elem(self)




    def copy_generic_opt_elem(self):

        localctx = PostgreSQLParser.Copy_generic_opt_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_copy_generic_opt_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.colLabel()
            self.state = 2608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.ON - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                self.state = 2607
                self.copy_generic_opt_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def copy_generic_opt_arg_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_arg_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_arg" ):
                listener.enterCopy_generic_opt_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_arg" ):
                listener.exitCopy_generic_opt_arg(self)




    def copy_generic_opt_arg(self):

        localctx = PostgreSQLParser.Copy_generic_opt_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_copy_generic_opt_arg)
        try:
            self.state = 2617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.FALSE_P, PostgreSQLParser.ON, PostgreSQLParser.TRUE_P, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2610
                self.boolean_or_string_()
                pass
            elif token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2611
                self.numericonly()
                pass
            elif token in [PostgreSQLParser.STAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2612
                self.match(PostgreSQLParser.STAR)
                pass
            elif token in [PostgreSQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2613
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2614
                self.copy_generic_opt_arg_list()
                self.state = 2615
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_arg_list_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Copy_generic_opt_arg_list_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_arg_list_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_arg_list" ):
                listener.enterCopy_generic_opt_arg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_arg_list" ):
                listener.exitCopy_generic_opt_arg_list(self)




    def copy_generic_opt_arg_list(self):

        localctx = PostgreSQLParser.Copy_generic_opt_arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_copy_generic_opt_arg_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619
            self.copy_generic_opt_arg_list_item()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2620
                self.match(PostgreSQLParser.COMMA)
                self.state = 2621
                self.copy_generic_opt_arg_list_item()
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_arg_list_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_arg_list_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_arg_list_item" ):
                listener.enterCopy_generic_opt_arg_list_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_arg_list_item" ):
                listener.exitCopy_generic_opt_arg_list_item(self)




    def copy_generic_opt_arg_list_item(self):

        localctx = PostgreSQLParser.Copy_generic_opt_arg_list_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_copy_generic_opt_arg_list_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self.boolean_or_string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,i)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def partitionboundspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.PartitionboundspecContext,0)


        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def opttableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttableelementlistContext,0)


        def optinherit(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptinheritContext,0)


        def optpartitionspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptpartitionspecContext,0)


        def table_access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_access_method_clauseContext,0)


        def optwith(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptwithContext,0)


        def oncommitoption(self):
            return self.getTypedRuleContext(PostgreSQLParser.OncommitoptionContext,0)


        def opttablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceContext,0)


        def opttypedtableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttypedtableelementlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatestmt" ):
                listener.enterCreatestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatestmt" ):
                listener.exitCreatestmt(self)




    def createstmt(self):

        localctx = PostgreSQLParser.CreatestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_createstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            self.match(PostgreSQLParser.CREATE)
            self.state = 2631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.GLOBAL or _la==PostgreSQLParser.LOCAL or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (PostgreSQLParser.TEMP - 383)) | (1 << (PostgreSQLParser.TEMPORARY - 383)) | (1 << (PostgreSQLParser.UNLOGGED - 383)))) != 0):
                self.state = 2630
                self.opttemp()


            self.state = 2633
            self.match(PostgreSQLParser.TABLE)
            self.state = 2637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 2634
                self.match(PostgreSQLParser.IF_P)
                self.state = 2635
                self.match(PostgreSQLParser.NOT)
                self.state = 2636
                self.match(PostgreSQLParser.EXISTS)


            self.state = 2639
            self.qualified_name()
            self.state = 2705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN]:
                self.state = 2640
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.CHECK - 64)) | (1 << (PostgreSQLParser.CONSTRAINT - 64)) | (1 << (PostgreSQLParser.FOREIGN - 64)) | (1 << (PostgreSQLParser.PRIMARY - 64)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (PostgreSQLParser.UNIQUE - 136)) | (1 << (PostgreSQLParser.LIKE - 136)) | (1 << (PostgreSQLParser.OVER - 136)) | (1 << (PostgreSQLParser.ABORT_P - 136)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 136)) | (1 << (PostgreSQLParser.ACCESS - 136)) | (1 << (PostgreSQLParser.ACTION - 136)) | (1 << (PostgreSQLParser.ADD_P - 136)) | (1 << (PostgreSQLParser.ADMIN - 136)) | (1 << (PostgreSQLParser.AFTER - 136)) | (1 << (PostgreSQLParser.AGGREGATE - 136)) | (1 << (PostgreSQLParser.ALSO - 136)) | (1 << (PostgreSQLParser.ALTER - 136)) | (1 << (PostgreSQLParser.ALWAYS - 136)) | (1 << (PostgreSQLParser.ASSERTION - 136)) | (1 << (PostgreSQLParser.ASSIGNMENT - 136)) | (1 << (PostgreSQLParser.AT - 136)) | (1 << (PostgreSQLParser.ATTRIBUTE - 136)) | (1 << (PostgreSQLParser.BACKWARD - 136)) | (1 << (PostgreSQLParser.BEFORE - 136)) | (1 << (PostgreSQLParser.BEGIN_P - 136)) | (1 << (PostgreSQLParser.BY - 136)) | (1 << (PostgreSQLParser.CACHE - 136)) | (1 << (PostgreSQLParser.CALLED - 136)) | (1 << (PostgreSQLParser.CASCADE - 136)) | (1 << (PostgreSQLParser.CASCADED - 136)) | (1 << (PostgreSQLParser.CATALOG - 136)) | (1 << (PostgreSQLParser.CHAIN - 136)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 136)) | (1 << (PostgreSQLParser.CHECKPOINT - 136)) | (1 << (PostgreSQLParser.CLASS - 136)) | (1 << (PostgreSQLParser.CLOSE - 136)) | (1 << (PostgreSQLParser.CLUSTER - 136)) | (1 << (PostgreSQLParser.COMMENT - 136)) | (1 << (PostgreSQLParser.COMMENTS - 136)) | (1 << (PostgreSQLParser.COMMIT - 136)))) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (PostgreSQLParser.COMMITTED - 200)) | (1 << (PostgreSQLParser.CONFIGURATION - 200)) | (1 << (PostgreSQLParser.CONNECTION - 200)) | (1 << (PostgreSQLParser.CONSTRAINTS - 200)) | (1 << (PostgreSQLParser.CONTENT_P - 200)) | (1 << (PostgreSQLParser.CONTINUE_P - 200)) | (1 << (PostgreSQLParser.CONVERSION_P - 200)) | (1 << (PostgreSQLParser.COPY - 200)) | (1 << (PostgreSQLParser.COST - 200)) | (1 << (PostgreSQLParser.CSV - 200)) | (1 << (PostgreSQLParser.CURSOR - 200)) | (1 << (PostgreSQLParser.CYCLE - 200)) | (1 << (PostgreSQLParser.DATA_P - 200)) | (1 << (PostgreSQLParser.DATABASE - 200)) | (1 << (PostgreSQLParser.DAY_P - 200)) | (1 << (PostgreSQLParser.DEALLOCATE - 200)) | (1 << (PostgreSQLParser.DECLARE - 200)) | (1 << (PostgreSQLParser.DEFAULTS - 200)) | (1 << (PostgreSQLParser.DEFERRED - 200)) | (1 << (PostgreSQLParser.DEFINER - 200)) | (1 << (PostgreSQLParser.DELETE_P - 200)) | (1 << (PostgreSQLParser.DELIMITER - 200)) | (1 << (PostgreSQLParser.DELIMITERS - 200)) | (1 << (PostgreSQLParser.DICTIONARY - 200)) | (1 << (PostgreSQLParser.DISABLE_P - 200)) | (1 << (PostgreSQLParser.DISCARD - 200)) | (1 << (PostgreSQLParser.DOCUMENT_P - 200)) | (1 << (PostgreSQLParser.DOMAIN_P - 200)) | (1 << (PostgreSQLParser.DOUBLE_P - 200)) | (1 << (PostgreSQLParser.DROP - 200)) | (1 << (PostgreSQLParser.EACH - 200)) | (1 << (PostgreSQLParser.ENABLE_P - 200)) | (1 << (PostgreSQLParser.ENCODING - 200)) | (1 << (PostgreSQLParser.ENCRYPTED - 200)) | (1 << (PostgreSQLParser.ENUM_P - 200)) | (1 << (PostgreSQLParser.ESCAPE - 200)) | (1 << (PostgreSQLParser.EVENT - 200)) | (1 << (PostgreSQLParser.EXCLUDE - 200)) | (1 << (PostgreSQLParser.EXCLUDING - 200)) | (1 << (PostgreSQLParser.EXCLUSIVE - 200)) | (1 << (PostgreSQLParser.EXECUTE - 200)) | (1 << (PostgreSQLParser.EXPLAIN - 200)) | (1 << (PostgreSQLParser.EXTENSION - 200)) | (1 << (PostgreSQLParser.EXTERNAL - 200)) | (1 << (PostgreSQLParser.FAMILY - 200)) | (1 << (PostgreSQLParser.FIRST_P - 200)) | (1 << (PostgreSQLParser.FOLLOWING - 200)) | (1 << (PostgreSQLParser.FORCE - 200)) | (1 << (PostgreSQLParser.FORWARD - 200)) | (1 << (PostgreSQLParser.FUNCTION - 200)) | (1 << (PostgreSQLParser.FUNCTIONS - 200)) | (1 << (PostgreSQLParser.GLOBAL - 200)) | (1 << (PostgreSQLParser.GRANTED - 200)) | (1 << (PostgreSQLParser.HANDLER - 200)) | (1 << (PostgreSQLParser.HEADER_P - 200)) | (1 << (PostgreSQLParser.HOLD - 200)) | (1 << (PostgreSQLParser.HOUR_P - 200)) | (1 << (PostgreSQLParser.IDENTITY_P - 200)) | (1 << (PostgreSQLParser.IF_P - 200)) | (1 << (PostgreSQLParser.IMMEDIATE - 200)) | (1 << (PostgreSQLParser.IMMUTABLE - 200)) | (1 << (PostgreSQLParser.IMPLICIT_P - 200)) | (1 << (PostgreSQLParser.INCLUDING - 200)) | (1 << (PostgreSQLParser.INCREMENT - 200)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (PostgreSQLParser.INDEX - 264)) | (1 << (PostgreSQLParser.INDEXES - 264)) | (1 << (PostgreSQLParser.INHERIT - 264)) | (1 << (PostgreSQLParser.INHERITS - 264)) | (1 << (PostgreSQLParser.INLINE_P - 264)) | (1 << (PostgreSQLParser.INSENSITIVE - 264)) | (1 << (PostgreSQLParser.INSERT - 264)) | (1 << (PostgreSQLParser.INSTEAD - 264)) | (1 << (PostgreSQLParser.INVOKER - 264)) | (1 << (PostgreSQLParser.ISOLATION - 264)) | (1 << (PostgreSQLParser.KEY - 264)) | (1 << (PostgreSQLParser.LABEL - 264)) | (1 << (PostgreSQLParser.LANGUAGE - 264)) | (1 << (PostgreSQLParser.LARGE_P - 264)) | (1 << (PostgreSQLParser.LAST_P - 264)) | (1 << (PostgreSQLParser.LEAKPROOF - 264)) | (1 << (PostgreSQLParser.LEVEL - 264)) | (1 << (PostgreSQLParser.LISTEN - 264)) | (1 << (PostgreSQLParser.LOAD - 264)) | (1 << (PostgreSQLParser.LOCAL - 264)) | (1 << (PostgreSQLParser.LOCATION - 264)) | (1 << (PostgreSQLParser.LOCK_P - 264)) | (1 << (PostgreSQLParser.MAPPING - 264)) | (1 << (PostgreSQLParser.MATCH - 264)) | (1 << (PostgreSQLParser.MATCHED - 264)) | (1 << (PostgreSQLParser.MATERIALIZED - 264)) | (1 << (PostgreSQLParser.MAXVALUE - 264)) | (1 << (PostgreSQLParser.MERGE - 264)) | (1 << (PostgreSQLParser.MINUTE_P - 264)) | (1 << (PostgreSQLParser.MINVALUE - 264)) | (1 << (PostgreSQLParser.MODE - 264)) | (1 << (PostgreSQLParser.MONTH_P - 264)) | (1 << (PostgreSQLParser.MOVE - 264)) | (1 << (PostgreSQLParser.NAME_P - 264)) | (1 << (PostgreSQLParser.NAMES - 264)) | (1 << (PostgreSQLParser.NEXT - 264)) | (1 << (PostgreSQLParser.NO - 264)) | (1 << (PostgreSQLParser.NOTHING - 264)) | (1 << (PostgreSQLParser.NOTIFY - 264)) | (1 << (PostgreSQLParser.NOWAIT - 264)) | (1 << (PostgreSQLParser.NULLS_P - 264)) | (1 << (PostgreSQLParser.OBJECT_P - 264)) | (1 << (PostgreSQLParser.OF - 264)) | (1 << (PostgreSQLParser.OFF - 264)) | (1 << (PostgreSQLParser.OIDS - 264)) | (1 << (PostgreSQLParser.OPERATOR - 264)) | (1 << (PostgreSQLParser.OPTION - 264)) | (1 << (PostgreSQLParser.OPTIONS - 264)) | (1 << (PostgreSQLParser.OWNED - 264)) | (1 << (PostgreSQLParser.OWNER - 264)) | (1 << (PostgreSQLParser.PARSER - 264)) | (1 << (PostgreSQLParser.PARTIAL - 264)) | (1 << (PostgreSQLParser.PARTITION - 264)) | (1 << (PostgreSQLParser.PASSING - 264)) | (1 << (PostgreSQLParser.PASSWORD - 264)) | (1 << (PostgreSQLParser.PLANS - 264)) | (1 << (PostgreSQLParser.PRECEDING - 264)) | (1 << (PostgreSQLParser.PREPARE - 264)) | (1 << (PostgreSQLParser.PREPARED - 264)) | (1 << (PostgreSQLParser.PRESERVE - 264)) | (1 << (PostgreSQLParser.PRIOR - 264)) | (1 << (PostgreSQLParser.PRIVILEGES - 264)) | (1 << (PostgreSQLParser.PROCEDURAL - 264)) | (1 << (PostgreSQLParser.PROCEDURE - 264)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (PostgreSQLParser.PROGRAM - 328)) | (1 << (PostgreSQLParser.QUOTE - 328)) | (1 << (PostgreSQLParser.RANGE - 328)) | (1 << (PostgreSQLParser.READ - 328)) | (1 << (PostgreSQLParser.REASSIGN - 328)) | (1 << (PostgreSQLParser.RECURSIVE - 328)) | (1 << (PostgreSQLParser.REF - 328)) | (1 << (PostgreSQLParser.REFRESH - 328)) | (1 << (PostgreSQLParser.REINDEX - 328)) | (1 << (PostgreSQLParser.RELATIVE_P - 328)) | (1 << (PostgreSQLParser.RELEASE - 328)) | (1 << (PostgreSQLParser.RENAME - 328)) | (1 << (PostgreSQLParser.REPEATABLE - 328)) | (1 << (PostgreSQLParser.REPLACE - 328)) | (1 << (PostgreSQLParser.REPLICA - 328)) | (1 << (PostgreSQLParser.RESET - 328)) | (1 << (PostgreSQLParser.RESTART - 328)) | (1 << (PostgreSQLParser.RESTRICT - 328)) | (1 << (PostgreSQLParser.RETURNS - 328)) | (1 << (PostgreSQLParser.REVOKE - 328)) | (1 << (PostgreSQLParser.ROLE - 328)) | (1 << (PostgreSQLParser.ROLLBACK - 328)) | (1 << (PostgreSQLParser.ROWS - 328)) | (1 << (PostgreSQLParser.RULE - 328)) | (1 << (PostgreSQLParser.SAVEPOINT - 328)) | (1 << (PostgreSQLParser.SCHEMA - 328)) | (1 << (PostgreSQLParser.SCROLL - 328)) | (1 << (PostgreSQLParser.SEARCH - 328)) | (1 << (PostgreSQLParser.SECOND_P - 328)) | (1 << (PostgreSQLParser.SECURITY - 328)) | (1 << (PostgreSQLParser.SEQUENCE - 328)) | (1 << (PostgreSQLParser.SEQUENCES - 328)) | (1 << (PostgreSQLParser.SERIALIZABLE - 328)) | (1 << (PostgreSQLParser.SERVER - 328)) | (1 << (PostgreSQLParser.SESSION - 328)) | (1 << (PostgreSQLParser.SET - 328)) | (1 << (PostgreSQLParser.SHARE - 328)) | (1 << (PostgreSQLParser.SHOW - 328)) | (1 << (PostgreSQLParser.SIMPLE - 328)) | (1 << (PostgreSQLParser.SNAPSHOT - 328)) | (1 << (PostgreSQLParser.STABLE - 328)) | (1 << (PostgreSQLParser.STANDALONE_P - 328)) | (1 << (PostgreSQLParser.START - 328)) | (1 << (PostgreSQLParser.STATEMENT - 328)) | (1 << (PostgreSQLParser.STATISTICS - 328)) | (1 << (PostgreSQLParser.STDIN - 328)) | (1 << (PostgreSQLParser.STDOUT - 328)) | (1 << (PostgreSQLParser.STORAGE - 328)) | (1 << (PostgreSQLParser.STRICT_P - 328)) | (1 << (PostgreSQLParser.STRIP_P - 328)) | (1 << (PostgreSQLParser.SYSID - 328)) | (1 << (PostgreSQLParser.SYSTEM_P - 328)) | (1 << (PostgreSQLParser.TABLES - 328)) | (1 << (PostgreSQLParser.TABLESPACE - 328)) | (1 << (PostgreSQLParser.TEMP - 328)) | (1 << (PostgreSQLParser.TEMPLATE - 328)) | (1 << (PostgreSQLParser.TEMPORARY - 328)) | (1 << (PostgreSQLParser.TEXT_P - 328)) | (1 << (PostgreSQLParser.TRANSACTION - 328)) | (1 << (PostgreSQLParser.TRIGGER - 328)) | (1 << (PostgreSQLParser.TRUNCATE - 328)) | (1 << (PostgreSQLParser.TRUSTED - 328)) | (1 << (PostgreSQLParser.TYPE_P - 328)))) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (PostgreSQLParser.TYPES_P - 392)) | (1 << (PostgreSQLParser.UNBOUNDED - 392)) | (1 << (PostgreSQLParser.UNCOMMITTED - 392)) | (1 << (PostgreSQLParser.UNENCRYPTED - 392)) | (1 << (PostgreSQLParser.UNKNOWN - 392)) | (1 << (PostgreSQLParser.UNLISTEN - 392)) | (1 << (PostgreSQLParser.UNLOGGED - 392)) | (1 << (PostgreSQLParser.UNTIL - 392)) | (1 << (PostgreSQLParser.UPDATE - 392)) | (1 << (PostgreSQLParser.VACUUM - 392)) | (1 << (PostgreSQLParser.VALID - 392)) | (1 << (PostgreSQLParser.VALIDATE - 392)) | (1 << (PostgreSQLParser.VALIDATOR - 392)) | (1 << (PostgreSQLParser.VARYING - 392)) | (1 << (PostgreSQLParser.VERSION_P - 392)) | (1 << (PostgreSQLParser.VIEW - 392)) | (1 << (PostgreSQLParser.VOLATILE - 392)) | (1 << (PostgreSQLParser.WHITESPACE_P - 392)) | (1 << (PostgreSQLParser.WITHOUT - 392)) | (1 << (PostgreSQLParser.WORK - 392)) | (1 << (PostgreSQLParser.WRAPPER - 392)) | (1 << (PostgreSQLParser.WRITE - 392)) | (1 << (PostgreSQLParser.XML_P - 392)) | (1 << (PostgreSQLParser.YEAR_P - 392)) | (1 << (PostgreSQLParser.YES_P - 392)) | (1 << (PostgreSQLParser.ZONE - 392)) | (1 << (PostgreSQLParser.BETWEEN - 392)) | (1 << (PostgreSQLParser.BIGINT - 392)) | (1 << (PostgreSQLParser.BIT - 392)) | (1 << (PostgreSQLParser.BOOLEAN_P - 392)) | (1 << (PostgreSQLParser.CHAR_P - 392)) | (1 << (PostgreSQLParser.CHARACTER - 392)) | (1 << (PostgreSQLParser.COALESCE - 392)) | (1 << (PostgreSQLParser.DEC - 392)) | (1 << (PostgreSQLParser.DECIMAL_P - 392)) | (1 << (PostgreSQLParser.EXISTS - 392)) | (1 << (PostgreSQLParser.EXTRACT - 392)) | (1 << (PostgreSQLParser.FLOAT_P - 392)) | (1 << (PostgreSQLParser.GREATEST - 392)) | (1 << (PostgreSQLParser.INOUT - 392)) | (1 << (PostgreSQLParser.INT_P - 392)) | (1 << (PostgreSQLParser.INTEGER - 392)) | (1 << (PostgreSQLParser.INTERVAL - 392)) | (1 << (PostgreSQLParser.LEAST - 392)) | (1 << (PostgreSQLParser.NATIONAL - 392)) | (1 << (PostgreSQLParser.NCHAR - 392)) | (1 << (PostgreSQLParser.NONE - 392)) | (1 << (PostgreSQLParser.NULLIF - 392)) | (1 << (PostgreSQLParser.NUMERIC - 392)) | (1 << (PostgreSQLParser.OVERLAY - 392)) | (1 << (PostgreSQLParser.POSITION - 392)) | (1 << (PostgreSQLParser.PRECISION - 392)) | (1 << (PostgreSQLParser.REAL - 392)) | (1 << (PostgreSQLParser.ROW - 392)) | (1 << (PostgreSQLParser.SETOF - 392)) | (1 << (PostgreSQLParser.SMALLINT - 392)) | (1 << (PostgreSQLParser.SUBSTRING - 392)) | (1 << (PostgreSQLParser.TIME - 392)) | (1 << (PostgreSQLParser.TIMESTAMP - 392)) | (1 << (PostgreSQLParser.TREAT - 392)) | (1 << (PostgreSQLParser.TRIM - 392)) | (1 << (PostgreSQLParser.VALUES - 392)) | (1 << (PostgreSQLParser.VARCHAR - 392)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 392)))) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & ((1 << (PostgreSQLParser.XMLCONCAT - 463)) | (1 << (PostgreSQLParser.XMLELEMENT - 463)) | (1 << (PostgreSQLParser.XMLEXISTS - 463)) | (1 << (PostgreSQLParser.XMLFOREST - 463)) | (1 << (PostgreSQLParser.XMLPARSE - 463)) | (1 << (PostgreSQLParser.XMLPI - 463)) | (1 << (PostgreSQLParser.XMLROOT - 463)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 463)) | (1 << (PostgreSQLParser.CALL - 463)) | (1 << (PostgreSQLParser.CURRENT_P - 463)) | (1 << (PostgreSQLParser.ATTACH - 463)) | (1 << (PostgreSQLParser.DETACH - 463)) | (1 << (PostgreSQLParser.EXPRESSION - 463)) | (1 << (PostgreSQLParser.GENERATED - 463)) | (1 << (PostgreSQLParser.LOGGED - 463)) | (1 << (PostgreSQLParser.STORED - 463)) | (1 << (PostgreSQLParser.INCLUDE - 463)) | (1 << (PostgreSQLParser.ROUTINE - 463)) | (1 << (PostgreSQLParser.TRANSFORM - 463)) | (1 << (PostgreSQLParser.IMPORT_P - 463)) | (1 << (PostgreSQLParser.POLICY - 463)) | (1 << (PostgreSQLParser.METHOD - 463)) | (1 << (PostgreSQLParser.REFERENCING - 463)) | (1 << (PostgreSQLParser.NEW - 463)) | (1 << (PostgreSQLParser.OLD - 463)) | (1 << (PostgreSQLParser.VALUE_P - 463)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 463)) | (1 << (PostgreSQLParser.PUBLICATION - 463)) | (1 << (PostgreSQLParser.OUT_P - 463)) | (1 << (PostgreSQLParser.ROUTINES - 463)) | (1 << (PostgreSQLParser.SCHEMAS - 463)) | (1 << (PostgreSQLParser.PROCEDURES - 463)) | (1 << (PostgreSQLParser.INPUT_P - 463)) | (1 << (PostgreSQLParser.SUPPORT - 463)) | (1 << (PostgreSQLParser.PARALLEL - 463)) | (1 << (PostgreSQLParser.SQL_P - 463)) | (1 << (PostgreSQLParser.DEPENDS - 463)) | (1 << (PostgreSQLParser.OVERRIDING - 463)) | (1 << (PostgreSQLParser.CONFLICT - 463)) | (1 << (PostgreSQLParser.SKIP_P - 463)) | (1 << (PostgreSQLParser.LOCKED - 463)) | (1 << (PostgreSQLParser.TIES - 463)) | (1 << (PostgreSQLParser.ROLLUP - 463)) | (1 << (PostgreSQLParser.CUBE - 463)) | (1 << (PostgreSQLParser.GROUPING - 463)) | (1 << (PostgreSQLParser.SETS - 463)) | (1 << (PostgreSQLParser.ORDINALITY - 463)) | (1 << (PostgreSQLParser.XMLTABLE - 463)) | (1 << (PostgreSQLParser.COLUMNS - 463)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 463)) | (1 << (PostgreSQLParser.NORMALIZED - 463)) | (1 << (PostgreSQLParser.WITHIN - 463)) | (1 << (PostgreSQLParser.FILTER - 463)) | (1 << (PostgreSQLParser.GROUPS - 463)) | (1 << (PostgreSQLParser.OTHERS - 463)) | (1 << (PostgreSQLParser.NFC - 463)) | (1 << (PostgreSQLParser.NFD - 463)) | (1 << (PostgreSQLParser.NFKC - 463)) | (1 << (PostgreSQLParser.NFKD - 463)) | (1 << (PostgreSQLParser.UESCAPE - 463)) | (1 << (PostgreSQLParser.VIEWS - 463)))) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & ((1 << (PostgreSQLParser.NORMALIZE - 527)) | (1 << (PostgreSQLParser.ERROR - 527)) | (1 << (PostgreSQLParser.RETURN - 527)) | (1 << (PostgreSQLParser.FORMAT - 527)) | (1 << (PostgreSQLParser.Identifier - 527)) | (1 << (PostgreSQLParser.QuotedIdentifier - 527)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 527)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 527)))) != 0):
                    self.state = 2641
                    self.opttableelementlist()


                self.state = 2644
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INHERITS:
                    self.state = 2645
                    self.optinherit()


                self.state = 2649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PARTITION:
                    self.state = 2648
                    self.optpartitionspec()


                self.state = 2652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 2651
                    self.table_access_method_clause()


                self.state = 2655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH or _la==PostgreSQLParser.WITHOUT:
                    self.state = 2654
                    self.optwith()


                self.state = 2658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ON:
                    self.state = 2657
                    self.oncommitoption()


                self.state = 2661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TABLESPACE:
                    self.state = 2660
                    self.opttablespace()


                pass
            elif token in [PostgreSQLParser.OF]:
                self.state = 2663
                self.match(PostgreSQLParser.OF)
                self.state = 2664
                self.any_name()
                self.state = 2666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 2665
                    self.opttypedtableelementlist()


                self.state = 2669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PARTITION:
                    self.state = 2668
                    self.optpartitionspec()


                self.state = 2672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 2671
                    self.table_access_method_clause()


                self.state = 2675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH or _la==PostgreSQLParser.WITHOUT:
                    self.state = 2674
                    self.optwith()


                self.state = 2678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ON:
                    self.state = 2677
                    self.oncommitoption()


                self.state = 2681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TABLESPACE:
                    self.state = 2680
                    self.opttablespace()


                pass
            elif token in [PostgreSQLParser.PARTITION]:
                self.state = 2683
                self.match(PostgreSQLParser.PARTITION)
                self.state = 2684
                self.match(PostgreSQLParser.OF)
                self.state = 2685
                self.qualified_name()
                self.state = 2687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 2686
                    self.opttypedtableelementlist()


                self.state = 2689
                self.partitionboundspec()
                self.state = 2691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PARTITION:
                    self.state = 2690
                    self.optpartitionspec()


                self.state = 2694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 2693
                    self.table_access_method_clause()


                self.state = 2697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH or _la==PostgreSQLParser.WITHOUT:
                    self.state = 2696
                    self.optwith()


                self.state = 2700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ON:
                    self.state = 2699
                    self.oncommitoption()


                self.state = 2703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TABLESPACE:
                    self.state = 2702
                    self.opttablespace()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttempContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(PostgreSQLParser.GLOBAL, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttemp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttemp" ):
                listener.enterOpttemp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttemp" ):
                listener.exitOpttemp(self)




    def opttemp(self):

        localctx = PostgreSQLParser.OpttempContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_opttemp)
        self._la = 0 # Token type
        try:
            self.state = 2714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.TEMPORARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2707
                self.match(PostgreSQLParser.TEMPORARY)
                pass
            elif token in [PostgreSQLParser.TEMP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2708
                self.match(PostgreSQLParser.TEMP)
                pass
            elif token in [PostgreSQLParser.LOCAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2709
                self.match(PostgreSQLParser.LOCAL)
                self.state = 2710
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.TEMP or _la==PostgreSQLParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PostgreSQLParser.GLOBAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2711
                self.match(PostgreSQLParser.GLOBAL)
                self.state = 2712
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.TEMP or _la==PostgreSQLParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PostgreSQLParser.UNLOGGED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2713
                self.match(PostgreSQLParser.UNLOGGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttableelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableelementlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttableelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttableelementlist" ):
                listener.enterOpttableelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttableelementlist" ):
                listener.exitOpttableelementlist(self)




    def opttableelementlist(self):

        localctx = PostgreSQLParser.OpttableelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_opttableelementlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            self.tableelementlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttypedtableelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typedtableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypedtableelementlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttypedtableelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttypedtableelementlist" ):
                listener.enterOpttypedtableelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttypedtableelementlist" ):
                listener.exitOpttypedtableelementlist(self)




    def opttypedtableelementlist(self):

        localctx = PostgreSQLParser.OpttypedtableelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_opttypedtableelementlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2719
            self.typedtableelementlist()
            self.state = 2720
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableelement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TableelementContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TableelementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tableelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableelementlist" ):
                listener.enterTableelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableelementlist" ):
                listener.exitTableelementlist(self)




    def tableelementlist(self):

        localctx = PostgreSQLParser.TableelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_tableelementlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            self.tableelement()
            self.state = 2727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2723
                self.match(PostgreSQLParser.COMMA)
                self.state = 2724
                self.tableelement()
                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedtableelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedtableelement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypedtableelementContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypedtableelementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_typedtableelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedtableelementlist" ):
                listener.enterTypedtableelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedtableelementlist" ):
                listener.exitTypedtableelementlist(self)




    def typedtableelementlist(self):

        localctx = PostgreSQLParser.TypedtableelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_typedtableelementlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2730
            self.typedtableelement()
            self.state = 2735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2731
                self.match(PostgreSQLParser.COMMA)
                self.state = 2732
                self.typedtableelement()
                self.state = 2737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableelementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableconstraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableconstraintContext,0)


        def tablelikeclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablelikeclauseContext,0)


        def columnDef(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnDefContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tableelement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableelement" ):
                listener.enterTableelement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableelement" ):
                listener.exitTableelement(self)




    def tableelement(self):

        localctx = PostgreSQLParser.TableelementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_tableelement)
        try:
            self.state = 2741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2738
                self.tableconstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2739
                self.tablelikeclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2740
                self.columnDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedtableelementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnOptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnOptionsContext,0)


        def tableconstraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableconstraintContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_typedtableelement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedtableelement" ):
                listener.enterTypedtableelement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedtableelement" ):
                listener.exitTypedtableelement(self)




    def typedtableelement(self):

        localctx = PostgreSQLParser.TypedtableelementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typedtableelement)
        try:
            self.state = 2745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2743
                self.columnOptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2744
                self.tableconstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def colquallist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColquallistContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDef" ):
                listener.enterColumnDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDef" ):
                listener.exitColumnDef(self)




    def columnDef(self):

        localctx = PostgreSQLParser.ColumnDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_columnDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.colid()
            self.state = 2748
            self.typename()
            self.state = 2750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPTIONS:
                self.state = 2749
                self.create_generic_options()


            self.state = 2752
            self.colquallist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def colquallist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColquallistContext,0)


        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnOptions" ):
                listener.enterColumnOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnOptions" ):
                listener.exitColumnOptions(self)




    def columnOptions(self):

        localctx = PostgreSQLParser.ColumnOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_columnOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.colid()
            self.state = 2757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 2755
                self.match(PostgreSQLParser.WITH)
                self.state = 2756
                self.match(PostgreSQLParser.OPTIONS)


            self.state = 2759
            self.colquallist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColquallistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colconstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColconstraintContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColconstraintContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colquallist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColquallist" ):
                listener.enterColquallist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColquallist" ):
                listener.exitColquallist(self)




    def colquallist(self):

        localctx = PostgreSQLParser.ColquallistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_colquallist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (PostgreSQLParser.CHECK - 80)) | (1 << (PostgreSQLParser.COLLATE - 80)) | (1 << (PostgreSQLParser.CONSTRAINT - 80)) | (1 << (PostgreSQLParser.DEFAULT - 80)) | (1 << (PostgreSQLParser.DEFERRABLE - 80)) | (1 << (PostgreSQLParser.INITIALLY - 80)) | (1 << (PostgreSQLParser.NOT - 80)) | (1 << (PostgreSQLParser.NULL_P - 80)) | (1 << (PostgreSQLParser.PRIMARY - 80)) | (1 << (PostgreSQLParser.REFERENCES - 80)) | (1 << (PostgreSQLParser.UNIQUE - 80)))) != 0) or _la==PostgreSQLParser.GENERATED:
                self.state = 2761
                self.colconstraint()
                self.state = 2766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColconstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def colconstraintelem(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColconstraintelemContext,0)


        def constraintattr(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattrContext,0)


        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colconstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColconstraint" ):
                listener.enterColconstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColconstraint" ):
                listener.exitColconstraint(self)




    def colconstraint(self):

        localctx = PostgreSQLParser.ColconstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_colconstraint)
        try:
            self.state = 2775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2767
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2768
                self.name()
                self.state = 2769
                self.colconstraintelem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2771
                self.colconstraintelem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2772
                self.constraintattr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2773
                self.match(PostgreSQLParser.COLLATE)
                self.state = 2774
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColconstraintelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def optconstablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptconstablespaceContext,0)


        def PRIMARY(self):
            return self.getToken(PostgreSQLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def no_inherit_(self):
            return self.getTypedRuleContext(PostgreSQLParser.No_inherit_Context,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def b_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.B_exprContext,0)


        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def generated_when(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generated_whenContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def STORED(self):
            return self.getToken(PostgreSQLParser.STORED, 0)

        def optparenthesizedseqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptparenthesizedseqoptlistContext,0)


        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def key_match(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_matchContext,0)


        def key_actions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_actionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colconstraintelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColconstraintelem" ):
                listener.enterColconstraintelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColconstraintelem" ):
                listener.exitColconstraintelem(self)




    def colconstraintelem(self):

        localctx = PostgreSQLParser.ColconstraintelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_colconstraintelem)
        self._la = 0 # Token type
        try:
            self.state = 2829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2777
                self.match(PostgreSQLParser.NOT)
                self.state = 2778
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [PostgreSQLParser.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2779
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [PostgreSQLParser.UNIQUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2780
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 2782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 2781
                    self.definition_()


                self.state = 2785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 2784
                    self.optconstablespace()


                pass
            elif token in [PostgreSQLParser.PRIMARY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2787
                self.match(PostgreSQLParser.PRIMARY)
                self.state = 2788
                self.match(PostgreSQLParser.KEY)
                self.state = 2790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 2789
                    self.definition_()


                self.state = 2793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 2792
                    self.optconstablespace()


                pass
            elif token in [PostgreSQLParser.CHECK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2795
                self.match(PostgreSQLParser.CHECK)
                self.state = 2796
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2797
                self.a_expr()
                self.state = 2798
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO:
                    self.state = 2799
                    self.no_inherit_()


                pass
            elif token in [PostgreSQLParser.DEFAULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2802
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 2803
                self.b_expr(0)
                pass
            elif token in [PostgreSQLParser.GENERATED]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2804
                self.match(PostgreSQLParser.GENERATED)
                self.state = 2805
                self.generated_when()
                self.state = 2806
                self.match(PostgreSQLParser.AS)
                self.state = 2816
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.IDENTITY_P]:
                    self.state = 2807
                    self.match(PostgreSQLParser.IDENTITY_P)
                    self.state = 2809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.OPEN_PAREN:
                        self.state = 2808
                        self.optparenthesizedseqoptlist()


                    pass
                elif token in [PostgreSQLParser.OPEN_PAREN]:
                    self.state = 2811
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 2812
                    self.a_expr()
                    self.state = 2813
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 2814
                    self.match(PostgreSQLParser.STORED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PostgreSQLParser.REFERENCES]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2818
                self.match(PostgreSQLParser.REFERENCES)
                self.state = 2819
                self.qualified_name()
                self.state = 2821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 2820
                    self.column_list_()


                self.state = 2824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.MATCH:
                    self.state = 2823
                    self.key_match()


                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ON:
                    self.state = 2826
                    self.key_actions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generated_whenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generated_when

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerated_when" ):
                listener.enterGenerated_when(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerated_when" ):
                listener.exitGenerated_when(self)




    def generated_when(self):

        localctx = PostgreSQLParser.Generated_whenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_generated_when)
        try:
            self.state = 2834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ALWAYS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2831
                self.match(PostgreSQLParser.ALWAYS)
                pass
            elif token in [PostgreSQLParser.BY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2832
                self.match(PostgreSQLParser.BY)
                self.state = 2833
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintattrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def INITIALLY(self):
            return self.getToken(PostgreSQLParser.INITIALLY, 0)

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintattr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintattr" ):
                listener.enterConstraintattr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintattr" ):
                listener.exitConstraintattr(self)




    def constraintattr(self):

        localctx = PostgreSQLParser.ConstraintattrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_constraintattr)
        self._la = 0 # Token type
        try:
            self.state = 2841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.DEFERRABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2836
                self.match(PostgreSQLParser.DEFERRABLE)
                pass
            elif token in [PostgreSQLParser.NOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2837
                self.match(PostgreSQLParser.NOT)
                self.state = 2838
                self.match(PostgreSQLParser.DEFERRABLE)
                pass
            elif token in [PostgreSQLParser.INITIALLY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2839
                self.match(PostgreSQLParser.INITIALLY)
                self.state = 2840
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.DEFERRED or _la==PostgreSQLParser.IMMEDIATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablelikeclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def tablelikeoptionlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablelikeoptionlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablelikeclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablelikeclause" ):
                listener.enterTablelikeclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablelikeclause" ):
                listener.exitTablelikeclause(self)




    def tablelikeclause(self):

        localctx = PostgreSQLParser.TablelikeclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_tablelikeclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2843
            self.match(PostgreSQLParser.LIKE)
            self.state = 2844
            self.qualified_name()
            self.state = 2845
            self.tablelikeoptionlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablelikeoptionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablelikeoption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TablelikeoptionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TablelikeoptionContext,i)


        def INCLUDING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INCLUDING)
            else:
                return self.getToken(PostgreSQLParser.INCLUDING, i)

        def EXCLUDING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.EXCLUDING)
            else:
                return self.getToken(PostgreSQLParser.EXCLUDING, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablelikeoptionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablelikeoptionlist" ):
                listener.enterTablelikeoptionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablelikeoptionlist" ):
                listener.exitTablelikeoptionlist(self)




    def tablelikeoptionlist(self):

        localctx = PostgreSQLParser.TablelikeoptionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_tablelikeoptionlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.EXCLUDING or _la==PostgreSQLParser.INCLUDING:
                self.state = 2847
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.EXCLUDING or _la==PostgreSQLParser.INCLUDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2848
                self.tablelikeoption()
                self.state = 2853
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablelikeoptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS(self):
            return self.getToken(PostgreSQLParser.COMMENTS, 0)

        def CONSTRAINTS(self):
            return self.getToken(PostgreSQLParser.CONSTRAINTS, 0)

        def DEFAULTS(self):
            return self.getToken(PostgreSQLParser.DEFAULTS, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def INDEXES(self):
            return self.getToken(PostgreSQLParser.INDEXES, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablelikeoption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablelikeoption" ):
                listener.enterTablelikeoption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablelikeoption" ):
                listener.exitTablelikeoption(self)




    def tablelikeoption(self):

        localctx = PostgreSQLParser.TablelikeoptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_tablelikeoption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2854
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ALL or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)))) != 0) or _la==PostgreSQLParser.INDEXES or _la==PostgreSQLParser.STATISTICS or _la==PostgreSQLParser.STORAGE or _la==PostgreSQLParser.GENERATED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableconstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def constraintelem(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintelemContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tableconstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableconstraint" ):
                listener.enterTableconstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableconstraint" ):
                listener.exitTableconstraint(self)




    def tableconstraint(self):

        localctx = PostgreSQLParser.TableconstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_tableconstraint)
        try:
            self.state = 2861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.CONSTRAINT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2856
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2857
                self.name()
                self.state = 2858
                self.constraintelem()
                pass
            elif token in [PostgreSQLParser.CHECK, PostgreSQLParser.FOREIGN, PostgreSQLParser.PRIMARY, PostgreSQLParser.UNIQUE, PostgreSQLParser.EXCLUDE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2860
                self.constraintelem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def constraintattributespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributespecContext,0)


        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def existingindex(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExistingindexContext,0)


        def c_include_(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_include_Context,0)


        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def optconstablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptconstablespaceContext,0)


        def PRIMARY(self):
            return self.getToken(PostgreSQLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def EXCLUDE(self):
            return self.getToken(PostgreSQLParser.EXCLUDE, 0)

        def exclusionconstraintlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExclusionconstraintlistContext,0)


        def access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Access_method_clauseContext,0)


        def exclusionwhereclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExclusionwhereclauseContext,0)


        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def key_match(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_matchContext,0)


        def key_actions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_actionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintelem" ):
                listener.enterConstraintelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintelem" ):
                listener.exitConstraintelem(self)




    def constraintelem(self):

        localctx = PostgreSQLParser.ConstraintelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_constraintelem)
        self._la = 0 # Token type
        try:
            self.state = 2949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.CHECK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2863
                self.match(PostgreSQLParser.CHECK)
                self.state = 2864
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2865
                self.a_expr()
                self.state = 2866
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2867
                self.constraintattributespec()
                pass
            elif token in [PostgreSQLParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2869
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 2887
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.OPEN_PAREN]:
                    self.state = 2870
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 2871
                    self.columnlist()
                    self.state = 2872
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 2874
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.INCLUDE:
                        self.state = 2873
                        self.c_include_()


                    self.state = 2877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.WITH:
                        self.state = 2876
                        self.definition_()


                    self.state = 2880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.USING:
                        self.state = 2879
                        self.optconstablespace()


                    self.state = 2882
                    self.constraintattributespec()
                    pass
                elif token in [PostgreSQLParser.USING]:
                    self.state = 2884
                    self.existingindex()
                    self.state = 2885
                    self.constraintattributespec()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PostgreSQLParser.PRIMARY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2889
                self.match(PostgreSQLParser.PRIMARY)
                self.state = 2890
                self.match(PostgreSQLParser.KEY)
                self.state = 2908
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.OPEN_PAREN]:
                    self.state = 2891
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 2892
                    self.columnlist()
                    self.state = 2893
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 2895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.INCLUDE:
                        self.state = 2894
                        self.c_include_()


                    self.state = 2898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.WITH:
                        self.state = 2897
                        self.definition_()


                    self.state = 2901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.USING:
                        self.state = 2900
                        self.optconstablespace()


                    self.state = 2903
                    self.constraintattributespec()
                    pass
                elif token in [PostgreSQLParser.USING]:
                    self.state = 2905
                    self.existingindex()
                    self.state = 2906
                    self.constraintattributespec()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PostgreSQLParser.EXCLUDE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2910
                self.match(PostgreSQLParser.EXCLUDE)
                self.state = 2912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 2911
                    self.access_method_clause()


                self.state = 2914
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2915
                self.exclusionconstraintlist()
                self.state = 2916
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INCLUDE:
                    self.state = 2917
                    self.c_include_()


                self.state = 2921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 2920
                    self.definition_()


                self.state = 2924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 2923
                    self.optconstablespace()


                self.state = 2927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 2926
                    self.exclusionwhereclause()


                self.state = 2929
                self.constraintattributespec()
                pass
            elif token in [PostgreSQLParser.FOREIGN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2931
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 2932
                self.match(PostgreSQLParser.KEY)
                self.state = 2933
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2934
                self.columnlist()
                self.state = 2935
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2936
                self.match(PostgreSQLParser.REFERENCES)
                self.state = 2937
                self.qualified_name()
                self.state = 2939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 2938
                    self.column_list_()


                self.state = 2942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.MATCH:
                    self.state = 2941
                    self.key_match()


                self.state = 2945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ON:
                    self.state = 2944
                    self.key_actions()


                self.state = 2947
                self.constraintattributespec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_inherit_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_no_inherit_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_inherit_" ):
                listener.enterNo_inherit_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_inherit_" ):
                listener.exitNo_inherit_(self)




    def no_inherit_(self):

        localctx = PostgreSQLParser.No_inherit_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_no_inherit_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2951
            self.match(PostgreSQLParser.NO)
            self.state = 2952
            self.match(PostgreSQLParser.INHERIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list_" ):
                listener.enterColumn_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list_" ):
                listener.exitColumn_list_(self)




    def column_list_(self):

        localctx = PostgreSQLParser.Column_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_column_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2954
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2955
            self.columnlist()
            self.state = 2956
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnElem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColumnElemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColumnElemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnlist" ):
                listener.enterColumnlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnlist" ):
                listener.exitColumnlist(self)




    def columnlist(self):

        localctx = PostgreSQLParser.ColumnlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_columnlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.columnElem()
            self.state = 2963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2959
                self.match(PostgreSQLParser.COMMA)
                self.state = 2960
                self.columnElem()
                self.state = 2965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnElemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnElem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnElem" ):
                listener.enterColumnElem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnElem" ):
                listener.exitColumnElem(self)




    def columnElem(self):

        localctx = PostgreSQLParser.ColumnElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_columnElem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_include_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(PostgreSQLParser.INCLUDE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_c_include_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_include_" ):
                listener.enterC_include_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_include_" ):
                listener.exitC_include_(self)




    def c_include_(self):

        localctx = PostgreSQLParser.C_include_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_c_include_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2968
            self.match(PostgreSQLParser.INCLUDE)
            self.state = 2969
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2970
            self.columnlist()
            self.state = 2971
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(PostgreSQLParser.MATCH, 0)

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(PostgreSQLParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(PostgreSQLParser.SIMPLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_match" ):
                listener.enterKey_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_match" ):
                listener.exitKey_match(self)




    def key_match(self):

        localctx = PostgreSQLParser.Key_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_key_match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            self.match(PostgreSQLParser.MATCH)
            self.state = 2974
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FULL or _la==PostgreSQLParser.PARTIAL or _la==PostgreSQLParser.SIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusionconstraintlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusionconstraintelem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExclusionconstraintelemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExclusionconstraintelemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exclusionconstraintlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusionconstraintlist" ):
                listener.enterExclusionconstraintlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusionconstraintlist" ):
                listener.exitExclusionconstraintlist(self)




    def exclusionconstraintlist(self):

        localctx = PostgreSQLParser.ExclusionconstraintlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_exclusionconstraintlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2976
            self.exclusionconstraintelem()
            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 2977
                self.match(PostgreSQLParser.COMMA)
                self.state = 2978
                self.exclusionconstraintelem()
                self.state = 2983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusionconstraintelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_elem(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_elemContext,0)


        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exclusionconstraintelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusionconstraintelem" ):
                listener.enterExclusionconstraintelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusionconstraintelem" ):
                listener.exitExclusionconstraintelem(self)




    def exclusionconstraintelem(self):

        localctx = PostgreSQLParser.ExclusionconstraintelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_exclusionconstraintelem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2984
            self.index_elem()
            self.state = 2985
            self.match(PostgreSQLParser.WITH)
            self.state = 2992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2986
                self.any_operator()
                pass

            elif la_ == 2:
                self.state = 2987
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 2988
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2989
                self.any_operator()
                self.state = 2990
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusionwhereclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exclusionwhereclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusionwhereclause" ):
                listener.enterExclusionwhereclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusionwhereclause" ):
                listener.exitExclusionwhereclause(self)




    def exclusionwhereclause(self):

        localctx = PostgreSQLParser.ExclusionwhereclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_exclusionwhereclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2994
            self.match(PostgreSQLParser.WHERE)
            self.state = 2995
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2996
            self.a_expr()
            self.state = 2997
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_actionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_update(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_updateContext,0)


        def key_delete(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_deleteContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_actions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_actions" ):
                listener.enterKey_actions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_actions" ):
                listener.exitKey_actions(self)




    def key_actions(self):

        localctx = PostgreSQLParser.Key_actionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_key_actions)
        try:
            self.state = 3007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2999
                self.key_update()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3000
                self.key_delete()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3001
                self.key_update()
                self.state = 3002
                self.key_delete()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3004
                self.key_delete()
                self.state = 3005
                self.key_update()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_updateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def key_action(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_actionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_update" ):
                listener.enterKey_update(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_update" ):
                listener.exitKey_update(self)




    def key_update(self):

        localctx = PostgreSQLParser.Key_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_key_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3009
            self.match(PostgreSQLParser.ON)
            self.state = 3010
            self.match(PostgreSQLParser.UPDATE)
            self.state = 3011
            self.key_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_deleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def key_action(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_actionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_delete" ):
                listener.enterKey_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_delete" ):
                listener.exitKey_delete(self)




    def key_delete(self):

        localctx = PostgreSQLParser.Key_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_key_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3013
            self.match(PostgreSQLParser.ON)
            self.state = 3014
            self.match(PostgreSQLParser.DELETE_P)
            self.state = 3015
            self.key_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def ACTION(self):
            return self.getToken(PostgreSQLParser.ACTION, 0)

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_action" ):
                listener.enterKey_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_action" ):
                listener.exitKey_action(self)




    def key_action(self):

        localctx = PostgreSQLParser.Key_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_key_action)
        self._la = 0 # Token type
        try:
            self.state = 3023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.NO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3017
                self.match(PostgreSQLParser.NO)
                self.state = 3018
                self.match(PostgreSQLParser.ACTION)
                pass
            elif token in [PostgreSQLParser.RESTRICT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3019
                self.match(PostgreSQLParser.RESTRICT)
                pass
            elif token in [PostgreSQLParser.CASCADE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3020
                self.match(PostgreSQLParser.CASCADE)
                pass
            elif token in [PostgreSQLParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3021
                self.match(PostgreSQLParser.SET)
                self.state = 3022
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.DEFAULT or _la==PostgreSQLParser.NULL_P):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptinheritContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INHERITS(self):
            return self.getToken(PostgreSQLParser.INHERITS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_name_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optinherit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptinherit" ):
                listener.enterOptinherit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptinherit" ):
                listener.exitOptinherit(self)




    def optinherit(self):

        localctx = PostgreSQLParser.OptinheritContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_optinherit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3025
            self.match(PostgreSQLParser.INHERITS)
            self.state = 3026
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3027
            self.qualified_name_list()
            self.state = 3028
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptpartitionspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.PartitionspecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optpartitionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptpartitionspec" ):
                listener.enterOptpartitionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptpartitionspec" ):
                listener.exitOptpartitionspec(self)




    def optpartitionspec(self):

        localctx = PostgreSQLParser.OptpartitionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_optpartitionspec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3030
            self.partitionspec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def part_params(self):
            return self.getTypedRuleContext(PostgreSQLParser.Part_paramsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partitionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionspec" ):
                listener.enterPartitionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionspec" ):
                listener.exitPartitionspec(self)




    def partitionspec(self):

        localctx = PostgreSQLParser.PartitionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_partitionspec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3032
            self.match(PostgreSQLParser.PARTITION)
            self.state = 3033
            self.match(PostgreSQLParser.BY)
            self.state = 3034
            self.colid()
            self.state = 3035
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3036
            self.part_params()
            self.state = 3037
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Part_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def part_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Part_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Part_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_part_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPart_params" ):
                listener.enterPart_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPart_params" ):
                listener.exitPart_params(self)




    def part_params(self):

        localctx = PostgreSQLParser.Part_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_part_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3039
            self.part_elem()
            self.state = 3044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 3040
                self.match(PostgreSQLParser.COMMA)
                self.state = 3041
                self.part_elem()
                self.state = 3046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Part_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def collate_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_Context,0)


        def class_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Class_Context,0)


        def func_expr_windowless(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_windowlessContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_part_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPart_elem" ):
                listener.enterPart_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPart_elem" ):
                listener.exitPart_elem(self)




    def part_elem(self):

        localctx = PostgreSQLParser.Part_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_part_elem)
        self._la = 0 # Token type
        try:
            self.state = 3070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3047
                self.colid()
                self.state = 3049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLLATE:
                    self.state = 3048
                    self.collate_()


                self.state = 3052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 3051
                    self.class_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3054
                self.func_expr_windowless()
                self.state = 3056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLLATE:
                    self.state = 3055
                    self.collate_()


                self.state = 3059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 3058
                    self.class_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3061
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3062
                self.a_expr()
                self.state = 3063
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 3065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLLATE:
                    self.state = 3064
                    self.collate_()


                self.state = 3068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 3067
                    self.class_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_access_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_access_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_access_method_clause" ):
                listener.enterTable_access_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_access_method_clause" ):
                listener.exitTable_access_method_clause(self)




    def table_access_method_clause(self):

        localctx = PostgreSQLParser.Table_access_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_table_access_method_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3072
            self.match(PostgreSQLParser.USING)
            self.state = 3073
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptwithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def OIDS(self):
            return self.getToken(PostgreSQLParser.OIDS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optwith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptwith" ):
                listener.enterOptwith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptwith" ):
                listener.exitOptwith(self)




    def optwith(self):

        localctx = PostgreSQLParser.OptwithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_optwith)
        try:
            self.state = 3079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3075
                self.match(PostgreSQLParser.WITH)
                self.state = 3076
                self.reloptions()
                pass
            elif token in [PostgreSQLParser.WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3077
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 3078
                self.match(PostgreSQLParser.OIDS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OncommitoptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def COMMIT(self):
            return self.getToken(PostgreSQLParser.COMMIT, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def PRESERVE(self):
            return self.getToken(PostgreSQLParser.PRESERVE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_oncommitoption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOncommitoption" ):
                listener.enterOncommitoption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOncommitoption" ):
                listener.exitOncommitoption(self)




    def oncommitoption(self):

        localctx = PostgreSQLParser.OncommitoptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oncommitoption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3081
            self.match(PostgreSQLParser.ON)
            self.state = 3082
            self.match(PostgreSQLParser.COMMIT)
            self.state = 3088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.DROP]:
                self.state = 3083
                self.match(PostgreSQLParser.DROP)
                pass
            elif token in [PostgreSQLParser.DELETE_P]:
                self.state = 3084
                self.match(PostgreSQLParser.DELETE_P)
                self.state = 3085
                self.match(PostgreSQLParser.ROWS)
                pass
            elif token in [PostgreSQLParser.PRESERVE]:
                self.state = 3086
                self.match(PostgreSQLParser.PRESERVE)
                self.state = 3087
                self.match(PostgreSQLParser.ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttablespace" ):
                listener.enterOpttablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttablespace" ):
                listener.exitOpttablespace(self)




    def opttablespace(self):

        localctx = PostgreSQLParser.OpttablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_opttablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3090
            self.match(PostgreSQLParser.TABLESPACE)
            self.state = 3091
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptconstablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optconstablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptconstablespace" ):
                listener.enterOptconstablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptconstablespace" ):
                listener.exitOptconstablespace(self)




    def optconstablespace(self):

        localctx = PostgreSQLParser.OptconstablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_optconstablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3093
            self.match(PostgreSQLParser.USING)
            self.state = 3094
            self.match(PostgreSQLParser.INDEX)
            self.state = 3095
            self.match(PostgreSQLParser.TABLESPACE)
            self.state = 3096
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistingindexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_existingindex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistingindex" ):
                listener.enterExistingindex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistingindex" ):
                listener.exitExistingindex(self)




    def existingindex(self):

        localctx = PostgreSQLParser.ExistingindexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_existingindex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3098
            self.match(PostgreSQLParser.USING)
            self.state = 3099
            self.match(PostgreSQLParser.INDEX)
            self.state = 3100
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatestatsstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def from_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_listContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_list_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createstatsstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatestatsstmt" ):
                listener.enterCreatestatsstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatestatsstmt" ):
                listener.exitCreatestatsstmt(self)




    def createstatsstmt(self):

        localctx = PostgreSQLParser.CreatestatsstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_createstatsstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3102
            self.match(PostgreSQLParser.CREATE)
            self.state = 3103
            self.match(PostgreSQLParser.STATISTICS)
            self.state = 3107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 3104
                self.match(PostgreSQLParser.IF_P)
                self.state = 3105
                self.match(PostgreSQLParser.NOT)
                self.state = 3106
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3109
            self.any_name()
            self.state = 3111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 3110
                self.name_list_()


            self.state = 3113
            self.match(PostgreSQLParser.ON)
            self.state = 3114
            self.expr_list()
            self.state = 3115
            self.match(PostgreSQLParser.FROM)
            self.state = 3116
            self.from_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterstatsstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def STATISTICS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.STATISTICS)
            else:
                return self.getToken(PostgreSQLParser.STATISTICS, i)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterstatsstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterstatsstmt" ):
                listener.enterAlterstatsstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterstatsstmt" ):
                listener.exitAlterstatsstmt(self)




    def alterstatsstmt(self):

        localctx = PostgreSQLParser.AlterstatsstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_alterstatsstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3118
            self.match(PostgreSQLParser.ALTER)
            self.state = 3119
            self.match(PostgreSQLParser.STATISTICS)
            self.state = 3122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 3120
                self.match(PostgreSQLParser.IF_P)
                self.state = 3121
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3124
            self.any_name()
            self.state = 3125
            self.match(PostgreSQLParser.SET)
            self.state = 3126
            self.match(PostgreSQLParser.STATISTICS)
            self.state = 3127
            self.signediconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateasstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def create_as_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_as_targetContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def with_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_data_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createasstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateasstmt" ):
                listener.enterCreateasstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateasstmt" ):
                listener.exitCreateasstmt(self)




    def createasstmt(self):

        localctx = PostgreSQLParser.CreateasstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_createasstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3129
            self.match(PostgreSQLParser.CREATE)
            self.state = 3131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.GLOBAL or _la==PostgreSQLParser.LOCAL or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (PostgreSQLParser.TEMP - 383)) | (1 << (PostgreSQLParser.TEMPORARY - 383)) | (1 << (PostgreSQLParser.UNLOGGED - 383)))) != 0):
                self.state = 3130
                self.opttemp()


            self.state = 3133
            self.match(PostgreSQLParser.TABLE)
            self.state = 3137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 3134
                self.match(PostgreSQLParser.IF_P)
                self.state = 3135
                self.match(PostgreSQLParser.NOT)
                self.state = 3136
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3139
            self.create_as_target()
            self.state = 3140
            self.match(PostgreSQLParser.AS)
            self.state = 3141
            self.selectstmt()
            self.state = 3143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 3142
                self.with_data_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_as_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def table_access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_access_method_clauseContext,0)


        def optwith(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptwithContext,0)


        def oncommitoption(self):
            return self.getTypedRuleContext(PostgreSQLParser.OncommitoptionContext,0)


        def opttablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_as_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_as_target" ):
                listener.enterCreate_as_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_as_target" ):
                listener.exitCreate_as_target(self)




    def create_as_target(self):

        localctx = PostgreSQLParser.Create_as_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_create_as_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3145
            self.qualified_name()
            self.state = 3147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 3146
                self.column_list_()


            self.state = 3150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.USING:
                self.state = 3149
                self.table_access_method_clause()


            self.state = 3153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH or _la==PostgreSQLParser.WITHOUT:
                self.state = 3152
                self.optwith()


            self.state = 3156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ON:
                self.state = 3155
                self.oncommitoption()


            self.state = 3159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.TABLESPACE:
                self.state = 3158
                self.opttablespace()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_data_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_with_data_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_data_" ):
                listener.enterWith_data_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_data_" ):
                listener.exitWith_data_(self)




    def with_data_(self):

        localctx = PostgreSQLParser.With_data_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_with_data_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.match(PostgreSQLParser.WITH)
            self.state = 3165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.DATA_P]:
                self.state = 3162
                self.match(PostgreSQLParser.DATA_P)
                pass
            elif token in [PostgreSQLParser.NO]:
                self.state = 3163
                self.match(PostgreSQLParser.NO)
                self.state = 3164
                self.match(PostgreSQLParser.DATA_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatematviewstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def create_mv_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_mv_targetContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def optnolog(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptnologContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def with_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_data_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_creatematviewstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatematviewstmt" ):
                listener.enterCreatematviewstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatematviewstmt" ):
                listener.exitCreatematviewstmt(self)




    def creatematviewstmt(self):

        localctx = PostgreSQLParser.CreatematviewstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_creatematviewstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3167
            self.match(PostgreSQLParser.CREATE)
            self.state = 3169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.UNLOGGED:
                self.state = 3168
                self.optnolog()


            self.state = 3171
            self.match(PostgreSQLParser.MATERIALIZED)
            self.state = 3172
            self.match(PostgreSQLParser.VIEW)
            self.state = 3176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 3173
                self.match(PostgreSQLParser.IF_P)
                self.state = 3174
                self.match(PostgreSQLParser.NOT)
                self.state = 3175
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3178
            self.create_mv_target()
            self.state = 3179
            self.match(PostgreSQLParser.AS)
            self.state = 3180
            self.selectstmt()
            self.state = 3182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 3181
                self.with_data_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_mv_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def table_access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_access_method_clauseContext,0)


        def reloptions_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloptions_Context,0)


        def opttablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_mv_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_mv_target" ):
                listener.enterCreate_mv_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_mv_target" ):
                listener.exitCreate_mv_target(self)




    def create_mv_target(self):

        localctx = PostgreSQLParser.Create_mv_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_create_mv_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3184
            self.qualified_name()
            self.state = 3186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 3185
                self.column_list_()


            self.state = 3189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.USING:
                self.state = 3188
                self.table_access_method_clause()


            self.state = 3192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 3191
                self.reloptions_()


            self.state = 3195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.TABLESPACE:
                self.state = 3194
                self.opttablespace()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptnologContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optnolog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptnolog" ):
                listener.enterOptnolog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptnolog" ):
                listener.exitOptnolog(self)




    def optnolog(self):

        localctx = PostgreSQLParser.OptnologContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_optnolog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3197
            self.match(PostgreSQLParser.UNLOGGED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefreshmatviewstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def concurrently_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Concurrently_Context,0)


        def with_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_data_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_refreshmatviewstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshmatviewstmt" ):
                listener.enterRefreshmatviewstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshmatviewstmt" ):
                listener.exitRefreshmatviewstmt(self)




    def refreshmatviewstmt(self):

        localctx = PostgreSQLParser.RefreshmatviewstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_refreshmatviewstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3199
            self.match(PostgreSQLParser.REFRESH)
            self.state = 3200
            self.match(PostgreSQLParser.MATERIALIZED)
            self.state = 3201
            self.match(PostgreSQLParser.VIEW)
            self.state = 3203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.CONCURRENTLY:
                self.state = 3202
                self.concurrently_()


            self.state = 3205
            self.qualified_name()
            self.state = 3207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 3206
                self.with_data_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateseqstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def optseqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptseqoptlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createseqstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateseqstmt" ):
                listener.enterCreateseqstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateseqstmt" ):
                listener.exitCreateseqstmt(self)




    def createseqstmt(self):

        localctx = PostgreSQLParser.CreateseqstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_createseqstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self.match(PostgreSQLParser.CREATE)
            self.state = 3211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.GLOBAL or _la==PostgreSQLParser.LOCAL or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (PostgreSQLParser.TEMP - 383)) | (1 << (PostgreSQLParser.TEMPORARY - 383)) | (1 << (PostgreSQLParser.UNLOGGED - 383)))) != 0):
                self.state = 3210
                self.opttemp()


            self.state = 3213
            self.match(PostgreSQLParser.SEQUENCE)
            self.state = 3217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 3214
                self.match(PostgreSQLParser.IF_P)
                self.state = 3215
                self.match(PostgreSQLParser.NOT)
                self.state = 3216
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3219
            self.qualified_name()
            self.state = 3221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS or _la==PostgreSQLParser.CACHE or _la==PostgreSQLParser.CYCLE or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (PostgreSQLParser.INCREMENT - 263)) | (1 << (PostgreSQLParser.MAXVALUE - 263)) | (1 << (PostgreSQLParser.MINVALUE - 263)) | (1 << (PostgreSQLParser.NO - 263)) | (1 << (PostgreSQLParser.OWNED - 263)))) != 0) or ((((_la - 345)) & ~0x3f) == 0 and ((1 << (_la - 345)) & ((1 << (PostgreSQLParser.RESTART - 345)) | (1 << (PostgreSQLParser.SEQUENCE - 345)) | (1 << (PostgreSQLParser.START - 345)))) != 0):
                self.state = 3220
                self.optseqoptlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterseqstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def seqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeqoptlistContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterseqstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterseqstmt" ):
                listener.enterAlterseqstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterseqstmt" ):
                listener.exitAlterseqstmt(self)




    def alterseqstmt(self):

        localctx = PostgreSQLParser.AlterseqstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_alterseqstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3223
            self.match(PostgreSQLParser.ALTER)
            self.state = 3224
            self.match(PostgreSQLParser.SEQUENCE)
            self.state = 3227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 3225
                self.match(PostgreSQLParser.IF_P)
                self.state = 3226
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3229
            self.qualified_name()
            self.state = 3230
            self.seqoptlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptseqoptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def seqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeqoptlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optseqoptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptseqoptlist" ):
                listener.enterOptseqoptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptseqoptlist" ):
                listener.exitOptseqoptlist(self)




    def optseqoptlist(self):

        localctx = PostgreSQLParser.OptseqoptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_optseqoptlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3232
            self.seqoptlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptparenthesizedseqoptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def seqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeqoptlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optparenthesizedseqoptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptparenthesizedseqoptlist" ):
                listener.enterOptparenthesizedseqoptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptparenthesizedseqoptlist" ):
                listener.exitOptparenthesizedseqoptlist(self)




    def optparenthesizedseqoptlist(self):

        localctx = PostgreSQLParser.OptparenthesizedseqoptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_optparenthesizedseqoptlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3235
            self.seqoptlist()
            self.state = 3236
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeqoptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def seqoptelem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SeqoptelemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SeqoptelemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_seqoptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeqoptlist" ):
                listener.enterSeqoptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeqoptlist" ):
                listener.exitSeqoptlist(self)




    def seqoptlist(self):

        localctx = PostgreSQLParser.SeqoptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_seqoptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3239 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3238
                self.seqoptelem()
                self.state = 3241 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.AS or _la==PostgreSQLParser.CACHE or _la==PostgreSQLParser.CYCLE or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (PostgreSQLParser.INCREMENT - 263)) | (1 << (PostgreSQLParser.MAXVALUE - 263)) | (1 << (PostgreSQLParser.MINVALUE - 263)) | (1 << (PostgreSQLParser.NO - 263)) | (1 << (PostgreSQLParser.OWNED - 263)))) != 0) or ((((_la - 345)) & ~0x3f) == 0 and ((1 << (_la - 345)) & ((1 << (PostgreSQLParser.RESTART - 345)) | (1 << (PostgreSQLParser.SEQUENCE - 345)) | (1 << (PostgreSQLParser.START - 345)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeqoptelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def simpletypename(self):
            return self.getTypedRuleContext(PostgreSQLParser.SimpletypenameContext,0)


        def CACHE(self):
            return self.getToken(PostgreSQLParser.CACHE, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def CYCLE(self):
            return self.getToken(PostgreSQLParser.CYCLE, 0)

        def INCREMENT(self):
            return self.getToken(PostgreSQLParser.INCREMENT, 0)

        def by_(self):
            return self.getTypedRuleContext(PostgreSQLParser.By_Context,0)


        def MAXVALUE(self):
            return self.getToken(PostgreSQLParser.MAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(PostgreSQLParser.MINVALUE, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def NAME_P(self):
            return self.getToken(PostgreSQLParser.NAME_P, 0)

        def START(self):
            return self.getToken(PostgreSQLParser.START, 0)

        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_seqoptelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeqoptelem" ):
                listener.enterSeqoptelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeqoptelem" ):
                listener.exitSeqoptelem(self)




    def seqoptelem(self):

        localctx = PostgreSQLParser.SeqoptelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_seqoptelem)
        self._la = 0 # Token type
        try:
            self.state = 3277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.AS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3243
                self.match(PostgreSQLParser.AS)
                self.state = 3244
                self.simpletypename()
                pass
            elif token in [PostgreSQLParser.CACHE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3245
                self.match(PostgreSQLParser.CACHE)
                self.state = 3246
                self.numericonly()
                pass
            elif token in [PostgreSQLParser.CYCLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3247
                self.match(PostgreSQLParser.CYCLE)
                pass
            elif token in [PostgreSQLParser.INCREMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3248
                self.match(PostgreSQLParser.INCREMENT)
                self.state = 3250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.BY:
                    self.state = 3249
                    self.by_()


                self.state = 3252
                self.numericonly()
                pass
            elif token in [PostgreSQLParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3253
                self.match(PostgreSQLParser.MAXVALUE)
                self.state = 3254
                self.numericonly()
                pass
            elif token in [PostgreSQLParser.MINVALUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3255
                self.match(PostgreSQLParser.MINVALUE)
                self.state = 3256
                self.numericonly()
                pass
            elif token in [PostgreSQLParser.NO]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3257
                self.match(PostgreSQLParser.NO)
                self.state = 3258
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.CYCLE or _la==PostgreSQLParser.MAXVALUE or _la==PostgreSQLParser.MINVALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PostgreSQLParser.OWNED]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3259
                self.match(PostgreSQLParser.OWNED)
                self.state = 3260
                self.match(PostgreSQLParser.BY)
                self.state = 3261
                self.any_name()
                pass
            elif token in [PostgreSQLParser.SEQUENCE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3262
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 3263
                self.match(PostgreSQLParser.NAME_P)
                self.state = 3264
                self.any_name()
                pass
            elif token in [PostgreSQLParser.START]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3265
                self.match(PostgreSQLParser.START)
                self.state = 3267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 3266
                    self.with_()


                self.state = 3269
                self.numericonly()
                pass
            elif token in [PostgreSQLParser.RESTART]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3270
                self.match(PostgreSQLParser.RESTART)
                self.state = 3272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 3271
                    self.with_()


                self.state = 3275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (PostgreSQLParser.Integral - 576)) | (1 << (PostgreSQLParser.BinaryIntegral - 576)) | (1 << (PostgreSQLParser.OctalIntegral - 576)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 576)) | (1 << (PostgreSQLParser.Numeric - 576)))) != 0):
                    self.state = 3274
                    self.numericonly()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class By_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_by_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBy_" ):
                listener.enterBy_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBy_" ):
                listener.exitBy_(self)




    def by_(self):

        localctx = PostgreSQLParser.By_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_by_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3279
            self.match(PostgreSQLParser.BY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericonlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.FconstContext,0)


        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_numericonly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericonly" ):
                listener.enterNumericonly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericonly" ):
                listener.exitNumericonly(self)




    def numericonly(self):

        localctx = PostgreSQLParser.NumericonlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_numericonly)
        try:
            self.state = 3287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3281
                self.fconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3282
                self.match(PostgreSQLParser.PLUS)
                self.state = 3283
                self.fconst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3284
                self.match(PostgreSQLParser.MINUS)
                self.state = 3285
                self.fconst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3286
                self.signediconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numericonly_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericonly(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NumericonlyContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_numericonly_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericonly_list" ):
                listener.enterNumericonly_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericonly_list" ):
                listener.exitNumericonly_list(self)




    def numericonly_list(self):

        localctx = PostgreSQLParser.Numericonly_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_numericonly_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3289
            self.numericonly()
            self.state = 3294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 3290
                self.match(PostgreSQLParser.COMMA)
                self.state = 3291
                self.numericonly()
                self.state = 3296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateplangstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def trusted_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Trusted_Context,0)


        def procedural_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Procedural_Context,0)


        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def inline_handler_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Inline_handler_Context,0)


        def validator_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Validator_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createplangstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateplangstmt" ):
                listener.enterCreateplangstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateplangstmt" ):
                listener.exitCreateplangstmt(self)




    def createplangstmt(self):

        localctx = PostgreSQLParser.CreateplangstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_createplangstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3297
            self.match(PostgreSQLParser.CREATE)
            self.state = 3299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OR:
                self.state = 3298
                self.or_replace_()


            self.state = 3302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.TRUSTED:
                self.state = 3301
                self.trusted_()


            self.state = 3305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.PROCEDURAL:
                self.state = 3304
                self.procedural_()


            self.state = 3307
            self.match(PostgreSQLParser.LANGUAGE)
            self.state = 3308
            self.name()
            self.state = 3317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.HANDLER:
                self.state = 3309
                self.match(PostgreSQLParser.HANDLER)
                self.state = 3310
                self.handler_name()
                self.state = 3312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INLINE_P:
                    self.state = 3311
                    self.inline_handler_()


                self.state = 3315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO or _la==PostgreSQLParser.VALIDATOR:
                    self.state = 3314
                    self.validator_()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trusted_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUSTED(self):
            return self.getToken(PostgreSQLParser.TRUSTED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_trusted_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrusted_" ):
                listener.enterTrusted_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrusted_" ):
                listener.exitTrusted_(self)




    def trusted_(self):

        localctx = PostgreSQLParser.Trusted_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_trusted_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3319
            self.match(PostgreSQLParser.TRUSTED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Handler_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PostgreSQLParser.AttrsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_handler_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler_name" ):
                listener.enterHandler_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler_name" ):
                listener.exitHandler_name(self)




    def handler_name(self):

        localctx = PostgreSQLParser.Handler_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_handler_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3321
            self.name()
            self.state = 3323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.DOT:
                self.state = 3322
                self.attrs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_handler_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INLINE_P(self):
            return self.getToken(PostgreSQLParser.INLINE_P, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_inline_handler_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_handler_" ):
                listener.enterInline_handler_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_handler_" ):
                listener.exitInline_handler_(self)




    def inline_handler_(self):

        localctx = PostgreSQLParser.Inline_handler_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_inline_handler_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.match(PostgreSQLParser.INLINE_P)
            self.state = 3326
            self.handler_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Validator_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATOR(self):
            return self.getToken(PostgreSQLParser.VALIDATOR, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_validator_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidator_clause" ):
                listener.enterValidator_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidator_clause" ):
                listener.exitValidator_clause(self)




    def validator_clause(self):

        localctx = PostgreSQLParser.Validator_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_validator_clause)
        try:
            self.state = 3332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.VALIDATOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3328
                self.match(PostgreSQLParser.VALIDATOR)
                self.state = 3329
                self.handler_name()
                pass
            elif token in [PostgreSQLParser.NO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3330
                self.match(PostgreSQLParser.NO)
                self.state = 3331
                self.match(PostgreSQLParser.VALIDATOR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Validator_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def validator_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Validator_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_validator_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidator_" ):
                listener.enterValidator_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidator_" ):
                listener.exitValidator_(self)




    def validator_(self):

        localctx = PostgreSQLParser.Validator_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_validator_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            self.validator_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedural_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURAL(self):
            return self.getToken(PostgreSQLParser.PROCEDURAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_procedural_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedural_" ):
                listener.enterProcedural_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedural_" ):
                listener.exitProcedural_(self)




    def procedural_(self):

        localctx = PostgreSQLParser.Procedural_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_procedural_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            self.match(PostgreSQLParser.PROCEDURAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatetablespacestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def LOCATION(self):
            return self.getToken(PostgreSQLParser.LOCATION, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def opttablespaceowner(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceownerContext,0)


        def reloptions_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloptions_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createtablespacestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatetablespacestmt" ):
                listener.enterCreatetablespacestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatetablespacestmt" ):
                listener.exitCreatetablespacestmt(self)




    def createtablespacestmt(self):

        localctx = PostgreSQLParser.CreatetablespacestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_createtablespacestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3338
            self.match(PostgreSQLParser.CREATE)
            self.state = 3339
            self.match(PostgreSQLParser.TABLESPACE)
            self.state = 3340
            self.name()
            self.state = 3342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OWNER:
                self.state = 3341
                self.opttablespaceowner()


            self.state = 3344
            self.match(PostgreSQLParser.LOCATION)
            self.state = 3345
            self.sconst()
            self.state = 3347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 3346
                self.reloptions_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttablespaceownerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttablespaceowner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttablespaceowner" ):
                listener.enterOpttablespaceowner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttablespaceowner" ):
                listener.exitOpttablespaceowner(self)




    def opttablespaceowner(self):

        localctx = PostgreSQLParser.OpttablespaceownerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_opttablespaceowner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3349
            self.match(PostgreSQLParser.OWNER)
            self.state = 3350
            self.rolespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DroptablespacestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_droptablespacestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDroptablespacestmt" ):
                listener.enterDroptablespacestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDroptablespacestmt" ):
                listener.exitDroptablespacestmt(self)




    def droptablespacestmt(self):

        localctx = PostgreSQLParser.DroptablespacestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_droptablespacestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3352
            self.match(PostgreSQLParser.DROP)
            self.state = 3353
            self.match(PostgreSQLParser.TABLESPACE)
            self.state = 3356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 3354
                self.match(PostgreSQLParser.IF_P)
                self.state = 3355
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3358
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateextensionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def create_extension_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_extension_opt_listContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createextensionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateextensionstmt" ):
                listener.enterCreateextensionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateextensionstmt" ):
                listener.exitCreateextensionstmt(self)




    def createextensionstmt(self):

        localctx = PostgreSQLParser.CreateextensionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_createextensionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3360
            self.match(PostgreSQLParser.CREATE)
            self.state = 3361
            self.match(PostgreSQLParser.EXTENSION)
            self.state = 3365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 3362
                self.match(PostgreSQLParser.IF_P)
                self.state = 3363
                self.match(PostgreSQLParser.NOT)
                self.state = 3364
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3367
            self.name()
            self.state = 3369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 3368
                self.with_()


            self.state = 3371
            self.create_extension_opt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_extension_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_extension_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Create_extension_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Create_extension_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_extension_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_extension_opt_list" ):
                listener.enterCreate_extension_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_extension_opt_list" ):
                listener.exitCreate_extension_opt_list(self)




    def create_extension_opt_list(self):

        localctx = PostgreSQLParser.Create_extension_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_create_extension_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.SCHEMA or _la==PostgreSQLParser.VERSION_P:
                self.state = 3373
                self.create_extension_opt_item()
                self.state = 3378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_extension_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_extension_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_extension_opt_item" ):
                listener.enterCreate_extension_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_extension_opt_item" ):
                listener.exitCreate_extension_opt_item(self)




    def create_extension_opt_item(self):

        localctx = PostgreSQLParser.Create_extension_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_create_extension_opt_item)
        try:
            self.state = 3386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SCHEMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3379
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 3380
                self.name()
                pass
            elif token in [PostgreSQLParser.VERSION_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3381
                self.match(PostgreSQLParser.VERSION_P)
                self.state = 3382
                self.nonreservedword_or_sconst()
                pass
            elif token in [PostgreSQLParser.FROM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3383
                self.match(PostgreSQLParser.FROM)
                self.state = 3384
                self.nonreservedword_or_sconst()
                pass
            elif token in [PostgreSQLParser.CASCADE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3385
                self.match(PostgreSQLParser.CASCADE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterextensionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def alter_extension_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_extension_opt_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterextensionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterextensionstmt" ):
                listener.enterAlterextensionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterextensionstmt" ):
                listener.exitAlterextensionstmt(self)




    def alterextensionstmt(self):

        localctx = PostgreSQLParser.AlterextensionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_alterextensionstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3388
            self.match(PostgreSQLParser.ALTER)
            self.state = 3389
            self.match(PostgreSQLParser.EXTENSION)
            self.state = 3390
            self.name()
            self.state = 3391
            self.match(PostgreSQLParser.UPDATE)
            self.state = 3392
            self.alter_extension_opt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_extension_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_extension_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_extension_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_extension_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_extension_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_extension_opt_list" ):
                listener.enterAlter_extension_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_extension_opt_list" ):
                listener.exitAlter_extension_opt_list(self)




    def alter_extension_opt_list(self):

        localctx = PostgreSQLParser.Alter_extension_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_alter_extension_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.TO:
                self.state = 3394
                self.alter_extension_opt_item()
                self.state = 3399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_extension_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_extension_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_extension_opt_item" ):
                listener.enterAlter_extension_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_extension_opt_item" ):
                listener.exitAlter_extension_opt_item(self)




    def alter_extension_opt_item(self):

        localctx = PostgreSQLParser.Alter_extension_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_alter_extension_opt_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3400
            self.match(PostgreSQLParser.TO)
            self.state = 3401
            self.nonreservedword_or_sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterextensioncontentsstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def add_drop(self):
            return self.getTypedRuleContext(PostgreSQLParser.Add_dropContext,0)


        def object_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_nameContext,0)


        def object_type_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_any_nameContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterextensioncontentsstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterextensioncontentsstmt" ):
                listener.enterAlterextensioncontentsstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterextensioncontentsstmt" ):
                listener.exitAlterextensioncontentsstmt(self)




    def alterextensioncontentsstmt(self):

        localctx = PostgreSQLParser.AlterextensioncontentsstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_alterextensioncontentsstmt)
        try:
            self.state = 3507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3403
                self.match(PostgreSQLParser.ALTER)
                self.state = 3404
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3405
                self.name()
                self.state = 3406
                self.add_drop()
                self.state = 3407
                self.object_type_name()
                self.state = 3408
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3410
                self.match(PostgreSQLParser.ALTER)
                self.state = 3411
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3412
                self.name()
                self.state = 3413
                self.add_drop()
                self.state = 3414
                self.object_type_any_name()
                self.state = 3415
                self.any_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3417
                self.match(PostgreSQLParser.ALTER)
                self.state = 3418
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3419
                self.name()
                self.state = 3420
                self.add_drop()
                self.state = 3421
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 3422
                self.aggregate_with_argtypes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3424
                self.match(PostgreSQLParser.ALTER)
                self.state = 3425
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3426
                self.name()
                self.state = 3427
                self.add_drop()
                self.state = 3428
                self.match(PostgreSQLParser.CAST)
                self.state = 3429
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3430
                self.typename()
                self.state = 3431
                self.match(PostgreSQLParser.AS)
                self.state = 3432
                self.typename()
                self.state = 3433
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3435
                self.match(PostgreSQLParser.ALTER)
                self.state = 3436
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3437
                self.name()
                self.state = 3438
                self.add_drop()
                self.state = 3439
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 3440
                self.typename()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3442
                self.match(PostgreSQLParser.ALTER)
                self.state = 3443
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3444
                self.name()
                self.state = 3445
                self.add_drop()
                self.state = 3446
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 3447
                self.function_with_argtypes()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3449
                self.match(PostgreSQLParser.ALTER)
                self.state = 3450
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3451
                self.name()
                self.state = 3452
                self.add_drop()
                self.state = 3453
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 3454
                self.operator_with_argtypes()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3456
                self.match(PostgreSQLParser.ALTER)
                self.state = 3457
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3458
                self.name()
                self.state = 3459
                self.add_drop()
                self.state = 3460
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 3461
                self.match(PostgreSQLParser.CLASS)
                self.state = 3462
                self.any_name()
                self.state = 3463
                self.match(PostgreSQLParser.USING)
                self.state = 3464
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3466
                self.match(PostgreSQLParser.ALTER)
                self.state = 3467
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3468
                self.name()
                self.state = 3469
                self.add_drop()
                self.state = 3470
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 3471
                self.match(PostgreSQLParser.FAMILY)
                self.state = 3472
                self.any_name()
                self.state = 3473
                self.match(PostgreSQLParser.USING)
                self.state = 3474
                self.name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3476
                self.match(PostgreSQLParser.ALTER)
                self.state = 3477
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3478
                self.name()
                self.state = 3479
                self.add_drop()
                self.state = 3480
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 3481
                self.function_with_argtypes()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3483
                self.match(PostgreSQLParser.ALTER)
                self.state = 3484
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3485
                self.name()
                self.state = 3486
                self.add_drop()
                self.state = 3487
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 3488
                self.function_with_argtypes()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3490
                self.match(PostgreSQLParser.ALTER)
                self.state = 3491
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3492
                self.name()
                self.state = 3493
                self.add_drop()
                self.state = 3494
                self.match(PostgreSQLParser.TRANSFORM)
                self.state = 3495
                self.match(PostgreSQLParser.FOR)
                self.state = 3496
                self.typename()
                self.state = 3497
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 3498
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3500
                self.match(PostgreSQLParser.ALTER)
                self.state = 3501
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3502
                self.name()
                self.state = 3503
                self.add_drop()
                self.state = 3504
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 3505
                self.typename()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatefdwstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def fdw_options_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fdw_options_Context,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createfdwstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatefdwstmt" ):
                listener.enterCreatefdwstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatefdwstmt" ):
                listener.exitCreatefdwstmt(self)




    def createfdwstmt(self):

        localctx = PostgreSQLParser.CreatefdwstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_createfdwstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3509
            self.match(PostgreSQLParser.CREATE)
            self.state = 3510
            self.match(PostgreSQLParser.FOREIGN)
            self.state = 3511
            self.match(PostgreSQLParser.DATA_P)
            self.state = 3512
            self.match(PostgreSQLParser.WRAPPER)
            self.state = 3513
            self.name()
            self.state = 3515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.HANDLER or _la==PostgreSQLParser.NO or _la==PostgreSQLParser.VALIDATOR:
                self.state = 3514
                self.fdw_options_()


            self.state = 3518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPTIONS:
                self.state = 3517
                self.create_generic_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fdw_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def VALIDATOR(self):
            return self.getToken(PostgreSQLParser.VALIDATOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fdw_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFdw_option" ):
                listener.enterFdw_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFdw_option" ):
                listener.exitFdw_option(self)




    def fdw_option(self):

        localctx = PostgreSQLParser.Fdw_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_fdw_option)
        try:
            self.state = 3528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3520
                self.match(PostgreSQLParser.HANDLER)
                self.state = 3521
                self.handler_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3522
                self.match(PostgreSQLParser.NO)
                self.state = 3523
                self.match(PostgreSQLParser.HANDLER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3524
                self.match(PostgreSQLParser.VALIDATOR)
                self.state = 3525
                self.handler_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3526
                self.match(PostgreSQLParser.NO)
                self.state = 3527
                self.match(PostgreSQLParser.VALIDATOR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fdw_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fdw_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Fdw_optionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Fdw_optionContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fdw_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFdw_options" ):
                listener.enterFdw_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFdw_options" ):
                listener.exitFdw_options(self)




    def fdw_options(self):

        localctx = PostgreSQLParser.Fdw_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_fdw_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3531 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3530
                self.fdw_option()
                self.state = 3533 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.HANDLER or _la==PostgreSQLParser.NO or _la==PostgreSQLParser.VALIDATOR):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fdw_options_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fdw_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fdw_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fdw_options_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFdw_options_" ):
                listener.enterFdw_options_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFdw_options_" ):
                listener.exitFdw_options_(self)




    def fdw_options_(self):

        localctx = PostgreSQLParser.Fdw_options_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_fdw_options_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3535
            self.fdw_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterfdwstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_optionsContext,0)


        def fdw_options_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fdw_options_Context,0)


        def fdw_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fdw_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterfdwstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterfdwstmt" ):
                listener.enterAlterfdwstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterfdwstmt" ):
                listener.exitAlterfdwstmt(self)




    def alterfdwstmt(self):

        localctx = PostgreSQLParser.AlterfdwstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_alterfdwstmt)
        self._la = 0 # Token type
        try:
            self.state = 3554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3537
                self.match(PostgreSQLParser.ALTER)
                self.state = 3538
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3539
                self.match(PostgreSQLParser.DATA_P)
                self.state = 3540
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 3541
                self.name()
                self.state = 3543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.HANDLER or _la==PostgreSQLParser.NO or _la==PostgreSQLParser.VALIDATOR:
                    self.state = 3542
                    self.fdw_options_()


                self.state = 3545
                self.alter_generic_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3547
                self.match(PostgreSQLParser.ALTER)
                self.state = 3548
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3549
                self.match(PostgreSQLParser.DATA_P)
                self.state = 3550
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 3551
                self.name()
                self.state = 3552
                self.fdw_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_generic_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def generic_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_generic_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_generic_options" ):
                listener.enterCreate_generic_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_generic_options" ):
                listener.exitCreate_generic_options(self)




    def create_generic_options(self):

        localctx = PostgreSQLParser.Create_generic_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_create_generic_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3556
            self.match(PostgreSQLParser.OPTIONS)
            self.state = 3557
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3558
            self.generic_option_list()
            self.state = 3559
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Generic_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Generic_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_option_list" ):
                listener.enterGeneric_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_option_list" ):
                listener.exitGeneric_option_list(self)




    def generic_option_list(self):

        localctx = PostgreSQLParser.Generic_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_generic_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self.generic_option_elem()
            self.state = 3566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 3562
                self.match(PostgreSQLParser.COMMA)
                self.state = 3563
                self.generic_option_elem()
                self.state = 3568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_generic_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def alter_generic_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_generic_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_generic_options" ):
                listener.enterAlter_generic_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_generic_options" ):
                listener.exitAlter_generic_options(self)




    def alter_generic_options(self):

        localctx = PostgreSQLParser.Alter_generic_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_alter_generic_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            self.match(PostgreSQLParser.OPTIONS)
            self.state = 3570
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3571
            self.alter_generic_option_list()
            self.state = 3572
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_generic_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_generic_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_generic_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_generic_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_generic_option_list" ):
                listener.enterAlter_generic_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_generic_option_list" ):
                listener.exitAlter_generic_option_list(self)




    def alter_generic_option_list(self):

        localctx = PostgreSQLParser.Alter_generic_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_alter_generic_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3574
            self.alter_generic_option_elem()
            self.state = 3579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 3575
                self.match(PostgreSQLParser.COMMA)
                self.state = 3576
                self.alter_generic_option_elem()
                self.state = 3581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_generic_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_option_elem(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_elemContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def generic_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_generic_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_generic_option_elem" ):
                listener.enterAlter_generic_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_generic_option_elem" ):
                listener.exitAlter_generic_option_elem(self)




    def alter_generic_option_elem(self):

        localctx = PostgreSQLParser.Alter_generic_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_alter_generic_option_elem)
        try:
            self.state = 3589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3582
                self.generic_option_elem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3583
                self.match(PostgreSQLParser.SET)
                self.state = 3584
                self.generic_option_elem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3585
                self.match(PostgreSQLParser.ADD_P)
                self.state = 3586
                self.generic_option_elem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3587
                self.match(PostgreSQLParser.DROP)
                self.state = 3588
                self.generic_option_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_nameContext,0)


        def generic_option_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_option_elem" ):
                listener.enterGeneric_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_option_elem" ):
                listener.exitGeneric_option_elem(self)




    def generic_option_elem(self):

        localctx = PostgreSQLParser.Generic_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_generic_option_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            self.generic_option_name()
            self.state = 3592
            self.generic_option_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_option_name" ):
                listener.enterGeneric_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_option_name" ):
                listener.exitGeneric_option_name(self)




    def generic_option_name(self):

        localctx = PostgreSQLParser.Generic_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_generic_option_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3594
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_option_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_option_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_option_arg" ):
                listener.enterGeneric_option_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_option_arg" ):
                listener.exitGeneric_option_arg(self)




    def generic_option_arg(self):

        localctx = PostgreSQLParser.Generic_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_generic_option_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3596
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateforeignserverstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def type_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_Context,0)


        def foreign_server_version_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Foreign_server_version_Context,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createforeignserverstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateforeignserverstmt" ):
                listener.enterCreateforeignserverstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateforeignserverstmt" ):
                listener.exitCreateforeignserverstmt(self)




    def createforeignserverstmt(self):

        localctx = PostgreSQLParser.CreateforeignserverstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_createforeignserverstmt)
        self._la = 0 # Token type
        try:
            self.state = 3633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3598
                self.match(PostgreSQLParser.CREATE)
                self.state = 3599
                self.match(PostgreSQLParser.SERVER)
                self.state = 3600
                self.name()
                self.state = 3602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TYPE_P:
                    self.state = 3601
                    self.type_()


                self.state = 3605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.VERSION_P:
                    self.state = 3604
                    self.foreign_server_version_()


                self.state = 3607
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3608
                self.match(PostgreSQLParser.DATA_P)
                self.state = 3609
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 3610
                self.name()
                self.state = 3612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3611
                    self.create_generic_options()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3614
                self.match(PostgreSQLParser.CREATE)
                self.state = 3615
                self.match(PostgreSQLParser.SERVER)
                self.state = 3616
                self.match(PostgreSQLParser.IF_P)
                self.state = 3617
                self.match(PostgreSQLParser.NOT)
                self.state = 3618
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3619
                self.name()
                self.state = 3621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TYPE_P:
                    self.state = 3620
                    self.type_()


                self.state = 3624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.VERSION_P:
                    self.state = 3623
                    self.foreign_server_version_()


                self.state = 3626
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3627
                self.match(PostgreSQLParser.DATA_P)
                self.state = 3628
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 3629
                self.name()
                self.state = 3631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3630
                    self.create_generic_options()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = PostgreSQLParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_type_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3635
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 3636
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_foreign_server_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_version" ):
                listener.enterForeign_server_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_version" ):
                listener.exitForeign_server_version(self)




    def foreign_server_version(self):

        localctx = PostgreSQLParser.Foreign_server_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_foreign_server_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3638
            self.match(PostgreSQLParser.VERSION_P)
            self.state = 3641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.state = 3639
                self.sconst()
                pass
            elif token in [PostgreSQLParser.NULL_P]:
                self.state = 3640
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_version_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def foreign_server_version(self):
            return self.getTypedRuleContext(PostgreSQLParser.Foreign_server_versionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_foreign_server_version_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_version_" ):
                listener.enterForeign_server_version_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_version_" ):
                listener.exitForeign_server_version_(self)




    def foreign_server_version_(self):

        localctx = PostgreSQLParser.Foreign_server_version_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_foreign_server_version_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643
            self.foreign_server_version()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterforeignserverstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_optionsContext,0)


        def foreign_server_version(self):
            return self.getTypedRuleContext(PostgreSQLParser.Foreign_server_versionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterforeignserverstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterforeignserverstmt" ):
                listener.enterAlterforeignserverstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterforeignserverstmt" ):
                listener.exitAlterforeignserverstmt(self)




    def alterforeignserverstmt(self):

        localctx = PostgreSQLParser.AlterforeignserverstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_alterforeignserverstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3645
            self.match(PostgreSQLParser.ALTER)
            self.state = 3646
            self.match(PostgreSQLParser.SERVER)
            self.state = 3647
            self.name()
            self.state = 3653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPTIONS]:
                self.state = 3648
                self.alter_generic_options()
                pass
            elif token in [PostgreSQLParser.VERSION_P]:
                self.state = 3649
                self.foreign_server_version()
                self.state = 3651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3650
                    self.alter_generic_options()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateforeigntablestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,i)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def opttableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttableelementlistContext,0)


        def optinherit(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptinheritContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def partitionboundspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.PartitionboundspecContext,0)


        def opttypedtableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttypedtableelementlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createforeigntablestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateforeigntablestmt" ):
                listener.enterCreateforeigntablestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateforeigntablestmt" ):
                listener.exitCreateforeigntablestmt(self)




    def createforeigntablestmt(self):

        localctx = PostgreSQLParser.CreateforeigntablestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_createforeigntablestmt)
        self._la = 0 # Token type
        try:
            self.state = 3727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3655
                self.match(PostgreSQLParser.CREATE)
                self.state = 3656
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3657
                self.match(PostgreSQLParser.TABLE)
                self.state = 3658
                self.qualified_name()
                self.state = 3659
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.CHECK - 64)) | (1 << (PostgreSQLParser.CONSTRAINT - 64)) | (1 << (PostgreSQLParser.FOREIGN - 64)) | (1 << (PostgreSQLParser.PRIMARY - 64)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (PostgreSQLParser.UNIQUE - 136)) | (1 << (PostgreSQLParser.LIKE - 136)) | (1 << (PostgreSQLParser.OVER - 136)) | (1 << (PostgreSQLParser.ABORT_P - 136)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 136)) | (1 << (PostgreSQLParser.ACCESS - 136)) | (1 << (PostgreSQLParser.ACTION - 136)) | (1 << (PostgreSQLParser.ADD_P - 136)) | (1 << (PostgreSQLParser.ADMIN - 136)) | (1 << (PostgreSQLParser.AFTER - 136)) | (1 << (PostgreSQLParser.AGGREGATE - 136)) | (1 << (PostgreSQLParser.ALSO - 136)) | (1 << (PostgreSQLParser.ALTER - 136)) | (1 << (PostgreSQLParser.ALWAYS - 136)) | (1 << (PostgreSQLParser.ASSERTION - 136)) | (1 << (PostgreSQLParser.ASSIGNMENT - 136)) | (1 << (PostgreSQLParser.AT - 136)) | (1 << (PostgreSQLParser.ATTRIBUTE - 136)) | (1 << (PostgreSQLParser.BACKWARD - 136)) | (1 << (PostgreSQLParser.BEFORE - 136)) | (1 << (PostgreSQLParser.BEGIN_P - 136)) | (1 << (PostgreSQLParser.BY - 136)) | (1 << (PostgreSQLParser.CACHE - 136)) | (1 << (PostgreSQLParser.CALLED - 136)) | (1 << (PostgreSQLParser.CASCADE - 136)) | (1 << (PostgreSQLParser.CASCADED - 136)) | (1 << (PostgreSQLParser.CATALOG - 136)) | (1 << (PostgreSQLParser.CHAIN - 136)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 136)) | (1 << (PostgreSQLParser.CHECKPOINT - 136)) | (1 << (PostgreSQLParser.CLASS - 136)) | (1 << (PostgreSQLParser.CLOSE - 136)) | (1 << (PostgreSQLParser.CLUSTER - 136)) | (1 << (PostgreSQLParser.COMMENT - 136)) | (1 << (PostgreSQLParser.COMMENTS - 136)) | (1 << (PostgreSQLParser.COMMIT - 136)))) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (PostgreSQLParser.COMMITTED - 200)) | (1 << (PostgreSQLParser.CONFIGURATION - 200)) | (1 << (PostgreSQLParser.CONNECTION - 200)) | (1 << (PostgreSQLParser.CONSTRAINTS - 200)) | (1 << (PostgreSQLParser.CONTENT_P - 200)) | (1 << (PostgreSQLParser.CONTINUE_P - 200)) | (1 << (PostgreSQLParser.CONVERSION_P - 200)) | (1 << (PostgreSQLParser.COPY - 200)) | (1 << (PostgreSQLParser.COST - 200)) | (1 << (PostgreSQLParser.CSV - 200)) | (1 << (PostgreSQLParser.CURSOR - 200)) | (1 << (PostgreSQLParser.CYCLE - 200)) | (1 << (PostgreSQLParser.DATA_P - 200)) | (1 << (PostgreSQLParser.DATABASE - 200)) | (1 << (PostgreSQLParser.DAY_P - 200)) | (1 << (PostgreSQLParser.DEALLOCATE - 200)) | (1 << (PostgreSQLParser.DECLARE - 200)) | (1 << (PostgreSQLParser.DEFAULTS - 200)) | (1 << (PostgreSQLParser.DEFERRED - 200)) | (1 << (PostgreSQLParser.DEFINER - 200)) | (1 << (PostgreSQLParser.DELETE_P - 200)) | (1 << (PostgreSQLParser.DELIMITER - 200)) | (1 << (PostgreSQLParser.DELIMITERS - 200)) | (1 << (PostgreSQLParser.DICTIONARY - 200)) | (1 << (PostgreSQLParser.DISABLE_P - 200)) | (1 << (PostgreSQLParser.DISCARD - 200)) | (1 << (PostgreSQLParser.DOCUMENT_P - 200)) | (1 << (PostgreSQLParser.DOMAIN_P - 200)) | (1 << (PostgreSQLParser.DOUBLE_P - 200)) | (1 << (PostgreSQLParser.DROP - 200)) | (1 << (PostgreSQLParser.EACH - 200)) | (1 << (PostgreSQLParser.ENABLE_P - 200)) | (1 << (PostgreSQLParser.ENCODING - 200)) | (1 << (PostgreSQLParser.ENCRYPTED - 200)) | (1 << (PostgreSQLParser.ENUM_P - 200)) | (1 << (PostgreSQLParser.ESCAPE - 200)) | (1 << (PostgreSQLParser.EVENT - 200)) | (1 << (PostgreSQLParser.EXCLUDE - 200)) | (1 << (PostgreSQLParser.EXCLUDING - 200)) | (1 << (PostgreSQLParser.EXCLUSIVE - 200)) | (1 << (PostgreSQLParser.EXECUTE - 200)) | (1 << (PostgreSQLParser.EXPLAIN - 200)) | (1 << (PostgreSQLParser.EXTENSION - 200)) | (1 << (PostgreSQLParser.EXTERNAL - 200)) | (1 << (PostgreSQLParser.FAMILY - 200)) | (1 << (PostgreSQLParser.FIRST_P - 200)) | (1 << (PostgreSQLParser.FOLLOWING - 200)) | (1 << (PostgreSQLParser.FORCE - 200)) | (1 << (PostgreSQLParser.FORWARD - 200)) | (1 << (PostgreSQLParser.FUNCTION - 200)) | (1 << (PostgreSQLParser.FUNCTIONS - 200)) | (1 << (PostgreSQLParser.GLOBAL - 200)) | (1 << (PostgreSQLParser.GRANTED - 200)) | (1 << (PostgreSQLParser.HANDLER - 200)) | (1 << (PostgreSQLParser.HEADER_P - 200)) | (1 << (PostgreSQLParser.HOLD - 200)) | (1 << (PostgreSQLParser.HOUR_P - 200)) | (1 << (PostgreSQLParser.IDENTITY_P - 200)) | (1 << (PostgreSQLParser.IF_P - 200)) | (1 << (PostgreSQLParser.IMMEDIATE - 200)) | (1 << (PostgreSQLParser.IMMUTABLE - 200)) | (1 << (PostgreSQLParser.IMPLICIT_P - 200)) | (1 << (PostgreSQLParser.INCLUDING - 200)) | (1 << (PostgreSQLParser.INCREMENT - 200)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (PostgreSQLParser.INDEX - 264)) | (1 << (PostgreSQLParser.INDEXES - 264)) | (1 << (PostgreSQLParser.INHERIT - 264)) | (1 << (PostgreSQLParser.INHERITS - 264)) | (1 << (PostgreSQLParser.INLINE_P - 264)) | (1 << (PostgreSQLParser.INSENSITIVE - 264)) | (1 << (PostgreSQLParser.INSERT - 264)) | (1 << (PostgreSQLParser.INSTEAD - 264)) | (1 << (PostgreSQLParser.INVOKER - 264)) | (1 << (PostgreSQLParser.ISOLATION - 264)) | (1 << (PostgreSQLParser.KEY - 264)) | (1 << (PostgreSQLParser.LABEL - 264)) | (1 << (PostgreSQLParser.LANGUAGE - 264)) | (1 << (PostgreSQLParser.LARGE_P - 264)) | (1 << (PostgreSQLParser.LAST_P - 264)) | (1 << (PostgreSQLParser.LEAKPROOF - 264)) | (1 << (PostgreSQLParser.LEVEL - 264)) | (1 << (PostgreSQLParser.LISTEN - 264)) | (1 << (PostgreSQLParser.LOAD - 264)) | (1 << (PostgreSQLParser.LOCAL - 264)) | (1 << (PostgreSQLParser.LOCATION - 264)) | (1 << (PostgreSQLParser.LOCK_P - 264)) | (1 << (PostgreSQLParser.MAPPING - 264)) | (1 << (PostgreSQLParser.MATCH - 264)) | (1 << (PostgreSQLParser.MATCHED - 264)) | (1 << (PostgreSQLParser.MATERIALIZED - 264)) | (1 << (PostgreSQLParser.MAXVALUE - 264)) | (1 << (PostgreSQLParser.MERGE - 264)) | (1 << (PostgreSQLParser.MINUTE_P - 264)) | (1 << (PostgreSQLParser.MINVALUE - 264)) | (1 << (PostgreSQLParser.MODE - 264)) | (1 << (PostgreSQLParser.MONTH_P - 264)) | (1 << (PostgreSQLParser.MOVE - 264)) | (1 << (PostgreSQLParser.NAME_P - 264)) | (1 << (PostgreSQLParser.NAMES - 264)) | (1 << (PostgreSQLParser.NEXT - 264)) | (1 << (PostgreSQLParser.NO - 264)) | (1 << (PostgreSQLParser.NOTHING - 264)) | (1 << (PostgreSQLParser.NOTIFY - 264)) | (1 << (PostgreSQLParser.NOWAIT - 264)) | (1 << (PostgreSQLParser.NULLS_P - 264)) | (1 << (PostgreSQLParser.OBJECT_P - 264)) | (1 << (PostgreSQLParser.OF - 264)) | (1 << (PostgreSQLParser.OFF - 264)) | (1 << (PostgreSQLParser.OIDS - 264)) | (1 << (PostgreSQLParser.OPERATOR - 264)) | (1 << (PostgreSQLParser.OPTION - 264)) | (1 << (PostgreSQLParser.OPTIONS - 264)) | (1 << (PostgreSQLParser.OWNED - 264)) | (1 << (PostgreSQLParser.OWNER - 264)) | (1 << (PostgreSQLParser.PARSER - 264)) | (1 << (PostgreSQLParser.PARTIAL - 264)) | (1 << (PostgreSQLParser.PARTITION - 264)) | (1 << (PostgreSQLParser.PASSING - 264)) | (1 << (PostgreSQLParser.PASSWORD - 264)) | (1 << (PostgreSQLParser.PLANS - 264)) | (1 << (PostgreSQLParser.PRECEDING - 264)) | (1 << (PostgreSQLParser.PREPARE - 264)) | (1 << (PostgreSQLParser.PREPARED - 264)) | (1 << (PostgreSQLParser.PRESERVE - 264)) | (1 << (PostgreSQLParser.PRIOR - 264)) | (1 << (PostgreSQLParser.PRIVILEGES - 264)) | (1 << (PostgreSQLParser.PROCEDURAL - 264)) | (1 << (PostgreSQLParser.PROCEDURE - 264)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (PostgreSQLParser.PROGRAM - 328)) | (1 << (PostgreSQLParser.QUOTE - 328)) | (1 << (PostgreSQLParser.RANGE - 328)) | (1 << (PostgreSQLParser.READ - 328)) | (1 << (PostgreSQLParser.REASSIGN - 328)) | (1 << (PostgreSQLParser.RECURSIVE - 328)) | (1 << (PostgreSQLParser.REF - 328)) | (1 << (PostgreSQLParser.REFRESH - 328)) | (1 << (PostgreSQLParser.REINDEX - 328)) | (1 << (PostgreSQLParser.RELATIVE_P - 328)) | (1 << (PostgreSQLParser.RELEASE - 328)) | (1 << (PostgreSQLParser.RENAME - 328)) | (1 << (PostgreSQLParser.REPEATABLE - 328)) | (1 << (PostgreSQLParser.REPLACE - 328)) | (1 << (PostgreSQLParser.REPLICA - 328)) | (1 << (PostgreSQLParser.RESET - 328)) | (1 << (PostgreSQLParser.RESTART - 328)) | (1 << (PostgreSQLParser.RESTRICT - 328)) | (1 << (PostgreSQLParser.RETURNS - 328)) | (1 << (PostgreSQLParser.REVOKE - 328)) | (1 << (PostgreSQLParser.ROLE - 328)) | (1 << (PostgreSQLParser.ROLLBACK - 328)) | (1 << (PostgreSQLParser.ROWS - 328)) | (1 << (PostgreSQLParser.RULE - 328)) | (1 << (PostgreSQLParser.SAVEPOINT - 328)) | (1 << (PostgreSQLParser.SCHEMA - 328)) | (1 << (PostgreSQLParser.SCROLL - 328)) | (1 << (PostgreSQLParser.SEARCH - 328)) | (1 << (PostgreSQLParser.SECOND_P - 328)) | (1 << (PostgreSQLParser.SECURITY - 328)) | (1 << (PostgreSQLParser.SEQUENCE - 328)) | (1 << (PostgreSQLParser.SEQUENCES - 328)) | (1 << (PostgreSQLParser.SERIALIZABLE - 328)) | (1 << (PostgreSQLParser.SERVER - 328)) | (1 << (PostgreSQLParser.SESSION - 328)) | (1 << (PostgreSQLParser.SET - 328)) | (1 << (PostgreSQLParser.SHARE - 328)) | (1 << (PostgreSQLParser.SHOW - 328)) | (1 << (PostgreSQLParser.SIMPLE - 328)) | (1 << (PostgreSQLParser.SNAPSHOT - 328)) | (1 << (PostgreSQLParser.STABLE - 328)) | (1 << (PostgreSQLParser.STANDALONE_P - 328)) | (1 << (PostgreSQLParser.START - 328)) | (1 << (PostgreSQLParser.STATEMENT - 328)) | (1 << (PostgreSQLParser.STATISTICS - 328)) | (1 << (PostgreSQLParser.STDIN - 328)) | (1 << (PostgreSQLParser.STDOUT - 328)) | (1 << (PostgreSQLParser.STORAGE - 328)) | (1 << (PostgreSQLParser.STRICT_P - 328)) | (1 << (PostgreSQLParser.STRIP_P - 328)) | (1 << (PostgreSQLParser.SYSID - 328)) | (1 << (PostgreSQLParser.SYSTEM_P - 328)) | (1 << (PostgreSQLParser.TABLES - 328)) | (1 << (PostgreSQLParser.TABLESPACE - 328)) | (1 << (PostgreSQLParser.TEMP - 328)) | (1 << (PostgreSQLParser.TEMPLATE - 328)) | (1 << (PostgreSQLParser.TEMPORARY - 328)) | (1 << (PostgreSQLParser.TEXT_P - 328)) | (1 << (PostgreSQLParser.TRANSACTION - 328)) | (1 << (PostgreSQLParser.TRIGGER - 328)) | (1 << (PostgreSQLParser.TRUNCATE - 328)) | (1 << (PostgreSQLParser.TRUSTED - 328)) | (1 << (PostgreSQLParser.TYPE_P - 328)))) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (PostgreSQLParser.TYPES_P - 392)) | (1 << (PostgreSQLParser.UNBOUNDED - 392)) | (1 << (PostgreSQLParser.UNCOMMITTED - 392)) | (1 << (PostgreSQLParser.UNENCRYPTED - 392)) | (1 << (PostgreSQLParser.UNKNOWN - 392)) | (1 << (PostgreSQLParser.UNLISTEN - 392)) | (1 << (PostgreSQLParser.UNLOGGED - 392)) | (1 << (PostgreSQLParser.UNTIL - 392)) | (1 << (PostgreSQLParser.UPDATE - 392)) | (1 << (PostgreSQLParser.VACUUM - 392)) | (1 << (PostgreSQLParser.VALID - 392)) | (1 << (PostgreSQLParser.VALIDATE - 392)) | (1 << (PostgreSQLParser.VALIDATOR - 392)) | (1 << (PostgreSQLParser.VARYING - 392)) | (1 << (PostgreSQLParser.VERSION_P - 392)) | (1 << (PostgreSQLParser.VIEW - 392)) | (1 << (PostgreSQLParser.VOLATILE - 392)) | (1 << (PostgreSQLParser.WHITESPACE_P - 392)) | (1 << (PostgreSQLParser.WITHOUT - 392)) | (1 << (PostgreSQLParser.WORK - 392)) | (1 << (PostgreSQLParser.WRAPPER - 392)) | (1 << (PostgreSQLParser.WRITE - 392)) | (1 << (PostgreSQLParser.XML_P - 392)) | (1 << (PostgreSQLParser.YEAR_P - 392)) | (1 << (PostgreSQLParser.YES_P - 392)) | (1 << (PostgreSQLParser.ZONE - 392)) | (1 << (PostgreSQLParser.BETWEEN - 392)) | (1 << (PostgreSQLParser.BIGINT - 392)) | (1 << (PostgreSQLParser.BIT - 392)) | (1 << (PostgreSQLParser.BOOLEAN_P - 392)) | (1 << (PostgreSQLParser.CHAR_P - 392)) | (1 << (PostgreSQLParser.CHARACTER - 392)) | (1 << (PostgreSQLParser.COALESCE - 392)) | (1 << (PostgreSQLParser.DEC - 392)) | (1 << (PostgreSQLParser.DECIMAL_P - 392)) | (1 << (PostgreSQLParser.EXISTS - 392)) | (1 << (PostgreSQLParser.EXTRACT - 392)) | (1 << (PostgreSQLParser.FLOAT_P - 392)) | (1 << (PostgreSQLParser.GREATEST - 392)) | (1 << (PostgreSQLParser.INOUT - 392)) | (1 << (PostgreSQLParser.INT_P - 392)) | (1 << (PostgreSQLParser.INTEGER - 392)) | (1 << (PostgreSQLParser.INTERVAL - 392)) | (1 << (PostgreSQLParser.LEAST - 392)) | (1 << (PostgreSQLParser.NATIONAL - 392)) | (1 << (PostgreSQLParser.NCHAR - 392)) | (1 << (PostgreSQLParser.NONE - 392)) | (1 << (PostgreSQLParser.NULLIF - 392)) | (1 << (PostgreSQLParser.NUMERIC - 392)) | (1 << (PostgreSQLParser.OVERLAY - 392)) | (1 << (PostgreSQLParser.POSITION - 392)) | (1 << (PostgreSQLParser.PRECISION - 392)) | (1 << (PostgreSQLParser.REAL - 392)) | (1 << (PostgreSQLParser.ROW - 392)) | (1 << (PostgreSQLParser.SETOF - 392)) | (1 << (PostgreSQLParser.SMALLINT - 392)) | (1 << (PostgreSQLParser.SUBSTRING - 392)) | (1 << (PostgreSQLParser.TIME - 392)) | (1 << (PostgreSQLParser.TIMESTAMP - 392)) | (1 << (PostgreSQLParser.TREAT - 392)) | (1 << (PostgreSQLParser.TRIM - 392)) | (1 << (PostgreSQLParser.VALUES - 392)) | (1 << (PostgreSQLParser.VARCHAR - 392)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 392)))) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & ((1 << (PostgreSQLParser.XMLCONCAT - 463)) | (1 << (PostgreSQLParser.XMLELEMENT - 463)) | (1 << (PostgreSQLParser.XMLEXISTS - 463)) | (1 << (PostgreSQLParser.XMLFOREST - 463)) | (1 << (PostgreSQLParser.XMLPARSE - 463)) | (1 << (PostgreSQLParser.XMLPI - 463)) | (1 << (PostgreSQLParser.XMLROOT - 463)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 463)) | (1 << (PostgreSQLParser.CALL - 463)) | (1 << (PostgreSQLParser.CURRENT_P - 463)) | (1 << (PostgreSQLParser.ATTACH - 463)) | (1 << (PostgreSQLParser.DETACH - 463)) | (1 << (PostgreSQLParser.EXPRESSION - 463)) | (1 << (PostgreSQLParser.GENERATED - 463)) | (1 << (PostgreSQLParser.LOGGED - 463)) | (1 << (PostgreSQLParser.STORED - 463)) | (1 << (PostgreSQLParser.INCLUDE - 463)) | (1 << (PostgreSQLParser.ROUTINE - 463)) | (1 << (PostgreSQLParser.TRANSFORM - 463)) | (1 << (PostgreSQLParser.IMPORT_P - 463)) | (1 << (PostgreSQLParser.POLICY - 463)) | (1 << (PostgreSQLParser.METHOD - 463)) | (1 << (PostgreSQLParser.REFERENCING - 463)) | (1 << (PostgreSQLParser.NEW - 463)) | (1 << (PostgreSQLParser.OLD - 463)) | (1 << (PostgreSQLParser.VALUE_P - 463)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 463)) | (1 << (PostgreSQLParser.PUBLICATION - 463)) | (1 << (PostgreSQLParser.OUT_P - 463)) | (1 << (PostgreSQLParser.ROUTINES - 463)) | (1 << (PostgreSQLParser.SCHEMAS - 463)) | (1 << (PostgreSQLParser.PROCEDURES - 463)) | (1 << (PostgreSQLParser.INPUT_P - 463)) | (1 << (PostgreSQLParser.SUPPORT - 463)) | (1 << (PostgreSQLParser.PARALLEL - 463)) | (1 << (PostgreSQLParser.SQL_P - 463)) | (1 << (PostgreSQLParser.DEPENDS - 463)) | (1 << (PostgreSQLParser.OVERRIDING - 463)) | (1 << (PostgreSQLParser.CONFLICT - 463)) | (1 << (PostgreSQLParser.SKIP_P - 463)) | (1 << (PostgreSQLParser.LOCKED - 463)) | (1 << (PostgreSQLParser.TIES - 463)) | (1 << (PostgreSQLParser.ROLLUP - 463)) | (1 << (PostgreSQLParser.CUBE - 463)) | (1 << (PostgreSQLParser.GROUPING - 463)) | (1 << (PostgreSQLParser.SETS - 463)) | (1 << (PostgreSQLParser.ORDINALITY - 463)) | (1 << (PostgreSQLParser.XMLTABLE - 463)) | (1 << (PostgreSQLParser.COLUMNS - 463)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 463)) | (1 << (PostgreSQLParser.NORMALIZED - 463)) | (1 << (PostgreSQLParser.WITHIN - 463)) | (1 << (PostgreSQLParser.FILTER - 463)) | (1 << (PostgreSQLParser.GROUPS - 463)) | (1 << (PostgreSQLParser.OTHERS - 463)) | (1 << (PostgreSQLParser.NFC - 463)) | (1 << (PostgreSQLParser.NFD - 463)) | (1 << (PostgreSQLParser.NFKC - 463)) | (1 << (PostgreSQLParser.NFKD - 463)) | (1 << (PostgreSQLParser.UESCAPE - 463)) | (1 << (PostgreSQLParser.VIEWS - 463)))) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & ((1 << (PostgreSQLParser.NORMALIZE - 527)) | (1 << (PostgreSQLParser.ERROR - 527)) | (1 << (PostgreSQLParser.RETURN - 527)) | (1 << (PostgreSQLParser.FORMAT - 527)) | (1 << (PostgreSQLParser.Identifier - 527)) | (1 << (PostgreSQLParser.QuotedIdentifier - 527)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 527)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 527)))) != 0):
                    self.state = 3660
                    self.opttableelementlist()


                self.state = 3663
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 3665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INHERITS:
                    self.state = 3664
                    self.optinherit()


                self.state = 3667
                self.match(PostgreSQLParser.SERVER)
                self.state = 3668
                self.name()
                self.state = 3670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3669
                    self.create_generic_options()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3672
                self.match(PostgreSQLParser.CREATE)
                self.state = 3673
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3674
                self.match(PostgreSQLParser.TABLE)
                self.state = 3675
                self.match(PostgreSQLParser.IF_P)
                self.state = 3676
                self.match(PostgreSQLParser.NOT)
                self.state = 3677
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3678
                self.qualified_name()
                self.state = 3679
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.CHECK - 64)) | (1 << (PostgreSQLParser.CONSTRAINT - 64)) | (1 << (PostgreSQLParser.FOREIGN - 64)) | (1 << (PostgreSQLParser.PRIMARY - 64)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (PostgreSQLParser.UNIQUE - 136)) | (1 << (PostgreSQLParser.LIKE - 136)) | (1 << (PostgreSQLParser.OVER - 136)) | (1 << (PostgreSQLParser.ABORT_P - 136)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 136)) | (1 << (PostgreSQLParser.ACCESS - 136)) | (1 << (PostgreSQLParser.ACTION - 136)) | (1 << (PostgreSQLParser.ADD_P - 136)) | (1 << (PostgreSQLParser.ADMIN - 136)) | (1 << (PostgreSQLParser.AFTER - 136)) | (1 << (PostgreSQLParser.AGGREGATE - 136)) | (1 << (PostgreSQLParser.ALSO - 136)) | (1 << (PostgreSQLParser.ALTER - 136)) | (1 << (PostgreSQLParser.ALWAYS - 136)) | (1 << (PostgreSQLParser.ASSERTION - 136)) | (1 << (PostgreSQLParser.ASSIGNMENT - 136)) | (1 << (PostgreSQLParser.AT - 136)) | (1 << (PostgreSQLParser.ATTRIBUTE - 136)) | (1 << (PostgreSQLParser.BACKWARD - 136)) | (1 << (PostgreSQLParser.BEFORE - 136)) | (1 << (PostgreSQLParser.BEGIN_P - 136)) | (1 << (PostgreSQLParser.BY - 136)) | (1 << (PostgreSQLParser.CACHE - 136)) | (1 << (PostgreSQLParser.CALLED - 136)) | (1 << (PostgreSQLParser.CASCADE - 136)) | (1 << (PostgreSQLParser.CASCADED - 136)) | (1 << (PostgreSQLParser.CATALOG - 136)) | (1 << (PostgreSQLParser.CHAIN - 136)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 136)) | (1 << (PostgreSQLParser.CHECKPOINT - 136)) | (1 << (PostgreSQLParser.CLASS - 136)) | (1 << (PostgreSQLParser.CLOSE - 136)) | (1 << (PostgreSQLParser.CLUSTER - 136)) | (1 << (PostgreSQLParser.COMMENT - 136)) | (1 << (PostgreSQLParser.COMMENTS - 136)) | (1 << (PostgreSQLParser.COMMIT - 136)))) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (PostgreSQLParser.COMMITTED - 200)) | (1 << (PostgreSQLParser.CONFIGURATION - 200)) | (1 << (PostgreSQLParser.CONNECTION - 200)) | (1 << (PostgreSQLParser.CONSTRAINTS - 200)) | (1 << (PostgreSQLParser.CONTENT_P - 200)) | (1 << (PostgreSQLParser.CONTINUE_P - 200)) | (1 << (PostgreSQLParser.CONVERSION_P - 200)) | (1 << (PostgreSQLParser.COPY - 200)) | (1 << (PostgreSQLParser.COST - 200)) | (1 << (PostgreSQLParser.CSV - 200)) | (1 << (PostgreSQLParser.CURSOR - 200)) | (1 << (PostgreSQLParser.CYCLE - 200)) | (1 << (PostgreSQLParser.DATA_P - 200)) | (1 << (PostgreSQLParser.DATABASE - 200)) | (1 << (PostgreSQLParser.DAY_P - 200)) | (1 << (PostgreSQLParser.DEALLOCATE - 200)) | (1 << (PostgreSQLParser.DECLARE - 200)) | (1 << (PostgreSQLParser.DEFAULTS - 200)) | (1 << (PostgreSQLParser.DEFERRED - 200)) | (1 << (PostgreSQLParser.DEFINER - 200)) | (1 << (PostgreSQLParser.DELETE_P - 200)) | (1 << (PostgreSQLParser.DELIMITER - 200)) | (1 << (PostgreSQLParser.DELIMITERS - 200)) | (1 << (PostgreSQLParser.DICTIONARY - 200)) | (1 << (PostgreSQLParser.DISABLE_P - 200)) | (1 << (PostgreSQLParser.DISCARD - 200)) | (1 << (PostgreSQLParser.DOCUMENT_P - 200)) | (1 << (PostgreSQLParser.DOMAIN_P - 200)) | (1 << (PostgreSQLParser.DOUBLE_P - 200)) | (1 << (PostgreSQLParser.DROP - 200)) | (1 << (PostgreSQLParser.EACH - 200)) | (1 << (PostgreSQLParser.ENABLE_P - 200)) | (1 << (PostgreSQLParser.ENCODING - 200)) | (1 << (PostgreSQLParser.ENCRYPTED - 200)) | (1 << (PostgreSQLParser.ENUM_P - 200)) | (1 << (PostgreSQLParser.ESCAPE - 200)) | (1 << (PostgreSQLParser.EVENT - 200)) | (1 << (PostgreSQLParser.EXCLUDE - 200)) | (1 << (PostgreSQLParser.EXCLUDING - 200)) | (1 << (PostgreSQLParser.EXCLUSIVE - 200)) | (1 << (PostgreSQLParser.EXECUTE - 200)) | (1 << (PostgreSQLParser.EXPLAIN - 200)) | (1 << (PostgreSQLParser.EXTENSION - 200)) | (1 << (PostgreSQLParser.EXTERNAL - 200)) | (1 << (PostgreSQLParser.FAMILY - 200)) | (1 << (PostgreSQLParser.FIRST_P - 200)) | (1 << (PostgreSQLParser.FOLLOWING - 200)) | (1 << (PostgreSQLParser.FORCE - 200)) | (1 << (PostgreSQLParser.FORWARD - 200)) | (1 << (PostgreSQLParser.FUNCTION - 200)) | (1 << (PostgreSQLParser.FUNCTIONS - 200)) | (1 << (PostgreSQLParser.GLOBAL - 200)) | (1 << (PostgreSQLParser.GRANTED - 200)) | (1 << (PostgreSQLParser.HANDLER - 200)) | (1 << (PostgreSQLParser.HEADER_P - 200)) | (1 << (PostgreSQLParser.HOLD - 200)) | (1 << (PostgreSQLParser.HOUR_P - 200)) | (1 << (PostgreSQLParser.IDENTITY_P - 200)) | (1 << (PostgreSQLParser.IF_P - 200)) | (1 << (PostgreSQLParser.IMMEDIATE - 200)) | (1 << (PostgreSQLParser.IMMUTABLE - 200)) | (1 << (PostgreSQLParser.IMPLICIT_P - 200)) | (1 << (PostgreSQLParser.INCLUDING - 200)) | (1 << (PostgreSQLParser.INCREMENT - 200)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (PostgreSQLParser.INDEX - 264)) | (1 << (PostgreSQLParser.INDEXES - 264)) | (1 << (PostgreSQLParser.INHERIT - 264)) | (1 << (PostgreSQLParser.INHERITS - 264)) | (1 << (PostgreSQLParser.INLINE_P - 264)) | (1 << (PostgreSQLParser.INSENSITIVE - 264)) | (1 << (PostgreSQLParser.INSERT - 264)) | (1 << (PostgreSQLParser.INSTEAD - 264)) | (1 << (PostgreSQLParser.INVOKER - 264)) | (1 << (PostgreSQLParser.ISOLATION - 264)) | (1 << (PostgreSQLParser.KEY - 264)) | (1 << (PostgreSQLParser.LABEL - 264)) | (1 << (PostgreSQLParser.LANGUAGE - 264)) | (1 << (PostgreSQLParser.LARGE_P - 264)) | (1 << (PostgreSQLParser.LAST_P - 264)) | (1 << (PostgreSQLParser.LEAKPROOF - 264)) | (1 << (PostgreSQLParser.LEVEL - 264)) | (1 << (PostgreSQLParser.LISTEN - 264)) | (1 << (PostgreSQLParser.LOAD - 264)) | (1 << (PostgreSQLParser.LOCAL - 264)) | (1 << (PostgreSQLParser.LOCATION - 264)) | (1 << (PostgreSQLParser.LOCK_P - 264)) | (1 << (PostgreSQLParser.MAPPING - 264)) | (1 << (PostgreSQLParser.MATCH - 264)) | (1 << (PostgreSQLParser.MATCHED - 264)) | (1 << (PostgreSQLParser.MATERIALIZED - 264)) | (1 << (PostgreSQLParser.MAXVALUE - 264)) | (1 << (PostgreSQLParser.MERGE - 264)) | (1 << (PostgreSQLParser.MINUTE_P - 264)) | (1 << (PostgreSQLParser.MINVALUE - 264)) | (1 << (PostgreSQLParser.MODE - 264)) | (1 << (PostgreSQLParser.MONTH_P - 264)) | (1 << (PostgreSQLParser.MOVE - 264)) | (1 << (PostgreSQLParser.NAME_P - 264)) | (1 << (PostgreSQLParser.NAMES - 264)) | (1 << (PostgreSQLParser.NEXT - 264)) | (1 << (PostgreSQLParser.NO - 264)) | (1 << (PostgreSQLParser.NOTHING - 264)) | (1 << (PostgreSQLParser.NOTIFY - 264)) | (1 << (PostgreSQLParser.NOWAIT - 264)) | (1 << (PostgreSQLParser.NULLS_P - 264)) | (1 << (PostgreSQLParser.OBJECT_P - 264)) | (1 << (PostgreSQLParser.OF - 264)) | (1 << (PostgreSQLParser.OFF - 264)) | (1 << (PostgreSQLParser.OIDS - 264)) | (1 << (PostgreSQLParser.OPERATOR - 264)) | (1 << (PostgreSQLParser.OPTION - 264)) | (1 << (PostgreSQLParser.OPTIONS - 264)) | (1 << (PostgreSQLParser.OWNED - 264)) | (1 << (PostgreSQLParser.OWNER - 264)) | (1 << (PostgreSQLParser.PARSER - 264)) | (1 << (PostgreSQLParser.PARTIAL - 264)) | (1 << (PostgreSQLParser.PARTITION - 264)) | (1 << (PostgreSQLParser.PASSING - 264)) | (1 << (PostgreSQLParser.PASSWORD - 264)) | (1 << (PostgreSQLParser.PLANS - 264)) | (1 << (PostgreSQLParser.PRECEDING - 264)) | (1 << (PostgreSQLParser.PREPARE - 264)) | (1 << (PostgreSQLParser.PREPARED - 264)) | (1 << (PostgreSQLParser.PRESERVE - 264)) | (1 << (PostgreSQLParser.PRIOR - 264)) | (1 << (PostgreSQLParser.PRIVILEGES - 264)) | (1 << (PostgreSQLParser.PROCEDURAL - 264)) | (1 << (PostgreSQLParser.PROCEDURE - 264)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (PostgreSQLParser.PROGRAM - 328)) | (1 << (PostgreSQLParser.QUOTE - 328)) | (1 << (PostgreSQLParser.RANGE - 328)) | (1 << (PostgreSQLParser.READ - 328)) | (1 << (PostgreSQLParser.REASSIGN - 328)) | (1 << (PostgreSQLParser.RECURSIVE - 328)) | (1 << (PostgreSQLParser.REF - 328)) | (1 << (PostgreSQLParser.REFRESH - 328)) | (1 << (PostgreSQLParser.REINDEX - 328)) | (1 << (PostgreSQLParser.RELATIVE_P - 328)) | (1 << (PostgreSQLParser.RELEASE - 328)) | (1 << (PostgreSQLParser.RENAME - 328)) | (1 << (PostgreSQLParser.REPEATABLE - 328)) | (1 << (PostgreSQLParser.REPLACE - 328)) | (1 << (PostgreSQLParser.REPLICA - 328)) | (1 << (PostgreSQLParser.RESET - 328)) | (1 << (PostgreSQLParser.RESTART - 328)) | (1 << (PostgreSQLParser.RESTRICT - 328)) | (1 << (PostgreSQLParser.RETURNS - 328)) | (1 << (PostgreSQLParser.REVOKE - 328)) | (1 << (PostgreSQLParser.ROLE - 328)) | (1 << (PostgreSQLParser.ROLLBACK - 328)) | (1 << (PostgreSQLParser.ROWS - 328)) | (1 << (PostgreSQLParser.RULE - 328)) | (1 << (PostgreSQLParser.SAVEPOINT - 328)) | (1 << (PostgreSQLParser.SCHEMA - 328)) | (1 << (PostgreSQLParser.SCROLL - 328)) | (1 << (PostgreSQLParser.SEARCH - 328)) | (1 << (PostgreSQLParser.SECOND_P - 328)) | (1 << (PostgreSQLParser.SECURITY - 328)) | (1 << (PostgreSQLParser.SEQUENCE - 328)) | (1 << (PostgreSQLParser.SEQUENCES - 328)) | (1 << (PostgreSQLParser.SERIALIZABLE - 328)) | (1 << (PostgreSQLParser.SERVER - 328)) | (1 << (PostgreSQLParser.SESSION - 328)) | (1 << (PostgreSQLParser.SET - 328)) | (1 << (PostgreSQLParser.SHARE - 328)) | (1 << (PostgreSQLParser.SHOW - 328)) | (1 << (PostgreSQLParser.SIMPLE - 328)) | (1 << (PostgreSQLParser.SNAPSHOT - 328)) | (1 << (PostgreSQLParser.STABLE - 328)) | (1 << (PostgreSQLParser.STANDALONE_P - 328)) | (1 << (PostgreSQLParser.START - 328)) | (1 << (PostgreSQLParser.STATEMENT - 328)) | (1 << (PostgreSQLParser.STATISTICS - 328)) | (1 << (PostgreSQLParser.STDIN - 328)) | (1 << (PostgreSQLParser.STDOUT - 328)) | (1 << (PostgreSQLParser.STORAGE - 328)) | (1 << (PostgreSQLParser.STRICT_P - 328)) | (1 << (PostgreSQLParser.STRIP_P - 328)) | (1 << (PostgreSQLParser.SYSID - 328)) | (1 << (PostgreSQLParser.SYSTEM_P - 328)) | (1 << (PostgreSQLParser.TABLES - 328)) | (1 << (PostgreSQLParser.TABLESPACE - 328)) | (1 << (PostgreSQLParser.TEMP - 328)) | (1 << (PostgreSQLParser.TEMPLATE - 328)) | (1 << (PostgreSQLParser.TEMPORARY - 328)) | (1 << (PostgreSQLParser.TEXT_P - 328)) | (1 << (PostgreSQLParser.TRANSACTION - 328)) | (1 << (PostgreSQLParser.TRIGGER - 328)) | (1 << (PostgreSQLParser.TRUNCATE - 328)) | (1 << (PostgreSQLParser.TRUSTED - 328)) | (1 << (PostgreSQLParser.TYPE_P - 328)))) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (PostgreSQLParser.TYPES_P - 392)) | (1 << (PostgreSQLParser.UNBOUNDED - 392)) | (1 << (PostgreSQLParser.UNCOMMITTED - 392)) | (1 << (PostgreSQLParser.UNENCRYPTED - 392)) | (1 << (PostgreSQLParser.UNKNOWN - 392)) | (1 << (PostgreSQLParser.UNLISTEN - 392)) | (1 << (PostgreSQLParser.UNLOGGED - 392)) | (1 << (PostgreSQLParser.UNTIL - 392)) | (1 << (PostgreSQLParser.UPDATE - 392)) | (1 << (PostgreSQLParser.VACUUM - 392)) | (1 << (PostgreSQLParser.VALID - 392)) | (1 << (PostgreSQLParser.VALIDATE - 392)) | (1 << (PostgreSQLParser.VALIDATOR - 392)) | (1 << (PostgreSQLParser.VARYING - 392)) | (1 << (PostgreSQLParser.VERSION_P - 392)) | (1 << (PostgreSQLParser.VIEW - 392)) | (1 << (PostgreSQLParser.VOLATILE - 392)) | (1 << (PostgreSQLParser.WHITESPACE_P - 392)) | (1 << (PostgreSQLParser.WITHOUT - 392)) | (1 << (PostgreSQLParser.WORK - 392)) | (1 << (PostgreSQLParser.WRAPPER - 392)) | (1 << (PostgreSQLParser.WRITE - 392)) | (1 << (PostgreSQLParser.XML_P - 392)) | (1 << (PostgreSQLParser.YEAR_P - 392)) | (1 << (PostgreSQLParser.YES_P - 392)) | (1 << (PostgreSQLParser.ZONE - 392)) | (1 << (PostgreSQLParser.BETWEEN - 392)) | (1 << (PostgreSQLParser.BIGINT - 392)) | (1 << (PostgreSQLParser.BIT - 392)) | (1 << (PostgreSQLParser.BOOLEAN_P - 392)) | (1 << (PostgreSQLParser.CHAR_P - 392)) | (1 << (PostgreSQLParser.CHARACTER - 392)) | (1 << (PostgreSQLParser.COALESCE - 392)) | (1 << (PostgreSQLParser.DEC - 392)) | (1 << (PostgreSQLParser.DECIMAL_P - 392)) | (1 << (PostgreSQLParser.EXISTS - 392)) | (1 << (PostgreSQLParser.EXTRACT - 392)) | (1 << (PostgreSQLParser.FLOAT_P - 392)) | (1 << (PostgreSQLParser.GREATEST - 392)) | (1 << (PostgreSQLParser.INOUT - 392)) | (1 << (PostgreSQLParser.INT_P - 392)) | (1 << (PostgreSQLParser.INTEGER - 392)) | (1 << (PostgreSQLParser.INTERVAL - 392)) | (1 << (PostgreSQLParser.LEAST - 392)) | (1 << (PostgreSQLParser.NATIONAL - 392)) | (1 << (PostgreSQLParser.NCHAR - 392)) | (1 << (PostgreSQLParser.NONE - 392)) | (1 << (PostgreSQLParser.NULLIF - 392)) | (1 << (PostgreSQLParser.NUMERIC - 392)) | (1 << (PostgreSQLParser.OVERLAY - 392)) | (1 << (PostgreSQLParser.POSITION - 392)) | (1 << (PostgreSQLParser.PRECISION - 392)) | (1 << (PostgreSQLParser.REAL - 392)) | (1 << (PostgreSQLParser.ROW - 392)) | (1 << (PostgreSQLParser.SETOF - 392)) | (1 << (PostgreSQLParser.SMALLINT - 392)) | (1 << (PostgreSQLParser.SUBSTRING - 392)) | (1 << (PostgreSQLParser.TIME - 392)) | (1 << (PostgreSQLParser.TIMESTAMP - 392)) | (1 << (PostgreSQLParser.TREAT - 392)) | (1 << (PostgreSQLParser.TRIM - 392)) | (1 << (PostgreSQLParser.VALUES - 392)) | (1 << (PostgreSQLParser.VARCHAR - 392)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 392)))) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & ((1 << (PostgreSQLParser.XMLCONCAT - 463)) | (1 << (PostgreSQLParser.XMLELEMENT - 463)) | (1 << (PostgreSQLParser.XMLEXISTS - 463)) | (1 << (PostgreSQLParser.XMLFOREST - 463)) | (1 << (PostgreSQLParser.XMLPARSE - 463)) | (1 << (PostgreSQLParser.XMLPI - 463)) | (1 << (PostgreSQLParser.XMLROOT - 463)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 463)) | (1 << (PostgreSQLParser.CALL - 463)) | (1 << (PostgreSQLParser.CURRENT_P - 463)) | (1 << (PostgreSQLParser.ATTACH - 463)) | (1 << (PostgreSQLParser.DETACH - 463)) | (1 << (PostgreSQLParser.EXPRESSION - 463)) | (1 << (PostgreSQLParser.GENERATED - 463)) | (1 << (PostgreSQLParser.LOGGED - 463)) | (1 << (PostgreSQLParser.STORED - 463)) | (1 << (PostgreSQLParser.INCLUDE - 463)) | (1 << (PostgreSQLParser.ROUTINE - 463)) | (1 << (PostgreSQLParser.TRANSFORM - 463)) | (1 << (PostgreSQLParser.IMPORT_P - 463)) | (1 << (PostgreSQLParser.POLICY - 463)) | (1 << (PostgreSQLParser.METHOD - 463)) | (1 << (PostgreSQLParser.REFERENCING - 463)) | (1 << (PostgreSQLParser.NEW - 463)) | (1 << (PostgreSQLParser.OLD - 463)) | (1 << (PostgreSQLParser.VALUE_P - 463)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 463)) | (1 << (PostgreSQLParser.PUBLICATION - 463)) | (1 << (PostgreSQLParser.OUT_P - 463)) | (1 << (PostgreSQLParser.ROUTINES - 463)) | (1 << (PostgreSQLParser.SCHEMAS - 463)) | (1 << (PostgreSQLParser.PROCEDURES - 463)) | (1 << (PostgreSQLParser.INPUT_P - 463)) | (1 << (PostgreSQLParser.SUPPORT - 463)) | (1 << (PostgreSQLParser.PARALLEL - 463)) | (1 << (PostgreSQLParser.SQL_P - 463)) | (1 << (PostgreSQLParser.DEPENDS - 463)) | (1 << (PostgreSQLParser.OVERRIDING - 463)) | (1 << (PostgreSQLParser.CONFLICT - 463)) | (1 << (PostgreSQLParser.SKIP_P - 463)) | (1 << (PostgreSQLParser.LOCKED - 463)) | (1 << (PostgreSQLParser.TIES - 463)) | (1 << (PostgreSQLParser.ROLLUP - 463)) | (1 << (PostgreSQLParser.CUBE - 463)) | (1 << (PostgreSQLParser.GROUPING - 463)) | (1 << (PostgreSQLParser.SETS - 463)) | (1 << (PostgreSQLParser.ORDINALITY - 463)) | (1 << (PostgreSQLParser.XMLTABLE - 463)) | (1 << (PostgreSQLParser.COLUMNS - 463)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 463)) | (1 << (PostgreSQLParser.NORMALIZED - 463)) | (1 << (PostgreSQLParser.WITHIN - 463)) | (1 << (PostgreSQLParser.FILTER - 463)) | (1 << (PostgreSQLParser.GROUPS - 463)) | (1 << (PostgreSQLParser.OTHERS - 463)) | (1 << (PostgreSQLParser.NFC - 463)) | (1 << (PostgreSQLParser.NFD - 463)) | (1 << (PostgreSQLParser.NFKC - 463)) | (1 << (PostgreSQLParser.NFKD - 463)) | (1 << (PostgreSQLParser.UESCAPE - 463)) | (1 << (PostgreSQLParser.VIEWS - 463)))) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & ((1 << (PostgreSQLParser.NORMALIZE - 527)) | (1 << (PostgreSQLParser.ERROR - 527)) | (1 << (PostgreSQLParser.RETURN - 527)) | (1 << (PostgreSQLParser.FORMAT - 527)) | (1 << (PostgreSQLParser.Identifier - 527)) | (1 << (PostgreSQLParser.QuotedIdentifier - 527)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 527)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 527)))) != 0):
                    self.state = 3680
                    self.opttableelementlist()


                self.state = 3683
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 3685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INHERITS:
                    self.state = 3684
                    self.optinherit()


                self.state = 3687
                self.match(PostgreSQLParser.SERVER)
                self.state = 3688
                self.name()
                self.state = 3690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3689
                    self.create_generic_options()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3692
                self.match(PostgreSQLParser.CREATE)
                self.state = 3693
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3694
                self.match(PostgreSQLParser.TABLE)
                self.state = 3695
                self.qualified_name()
                self.state = 3696
                self.match(PostgreSQLParser.PARTITION)
                self.state = 3697
                self.match(PostgreSQLParser.OF)
                self.state = 3698
                self.qualified_name()
                self.state = 3700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 3699
                    self.opttypedtableelementlist()


                self.state = 3702
                self.partitionboundspec()
                self.state = 3703
                self.match(PostgreSQLParser.SERVER)
                self.state = 3704
                self.name()
                self.state = 3706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3705
                    self.create_generic_options()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3708
                self.match(PostgreSQLParser.CREATE)
                self.state = 3709
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3710
                self.match(PostgreSQLParser.TABLE)
                self.state = 3711
                self.match(PostgreSQLParser.IF_P)
                self.state = 3712
                self.match(PostgreSQLParser.NOT)
                self.state = 3713
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3714
                self.qualified_name()
                self.state = 3715
                self.match(PostgreSQLParser.PARTITION)
                self.state = 3716
                self.match(PostgreSQLParser.OF)
                self.state = 3717
                self.qualified_name()
                self.state = 3719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 3718
                    self.opttypedtableelementlist()


                self.state = 3721
                self.partitionboundspec()
                self.state = 3722
                self.match(PostgreSQLParser.SERVER)
                self.state = 3723
                self.name()
                self.state = 3725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3724
                    self.create_generic_options()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportforeignschemastmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT_P(self):
            return self.getToken(PostgreSQLParser.IMPORT_P, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def import_qualification(self):
            return self.getTypedRuleContext(PostgreSQLParser.Import_qualificationContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_importforeignschemastmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportforeignschemastmt" ):
                listener.enterImportforeignschemastmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportforeignschemastmt" ):
                listener.exitImportforeignschemastmt(self)




    def importforeignschemastmt(self):

        localctx = PostgreSQLParser.ImportforeignschemastmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_importforeignschemastmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3729
            self.match(PostgreSQLParser.IMPORT_P)
            self.state = 3730
            self.match(PostgreSQLParser.FOREIGN)
            self.state = 3731
            self.match(PostgreSQLParser.SCHEMA)
            self.state = 3732
            self.name()
            self.state = 3734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.EXCEPT or _la==PostgreSQLParser.LIMIT:
                self.state = 3733
                self.import_qualification()


            self.state = 3736
            self.match(PostgreSQLParser.FROM)
            self.state = 3737
            self.match(PostgreSQLParser.SERVER)
            self.state = 3738
            self.name()
            self.state = 3739
            self.match(PostgreSQLParser.INTO)
            self.state = 3740
            self.name()
            self.state = 3742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPTIONS:
                self.state = 3741
                self.create_generic_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_qualification_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def EXCEPT(self):
            return self.getToken(PostgreSQLParser.EXCEPT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_import_qualification_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_qualification_type" ):
                listener.enterImport_qualification_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_qualification_type" ):
                listener.exitImport_qualification_type(self)




    def import_qualification_type(self):

        localctx = PostgreSQLParser.Import_qualification_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_import_qualification_type)
        try:
            self.state = 3747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.LIMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3744
                self.match(PostgreSQLParser.LIMIT)
                self.state = 3745
                self.match(PostgreSQLParser.TO)
                pass
            elif token in [PostgreSQLParser.EXCEPT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3746
                self.match(PostgreSQLParser.EXCEPT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_qualificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_qualification_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Import_qualification_typeContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_import_qualification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_qualification" ):
                listener.enterImport_qualification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_qualification" ):
                listener.exitImport_qualification(self)




    def import_qualification(self):

        localctx = PostgreSQLParser.Import_qualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_import_qualification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3749
            self.import_qualification_type()
            self.state = 3750
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3751
            self.relation_expr_list()
            self.state = 3752
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateusermappingstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PostgreSQLParser.Auth_identContext,0)


        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createusermappingstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateusermappingstmt" ):
                listener.enterCreateusermappingstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateusermappingstmt" ):
                listener.exitCreateusermappingstmt(self)




    def createusermappingstmt(self):

        localctx = PostgreSQLParser.CreateusermappingstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_createusermappingstmt)
        self._la = 0 # Token type
        try:
            self.state = 3777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3754
                self.match(PostgreSQLParser.CREATE)
                self.state = 3755
                self.match(PostgreSQLParser.USER)
                self.state = 3756
                self.match(PostgreSQLParser.MAPPING)
                self.state = 3757
                self.match(PostgreSQLParser.FOR)
                self.state = 3758
                self.auth_ident()
                self.state = 3759
                self.match(PostgreSQLParser.SERVER)
                self.state = 3760
                self.name()
                self.state = 3762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3761
                    self.create_generic_options()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3764
                self.match(PostgreSQLParser.CREATE)
                self.state = 3765
                self.match(PostgreSQLParser.USER)
                self.state = 3766
                self.match(PostgreSQLParser.MAPPING)
                self.state = 3767
                self.match(PostgreSQLParser.IF_P)
                self.state = 3768
                self.match(PostgreSQLParser.NOT)
                self.state = 3769
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3770
                self.match(PostgreSQLParser.FOR)
                self.state = 3771
                self.auth_ident()
                self.state = 3772
                self.match(PostgreSQLParser.SERVER)
                self.state = 3773
                self.name()
                self.state = 3775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPTIONS:
                    self.state = 3774
                    self.create_generic_options()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auth_identContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_auth_ident

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuth_ident" ):
                listener.enterAuth_ident(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuth_ident" ):
                listener.exitAuth_ident(self)




    def auth_ident(self):

        localctx = PostgreSQLParser.Auth_identContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_auth_ident)
        try:
            self.state = 3781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.SESSION_USER, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3779
                self.rolespec()
                pass
            elif token in [PostgreSQLParser.USER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3780
                self.match(PostgreSQLParser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropusermappingstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PostgreSQLParser.Auth_identContext,0)


        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropusermappingstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropusermappingstmt" ):
                listener.enterDropusermappingstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropusermappingstmt" ):
                listener.exitDropusermappingstmt(self)




    def dropusermappingstmt(self):

        localctx = PostgreSQLParser.DropusermappingstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_dropusermappingstmt)
        try:
            self.state = 3801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3783
                self.match(PostgreSQLParser.DROP)
                self.state = 3784
                self.match(PostgreSQLParser.USER)
                self.state = 3785
                self.match(PostgreSQLParser.MAPPING)
                self.state = 3786
                self.match(PostgreSQLParser.FOR)
                self.state = 3787
                self.auth_ident()
                self.state = 3788
                self.match(PostgreSQLParser.SERVER)
                self.state = 3789
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3791
                self.match(PostgreSQLParser.DROP)
                self.state = 3792
                self.match(PostgreSQLParser.USER)
                self.state = 3793
                self.match(PostgreSQLParser.MAPPING)
                self.state = 3794
                self.match(PostgreSQLParser.IF_P)
                self.state = 3795
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3796
                self.match(PostgreSQLParser.FOR)
                self.state = 3797
                self.auth_ident()
                self.state = 3798
                self.match(PostgreSQLParser.SERVER)
                self.state = 3799
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterusermappingstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PostgreSQLParser.Auth_identContext,0)


        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterusermappingstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterusermappingstmt" ):
                listener.enterAlterusermappingstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterusermappingstmt" ):
                listener.exitAlterusermappingstmt(self)




    def alterusermappingstmt(self):

        localctx = PostgreSQLParser.AlterusermappingstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_alterusermappingstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3803
            self.match(PostgreSQLParser.ALTER)
            self.state = 3804
            self.match(PostgreSQLParser.USER)
            self.state = 3805
            self.match(PostgreSQLParser.MAPPING)
            self.state = 3806
            self.match(PostgreSQLParser.FOR)
            self.state = 3807
            self.auth_ident()
            self.state = 3808
            self.match(PostgreSQLParser.SERVER)
            self.state = 3809
            self.name()
            self.state = 3810
            self.alter_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatepolicystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def rowsecuritydefaultpermissive(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecuritydefaultpermissiveContext,0)


        def rowsecuritydefaultforcmd(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecuritydefaultforcmdContext,0)


        def rowsecuritydefaulttorole(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecuritydefaulttoroleContext,0)


        def rowsecurityoptionalexpr(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionalexprContext,0)


        def rowsecurityoptionalwithcheck(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionalwithcheckContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createpolicystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatepolicystmt" ):
                listener.enterCreatepolicystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatepolicystmt" ):
                listener.exitCreatepolicystmt(self)




    def createpolicystmt(self):

        localctx = PostgreSQLParser.CreatepolicystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_createpolicystmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3812
            self.match(PostgreSQLParser.CREATE)
            self.state = 3813
            self.match(PostgreSQLParser.POLICY)
            self.state = 3814
            self.name()
            self.state = 3815
            self.match(PostgreSQLParser.ON)
            self.state = 3816
            self.qualified_name()
            self.state = 3818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS:
                self.state = 3817
                self.rowsecuritydefaultpermissive()


            self.state = 3821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FOR:
                self.state = 3820
                self.rowsecuritydefaultforcmd()


            self.state = 3824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.TO:
                self.state = 3823
                self.rowsecuritydefaulttorole()


            self.state = 3827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.USING:
                self.state = 3826
                self.rowsecurityoptionalexpr()


            self.state = 3830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 3829
                self.rowsecurityoptionalwithcheck()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterpolicystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def rowsecurityoptionaltorole(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionaltoroleContext,0)


        def rowsecurityoptionalexpr(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionalexprContext,0)


        def rowsecurityoptionalwithcheck(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionalwithcheckContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterpolicystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterpolicystmt" ):
                listener.enterAlterpolicystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterpolicystmt" ):
                listener.exitAlterpolicystmt(self)




    def alterpolicystmt(self):

        localctx = PostgreSQLParser.AlterpolicystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_alterpolicystmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3832
            self.match(PostgreSQLParser.ALTER)
            self.state = 3833
            self.match(PostgreSQLParser.POLICY)
            self.state = 3834
            self.name()
            self.state = 3835
            self.match(PostgreSQLParser.ON)
            self.state = 3836
            self.qualified_name()
            self.state = 3838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.TO:
                self.state = 3837
                self.rowsecurityoptionaltorole()


            self.state = 3841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.USING:
                self.state = 3840
                self.rowsecurityoptionalexpr()


            self.state = 3844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 3843
                self.rowsecurityoptionalwithcheck()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecurityoptionalexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecurityoptionalexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecurityoptionalexpr" ):
                listener.enterRowsecurityoptionalexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecurityoptionalexpr" ):
                listener.exitRowsecurityoptionalexpr(self)




    def rowsecurityoptionalexpr(self):

        localctx = PostgreSQLParser.RowsecurityoptionalexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_rowsecurityoptionalexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3846
            self.match(PostgreSQLParser.USING)
            self.state = 3847
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3848
            self.a_expr()
            self.state = 3849
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecurityoptionalwithcheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecurityoptionalwithcheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecurityoptionalwithcheck" ):
                listener.enterRowsecurityoptionalwithcheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecurityoptionalwithcheck" ):
                listener.exitRowsecurityoptionalwithcheck(self)




    def rowsecurityoptionalwithcheck(self):

        localctx = PostgreSQLParser.RowsecurityoptionalwithcheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_rowsecurityoptionalwithcheck)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3851
            self.match(PostgreSQLParser.WITH)
            self.state = 3852
            self.match(PostgreSQLParser.CHECK)
            self.state = 3853
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3854
            self.a_expr()
            self.state = 3855
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecuritydefaulttoroleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecuritydefaulttorole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecuritydefaulttorole" ):
                listener.enterRowsecuritydefaulttorole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecuritydefaulttorole" ):
                listener.exitRowsecuritydefaulttorole(self)




    def rowsecuritydefaulttorole(self):

        localctx = PostgreSQLParser.RowsecuritydefaulttoroleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_rowsecuritydefaulttorole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3857
            self.match(PostgreSQLParser.TO)
            self.state = 3858
            self.role_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecurityoptionaltoroleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecurityoptionaltorole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecurityoptionaltorole" ):
                listener.enterRowsecurityoptionaltorole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecurityoptionaltorole" ):
                listener.exitRowsecurityoptionaltorole(self)




    def rowsecurityoptionaltorole(self):

        localctx = PostgreSQLParser.RowsecurityoptionaltoroleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_rowsecurityoptionaltorole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3860
            self.match(PostgreSQLParser.TO)
            self.state = 3861
            self.role_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecuritydefaultpermissiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecuritydefaultpermissive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecuritydefaultpermissive" ):
                listener.enterRowsecuritydefaultpermissive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecuritydefaultpermissive" ):
                listener.exitRowsecuritydefaultpermissive(self)




    def rowsecuritydefaultpermissive(self):

        localctx = PostgreSQLParser.RowsecuritydefaultpermissiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_rowsecuritydefaultpermissive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3863
            self.match(PostgreSQLParser.AS)
            self.state = 3864
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecuritydefaultforcmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def row_security_cmd(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_security_cmdContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecuritydefaultforcmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecuritydefaultforcmd" ):
                listener.enterRowsecuritydefaultforcmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecuritydefaultforcmd" ):
                listener.exitRowsecuritydefaultforcmd(self)




    def rowsecuritydefaultforcmd(self):

        localctx = PostgreSQLParser.RowsecuritydefaultforcmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_rowsecuritydefaultforcmd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3866
            self.match(PostgreSQLParser.FOR)
            self.state = 3867
            self.row_security_cmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_security_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_security_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_security_cmd" ):
                listener.enterRow_security_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_security_cmd" ):
                listener.exitRow_security_cmd(self)




    def row_security_cmd(self):

        localctx = PostgreSQLParser.Row_security_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_row_security_cmd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3869
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.SELECT or _la==PostgreSQLParser.DELETE_P or _la==PostgreSQLParser.INSERT or _la==PostgreSQLParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateamstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def METHOD(self):
            return self.getToken(PostgreSQLParser.METHOD, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def am_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Am_typeContext,0)


        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createamstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateamstmt" ):
                listener.enterCreateamstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateamstmt" ):
                listener.exitCreateamstmt(self)




    def createamstmt(self):

        localctx = PostgreSQLParser.CreateamstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_createamstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3871
            self.match(PostgreSQLParser.CREATE)
            self.state = 3872
            self.match(PostgreSQLParser.ACCESS)
            self.state = 3873
            self.match(PostgreSQLParser.METHOD)
            self.state = 3874
            self.name()
            self.state = 3875
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 3876
            self.am_type()
            self.state = 3877
            self.match(PostgreSQLParser.HANDLER)
            self.state = 3878
            self.handler_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Am_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_am_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAm_type" ):
                listener.enterAm_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAm_type" ):
                listener.exitAm_type(self)




    def am_type(self):

        localctx = PostgreSQLParser.Am_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_am_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3880
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.TABLE or _la==PostgreSQLParser.INDEX):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatetrigstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def triggeractiontime(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggeractiontimeContext,0)


        def triggerevents(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggereventsContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def function_or_procedure(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_or_procedureContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def triggerfuncargs(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerfuncargsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def triggerreferencing(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerreferencingContext,0)


        def triggerforspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerforspecContext,0)


        def triggerwhen(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerwhenContext,0)


        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def constraintattributespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributespecContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def EACH(self):
            return self.getToken(PostgreSQLParser.EACH, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def optconstrfromtable(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptconstrfromtableContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createtrigstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatetrigstmt" ):
                listener.enterCreatetrigstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatetrigstmt" ):
                listener.exitCreatetrigstmt(self)




    def createtrigstmt(self):

        localctx = PostgreSQLParser.CreatetrigstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_createtrigstmt)
        self._la = 0 # Token type
        try:
            self.state = 3930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3882
                self.match(PostgreSQLParser.CREATE)
                self.state = 3883
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 3884
                self.name()
                self.state = 3885
                self.triggeractiontime()
                self.state = 3886
                self.triggerevents()
                self.state = 3887
                self.match(PostgreSQLParser.ON)
                self.state = 3888
                self.qualified_name()
                self.state = 3890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.REFERENCING:
                    self.state = 3889
                    self.triggerreferencing()


                self.state = 3893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 3892
                    self.triggerforspec()


                self.state = 3896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHEN:
                    self.state = 3895
                    self.triggerwhen()


                self.state = 3898
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 3899
                self.function_or_procedure()
                self.state = 3900
                self.func_name()
                self.state = 3901
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3902
                self.triggerfuncargs()
                self.state = 3903
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3905
                self.match(PostgreSQLParser.CREATE)
                self.state = 3906
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 3907
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 3908
                self.name()
                self.state = 3909
                self.match(PostgreSQLParser.AFTER)
                self.state = 3910
                self.triggerevents()
                self.state = 3911
                self.match(PostgreSQLParser.ON)
                self.state = 3912
                self.qualified_name()
                self.state = 3914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM:
                    self.state = 3913
                    self.optconstrfromtable()


                self.state = 3916
                self.constraintattributespec()
                self.state = 3917
                self.match(PostgreSQLParser.FOR)
                self.state = 3918
                self.match(PostgreSQLParser.EACH)
                self.state = 3919
                self.match(PostgreSQLParser.ROW)
                self.state = 3921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHEN:
                    self.state = 3920
                    self.triggerwhen()


                self.state = 3923
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 3924
                self.function_or_procedure()
                self.state = 3925
                self.func_name()
                self.state = 3926
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3927
                self.triggerfuncargs()
                self.state = 3928
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggeractiontimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(PostgreSQLParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(PostgreSQLParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggeractiontime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggeractiontime" ):
                listener.enterTriggeractiontime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggeractiontime" ):
                listener.exitTriggeractiontime(self)




    def triggeractiontime(self):

        localctx = PostgreSQLParser.TriggeractiontimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_triggeractiontime)
        try:
            self.state = 3936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.BEFORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3932
                self.match(PostgreSQLParser.BEFORE)
                pass
            elif token in [PostgreSQLParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3933
                self.match(PostgreSQLParser.AFTER)
                pass
            elif token in [PostgreSQLParser.INSTEAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3934
                self.match(PostgreSQLParser.INSTEAD)
                self.state = 3935
                self.match(PostgreSQLParser.OF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggereventsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggeroneevent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TriggeroneeventContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TriggeroneeventContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR)
            else:
                return self.getToken(PostgreSQLParser.OR, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerevents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerevents" ):
                listener.enterTriggerevents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerevents" ):
                listener.exitTriggerevents(self)




    def triggerevents(self):

        localctx = PostgreSQLParser.TriggereventsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_triggerevents)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3938
            self.triggeroneevent()
            self.state = 3943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.OR:
                self.state = 3939
                self.match(PostgreSQLParser.OR)
                self.state = 3940
                self.triggeroneevent()
                self.state = 3945
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggeroneeventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggeroneevent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggeroneevent" ):
                listener.enterTriggeroneevent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggeroneevent" ):
                listener.exitTriggeroneevent(self)




    def triggeroneevent(self):

        localctx = PostgreSQLParser.TriggeroneeventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_triggeroneevent)
        try:
            self.state = 3953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3946
                self.match(PostgreSQLParser.INSERT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3947
                self.match(PostgreSQLParser.DELETE_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3948
                self.match(PostgreSQLParser.UPDATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3949
                self.match(PostgreSQLParser.UPDATE)
                self.state = 3950
                self.match(PostgreSQLParser.OF)
                self.state = 3951
                self.columnlist()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3952
                self.match(PostgreSQLParser.TRUNCATE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerreferencingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCING(self):
            return self.getToken(PostgreSQLParser.REFERENCING, 0)

        def triggertransitions(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggertransitionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerreferencing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerreferencing" ):
                listener.enterTriggerreferencing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerreferencing" ):
                listener.exitTriggerreferencing(self)




    def triggerreferencing(self):

        localctx = PostgreSQLParser.TriggerreferencingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_triggerreferencing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3955
            self.match(PostgreSQLParser.REFERENCING)
            self.state = 3956
            self.triggertransitions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggertransitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggertransition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TriggertransitionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TriggertransitionContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggertransitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggertransitions" ):
                listener.enterTriggertransitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggertransitions" ):
                listener.exitTriggertransitions(self)




    def triggertransitions(self):

        localctx = PostgreSQLParser.TriggertransitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_triggertransitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3959 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3958
                self.triggertransition()
                self.state = 3961 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.NEW or _la==PostgreSQLParser.OLD):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggertransitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transitionoldornew(self):
            return self.getTypedRuleContext(PostgreSQLParser.TransitionoldornewContext,0)


        def transitionrowortable(self):
            return self.getTypedRuleContext(PostgreSQLParser.TransitionrowortableContext,0)


        def transitionrelname(self):
            return self.getTypedRuleContext(PostgreSQLParser.TransitionrelnameContext,0)


        def as_(self):
            return self.getTypedRuleContext(PostgreSQLParser.As_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggertransition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggertransition" ):
                listener.enterTriggertransition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggertransition" ):
                listener.exitTriggertransition(self)




    def triggertransition(self):

        localctx = PostgreSQLParser.TriggertransitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_triggertransition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3963
            self.transitionoldornew()
            self.state = 3964
            self.transitionrowortable()
            self.state = 3966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS:
                self.state = 3965
                self.as_()


            self.state = 3968
            self.transitionrelname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransitionoldornewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(PostgreSQLParser.NEW, 0)

        def OLD(self):
            return self.getToken(PostgreSQLParser.OLD, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transitionoldornew

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransitionoldornew" ):
                listener.enterTransitionoldornew(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransitionoldornew" ):
                listener.exitTransitionoldornew(self)




    def transitionoldornew(self):

        localctx = PostgreSQLParser.TransitionoldornewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_transitionoldornew)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3970
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.NEW or _la==PostgreSQLParser.OLD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransitionrowortableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transitionrowortable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransitionrowortable" ):
                listener.enterTransitionrowortable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransitionrowortable" ):
                listener.exitTransitionrowortable(self)




    def transitionrowortable(self):

        localctx = PostgreSQLParser.TransitionrowortableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_transitionrowortable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3972
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.TABLE or _la==PostgreSQLParser.ROW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransitionrelnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transitionrelname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransitionrelname" ):
                listener.enterTransitionrelname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransitionrelname" ):
                listener.exitTransitionrelname(self)




    def transitionrelname(self):

        localctx = PostgreSQLParser.TransitionrelnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_transitionrelname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3974
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerforspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def triggerfortype(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerfortypeContext,0)


        def triggerforopteach(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerforopteachContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerforspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerforspec" ):
                listener.enterTriggerforspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerforspec" ):
                listener.exitTriggerforspec(self)




    def triggerforspec(self):

        localctx = PostgreSQLParser.TriggerforspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_triggerforspec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3976
            self.match(PostgreSQLParser.FOR)
            self.state = 3978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.EACH:
                self.state = 3977
                self.triggerforopteach()


            self.state = 3980
            self.triggerfortype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerforopteachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EACH(self):
            return self.getToken(PostgreSQLParser.EACH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerforopteach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerforopteach" ):
                listener.enterTriggerforopteach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerforopteach" ):
                listener.exitTriggerforopteach(self)




    def triggerforopteach(self):

        localctx = PostgreSQLParser.TriggerforopteachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_triggerforopteach)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3982
            self.match(PostgreSQLParser.EACH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerfortypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def STATEMENT(self):
            return self.getToken(PostgreSQLParser.STATEMENT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerfortype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerfortype" ):
                listener.enterTriggerfortype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerfortype" ):
                listener.exitTriggerfortype(self)




    def triggerfortype(self):

        localctx = PostgreSQLParser.TriggerfortypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_triggerfortype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3984
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.STATEMENT or _la==PostgreSQLParser.ROW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerwhenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerwhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerwhen" ):
                listener.enterTriggerwhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerwhen" ):
                listener.exitTriggerwhen(self)




    def triggerwhen(self):

        localctx = PostgreSQLParser.TriggerwhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_triggerwhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3986
            self.match(PostgreSQLParser.WHEN)
            self.state = 3987
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3988
            self.a_expr()
            self.state = 3989
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_or_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_or_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_or_procedure" ):
                listener.enterFunction_or_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_or_procedure" ):
                listener.exitFunction_or_procedure(self)




    def function_or_procedure(self):

        localctx = PostgreSQLParser.Function_or_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_function_or_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3991
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FUNCTION or _la==PostgreSQLParser.PROCEDURE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerfuncargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggerfuncarg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TriggerfuncargContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TriggerfuncargContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerfuncargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerfuncargs" ):
                listener.enterTriggerfuncargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerfuncargs" ):
                listener.exitTriggerfuncargs(self)




    def triggerfuncargs(self):

        localctx = PostgreSQLParser.TriggerfuncargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_triggerfuncargs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ALL, PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE, PostgreSQLParser.AND, PostgreSQLParser.ANY, PostgreSQLParser.ARRAY, PostgreSQLParser.AS, PostgreSQLParser.ASC, PostgreSQLParser.ASYMMETRIC, PostgreSQLParser.BOTH, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CHECK, PostgreSQLParser.COLLATE, PostgreSQLParser.COLUMN, PostgreSQLParser.CONSTRAINT, PostgreSQLParser.CREATE, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEFERRABLE, PostgreSQLParser.DESC, PostgreSQLParser.DISTINCT, PostgreSQLParser.DO, PostgreSQLParser.ELSE, PostgreSQLParser.EXCEPT, PostgreSQLParser.FALSE_P, PostgreSQLParser.FETCH, PostgreSQLParser.FOR, PostgreSQLParser.FOREIGN, PostgreSQLParser.FROM, PostgreSQLParser.GRANT, PostgreSQLParser.GROUP_P, PostgreSQLParser.HAVING, PostgreSQLParser.IN_P, PostgreSQLParser.INITIALLY, PostgreSQLParser.INTERSECT, PostgreSQLParser.INTO, PostgreSQLParser.LATERAL_P, PostgreSQLParser.LEADING, PostgreSQLParser.LIMIT, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.OFFSET, PostgreSQLParser.ON, PostgreSQLParser.ONLY, PostgreSQLParser.OR, PostgreSQLParser.ORDER, PostgreSQLParser.PLACING, PostgreSQLParser.PRIMARY, PostgreSQLParser.REFERENCES, PostgreSQLParser.RETURNING, PostgreSQLParser.SELECT, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SOME, PostgreSQLParser.SYMMETRIC, PostgreSQLParser.TABLE, PostgreSQLParser.THEN, PostgreSQLParser.TO, PostgreSQLParser.TRAILING, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNION, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.USING, PostgreSQLParser.VARIADIC, PostgreSQLParser.WHEN, PostgreSQLParser.WHERE, PostgreSQLParser.WINDOW, PostgreSQLParser.WITH, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.END_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.EXIT, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.state = 3993
                self.triggerfuncarg()
                pass
            elif token in [PostgreSQLParser.CLOSE_PAREN, PostgreSQLParser.COMMA]:
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 3997
                self.match(PostgreSQLParser.COMMA)
                self.state = 3998
                self.triggerfuncarg()
                self.state = 4003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerfuncargContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def fconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.FconstContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerfuncarg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerfuncarg" ):
                listener.enterTriggerfuncarg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerfuncarg" ):
                listener.exitTriggerfuncarg(self)




    def triggerfuncarg(self):

        localctx = PostgreSQLParser.TriggerfuncargContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_triggerfuncarg)
        try:
            self.state = 4008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4004
                self.iconst()
                pass
            elif token in [PostgreSQLParser.Numeric]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4005
                self.fconst()
                pass
            elif token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4006
                self.sconst()
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ALL, PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE, PostgreSQLParser.AND, PostgreSQLParser.ANY, PostgreSQLParser.ARRAY, PostgreSQLParser.AS, PostgreSQLParser.ASC, PostgreSQLParser.ASYMMETRIC, PostgreSQLParser.BOTH, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CHECK, PostgreSQLParser.COLLATE, PostgreSQLParser.COLUMN, PostgreSQLParser.CONSTRAINT, PostgreSQLParser.CREATE, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEFERRABLE, PostgreSQLParser.DESC, PostgreSQLParser.DISTINCT, PostgreSQLParser.DO, PostgreSQLParser.ELSE, PostgreSQLParser.EXCEPT, PostgreSQLParser.FALSE_P, PostgreSQLParser.FETCH, PostgreSQLParser.FOR, PostgreSQLParser.FOREIGN, PostgreSQLParser.FROM, PostgreSQLParser.GRANT, PostgreSQLParser.GROUP_P, PostgreSQLParser.HAVING, PostgreSQLParser.IN_P, PostgreSQLParser.INITIALLY, PostgreSQLParser.INTERSECT, PostgreSQLParser.INTO, PostgreSQLParser.LATERAL_P, PostgreSQLParser.LEADING, PostgreSQLParser.LIMIT, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.OFFSET, PostgreSQLParser.ON, PostgreSQLParser.ONLY, PostgreSQLParser.OR, PostgreSQLParser.ORDER, PostgreSQLParser.PLACING, PostgreSQLParser.PRIMARY, PostgreSQLParser.REFERENCES, PostgreSQLParser.RETURNING, PostgreSQLParser.SELECT, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SOME, PostgreSQLParser.SYMMETRIC, PostgreSQLParser.TABLE, PostgreSQLParser.THEN, PostgreSQLParser.TO, PostgreSQLParser.TRAILING, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNION, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.USING, PostgreSQLParser.VARIADIC, PostgreSQLParser.WHEN, PostgreSQLParser.WHERE, PostgreSQLParser.WINDOW, PostgreSQLParser.WITH, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.END_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.EXIT, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4007
                self.colLabel()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptconstrfromtableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optconstrfromtable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptconstrfromtable" ):
                listener.enterOptconstrfromtable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptconstrfromtable" ):
                listener.exitOptconstrfromtable(self)




    def optconstrfromtable(self):

        localctx = PostgreSQLParser.OptconstrfromtableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_optconstrfromtable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4010
            self.match(PostgreSQLParser.FROM)
            self.state = 4011
            self.qualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintattributespecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraintattributeElem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ConstraintattributeElemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributeElemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintattributespec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintattributespec" ):
                listener.enterConstraintattributespec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintattributespec" ):
                listener.exitConstraintattributespec(self)




    def constraintattributespec(self):

        localctx = PostgreSQLParser.ConstraintattributespecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_constraintattributespec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.DEFERRABLE - 92)) | (1 << (PostgreSQLParser.INITIALLY - 92)) | (1 << (PostgreSQLParser.NOT - 92)))) != 0) or _la==PostgreSQLParser.NO:
                self.state = 4013
                self.constraintattributeElem()
                self.state = 4018
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintattributeElemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def INITIALLY(self):
            return self.getToken(PostgreSQLParser.INITIALLY, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def VALID(self):
            return self.getToken(PostgreSQLParser.VALID, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintattributeElem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintattributeElem" ):
                listener.enterConstraintattributeElem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintattributeElem" ):
                listener.exitConstraintattributeElem(self)




    def constraintattributeElem(self):

        localctx = PostgreSQLParser.ConstraintattributeElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_constraintattributeElem)
        try:
            self.state = 4030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4019
                self.match(PostgreSQLParser.NOT)
                self.state = 4020
                self.match(PostgreSQLParser.DEFERRABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4021
                self.match(PostgreSQLParser.DEFERRABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4022
                self.match(PostgreSQLParser.INITIALLY)
                self.state = 4023
                self.match(PostgreSQLParser.IMMEDIATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4024
                self.match(PostgreSQLParser.INITIALLY)
                self.state = 4025
                self.match(PostgreSQLParser.DEFERRED)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4026
                self.match(PostgreSQLParser.NOT)
                self.state = 4027
                self.match(PostgreSQLParser.VALID)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4028
                self.match(PostgreSQLParser.NO)
                self.state = 4029
                self.match(PostgreSQLParser.INHERIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateeventtrigstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def function_or_procedure(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_or_procedureContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def event_trigger_when_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Event_trigger_when_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createeventtrigstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateeventtrigstmt" ):
                listener.enterCreateeventtrigstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateeventtrigstmt" ):
                listener.exitCreateeventtrigstmt(self)




    def createeventtrigstmt(self):

        localctx = PostgreSQLParser.CreateeventtrigstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_createeventtrigstmt)
        try:
            self.state = 4058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4032
                self.match(PostgreSQLParser.CREATE)
                self.state = 4033
                self.match(PostgreSQLParser.EVENT)
                self.state = 4034
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 4035
                self.name()
                self.state = 4036
                self.match(PostgreSQLParser.ON)
                self.state = 4037
                self.colLabel()
                self.state = 4038
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 4039
                self.function_or_procedure()
                self.state = 4040
                self.func_name()
                self.state = 4041
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4042
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4044
                self.match(PostgreSQLParser.CREATE)
                self.state = 4045
                self.match(PostgreSQLParser.EVENT)
                self.state = 4046
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 4047
                self.name()
                self.state = 4048
                self.match(PostgreSQLParser.ON)
                self.state = 4049
                self.colLabel()
                self.state = 4050
                self.match(PostgreSQLParser.WHEN)
                self.state = 4051
                self.event_trigger_when_list()
                self.state = 4052
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 4053
                self.function_or_procedure()
                self.state = 4054
                self.func_name()
                self.state = 4055
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4056
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_trigger_when_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_trigger_when_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Event_trigger_when_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Event_trigger_when_itemContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND)
            else:
                return self.getToken(PostgreSQLParser.AND, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_event_trigger_when_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_trigger_when_list" ):
                listener.enterEvent_trigger_when_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_trigger_when_list" ):
                listener.exitEvent_trigger_when_list(self)




    def event_trigger_when_list(self):

        localctx = PostgreSQLParser.Event_trigger_when_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_event_trigger_when_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4060
            self.event_trigger_when_item()
            self.state = 4065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.AND:
                self.state = 4061
                self.match(PostgreSQLParser.AND)
                self.state = 4062
                self.event_trigger_when_item()
                self.state = 4067
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_trigger_when_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def event_trigger_value_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Event_trigger_value_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_event_trigger_when_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_trigger_when_item" ):
                listener.enterEvent_trigger_when_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_trigger_when_item" ):
                listener.exitEvent_trigger_when_item(self)




    def event_trigger_when_item(self):

        localctx = PostgreSQLParser.Event_trigger_when_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_event_trigger_when_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4068
            self.colid()
            self.state = 4069
            self.match(PostgreSQLParser.IN_P)
            self.state = 4070
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 4071
            self.event_trigger_value_list()
            self.state = 4072
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_trigger_value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_event_trigger_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_trigger_value_list" ):
                listener.enterEvent_trigger_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_trigger_value_list" ):
                listener.exitEvent_trigger_value_list(self)




    def event_trigger_value_list(self):

        localctx = PostgreSQLParser.Event_trigger_value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_event_trigger_value_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4074
            self.sconst()
            self.state = 4079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 4075
                self.match(PostgreSQLParser.COMMA)
                self.state = 4076
                self.sconst()
                self.state = 4081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltereventtrigstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def enable_trigger(self):
            return self.getTypedRuleContext(PostgreSQLParser.Enable_triggerContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altereventtrigstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltereventtrigstmt" ):
                listener.enterAltereventtrigstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltereventtrigstmt" ):
                listener.exitAltereventtrigstmt(self)




    def altereventtrigstmt(self):

        localctx = PostgreSQLParser.AltereventtrigstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_altereventtrigstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4082
            self.match(PostgreSQLParser.ALTER)
            self.state = 4083
            self.match(PostgreSQLParser.EVENT)
            self.state = 4084
            self.match(PostgreSQLParser.TRIGGER)
            self.state = 4085
            self.name()
            self.state = 4086
            self.enable_trigger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enable_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def REPLICA(self):
            return self.getToken(PostgreSQLParser.REPLICA, 0)

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_enable_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable_trigger" ):
                listener.enterEnable_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable_trigger" ):
                listener.exitEnable_trigger(self)




    def enable_trigger(self):

        localctx = PostgreSQLParser.Enable_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_enable_trigger)
        try:
            self.state = 4094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4088
                self.match(PostgreSQLParser.ENABLE_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4089
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 4090
                self.match(PostgreSQLParser.REPLICA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4091
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 4092
                self.match(PostgreSQLParser.ALWAYS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4093
                self.match(PostgreSQLParser.DISABLE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateassertionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def ASSERTION(self):
            return self.getToken(PostgreSQLParser.ASSERTION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def constraintattributespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createassertionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateassertionstmt" ):
                listener.enterCreateassertionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateassertionstmt" ):
                listener.exitCreateassertionstmt(self)




    def createassertionstmt(self):

        localctx = PostgreSQLParser.CreateassertionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_createassertionstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4096
            self.match(PostgreSQLParser.CREATE)
            self.state = 4097
            self.match(PostgreSQLParser.ASSERTION)
            self.state = 4098
            self.any_name()
            self.state = 4099
            self.match(PostgreSQLParser.CHECK)
            self.state = 4100
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 4101
            self.a_expr()
            self.state = 4102
            self.match(PostgreSQLParser.CLOSE_PAREN)
            self.state = 4103
            self.constraintattributespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def aggr_args(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggr_argsContext,0)


        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def old_aggr_definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.Old_aggr_definitionContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,i)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def opttablefuncelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablefuncelementlistContext,0)


        def ENUM_P(self):
            return self.getToken(PostgreSQLParser.ENUM_P, 0)

        def enum_val_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Enum_val_list_Context,0)


        def RANGE(self):
            return self.getToken(PostgreSQLParser.RANGE, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_definestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinestmt" ):
                listener.enterDefinestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinestmt" ):
                listener.exitDefinestmt(self)




    def definestmt(self):

        localctx = PostgreSQLParser.DefinestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_definestmt)
        self._la = 0 # Token type
        try:
            self.state = 4219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4105
                self.match(PostgreSQLParser.CREATE)
                self.state = 4107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OR:
                    self.state = 4106
                    self.or_replace_()


                self.state = 4109
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 4110
                self.func_name()
                self.state = 4111
                self.aggr_args()
                self.state = 4112
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4114
                self.match(PostgreSQLParser.CREATE)
                self.state = 4116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OR:
                    self.state = 4115
                    self.or_replace_()


                self.state = 4118
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 4119
                self.func_name()
                self.state = 4120
                self.old_aggr_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4122
                self.match(PostgreSQLParser.CREATE)
                self.state = 4123
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4124
                self.any_operator()
                self.state = 4125
                self.definition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4127
                self.match(PostgreSQLParser.CREATE)
                self.state = 4128
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4129
                self.any_name()
                self.state = 4130
                self.definition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4132
                self.match(PostgreSQLParser.CREATE)
                self.state = 4133
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4134
                self.any_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4135
                self.match(PostgreSQLParser.CREATE)
                self.state = 4136
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4137
                self.any_name()
                self.state = 4138
                self.match(PostgreSQLParser.AS)
                self.state = 4139
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 4140
                    self.opttablefuncelementlist()


                self.state = 4143
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4145
                self.match(PostgreSQLParser.CREATE)
                self.state = 4146
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4147
                self.any_name()
                self.state = 4148
                self.match(PostgreSQLParser.AS)
                self.state = 4149
                self.match(PostgreSQLParser.ENUM_P)
                self.state = 4150
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 563)) & ~0x3f) == 0 and ((1 << (_la - 563)) & ((1 << (PostgreSQLParser.StringConstant - 563)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 563)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 563)) | (1 << (PostgreSQLParser.EscapeStringConstant - 563)))) != 0):
                    self.state = 4151
                    self.enum_val_list_()


                self.state = 4154
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4156
                self.match(PostgreSQLParser.CREATE)
                self.state = 4157
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4158
                self.any_name()
                self.state = 4159
                self.match(PostgreSQLParser.AS)
                self.state = 4160
                self.match(PostgreSQLParser.RANGE)
                self.state = 4161
                self.definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4163
                self.match(PostgreSQLParser.CREATE)
                self.state = 4164
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4165
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4166
                self.match(PostgreSQLParser.PARSER)
                self.state = 4167
                self.any_name()
                self.state = 4168
                self.definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4170
                self.match(PostgreSQLParser.CREATE)
                self.state = 4171
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4172
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4173
                self.match(PostgreSQLParser.DICTIONARY)
                self.state = 4174
                self.any_name()
                self.state = 4175
                self.definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4177
                self.match(PostgreSQLParser.CREATE)
                self.state = 4178
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4179
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4180
                self.match(PostgreSQLParser.TEMPLATE)
                self.state = 4181
                self.any_name()
                self.state = 4182
                self.definition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4184
                self.match(PostgreSQLParser.CREATE)
                self.state = 4185
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4186
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4187
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 4188
                self.any_name()
                self.state = 4189
                self.definition()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4191
                self.match(PostgreSQLParser.CREATE)
                self.state = 4192
                self.match(PostgreSQLParser.COLLATION)
                self.state = 4193
                self.any_name()
                self.state = 4194
                self.definition()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4196
                self.match(PostgreSQLParser.CREATE)
                self.state = 4197
                self.match(PostgreSQLParser.COLLATION)
                self.state = 4198
                self.match(PostgreSQLParser.IF_P)
                self.state = 4199
                self.match(PostgreSQLParser.NOT)
                self.state = 4200
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4201
                self.any_name()
                self.state = 4202
                self.definition()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4204
                self.match(PostgreSQLParser.CREATE)
                self.state = 4205
                self.match(PostgreSQLParser.COLLATION)
                self.state = 4206
                self.any_name()
                self.state = 4207
                self.match(PostgreSQLParser.FROM)
                self.state = 4208
                self.any_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4210
                self.match(PostgreSQLParser.CREATE)
                self.state = 4211
                self.match(PostgreSQLParser.COLLATION)
                self.state = 4212
                self.match(PostgreSQLParser.IF_P)
                self.state = 4213
                self.match(PostgreSQLParser.NOT)
                self.state = 4214
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4215
                self.any_name()
                self.state = 4216
                self.match(PostgreSQLParser.FROM)
                self.state = 4217
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def def_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Def_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition" ):
                listener.enterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition" ):
                listener.exitDefinition(self)




    def definition(self):

        localctx = PostgreSQLParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4221
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 4222
            self.def_list()
            self.state = 4223
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Def_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Def_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_def_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_list" ):
                listener.enterDef_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_list" ):
                listener.exitDef_list(self)




    def def_list(self):

        localctx = PostgreSQLParser.Def_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_def_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4225
            self.def_elem()
            self.state = 4230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 4226
                self.match(PostgreSQLParser.COMMA)
                self.state = 4227
                self.def_elem()
                self.state = 4232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def def_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Def_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_def_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_elem" ):
                listener.enterDef_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_elem" ):
                listener.exitDef_elem(self)




    def def_elem(self):

        localctx = PostgreSQLParser.Def_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_def_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4233
            self.colLabel()
            self.state = 4236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.EQUAL:
                self.state = 4234
                self.match(PostgreSQLParser.EQUAL)
                self.state = 4235
                self.def_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reserved_keywordContext,0)


        def qual_all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_all_opContext,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_def_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_arg" ):
                listener.enterDef_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_arg" ):
                listener.exitDef_arg(self)




    def def_arg(self):

        localctx = PostgreSQLParser.Def_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_def_arg)
        try:
            self.state = 4244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4238
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4239
                self.reserved_keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4240
                self.qual_all_op()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4241
                self.numericonly()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4242
                self.sconst()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4243
                self.match(PostgreSQLParser.NONE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_aggr_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def old_aggr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Old_aggr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_old_aggr_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_aggr_definition" ):
                listener.enterOld_aggr_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_aggr_definition" ):
                listener.exitOld_aggr_definition(self)




    def old_aggr_definition(self):

        localctx = PostgreSQLParser.Old_aggr_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_old_aggr_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4246
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 4247
            self.old_aggr_list()
            self.state = 4248
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_aggr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_aggr_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Old_aggr_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Old_aggr_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_old_aggr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_aggr_list" ):
                listener.enterOld_aggr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_aggr_list" ):
                listener.exitOld_aggr_list(self)




    def old_aggr_list(self):

        localctx = PostgreSQLParser.Old_aggr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_old_aggr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4250
            self.old_aggr_elem()
            self.state = 4255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 4251
                self.match(PostgreSQLParser.COMMA)
                self.state = 4252
                self.old_aggr_elem()
                self.state = 4257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_aggr_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def def_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Def_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_old_aggr_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_aggr_elem" ):
                listener.enterOld_aggr_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_aggr_elem" ):
                listener.exitOld_aggr_elem(self)




    def old_aggr_elem(self):

        localctx = PostgreSQLParser.Old_aggr_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_old_aggr_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4258
            self.identifier()
            self.state = 4259
            self.match(PostgreSQLParser.EQUAL)
            self.state = 4260
            self.def_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_val_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_val_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Enum_val_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_enum_val_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_val_list_" ):
                listener.enterEnum_val_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_val_list_" ):
                listener.exitEnum_val_list_(self)




    def enum_val_list_(self):

        localctx = PostgreSQLParser.Enum_val_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_enum_val_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4262
            self.enum_val_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_val_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_enum_val_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_val_list" ):
                listener.enterEnum_val_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_val_list" ):
                listener.exitEnum_val_list(self)




    def enum_val_list(self):

        localctx = PostgreSQLParser.Enum_val_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_enum_val_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4264
            self.sconst()
            self.state = 4269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 4265
                self.match(PostgreSQLParser.COMMA)
                self.state = 4266
                self.sconst()
                self.state = 4271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterenumstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def if_not_exists_(self):
            return self.getTypedRuleContext(PostgreSQLParser.If_not_exists_Context,0)


        def BEFORE(self):
            return self.getToken(PostgreSQLParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def RENAME(self):
            return self.getToken(PostgreSQLParser.RENAME, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterenumstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterenumstmt" ):
                listener.enterAlterenumstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterenumstmt" ):
                listener.exitAlterenumstmt(self)




    def alterenumstmt(self):

        localctx = PostgreSQLParser.AlterenumstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_alterenumstmt)
        self._la = 0 # Token type
        try:
            self.state = 4315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4272
                self.match(PostgreSQLParser.ALTER)
                self.state = 4273
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4274
                self.any_name()
                self.state = 4275
                self.match(PostgreSQLParser.ADD_P)
                self.state = 4276
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 4278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.IF_P:
                    self.state = 4277
                    self.if_not_exists_()


                self.state = 4280
                self.sconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4282
                self.match(PostgreSQLParser.ALTER)
                self.state = 4283
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4284
                self.any_name()
                self.state = 4285
                self.match(PostgreSQLParser.ADD_P)
                self.state = 4286
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 4288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.IF_P:
                    self.state = 4287
                    self.if_not_exists_()


                self.state = 4290
                self.sconst()
                self.state = 4291
                self.match(PostgreSQLParser.BEFORE)
                self.state = 4292
                self.sconst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4294
                self.match(PostgreSQLParser.ALTER)
                self.state = 4295
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4296
                self.any_name()
                self.state = 4297
                self.match(PostgreSQLParser.ADD_P)
                self.state = 4298
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 4300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.IF_P:
                    self.state = 4299
                    self.if_not_exists_()


                self.state = 4302
                self.sconst()
                self.state = 4303
                self.match(PostgreSQLParser.AFTER)
                self.state = 4304
                self.sconst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4306
                self.match(PostgreSQLParser.ALTER)
                self.state = 4307
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4308
                self.any_name()
                self.state = 4309
                self.match(PostgreSQLParser.RENAME)
                self.state = 4310
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 4311
                self.sconst()
                self.state = 4312
                self.match(PostgreSQLParser.TO)
                self.state = 4313
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_not_exists_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_if_not_exists_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_not_exists_" ):
                listener.enterIf_not_exists_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_not_exists_" ):
                listener.exitIf_not_exists_(self)




    def if_not_exists_(self):

        localctx = PostgreSQLParser.If_not_exists_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_if_not_exists_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4317
            self.match(PostgreSQLParser.IF_P)
            self.state = 4318
            self.match(PostgreSQLParser.NOT)
            self.state = 4319
            self.match(PostgreSQLParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateopclassstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def opclass_item_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opclass_item_listContext,0)


        def default_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Default_Context,0)


        def opfamily_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opfamily_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createopclassstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateopclassstmt" ):
                listener.enterCreateopclassstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateopclassstmt" ):
                listener.exitCreateopclassstmt(self)




    def createopclassstmt(self):

        localctx = PostgreSQLParser.CreateopclassstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_createopclassstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4321
            self.match(PostgreSQLParser.CREATE)
            self.state = 4322
            self.match(PostgreSQLParser.OPERATOR)
            self.state = 4323
            self.match(PostgreSQLParser.CLASS)
            self.state = 4324
            self.any_name()
            self.state = 4326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.DEFAULT:
                self.state = 4325
                self.default_()


            self.state = 4328
            self.match(PostgreSQLParser.FOR)
            self.state = 4329
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 4330
            self.typename()
            self.state = 4331
            self.match(PostgreSQLParser.USING)
            self.state = 4332
            self.name()
            self.state = 4334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FAMILY:
                self.state = 4333
                self.opfamily_()


            self.state = 4336
            self.match(PostgreSQLParser.AS)
            self.state = 4337
            self.opclass_item_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_item_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opclass_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Opclass_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Opclass_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_item_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_item_list" ):
                listener.enterOpclass_item_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_item_list" ):
                listener.exitOpclass_item_list(self)




    def opclass_item_list(self):

        localctx = PostgreSQLParser.Opclass_item_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_opclass_item_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4339
            self.opclass_item()
            self.state = 4344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 4340
                self.match(PostgreSQLParser.COMMA)
                self.state = 4341
                self.opclass_item()
                self.state = 4346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def opclass_purpose(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opclass_purposeContext,0)


        def recheck_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Recheck_Context,0)


        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_item" ):
                listener.enterOpclass_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_item" ):
                listener.exitOpclass_item(self)




    def opclass_item(self):

        localctx = PostgreSQLParser.Opclass_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_opclass_item)
        self._la = 0 # Token type
        try:
            self.state = 4378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4347
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4348
                self.iconst()
                self.state = 4349
                self.any_operator()
                self.state = 4351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4350
                    self.opclass_purpose()


                self.state = 4354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.RECHECK:
                    self.state = 4353
                    self.recheck_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4356
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4357
                self.iconst()
                self.state = 4358
                self.operator_with_argtypes()
                self.state = 4360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4359
                    self.opclass_purpose()


                self.state = 4363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.RECHECK:
                    self.state = 4362
                    self.recheck_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4365
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4366
                self.iconst()
                self.state = 4367
                self.function_with_argtypes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4369
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4370
                self.iconst()
                self.state = 4371
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4372
                self.type_list()
                self.state = 4373
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 4374
                self.function_with_argtypes()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4376
                self.match(PostgreSQLParser.STORAGE)
                self.state = 4377
                self.typename()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_default_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_" ):
                listener.enterDefault_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_" ):
                listener.exitDefault_(self)




    def default_(self):

        localctx = PostgreSQLParser.Default_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_default_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4380
            self.match(PostgreSQLParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opfamily_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opfamily_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpfamily_" ):
                listener.enterOpfamily_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpfamily_" ):
                listener.exitOpfamily_(self)




    def opfamily_(self):

        localctx = PostgreSQLParser.Opfamily_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_opfamily_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4382
            self.match(PostgreSQLParser.FAMILY)
            self.state = 4383
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_purposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_purpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_purpose" ):
                listener.enterOpclass_purpose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_purpose" ):
                listener.exitOpclass_purpose(self)




    def opclass_purpose(self):

        localctx = PostgreSQLParser.Opclass_purposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_opclass_purpose)
        try:
            self.state = 4391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4385
                self.match(PostgreSQLParser.FOR)
                self.state = 4386
                self.match(PostgreSQLParser.SEARCH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4387
                self.match(PostgreSQLParser.FOR)
                self.state = 4388
                self.match(PostgreSQLParser.ORDER)
                self.state = 4389
                self.match(PostgreSQLParser.BY)
                self.state = 4390
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recheck_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECHECK(self):
            return self.getToken(PostgreSQLParser.RECHECK, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_recheck_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecheck_" ):
                listener.enterRecheck_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecheck_" ):
                listener.exitRecheck_(self)




    def recheck_(self):

        localctx = PostgreSQLParser.Recheck_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_recheck_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4393
            self.match(PostgreSQLParser.RECHECK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateopfamilystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createopfamilystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateopfamilystmt" ):
                listener.enterCreateopfamilystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateopfamilystmt" ):
                listener.exitCreateopfamilystmt(self)




    def createopfamilystmt(self):

        localctx = PostgreSQLParser.CreateopfamilystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_createopfamilystmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4395
            self.match(PostgreSQLParser.CREATE)
            self.state = 4396
            self.match(PostgreSQLParser.OPERATOR)
            self.state = 4397
            self.match(PostgreSQLParser.FAMILY)
            self.state = 4398
            self.any_name()
            self.state = 4399
            self.match(PostgreSQLParser.USING)
            self.state = 4400
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteropfamilystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def opclass_item_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opclass_item_listContext,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def opclass_drop_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opclass_drop_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alteropfamilystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteropfamilystmt" ):
                listener.enterAlteropfamilystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteropfamilystmt" ):
                listener.exitAlteropfamilystmt(self)




    def alteropfamilystmt(self):

        localctx = PostgreSQLParser.AlteropfamilystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_alteropfamilystmt)
        try:
            self.state = 4420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4402
                self.match(PostgreSQLParser.ALTER)
                self.state = 4403
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4404
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4405
                self.any_name()
                self.state = 4406
                self.match(PostgreSQLParser.USING)
                self.state = 4407
                self.name()
                self.state = 4408
                self.match(PostgreSQLParser.ADD_P)
                self.state = 4409
                self.opclass_item_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4411
                self.match(PostgreSQLParser.ALTER)
                self.state = 4412
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4413
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4414
                self.any_name()
                self.state = 4415
                self.match(PostgreSQLParser.USING)
                self.state = 4416
                self.name()
                self.state = 4417
                self.match(PostgreSQLParser.DROP)
                self.state = 4418
                self.opclass_drop_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_drop_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opclass_drop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Opclass_dropContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Opclass_dropContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_drop_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_drop_list" ):
                listener.enterOpclass_drop_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_drop_list" ):
                listener.exitOpclass_drop_list(self)




    def opclass_drop_list(self):

        localctx = PostgreSQLParser.Opclass_drop_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_opclass_drop_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4422
            self.opclass_drop()
            self.state = 4427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 4423
                self.match(PostgreSQLParser.COMMA)
                self.state = 4424
                self.opclass_drop()
                self.state = 4429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_dropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_drop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_drop" ):
                listener.enterOpclass_drop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_drop" ):
                listener.exitOpclass_drop(self)




    def opclass_drop(self):

        localctx = PostgreSQLParser.Opclass_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_opclass_drop)
        try:
            self.state = 4442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPERATOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4430
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4431
                self.iconst()
                self.state = 4432
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4433
                self.type_list()
                self.state = 4434
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.FUNCTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4436
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4437
                self.iconst()
                self.state = 4438
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4439
                self.type_list()
                self.state = 4440
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropopclassstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropopclassstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropopclassstmt" ):
                listener.enterDropopclassstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropopclassstmt" ):
                listener.exitDropopclassstmt(self)




    def dropopclassstmt(self):

        localctx = PostgreSQLParser.DropopclassstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_dropopclassstmt)
        self._la = 0 # Token type
        try:
            self.state = 4464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4444
                self.match(PostgreSQLParser.DROP)
                self.state = 4445
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4446
                self.match(PostgreSQLParser.CLASS)
                self.state = 4447
                self.any_name()
                self.state = 4448
                self.match(PostgreSQLParser.USING)
                self.state = 4449
                self.name()
                self.state = 4451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4450
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4453
                self.match(PostgreSQLParser.DROP)
                self.state = 4454
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4455
                self.match(PostgreSQLParser.CLASS)
                self.state = 4456
                self.match(PostgreSQLParser.IF_P)
                self.state = 4457
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4458
                self.any_name()
                self.state = 4459
                self.match(PostgreSQLParser.USING)
                self.state = 4460
                self.name()
                self.state = 4462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4461
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropopfamilystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropopfamilystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropopfamilystmt" ):
                listener.enterDropopfamilystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropopfamilystmt" ):
                listener.exitDropopfamilystmt(self)




    def dropopfamilystmt(self):

        localctx = PostgreSQLParser.DropopfamilystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_dropopfamilystmt)
        self._la = 0 # Token type
        try:
            self.state = 4486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4466
                self.match(PostgreSQLParser.DROP)
                self.state = 4467
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4468
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4469
                self.any_name()
                self.state = 4470
                self.match(PostgreSQLParser.USING)
                self.state = 4471
                self.name()
                self.state = 4473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4472
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4475
                self.match(PostgreSQLParser.DROP)
                self.state = 4476
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4477
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4478
                self.match(PostgreSQLParser.IF_P)
                self.state = 4479
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4480
                self.any_name()
                self.state = 4481
                self.match(PostgreSQLParser.USING)
                self.state = 4482
                self.name()
                self.state = 4484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4483
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropownedstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropownedstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropownedstmt" ):
                listener.enterDropownedstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropownedstmt" ):
                listener.exitDropownedstmt(self)




    def dropownedstmt(self):

        localctx = PostgreSQLParser.DropownedstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_dropownedstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4488
            self.match(PostgreSQLParser.DROP)
            self.state = 4489
            self.match(PostgreSQLParser.OWNED)
            self.state = 4490
            self.match(PostgreSQLParser.BY)
            self.state = 4491
            self.role_list()
            self.state = 4493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                self.state = 4492
                self.drop_behavior_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReassignownedstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REASSIGN(self):
            return self.getToken(PostgreSQLParser.REASSIGN, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reassignownedstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReassignownedstmt" ):
                listener.enterReassignownedstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReassignownedstmt" ):
                listener.exitReassignownedstmt(self)




    def reassignownedstmt(self):

        localctx = PostgreSQLParser.ReassignownedstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_reassignownedstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4495
            self.match(PostgreSQLParser.REASSIGN)
            self.state = 4496
            self.match(PostgreSQLParser.OWNED)
            self.state = 4497
            self.match(PostgreSQLParser.BY)
            self.state = 4498
            self.role_list()
            self.state = 4499
            self.match(PostgreSQLParser.TO)
            self.state = 4500
            self.rolespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def object_type_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_any_nameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def any_name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_name_list_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def drop_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_type_nameContext,0)


        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def object_type_name_on_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_name_on_any_nameContext,0)


        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def type_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_name_listContext,0)


        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def CONCURRENTLY(self):
            return self.getToken(PostgreSQLParser.CONCURRENTLY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropstmt" ):
                listener.enterDropstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropstmt" ):
                listener.exitDropstmt(self)




    def dropstmt(self):

        localctx = PostgreSQLParser.DropstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_dropstmt)
        self._la = 0 # Token type
        try:
            self.state = 4592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4502
                self.match(PostgreSQLParser.DROP)
                self.state = 4503
                self.object_type_any_name()
                self.state = 4504
                self.match(PostgreSQLParser.IF_P)
                self.state = 4505
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4506
                self.any_name_list_()
                self.state = 4508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4507
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4510
                self.match(PostgreSQLParser.DROP)
                self.state = 4511
                self.object_type_any_name()
                self.state = 4512
                self.any_name_list_()
                self.state = 4514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4513
                    self.drop_behavior_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4516
                self.match(PostgreSQLParser.DROP)
                self.state = 4517
                self.drop_type_name()
                self.state = 4518
                self.match(PostgreSQLParser.IF_P)
                self.state = 4519
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4520
                self.name_list()
                self.state = 4522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4521
                    self.drop_behavior_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4524
                self.match(PostgreSQLParser.DROP)
                self.state = 4525
                self.drop_type_name()
                self.state = 4526
                self.name_list()
                self.state = 4528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4527
                    self.drop_behavior_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4530
                self.match(PostgreSQLParser.DROP)
                self.state = 4531
                self.object_type_name_on_any_name()
                self.state = 4532
                self.name()
                self.state = 4533
                self.match(PostgreSQLParser.ON)
                self.state = 4534
                self.any_name()
                self.state = 4536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4535
                    self.drop_behavior_()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4538
                self.match(PostgreSQLParser.DROP)
                self.state = 4539
                self.object_type_name_on_any_name()
                self.state = 4540
                self.match(PostgreSQLParser.IF_P)
                self.state = 4541
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4542
                self.name()
                self.state = 4543
                self.match(PostgreSQLParser.ON)
                self.state = 4544
                self.any_name()
                self.state = 4546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4545
                    self.drop_behavior_()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4548
                self.match(PostgreSQLParser.DROP)
                self.state = 4549
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4550
                self.type_name_list()
                self.state = 4552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4551
                    self.drop_behavior_()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4554
                self.match(PostgreSQLParser.DROP)
                self.state = 4555
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4556
                self.match(PostgreSQLParser.IF_P)
                self.state = 4557
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4558
                self.type_name_list()
                self.state = 4560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4559
                    self.drop_behavior_()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4562
                self.match(PostgreSQLParser.DROP)
                self.state = 4563
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4564
                self.type_name_list()
                self.state = 4566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4565
                    self.drop_behavior_()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4568
                self.match(PostgreSQLParser.DROP)
                self.state = 4569
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4570
                self.match(PostgreSQLParser.IF_P)
                self.state = 4571
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4572
                self.type_name_list()
                self.state = 4574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4573
                    self.drop_behavior_()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4576
                self.match(PostgreSQLParser.DROP)
                self.state = 4577
                self.match(PostgreSQLParser.INDEX)
                self.state = 4578
                self.match(PostgreSQLParser.CONCURRENTLY)
                self.state = 4579
                self.any_name_list_()
                self.state = 4581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4580
                    self.drop_behavior_()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4583
                self.match(PostgreSQLParser.DROP)
                self.state = 4584
                self.match(PostgreSQLParser.INDEX)
                self.state = 4585
                self.match(PostgreSQLParser.CONCURRENTLY)
                self.state = 4586
                self.match(PostgreSQLParser.IF_P)
                self.state = 4587
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4588
                self.any_name_list_()
                self.state = 4590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 4589
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_object_type_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_any_name" ):
                listener.enterObject_type_any_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_any_name" ):
                listener.exitObject_type_any_name(self)




    def object_type_any_name(self):

        localctx = PostgreSQLParser.Object_type_any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_object_type_any_name)
        try:
            self.state = 4617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4594
                self.match(PostgreSQLParser.TABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4595
                self.match(PostgreSQLParser.SEQUENCE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4596
                self.match(PostgreSQLParser.VIEW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4597
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 4598
                self.match(PostgreSQLParser.VIEW)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4599
                self.match(PostgreSQLParser.INDEX)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4600
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 4601
                self.match(PostgreSQLParser.TABLE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4602
                self.match(PostgreSQLParser.COLLATION)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4603
                self.match(PostgreSQLParser.CONVERSION_P)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4604
                self.match(PostgreSQLParser.STATISTICS)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4605
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4606
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4607
                self.match(PostgreSQLParser.PARSER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4608
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4609
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4610
                self.match(PostgreSQLParser.DICTIONARY)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4611
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4612
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4613
                self.match(PostgreSQLParser.TEMPLATE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4614
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4615
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4616
                self.match(PostgreSQLParser.CONFIGURATION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_type_nameContext,0)


        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_object_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_name" ):
                listener.enterObject_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_name" ):
                listener.exitObject_type_name(self)




    def object_type_name(self):

        localctx = PostgreSQLParser.Object_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_object_type_name)
        try:
            self.state = 4624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.FOREIGN, PostgreSQLParser.ACCESS, PostgreSQLParser.EVENT, PostgreSQLParser.EXTENSION, PostgreSQLParser.LANGUAGE, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.SCHEMA, PostgreSQLParser.SERVER, PostgreSQLParser.PUBLICATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4619
                self.drop_type_name()
                pass
            elif token in [PostgreSQLParser.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4620
                self.match(PostgreSQLParser.DATABASE)
                pass
            elif token in [PostgreSQLParser.ROLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4621
                self.match(PostgreSQLParser.ROLE)
                pass
            elif token in [PostgreSQLParser.SUBSCRIPTION]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4622
                self.match(PostgreSQLParser.SUBSCRIPTION)
                pass
            elif token in [PostgreSQLParser.TABLESPACE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4623
                self.match(PostgreSQLParser.TABLESPACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def METHOD(self):
            return self.getToken(PostgreSQLParser.METHOD, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def procedural_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Procedural_Context,0)


        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_drop_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type_name" ):
                listener.enterDrop_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type_name" ):
                listener.exitDrop_type_name(self)




    def drop_type_name(self):

        localctx = PostgreSQLParser.Drop_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_drop_type_name)
        self._la = 0 # Token type
        try:
            self.state = 4641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ACCESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4626
                self.match(PostgreSQLParser.ACCESS)
                self.state = 4627
                self.match(PostgreSQLParser.METHOD)
                pass
            elif token in [PostgreSQLParser.EVENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4628
                self.match(PostgreSQLParser.EVENT)
                self.state = 4629
                self.match(PostgreSQLParser.TRIGGER)
                pass
            elif token in [PostgreSQLParser.EXTENSION]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4630
                self.match(PostgreSQLParser.EXTENSION)
                pass
            elif token in [PostgreSQLParser.FOREIGN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4631
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 4632
                self.match(PostgreSQLParser.DATA_P)
                self.state = 4633
                self.match(PostgreSQLParser.WRAPPER)
                pass
            elif token in [PostgreSQLParser.LANGUAGE, PostgreSQLParser.PROCEDURAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PROCEDURAL:
                    self.state = 4634
                    self.procedural_()


                self.state = 4637
                self.match(PostgreSQLParser.LANGUAGE)
                pass
            elif token in [PostgreSQLParser.PUBLICATION]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4638
                self.match(PostgreSQLParser.PUBLICATION)
                pass
            elif token in [PostgreSQLParser.SCHEMA]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4639
                self.match(PostgreSQLParser.SCHEMA)
                pass
            elif token in [PostgreSQLParser.SERVER]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4640
                self.match(PostgreSQLParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_name_on_any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_object_type_name_on_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_name_on_any_name" ):
                listener.enterObject_type_name_on_any_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_name_on_any_name" ):
                listener.exitObject_type_name_on_any_name(self)




    def object_type_name_on_any_name(self):

        localctx = PostgreSQLParser.Object_type_name_on_any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_object_type_name_on_any_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4643
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.RULE or _la==PostgreSQLParser.TRIGGER or _la==PostgreSQLParser.POLICY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_name_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_name_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name_list_" ):
                listener.enterAny_name_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name_list_" ):
                listener.exitAny_name_list_(self)




    def any_name_list_(self):

        localctx = PostgreSQLParser.Any_name_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_any_name_list_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4645
            self.any_name()
            self.state = 4650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 4646
                self.match(PostgreSQLParser.COMMA)
                self.state = 4647
                self.any_name()
                self.state = 4652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PostgreSQLParser.AttrsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = PostgreSQLParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_any_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4653
            self.colid()
            self.state = 4655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.state = 4654
                self.attrs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def attr_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Attr_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Attr_nameContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_attrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrs" ):
                listener.enterAttrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrs" ):
                listener.exitAttrs(self)




    def attrs(self):

        localctx = PostgreSQLParser.AttrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_attrs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4659 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4657
                    self.match(PostgreSQLParser.DOT)
                    self.state = 4658
                    self.attr_name()

                else:
                    raise NoViableAltException(self)
                self.state = 4661 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,375,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_list" ):
                listener.enterType_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_list" ):
                listener.exitType_name_list(self)




    def type_name_list(self):

        localctx = PostgreSQLParser.Type_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_type_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4663
            self.typename()
            self.state = 4668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 4664
                self.match(PostgreSQLParser.COMMA)
                self.state = 4665
                self.typename()
                self.state = 4670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncatestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def table_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_Context,0)


        def restart_seqs_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Restart_seqs_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_truncatestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncatestmt" ):
                listener.enterTruncatestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncatestmt" ):
                listener.exitTruncatestmt(self)




    def truncatestmt(self):

        localctx = PostgreSQLParser.TruncatestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_truncatestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4671
            self.match(PostgreSQLParser.TRUNCATE)
            self.state = 4673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.TABLE:
                self.state = 4672
                self.table_()


            self.state = 4675
            self.relation_expr_list()
            self.state = 4677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.CONTINUE_P or _la==PostgreSQLParser.RESTART:
                self.state = 4676
                self.restart_seqs_()


            self.state = 4680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                self.state = 4679
                self.drop_behavior_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restart_seqs_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE_P(self):
            return self.getToken(PostgreSQLParser.CONTINUE_P, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_restart_seqs_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestart_seqs_" ):
                listener.enterRestart_seqs_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestart_seqs_" ):
                listener.exitRestart_seqs_(self)




    def restart_seqs_(self):

        localctx = PostgreSQLParser.Restart_seqs_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_restart_seqs_)
        try:
            self.state = 4686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.CONTINUE_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4682
                self.match(PostgreSQLParser.CONTINUE_P)
                self.state = 4683
                self.match(PostgreSQLParser.IDENTITY_P)
                pass
            elif token in [PostgreSQLParser.RESTART]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4684
                self.match(PostgreSQLParser.RESTART)
                self.state = 4685
                self.match(PostgreSQLParser.IDENTITY_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(PostgreSQLParser.COMMENT, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ON)
            else:
                return self.getToken(PostgreSQLParser.ON, i)

        def object_type_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_any_nameContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def comment_text(self):
            return self.getTypedRuleContext(PostgreSQLParser.Comment_textContext,0)


        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def object_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_nameContext,0)


        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def object_type_name_on_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_name_on_any_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_commentstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentstmt" ):
                listener.enterCommentstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentstmt" ):
                listener.exitCommentstmt(self)




    def commentstmt(self):

        localctx = PostgreSQLParser.CommentstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_commentstmt)
        try:
            self.state = 4835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4688
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4689
                self.match(PostgreSQLParser.ON)
                self.state = 4690
                self.object_type_any_name()
                self.state = 4691
                self.any_name()
                self.state = 4692
                self.match(PostgreSQLParser.IS)
                self.state = 4693
                self.comment_text()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4695
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4696
                self.match(PostgreSQLParser.ON)
                self.state = 4697
                self.match(PostgreSQLParser.COLUMN)
                self.state = 4698
                self.any_name()
                self.state = 4699
                self.match(PostgreSQLParser.IS)
                self.state = 4700
                self.comment_text()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4702
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4703
                self.match(PostgreSQLParser.ON)
                self.state = 4704
                self.object_type_name()
                self.state = 4705
                self.name()
                self.state = 4706
                self.match(PostgreSQLParser.IS)
                self.state = 4707
                self.comment_text()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4709
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4710
                self.match(PostgreSQLParser.ON)
                self.state = 4711
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4712
                self.typename()
                self.state = 4713
                self.match(PostgreSQLParser.IS)
                self.state = 4714
                self.comment_text()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4716
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4717
                self.match(PostgreSQLParser.ON)
                self.state = 4718
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4719
                self.typename()
                self.state = 4720
                self.match(PostgreSQLParser.IS)
                self.state = 4721
                self.comment_text()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4723
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4724
                self.match(PostgreSQLParser.ON)
                self.state = 4725
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 4726
                self.aggregate_with_argtypes()
                self.state = 4727
                self.match(PostgreSQLParser.IS)
                self.state = 4728
                self.comment_text()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4730
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4731
                self.match(PostgreSQLParser.ON)
                self.state = 4732
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4733
                self.function_with_argtypes()
                self.state = 4734
                self.match(PostgreSQLParser.IS)
                self.state = 4735
                self.comment_text()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4737
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4738
                self.match(PostgreSQLParser.ON)
                self.state = 4739
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4740
                self.operator_with_argtypes()
                self.state = 4741
                self.match(PostgreSQLParser.IS)
                self.state = 4742
                self.comment_text()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4744
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4745
                self.match(PostgreSQLParser.ON)
                self.state = 4746
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 4747
                self.name()
                self.state = 4748
                self.match(PostgreSQLParser.ON)
                self.state = 4749
                self.any_name()
                self.state = 4750
                self.match(PostgreSQLParser.IS)
                self.state = 4751
                self.comment_text()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4753
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4754
                self.match(PostgreSQLParser.ON)
                self.state = 4755
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 4756
                self.name()
                self.state = 4757
                self.match(PostgreSQLParser.ON)
                self.state = 4758
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4759
                self.any_name()
                self.state = 4760
                self.match(PostgreSQLParser.IS)
                self.state = 4761
                self.comment_text()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4763
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4764
                self.match(PostgreSQLParser.ON)
                self.state = 4765
                self.object_type_name_on_any_name()
                self.state = 4766
                self.name()
                self.state = 4767
                self.match(PostgreSQLParser.ON)
                self.state = 4768
                self.any_name()
                self.state = 4769
                self.match(PostgreSQLParser.IS)
                self.state = 4770
                self.comment_text()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4772
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4773
                self.match(PostgreSQLParser.ON)
                self.state = 4774
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 4775
                self.function_with_argtypes()
                self.state = 4776
                self.match(PostgreSQLParser.IS)
                self.state = 4777
                self.comment_text()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4779
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4780
                self.match(PostgreSQLParser.ON)
                self.state = 4781
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 4782
                self.function_with_argtypes()
                self.state = 4783
                self.match(PostgreSQLParser.IS)
                self.state = 4784
                self.comment_text()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4786
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4787
                self.match(PostgreSQLParser.ON)
                self.state = 4788
                self.match(PostgreSQLParser.TRANSFORM)
                self.state = 4789
                self.match(PostgreSQLParser.FOR)
                self.state = 4790
                self.typename()
                self.state = 4791
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 4792
                self.name()
                self.state = 4793
                self.match(PostgreSQLParser.IS)
                self.state = 4794
                self.comment_text()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4796
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4797
                self.match(PostgreSQLParser.ON)
                self.state = 4798
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4799
                self.match(PostgreSQLParser.CLASS)
                self.state = 4800
                self.any_name()
                self.state = 4801
                self.match(PostgreSQLParser.USING)
                self.state = 4802
                self.name()
                self.state = 4803
                self.match(PostgreSQLParser.IS)
                self.state = 4804
                self.comment_text()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4806
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4807
                self.match(PostgreSQLParser.ON)
                self.state = 4808
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4809
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4810
                self.any_name()
                self.state = 4811
                self.match(PostgreSQLParser.USING)
                self.state = 4812
                self.name()
                self.state = 4813
                self.match(PostgreSQLParser.IS)
                self.state = 4814
                self.comment_text()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4816
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4817
                self.match(PostgreSQLParser.ON)
                self.state = 4818
                self.match(PostgreSQLParser.LARGE_P)
                self.state = 4819
                self.match(PostgreSQLParser.OBJECT_P)
                self.state = 4820
                self.numericonly()
                self.state = 4821
                self.match(PostgreSQLParser.IS)
                self.state = 4822
                self.comment_text()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 4824
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4825
                self.match(PostgreSQLParser.ON)
                self.state = 4826
                self.match(PostgreSQLParser.CAST)
                self.state = 4827
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4828
                self.typename()
                self.state = 4829
                self.match(PostgreSQLParser.AS)
                self.state = 4830
                self.typename()
                self.state = 4831
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 4832
                self.match(PostgreSQLParser.IS)
                self.state = 4833
                self.comment_text()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comment_textContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_comment_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_text" ):
                listener.enterComment_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_text" ):
                listener.exitComment_text(self)




    def comment_text(self):

        localctx = PostgreSQLParser.Comment_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_comment_text)
        try:
            self.state = 4839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4837
                self.sconst()
                pass
            elif token in [PostgreSQLParser.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4838
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeclabelstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def LABEL(self):
            return self.getToken(PostgreSQLParser.LABEL, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def object_type_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_any_nameContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def security_label(self):
            return self.getTypedRuleContext(PostgreSQLParser.Security_labelContext,0)


        def provider_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Provider_Context,0)


        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def object_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_nameContext,0)


        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_seclabelstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeclabelstmt" ):
                listener.enterSeclabelstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeclabelstmt" ):
                listener.exitSeclabelstmt(self)




    def seclabelstmt(self):

        localctx = PostgreSQLParser.SeclabelstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_seclabelstmt)
        self._la = 0 # Token type
        try:
            self.state = 4952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4841
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4842
                self.match(PostgreSQLParser.LABEL)
                self.state = 4844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4843
                    self.provider_()


                self.state = 4846
                self.match(PostgreSQLParser.ON)
                self.state = 4847
                self.object_type_any_name()
                self.state = 4848
                self.any_name()
                self.state = 4849
                self.match(PostgreSQLParser.IS)
                self.state = 4850
                self.security_label()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4852
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4853
                self.match(PostgreSQLParser.LABEL)
                self.state = 4855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4854
                    self.provider_()


                self.state = 4857
                self.match(PostgreSQLParser.ON)
                self.state = 4858
                self.match(PostgreSQLParser.COLUMN)
                self.state = 4859
                self.any_name()
                self.state = 4860
                self.match(PostgreSQLParser.IS)
                self.state = 4861
                self.security_label()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4863
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4864
                self.match(PostgreSQLParser.LABEL)
                self.state = 4866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4865
                    self.provider_()


                self.state = 4868
                self.match(PostgreSQLParser.ON)
                self.state = 4869
                self.object_type_name()
                self.state = 4870
                self.name()
                self.state = 4871
                self.match(PostgreSQLParser.IS)
                self.state = 4872
                self.security_label()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4874
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4875
                self.match(PostgreSQLParser.LABEL)
                self.state = 4877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4876
                    self.provider_()


                self.state = 4879
                self.match(PostgreSQLParser.ON)
                self.state = 4880
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4881
                self.typename()
                self.state = 4882
                self.match(PostgreSQLParser.IS)
                self.state = 4883
                self.security_label()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4885
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4886
                self.match(PostgreSQLParser.LABEL)
                self.state = 4888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4887
                    self.provider_()


                self.state = 4890
                self.match(PostgreSQLParser.ON)
                self.state = 4891
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4892
                self.typename()
                self.state = 4893
                self.match(PostgreSQLParser.IS)
                self.state = 4894
                self.security_label()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4896
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4897
                self.match(PostgreSQLParser.LABEL)
                self.state = 4899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4898
                    self.provider_()


                self.state = 4901
                self.match(PostgreSQLParser.ON)
                self.state = 4902
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 4903
                self.aggregate_with_argtypes()
                self.state = 4904
                self.match(PostgreSQLParser.IS)
                self.state = 4905
                self.security_label()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4907
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4908
                self.match(PostgreSQLParser.LABEL)
                self.state = 4910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4909
                    self.provider_()


                self.state = 4912
                self.match(PostgreSQLParser.ON)
                self.state = 4913
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4914
                self.function_with_argtypes()
                self.state = 4915
                self.match(PostgreSQLParser.IS)
                self.state = 4916
                self.security_label()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4918
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4919
                self.match(PostgreSQLParser.LABEL)
                self.state = 4921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4920
                    self.provider_()


                self.state = 4923
                self.match(PostgreSQLParser.ON)
                self.state = 4924
                self.match(PostgreSQLParser.LARGE_P)
                self.state = 4925
                self.match(PostgreSQLParser.OBJECT_P)
                self.state = 4926
                self.numericonly()
                self.state = 4927
                self.match(PostgreSQLParser.IS)
                self.state = 4928
                self.security_label()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4930
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4931
                self.match(PostgreSQLParser.LABEL)
                self.state = 4933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4932
                    self.provider_()


                self.state = 4935
                self.match(PostgreSQLParser.ON)
                self.state = 4936
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 4937
                self.function_with_argtypes()
                self.state = 4938
                self.match(PostgreSQLParser.IS)
                self.state = 4939
                self.security_label()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4941
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4942
                self.match(PostgreSQLParser.LABEL)
                self.state = 4944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FOR:
                    self.state = 4943
                    self.provider_()


                self.state = 4946
                self.match(PostgreSQLParser.ON)
                self.state = 4947
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 4948
                self.function_with_argtypes()
                self.state = 4949
                self.match(PostgreSQLParser.IS)
                self.state = 4950
                self.security_label()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provider_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_provider_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvider_" ):
                listener.enterProvider_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvider_" ):
                listener.exitProvider_(self)




    def provider_(self):

        localctx = PostgreSQLParser.Provider_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_provider_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4954
            self.match(PostgreSQLParser.FOR)
            self.state = 4955
            self.nonreservedword_or_sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_security_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_label" ):
                listener.enterSecurity_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_label" ):
                listener.exitSecurity_label(self)




    def security_label(self):

        localctx = PostgreSQLParser.Security_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_security_label)
        try:
            self.state = 4959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4957
                self.sconst()
                pass
            elif token in [PostgreSQLParser.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4958
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FetchstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(PostgreSQLParser.FETCH, 0)

        def fetch_args(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fetch_argsContext,0)


        def MOVE(self):
            return self.getToken(PostgreSQLParser.MOVE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fetchstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchstmt" ):
                listener.enterFetchstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchstmt" ):
                listener.exitFetchstmt(self)




    def fetchstmt(self):

        localctx = PostgreSQLParser.FetchstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_fetchstmt)
        try:
            self.state = 4965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.FETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4961
                self.match(PostgreSQLParser.FETCH)
                self.state = 4962
                self.fetch_args()
                pass
            elif token in [PostgreSQLParser.MOVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4963
                self.match(PostgreSQLParser.MOVE)
                self.state = 4964
                self.fetch_args()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cursor_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_nameContext,0)


        def from_in(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_inContext,0)


        def NEXT(self):
            return self.getToken(PostgreSQLParser.NEXT, 0)

        def from_in_(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_in_Context,0)


        def PRIOR(self):
            return self.getToken(PostgreSQLParser.PRIOR, 0)

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def LAST_P(self):
            return self.getToken(PostgreSQLParser.LAST_P, 0)

        def ABSOLUTE_P(self):
            return self.getToken(PostgreSQLParser.ABSOLUTE_P, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def RELATIVE_P(self):
            return self.getToken(PostgreSQLParser.RELATIVE_P, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def FORWARD(self):
            return self.getToken(PostgreSQLParser.FORWARD, 0)

        def BACKWARD(self):
            return self.getToken(PostgreSQLParser.BACKWARD, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fetch_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_args" ):
                listener.enterFetch_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_args" ):
                listener.exitFetch_args(self)




    def fetch_args(self):

        localctx = PostgreSQLParser.Fetch_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_fetch_args)
        self._la = 0 # Token type
        try:
            self.state = 5052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4967
                self.cursor_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4968
                self.from_in()
                self.state = 4969
                self.cursor_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4971
                self.match(PostgreSQLParser.NEXT)
                self.state = 4973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 4972
                    self.from_in_()


                self.state = 4975
                self.cursor_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4976
                self.match(PostgreSQLParser.PRIOR)
                self.state = 4978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 4977
                    self.from_in_()


                self.state = 4980
                self.cursor_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4981
                self.match(PostgreSQLParser.FIRST_P)
                self.state = 4983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 4982
                    self.from_in_()


                self.state = 4985
                self.cursor_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4986
                self.match(PostgreSQLParser.LAST_P)
                self.state = 4988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 4987
                    self.from_in_()


                self.state = 4990
                self.cursor_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4991
                self.match(PostgreSQLParser.ABSOLUTE_P)
                self.state = 4992
                self.signediconst()
                self.state = 4994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 4993
                    self.from_in_()


                self.state = 4996
                self.cursor_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4998
                self.match(PostgreSQLParser.RELATIVE_P)
                self.state = 4999
                self.signediconst()
                self.state = 5001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5000
                    self.from_in_()


                self.state = 5003
                self.cursor_name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5005
                self.signediconst()
                self.state = 5007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5006
                    self.from_in_()


                self.state = 5009
                self.cursor_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5011
                self.match(PostgreSQLParser.ALL)
                self.state = 5013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5012
                    self.from_in_()


                self.state = 5015
                self.cursor_name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5016
                self.match(PostgreSQLParser.FORWARD)
                self.state = 5018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5017
                    self.from_in_()


                self.state = 5020
                self.cursor_name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5021
                self.match(PostgreSQLParser.FORWARD)
                self.state = 5022
                self.signediconst()
                self.state = 5024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5023
                    self.from_in_()


                self.state = 5026
                self.cursor_name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5028
                self.match(PostgreSQLParser.FORWARD)
                self.state = 5029
                self.match(PostgreSQLParser.ALL)
                self.state = 5031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5030
                    self.from_in_()


                self.state = 5033
                self.cursor_name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5034
                self.match(PostgreSQLParser.BACKWARD)
                self.state = 5036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5035
                    self.from_in_()


                self.state = 5038
                self.cursor_name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5039
                self.match(PostgreSQLParser.BACKWARD)
                self.state = 5040
                self.signediconst()
                self.state = 5042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5041
                    self.from_in_()


                self.state = 5044
                self.cursor_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5046
                self.match(PostgreSQLParser.BACKWARD)
                self.state = 5047
                self.match(PostgreSQLParser.ALL)
                self.state = 5049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P:
                    self.state = 5048
                    self.from_in_()


                self.state = 5051
                self.cursor_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_from_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_in" ):
                listener.enterFrom_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_in" ):
                listener.exitFrom_in(self)




    def from_in(self):

        localctx = PostgreSQLParser.From_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_from_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5054
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FROM or _la==PostgreSQLParser.IN_P):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_in_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_in(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_inContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_from_in_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_in_" ):
                listener.enterFrom_in_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_in_" ):
                listener.exitFrom_in_(self)




    def from_in_(self):

        localctx = PostgreSQLParser.From_in_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_from_in_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5056
            self.from_in()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def privileges(self):
            return self.getTypedRuleContext(PostgreSQLParser.PrivilegesContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def privilege_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_targetContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grantee_listContext,0)


        def grant_grant_option_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grant_grant_option_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grantstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantstmt" ):
                listener.enterGrantstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantstmt" ):
                listener.exitGrantstmt(self)




    def grantstmt(self):

        localctx = PostgreSQLParser.GrantstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_grantstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5058
            self.match(PostgreSQLParser.GRANT)
            self.state = 5059
            self.privileges()
            self.state = 5060
            self.match(PostgreSQLParser.ON)
            self.state = 5061
            self.privilege_target()
            self.state = 5062
            self.match(PostgreSQLParser.TO)
            self.state = 5063
            self.grantee_list()
            self.state = 5065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 5064
                self.grant_grant_option_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def privileges(self):
            return self.getTypedRuleContext(PostgreSQLParser.PrivilegesContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def privilege_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_targetContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grantee_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_revokestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokestmt" ):
                listener.enterRevokestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokestmt" ):
                listener.exitRevokestmt(self)




    def revokestmt(self):

        localctx = PostgreSQLParser.RevokestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_revokestmt)
        self._la = 0 # Token type
        try:
            self.state = 5088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5067
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5068
                self.privileges()
                self.state = 5069
                self.match(PostgreSQLParser.ON)
                self.state = 5070
                self.privilege_target()
                self.state = 5071
                self.match(PostgreSQLParser.FROM)
                self.state = 5072
                self.grantee_list()
                self.state = 5074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5073
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5076
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5077
                self.match(PostgreSQLParser.GRANT)
                self.state = 5078
                self.match(PostgreSQLParser.OPTION)
                self.state = 5079
                self.match(PostgreSQLParser.FOR)
                self.state = 5080
                self.privileges()
                self.state = 5081
                self.match(PostgreSQLParser.ON)
                self.state = 5082
                self.privilege_target()
                self.state = 5083
                self.match(PostgreSQLParser.FROM)
                self.state = 5084
                self.grantee_list()
                self.state = 5086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5085
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_listContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(PostgreSQLParser.PRIVILEGES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_privileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivileges" ):
                listener.enterPrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivileges" ):
                listener.exitPrivileges(self)




    def privileges(self):

        localctx = PostgreSQLParser.PrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_privileges)
        try:
            self.state = 5105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5090
                self.privilege_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5091
                self.match(PostgreSQLParser.ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5092
                self.match(PostgreSQLParser.ALL)
                self.state = 5093
                self.match(PostgreSQLParser.PRIVILEGES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5094
                self.match(PostgreSQLParser.ALL)
                self.state = 5095
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5096
                self.columnlist()
                self.state = 5097
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5099
                self.match(PostgreSQLParser.ALL)
                self.state = 5100
                self.match(PostgreSQLParser.PRIVILEGES)
                self.state = 5101
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5102
                self.columnlist()
                self.state = 5103
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Privilege_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.PrivilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_privilege_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege_list" ):
                listener.enterPrivilege_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege_list" ):
                listener.exitPrivilege_list(self)




    def privilege_list(self):

        localctx = PostgreSQLParser.Privilege_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_privilege_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5107
            self.privilege()
            self.state = 5112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5108
                self.match(PostgreSQLParser.COMMA)
                self.state = 5109
                self.privilege()
                self.state = 5114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = PostgreSQLParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 5131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5115
                self.match(PostgreSQLParser.SELECT)
                self.state = 5117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 5116
                    self.column_list_()


                pass
            elif token in [PostgreSQLParser.REFERENCES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5119
                self.match(PostgreSQLParser.REFERENCES)
                self.state = 5121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 5120
                    self.column_list_()


                pass
            elif token in [PostgreSQLParser.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5123
                self.match(PostgreSQLParser.CREATE)
                self.state = 5125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 5124
                    self.column_list_()


                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5127
                self.colid()
                self.state = 5129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 5128
                    self.column_list_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Privilege_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_name_listContext,0)


        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypes_listContext,0)


        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def any_name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_name_list_Context,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def numericonly_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Numericonly_listContext,0)


        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def FUNCTIONS(self):
            return self.getToken(PostgreSQLParser.FUNCTIONS, 0)

        def PROCEDURES(self):
            return self.getToken(PostgreSQLParser.PROCEDURES, 0)

        def ROUTINES(self):
            return self.getToken(PostgreSQLParser.ROUTINES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_privilege_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege_target" ):
                listener.enterPrivilege_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege_target" ):
                listener.exitPrivilege_target(self)




    def privilege_target(self):

        localctx = PostgreSQLParser.Privilege_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_privilege_target)
        try:
            self.state = 5191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5133
                self.qualified_name_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5134
                self.match(PostgreSQLParser.TABLE)
                self.state = 5135
                self.qualified_name_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5136
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 5137
                self.qualified_name_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5138
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 5139
                self.match(PostgreSQLParser.DATA_P)
                self.state = 5140
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 5141
                self.name_list()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5142
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 5143
                self.match(PostgreSQLParser.SERVER)
                self.state = 5144
                self.name_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5145
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5146
                self.function_with_argtypes_list()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5147
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 5148
                self.function_with_argtypes_list()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5149
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 5150
                self.function_with_argtypes_list()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5151
                self.match(PostgreSQLParser.DATABASE)
                self.state = 5152
                self.name_list()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5153
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 5154
                self.any_name_list_()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5155
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 5156
                self.name_list()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5157
                self.match(PostgreSQLParser.LARGE_P)
                self.state = 5158
                self.match(PostgreSQLParser.OBJECT_P)
                self.state = 5159
                self.numericonly_list()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5160
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5161
                self.name_list()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5162
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 5163
                self.name_list()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5164
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 5165
                self.any_name_list_()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5166
                self.match(PostgreSQLParser.ALL)
                self.state = 5167
                self.match(PostgreSQLParser.TABLES)
                self.state = 5168
                self.match(PostgreSQLParser.IN_P)
                self.state = 5169
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5170
                self.name_list()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5171
                self.match(PostgreSQLParser.ALL)
                self.state = 5172
                self.match(PostgreSQLParser.SEQUENCES)
                self.state = 5173
                self.match(PostgreSQLParser.IN_P)
                self.state = 5174
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5175
                self.name_list()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5176
                self.match(PostgreSQLParser.ALL)
                self.state = 5177
                self.match(PostgreSQLParser.FUNCTIONS)
                self.state = 5178
                self.match(PostgreSQLParser.IN_P)
                self.state = 5179
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5180
                self.name_list()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5181
                self.match(PostgreSQLParser.ALL)
                self.state = 5182
                self.match(PostgreSQLParser.PROCEDURES)
                self.state = 5183
                self.match(PostgreSQLParser.IN_P)
                self.state = 5184
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5185
                self.name_list()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5186
                self.match(PostgreSQLParser.ALL)
                self.state = 5187
                self.match(PostgreSQLParser.ROUTINES)
                self.state = 5188
                self.match(PostgreSQLParser.IN_P)
                self.state = 5189
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5190
                self.name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grantee_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grantee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.GranteeContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.GranteeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grantee_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantee_list" ):
                listener.enterGrantee_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantee_list" ):
                listener.exitGrantee_list(self)




    def grantee_list(self):

        localctx = PostgreSQLParser.Grantee_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_grantee_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5193
            self.grantee()
            self.state = 5198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5194
                self.match(PostgreSQLParser.COMMA)
                self.state = 5195
                self.grantee()
                self.state = 5200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GranteeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grantee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantee" ):
                listener.enterGrantee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantee" ):
                listener.exitGrantee(self)




    def grantee(self):

        localctx = PostgreSQLParser.GranteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_grantee)
        try:
            self.state = 5204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.SESSION_USER, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5201
                self.rolespec()
                pass
            elif token in [PostgreSQLParser.GROUP_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5202
                self.match(PostgreSQLParser.GROUP_P)
                self.state = 5203
                self.rolespec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_grant_option_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grant_grant_option_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_grant_option_" ):
                listener.enterGrant_grant_option_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_grant_option_" ):
                listener.exitGrant_grant_option_(self)




    def grant_grant_option_(self):

        localctx = PostgreSQLParser.Grant_grant_option_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_grant_grant_option_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5206
            self.match(PostgreSQLParser.WITH)
            self.state = 5207
            self.match(PostgreSQLParser.GRANT)
            self.state = 5208
            self.match(PostgreSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantrolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def privilege_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_listContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def grant_admin_option_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grant_admin_option_Context,0)


        def granted_by_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Granted_by_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grantrolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantrolestmt" ):
                listener.enterGrantrolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantrolestmt" ):
                listener.exitGrantrolestmt(self)




    def grantrolestmt(self):

        localctx = PostgreSQLParser.GrantrolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_grantrolestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5210
            self.match(PostgreSQLParser.GRANT)
            self.state = 5211
            self.privilege_list()
            self.state = 5212
            self.match(PostgreSQLParser.TO)
            self.state = 5213
            self.role_list()
            self.state = 5215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 5214
                self.grant_admin_option_()


            self.state = 5218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.GRANTED:
                self.state = 5217
                self.granted_by_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokerolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def privilege_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_listContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def granted_by_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Granted_by_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_revokerolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokerolestmt" ):
                listener.enterRevokerolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokerolestmt" ):
                listener.exitRevokerolestmt(self)




    def revokerolestmt(self):

        localctx = PostgreSQLParser.RevokerolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_revokerolestmt)
        self._la = 0 # Token type
        try:
            self.state = 5243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5220
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5221
                self.privilege_list()
                self.state = 5222
                self.match(PostgreSQLParser.FROM)
                self.state = 5223
                self.role_list()
                self.state = 5225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.GRANTED:
                    self.state = 5224
                    self.granted_by_()


                self.state = 5228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5227
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5230
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5231
                self.match(PostgreSQLParser.ADMIN)
                self.state = 5232
                self.match(PostgreSQLParser.OPTION)
                self.state = 5233
                self.match(PostgreSQLParser.FOR)
                self.state = 5234
                self.privilege_list()
                self.state = 5235
                self.match(PostgreSQLParser.FROM)
                self.state = 5236
                self.role_list()
                self.state = 5238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.GRANTED:
                    self.state = 5237
                    self.granted_by_()


                self.state = 5241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5240
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_admin_option_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grant_admin_option_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_admin_option_" ):
                listener.enterGrant_admin_option_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_admin_option_" ):
                listener.exitGrant_admin_option_(self)




    def grant_admin_option_(self):

        localctx = PostgreSQLParser.Grant_admin_option_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_grant_admin_option_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5245
            self.match(PostgreSQLParser.WITH)
            self.state = 5246
            self.match(PostgreSQLParser.ADMIN)
            self.state = 5247
            self.match(PostgreSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Granted_by_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANTED(self):
            return self.getToken(PostgreSQLParser.GRANTED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_granted_by_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGranted_by_" ):
                listener.enterGranted_by_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGranted_by_" ):
                listener.exitGranted_by_(self)




    def granted_by_(self):

        localctx = PostgreSQLParser.Granted_by_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_granted_by_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5249
            self.match(PostgreSQLParser.GRANTED)
            self.state = 5250
            self.match(PostgreSQLParser.BY)
            self.state = 5251
            self.rolespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterdefaultprivilegesstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def PRIVILEGES(self):
            return self.getToken(PostgreSQLParser.PRIVILEGES, 0)

        def defacloptionlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefacloptionlistContext,0)


        def defaclaction(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefaclactionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterdefaultprivilegesstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterdefaultprivilegesstmt" ):
                listener.enterAlterdefaultprivilegesstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterdefaultprivilegesstmt" ):
                listener.exitAlterdefaultprivilegesstmt(self)




    def alterdefaultprivilegesstmt(self):

        localctx = PostgreSQLParser.AlterdefaultprivilegesstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_alterdefaultprivilegesstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5253
            self.match(PostgreSQLParser.ALTER)
            self.state = 5254
            self.match(PostgreSQLParser.DEFAULT)
            self.state = 5255
            self.match(PostgreSQLParser.PRIVILEGES)
            self.state = 5256
            self.defacloptionlist()
            self.state = 5257
            self.defaclaction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefacloptionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defacloption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.DefacloptionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.DefacloptionContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_defacloptionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefacloptionlist" ):
                listener.enterDefacloptionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefacloptionlist" ):
                listener.exitDefacloptionlist(self)




    def defacloptionlist(self):

        localctx = PostgreSQLParser.DefacloptionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_defacloptionlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.FOR or _la==PostgreSQLParser.IN_P:
                self.state = 5259
                self.defacloption()
                self.state = 5264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefacloptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_defacloption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefacloption" ):
                listener.enterDefacloption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefacloption" ):
                listener.exitDefacloption(self)




    def defacloption(self):

        localctx = PostgreSQLParser.DefacloptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_defacloption)
        try:
            self.state = 5274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5265
                self.match(PostgreSQLParser.IN_P)
                self.state = 5266
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5267
                self.name_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5268
                self.match(PostgreSQLParser.FOR)
                self.state = 5269
                self.match(PostgreSQLParser.ROLE)
                self.state = 5270
                self.role_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5271
                self.match(PostgreSQLParser.FOR)
                self.state = 5272
                self.match(PostgreSQLParser.USER)
                self.state = 5273
                self.role_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaclactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def privileges(self):
            return self.getTypedRuleContext(PostgreSQLParser.PrivilegesContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def defacl_privilege_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Defacl_privilege_targetContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grantee_listContext,0)


        def grant_grant_option_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grant_grant_option_Context,0)


        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_defaclaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaclaction" ):
                listener.enterDefaclaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaclaction" ):
                listener.exitDefaclaction(self)




    def defaclaction(self):

        localctx = PostgreSQLParser.DefaclactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_defaclaction)
        self._la = 0 # Token type
        try:
            self.state = 5306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5276
                self.match(PostgreSQLParser.GRANT)
                self.state = 5277
                self.privileges()
                self.state = 5278
                self.match(PostgreSQLParser.ON)
                self.state = 5279
                self.defacl_privilege_target()
                self.state = 5280
                self.match(PostgreSQLParser.TO)
                self.state = 5281
                self.grantee_list()
                self.state = 5283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 5282
                    self.grant_grant_option_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5285
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5286
                self.privileges()
                self.state = 5287
                self.match(PostgreSQLParser.ON)
                self.state = 5288
                self.defacl_privilege_target()
                self.state = 5289
                self.match(PostgreSQLParser.FROM)
                self.state = 5290
                self.grantee_list()
                self.state = 5292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5291
                    self.drop_behavior_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5294
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5295
                self.match(PostgreSQLParser.GRANT)
                self.state = 5296
                self.match(PostgreSQLParser.OPTION)
                self.state = 5297
                self.match(PostgreSQLParser.FOR)
                self.state = 5298
                self.privileges()
                self.state = 5299
                self.match(PostgreSQLParser.ON)
                self.state = 5300
                self.defacl_privilege_target()
                self.state = 5301
                self.match(PostgreSQLParser.FROM)
                self.state = 5302
                self.grantee_list()
                self.state = 5304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5303
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defacl_privilege_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def FUNCTIONS(self):
            return self.getToken(PostgreSQLParser.FUNCTIONS, 0)

        def ROUTINES(self):
            return self.getToken(PostgreSQLParser.ROUTINES, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def TYPES_P(self):
            return self.getToken(PostgreSQLParser.TYPES_P, 0)

        def SCHEMAS(self):
            return self.getToken(PostgreSQLParser.SCHEMAS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_defacl_privilege_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefacl_privilege_target" ):
                listener.enterDefacl_privilege_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefacl_privilege_target" ):
                listener.exitDefacl_privilege_target(self)




    def defacl_privilege_target(self):

        localctx = PostgreSQLParser.Defacl_privilege_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_defacl_privilege_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5308
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FUNCTIONS or ((((_la - 360)) & ~0x3f) == 0 and ((1 << (_la - 360)) & ((1 << (PostgreSQLParser.SEQUENCES - 360)) | (1 << (PostgreSQLParser.TABLES - 360)) | (1 << (PostgreSQLParser.TYPES_P - 360)))) != 0) or _la==PostgreSQLParser.ROUTINES or _la==PostgreSQLParser.SCHEMAS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def index_params(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_paramsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def unique_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unique_Context,0)


        def concurrently_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Concurrently_Context,0)


        def index_name_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_name_Context,0)


        def access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Access_method_clauseContext,0)


        def include_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Include_Context,0)


        def reloptions_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloptions_Context,0)


        def opttablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_indexstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexstmt" ):
                listener.enterIndexstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexstmt" ):
                listener.exitIndexstmt(self)




    def indexstmt(self):

        localctx = PostgreSQLParser.IndexstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_indexstmt)
        self._la = 0 # Token type
        try:
            self.state = 5373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5310
                self.match(PostgreSQLParser.CREATE)
                self.state = 5312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.UNIQUE:
                    self.state = 5311
                    self.unique_()


                self.state = 5314
                self.match(PostgreSQLParser.INDEX)
                self.state = 5316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CONCURRENTLY:
                    self.state = 5315
                    self.concurrently_()


                self.state = 5319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 5318
                    self.index_name_()


                self.state = 5321
                self.match(PostgreSQLParser.ON)
                self.state = 5322
                self.relation_expr()
                self.state = 5324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 5323
                    self.access_method_clause()


                self.state = 5326
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5327
                self.index_params()
                self.state = 5328
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INCLUDE:
                    self.state = 5329
                    self.include_()


                self.state = 5333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 5332
                    self.reloptions_()


                self.state = 5336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TABLESPACE:
                    self.state = 5335
                    self.opttablespace()


                self.state = 5339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 5338
                    self.where_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5341
                self.match(PostgreSQLParser.CREATE)
                self.state = 5343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.UNIQUE:
                    self.state = 5342
                    self.unique_()


                self.state = 5345
                self.match(PostgreSQLParser.INDEX)
                self.state = 5347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CONCURRENTLY:
                    self.state = 5346
                    self.concurrently_()


                self.state = 5349
                self.match(PostgreSQLParser.IF_P)
                self.state = 5350
                self.match(PostgreSQLParser.NOT)
                self.state = 5351
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5352
                self.name()
                self.state = 5353
                self.match(PostgreSQLParser.ON)
                self.state = 5354
                self.relation_expr()
                self.state = 5356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 5355
                    self.access_method_clause()


                self.state = 5358
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5359
                self.index_params()
                self.state = 5360
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INCLUDE:
                    self.state = 5361
                    self.include_()


                self.state = 5365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 5364
                    self.reloptions_()


                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TABLESPACE:
                    self.state = 5367
                    self.opttablespace()


                self.state = 5371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 5370
                    self.where_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unique_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_unique_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnique_" ):
                listener.enterUnique_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnique_" ):
                listener.exitUnique_(self)




    def unique_(self):

        localctx = PostgreSQLParser.Unique_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_unique_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5375
            self.match(PostgreSQLParser.UNIQUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_name_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_single_name_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_name_" ):
                listener.enterSingle_name_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_name_" ):
                listener.exitSingle_name_(self)




    def single_name_(self):

        localctx = PostgreSQLParser.Single_name_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_single_name_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5377
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concurrently_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCURRENTLY(self):
            return self.getToken(PostgreSQLParser.CONCURRENTLY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_concurrently_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcurrently_" ):
                listener.enterConcurrently_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcurrently_" ):
                listener.exitConcurrently_(self)




    def concurrently_(self):

        localctx = PostgreSQLParser.Concurrently_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_concurrently_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5379
            self.match(PostgreSQLParser.CONCURRENTLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_name_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_name_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name_" ):
                listener.enterIndex_name_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name_" ):
                listener.exitIndex_name_(self)




    def index_name_(self):

        localctx = PostgreSQLParser.Index_name_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_index_name_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5381
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_access_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_method_clause" ):
                listener.enterAccess_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_method_clause" ):
                listener.exitAccess_method_clause(self)




    def access_method_clause(self):

        localctx = PostgreSQLParser.Access_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_access_method_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5383
            self.match(PostgreSQLParser.USING)
            self.state = 5384
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_params" ):
                listener.enterIndex_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_params" ):
                listener.exitIndex_params(self)




    def index_params(self):

        localctx = PostgreSQLParser.Index_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_index_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5386
            self.index_elem()
            self.state = 5391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5387
                self.match(PostgreSQLParser.COMMA)
                self.state = 5388
                self.index_elem()
                self.state = 5393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_elem_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collate_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_Context,0)


        def class_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Class_Context,0)


        def asc_desc_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Asc_desc_Context,0)


        def nulls_order_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nulls_order_Context,0)


        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_elem_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_elem_options" ):
                listener.enterIndex_elem_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_elem_options" ):
                listener.exitIndex_elem_options(self)




    def index_elem_options(self):

        localctx = PostgreSQLParser.Index_elem_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_index_elem_options)
        self._la = 0 # Token type
        try:
            self.state = 5417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLLATE:
                    self.state = 5394
                    self.collate_()


                self.state = 5398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 5397
                    self.class_()


                self.state = 5401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC:
                    self.state = 5400
                    self.asc_desc_()


                self.state = 5404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NULLS_P:
                    self.state = 5403
                    self.nulls_order_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLLATE:
                    self.state = 5406
                    self.collate_()


                self.state = 5409
                self.any_name()
                self.state = 5410
                self.reloptions()
                self.state = 5412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC:
                    self.state = 5411
                    self.asc_desc_()


                self.state = 5415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NULLS_P:
                    self.state = 5414
                    self.nulls_order_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def index_elem_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_elem_optionsContext,0)


        def func_expr_windowless(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_windowlessContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_elem" ):
                listener.enterIndex_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_elem" ):
                listener.exitIndex_elem(self)




    def index_elem(self):

        localctx = PostgreSQLParser.Index_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_index_elem)
        try:
            self.state = 5430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5419
                self.colid()
                self.state = 5420
                self.index_elem_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5422
                self.func_expr_windowless()
                self.state = 5423
                self.index_elem_options()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5425
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5426
                self.a_expr()
                self.state = 5427
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5428
                self.index_elem_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(PostgreSQLParser.INCLUDE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def index_including_params(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_including_paramsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_include_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_" ):
                listener.enterInclude_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_" ):
                listener.exitInclude_(self)




    def include_(self):

        localctx = PostgreSQLParser.Include_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_include_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5432
            self.match(PostgreSQLParser.INCLUDE)
            self.state = 5433
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5434
            self.index_including_params()
            self.state = 5435
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_including_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_including_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_including_params" ):
                listener.enterIndex_including_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_including_params" ):
                listener.exitIndex_including_params(self)




    def index_including_params(self):

        localctx = PostgreSQLParser.Index_including_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_index_including_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5437
            self.index_elem()
            self.state = 5442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5438
                self.match(PostgreSQLParser.COMMA)
                self.state = 5439
                self.index_elem()
                self.state = 5444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collate_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_collate_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate_" ):
                listener.enterCollate_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate_" ):
                listener.exitCollate_(self)




    def collate_(self):

        localctx = PostgreSQLParser.Collate_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_collate_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5445
            self.match(PostgreSQLParser.COLLATE)
            self.state = 5446
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_class_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_" ):
                listener.enterClass_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_" ):
                listener.exitClass_(self)




    def class_(self):

        localctx = PostgreSQLParser.Class_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_class_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5448
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_desc_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_asc_desc_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc_" ):
                listener.enterAsc_desc_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc_" ):
                listener.exitAsc_desc_(self)




    def asc_desc_(self):

        localctx = PostgreSQLParser.Asc_desc_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_asc_desc_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5450
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nulls_order_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS_P(self):
            return self.getToken(PostgreSQLParser.NULLS_P, 0)

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def LAST_P(self):
            return self.getToken(PostgreSQLParser.LAST_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nulls_order_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNulls_order_" ):
                listener.enterNulls_order_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNulls_order_" ):
                listener.exitNulls_order_(self)




    def nulls_order_(self):

        localctx = PostgreSQLParser.Nulls_order_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_nulls_order_)
        try:
            self.state = 5456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5452
                self.match(PostgreSQLParser.NULLS_P)
                self.state = 5453
                self.match(PostgreSQLParser.FIRST_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5454
                self.match(PostgreSQLParser.NULLS_P)
                self.state = 5455
                self.match(PostgreSQLParser.LAST_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatefunctionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def func_args_with_defaults(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_args_with_defaultsContext,0)


        def createfunc_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createfunc_opt_listContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def RETURNS(self):
            return self.getToken(PostgreSQLParser.RETURNS, 0)

        def func_return(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_returnContext,0)


        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def table_func_column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_func_column_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createfunctionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatefunctionstmt" ):
                listener.enterCreatefunctionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatefunctionstmt" ):
                listener.exitCreatefunctionstmt(self)




    def createfunctionstmt(self):

        localctx = PostgreSQLParser.CreatefunctionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_createfunctionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5458
            self.match(PostgreSQLParser.CREATE)
            self.state = 5460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OR:
                self.state = 5459
                self.or_replace_()


            self.state = 5462
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FUNCTION or _la==PostgreSQLParser.PROCEDURE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5463
            self.func_name()
            self.state = 5464
            self.func_args_with_defaults()
            self.state = 5474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.state = 5465
                self.match(PostgreSQLParser.RETURNS)
                self.state = 5472
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.JSON, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.FLOAT_P, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NUMERIC, PostgreSQLParser.REAL, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.VARCHAR, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.COLUMNS, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                    self.state = 5466
                    self.func_return()
                    pass
                elif token in [PostgreSQLParser.TABLE]:
                    self.state = 5467
                    self.match(PostgreSQLParser.TABLE)
                    self.state = 5468
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 5469
                    self.table_func_column_list()
                    self.state = 5470
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 5476
            self.createfunc_opt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_replace_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(PostgreSQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_or_replace_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_replace_" ):
                listener.enterOr_replace_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_replace_" ):
                listener.exitOr_replace_(self)




    def or_replace_(self):

        localctx = PostgreSQLParser.Or_replace_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_or_replace_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5478
            self.match(PostgreSQLParser.OR)
            self.state = 5479
            self.match(PostgreSQLParser.REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def func_args_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_args_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_args" ):
                listener.enterFunc_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_args" ):
                listener.exitFunc_args(self)




    def func_args(self):

        localctx = PostgreSQLParser.Func_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_func_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5481
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.IN_P - 64)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.VARIADIC - 139)) | (1 << (PostgreSQLParser.AUTHORIZATION - 139)) | (1 << (PostgreSQLParser.BINARY - 139)) | (1 << (PostgreSQLParser.COLLATION - 139)) | (1 << (PostgreSQLParser.CONCURRENTLY - 139)) | (1 << (PostgreSQLParser.CROSS - 139)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 139)) | (1 << (PostgreSQLParser.FREEZE - 139)) | (1 << (PostgreSQLParser.FULL - 139)) | (1 << (PostgreSQLParser.ILIKE - 139)) | (1 << (PostgreSQLParser.INNER_P - 139)) | (1 << (PostgreSQLParser.IS - 139)) | (1 << (PostgreSQLParser.ISNULL - 139)) | (1 << (PostgreSQLParser.JOIN - 139)) | (1 << (PostgreSQLParser.LEFT - 139)) | (1 << (PostgreSQLParser.LIKE - 139)) | (1 << (PostgreSQLParser.NATURAL - 139)) | (1 << (PostgreSQLParser.NOTNULL - 139)) | (1 << (PostgreSQLParser.OUTER_P - 139)) | (1 << (PostgreSQLParser.OVER - 139)) | (1 << (PostgreSQLParser.OVERLAPS - 139)) | (1 << (PostgreSQLParser.RIGHT - 139)) | (1 << (PostgreSQLParser.SIMILAR - 139)) | (1 << (PostgreSQLParser.VERBOSE - 139)) | (1 << (PostgreSQLParser.ABORT_P - 139)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 139)) | (1 << (PostgreSQLParser.ACCESS - 139)) | (1 << (PostgreSQLParser.ACTION - 139)) | (1 << (PostgreSQLParser.ADD_P - 139)) | (1 << (PostgreSQLParser.ADMIN - 139)) | (1 << (PostgreSQLParser.AFTER - 139)) | (1 << (PostgreSQLParser.AGGREGATE - 139)) | (1 << (PostgreSQLParser.ALSO - 139)) | (1 << (PostgreSQLParser.ALTER - 139)) | (1 << (PostgreSQLParser.ALWAYS - 139)) | (1 << (PostgreSQLParser.ASSERTION - 139)) | (1 << (PostgreSQLParser.ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.AT - 139)) | (1 << (PostgreSQLParser.ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.BACKWARD - 139)) | (1 << (PostgreSQLParser.BEFORE - 139)) | (1 << (PostgreSQLParser.BEGIN_P - 139)) | (1 << (PostgreSQLParser.BY - 139)) | (1 << (PostgreSQLParser.CACHE - 139)) | (1 << (PostgreSQLParser.CALLED - 139)) | (1 << (PostgreSQLParser.CASCADE - 139)) | (1 << (PostgreSQLParser.CASCADED - 139)) | (1 << (PostgreSQLParser.CATALOG - 139)) | (1 << (PostgreSQLParser.CHAIN - 139)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.CHECKPOINT - 139)) | (1 << (PostgreSQLParser.CLASS - 139)) | (1 << (PostgreSQLParser.CLOSE - 139)) | (1 << (PostgreSQLParser.CLUSTER - 139)) | (1 << (PostgreSQLParser.COMMENT - 139)) | (1 << (PostgreSQLParser.COMMENTS - 139)) | (1 << (PostgreSQLParser.COMMIT - 139)) | (1 << (PostgreSQLParser.COMMITTED - 139)) | (1 << (PostgreSQLParser.CONFIGURATION - 139)) | (1 << (PostgreSQLParser.CONNECTION - 139)))) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.CONSTRAINTS - 203)) | (1 << (PostgreSQLParser.CONTENT_P - 203)) | (1 << (PostgreSQLParser.CONTINUE_P - 203)) | (1 << (PostgreSQLParser.CONVERSION_P - 203)) | (1 << (PostgreSQLParser.COPY - 203)) | (1 << (PostgreSQLParser.COST - 203)) | (1 << (PostgreSQLParser.CSV - 203)) | (1 << (PostgreSQLParser.CURSOR - 203)) | (1 << (PostgreSQLParser.CYCLE - 203)) | (1 << (PostgreSQLParser.DATA_P - 203)) | (1 << (PostgreSQLParser.DATABASE - 203)) | (1 << (PostgreSQLParser.DAY_P - 203)) | (1 << (PostgreSQLParser.DEALLOCATE - 203)) | (1 << (PostgreSQLParser.DECLARE - 203)) | (1 << (PostgreSQLParser.DEFAULTS - 203)) | (1 << (PostgreSQLParser.DEFERRED - 203)) | (1 << (PostgreSQLParser.DEFINER - 203)) | (1 << (PostgreSQLParser.DELETE_P - 203)) | (1 << (PostgreSQLParser.DELIMITER - 203)) | (1 << (PostgreSQLParser.DELIMITERS - 203)) | (1 << (PostgreSQLParser.DICTIONARY - 203)) | (1 << (PostgreSQLParser.DISABLE_P - 203)) | (1 << (PostgreSQLParser.DISCARD - 203)) | (1 << (PostgreSQLParser.DOCUMENT_P - 203)) | (1 << (PostgreSQLParser.DOMAIN_P - 203)) | (1 << (PostgreSQLParser.DOUBLE_P - 203)) | (1 << (PostgreSQLParser.DROP - 203)) | (1 << (PostgreSQLParser.EACH - 203)) | (1 << (PostgreSQLParser.ENABLE_P - 203)) | (1 << (PostgreSQLParser.ENCODING - 203)) | (1 << (PostgreSQLParser.ENCRYPTED - 203)) | (1 << (PostgreSQLParser.ENUM_P - 203)) | (1 << (PostgreSQLParser.ESCAPE - 203)) | (1 << (PostgreSQLParser.EVENT - 203)) | (1 << (PostgreSQLParser.EXCLUDE - 203)) | (1 << (PostgreSQLParser.EXCLUDING - 203)) | (1 << (PostgreSQLParser.EXCLUSIVE - 203)) | (1 << (PostgreSQLParser.EXECUTE - 203)) | (1 << (PostgreSQLParser.EXPLAIN - 203)) | (1 << (PostgreSQLParser.EXTENSION - 203)) | (1 << (PostgreSQLParser.EXTERNAL - 203)) | (1 << (PostgreSQLParser.FAMILY - 203)) | (1 << (PostgreSQLParser.FIRST_P - 203)) | (1 << (PostgreSQLParser.FOLLOWING - 203)) | (1 << (PostgreSQLParser.FORCE - 203)) | (1 << (PostgreSQLParser.FORWARD - 203)) | (1 << (PostgreSQLParser.FUNCTION - 203)) | (1 << (PostgreSQLParser.FUNCTIONS - 203)) | (1 << (PostgreSQLParser.GLOBAL - 203)) | (1 << (PostgreSQLParser.GRANTED - 203)) | (1 << (PostgreSQLParser.HANDLER - 203)) | (1 << (PostgreSQLParser.HEADER_P - 203)) | (1 << (PostgreSQLParser.HOLD - 203)) | (1 << (PostgreSQLParser.HOUR_P - 203)) | (1 << (PostgreSQLParser.IDENTITY_P - 203)) | (1 << (PostgreSQLParser.IF_P - 203)) | (1 << (PostgreSQLParser.IMMEDIATE - 203)) | (1 << (PostgreSQLParser.IMMUTABLE - 203)) | (1 << (PostgreSQLParser.IMPLICIT_P - 203)) | (1 << (PostgreSQLParser.INCLUDING - 203)) | (1 << (PostgreSQLParser.INCREMENT - 203)) | (1 << (PostgreSQLParser.INDEX - 203)) | (1 << (PostgreSQLParser.INDEXES - 203)) | (1 << (PostgreSQLParser.INHERIT - 203)))) != 0) or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (PostgreSQLParser.INHERITS - 267)) | (1 << (PostgreSQLParser.INLINE_P - 267)) | (1 << (PostgreSQLParser.INSENSITIVE - 267)) | (1 << (PostgreSQLParser.INSERT - 267)) | (1 << (PostgreSQLParser.INSTEAD - 267)) | (1 << (PostgreSQLParser.INVOKER - 267)) | (1 << (PostgreSQLParser.ISOLATION - 267)) | (1 << (PostgreSQLParser.KEY - 267)) | (1 << (PostgreSQLParser.LABEL - 267)) | (1 << (PostgreSQLParser.LANGUAGE - 267)) | (1 << (PostgreSQLParser.LARGE_P - 267)) | (1 << (PostgreSQLParser.LAST_P - 267)) | (1 << (PostgreSQLParser.LEAKPROOF - 267)) | (1 << (PostgreSQLParser.LEVEL - 267)) | (1 << (PostgreSQLParser.LISTEN - 267)) | (1 << (PostgreSQLParser.LOAD - 267)) | (1 << (PostgreSQLParser.LOCAL - 267)) | (1 << (PostgreSQLParser.LOCATION - 267)) | (1 << (PostgreSQLParser.LOCK_P - 267)) | (1 << (PostgreSQLParser.MAPPING - 267)) | (1 << (PostgreSQLParser.MATCH - 267)) | (1 << (PostgreSQLParser.MATCHED - 267)) | (1 << (PostgreSQLParser.MATERIALIZED - 267)) | (1 << (PostgreSQLParser.MAXVALUE - 267)) | (1 << (PostgreSQLParser.MERGE - 267)) | (1 << (PostgreSQLParser.MINUTE_P - 267)) | (1 << (PostgreSQLParser.MINVALUE - 267)) | (1 << (PostgreSQLParser.MODE - 267)) | (1 << (PostgreSQLParser.MONTH_P - 267)) | (1 << (PostgreSQLParser.MOVE - 267)) | (1 << (PostgreSQLParser.NAME_P - 267)) | (1 << (PostgreSQLParser.NAMES - 267)) | (1 << (PostgreSQLParser.NEXT - 267)) | (1 << (PostgreSQLParser.NO - 267)) | (1 << (PostgreSQLParser.NOTHING - 267)) | (1 << (PostgreSQLParser.NOTIFY - 267)) | (1 << (PostgreSQLParser.NOWAIT - 267)) | (1 << (PostgreSQLParser.NULLS_P - 267)) | (1 << (PostgreSQLParser.OBJECT_P - 267)) | (1 << (PostgreSQLParser.OF - 267)) | (1 << (PostgreSQLParser.OFF - 267)) | (1 << (PostgreSQLParser.OIDS - 267)) | (1 << (PostgreSQLParser.OPERATOR - 267)) | (1 << (PostgreSQLParser.OPTION - 267)) | (1 << (PostgreSQLParser.OPTIONS - 267)) | (1 << (PostgreSQLParser.OWNED - 267)) | (1 << (PostgreSQLParser.OWNER - 267)) | (1 << (PostgreSQLParser.PARSER - 267)) | (1 << (PostgreSQLParser.PARTIAL - 267)) | (1 << (PostgreSQLParser.PARTITION - 267)) | (1 << (PostgreSQLParser.PASSING - 267)) | (1 << (PostgreSQLParser.PASSWORD - 267)) | (1 << (PostgreSQLParser.PLANS - 267)) | (1 << (PostgreSQLParser.PRECEDING - 267)) | (1 << (PostgreSQLParser.PREPARE - 267)) | (1 << (PostgreSQLParser.PREPARED - 267)) | (1 << (PostgreSQLParser.PRESERVE - 267)) | (1 << (PostgreSQLParser.PRIOR - 267)) | (1 << (PostgreSQLParser.PRIVILEGES - 267)) | (1 << (PostgreSQLParser.PROCEDURAL - 267)) | (1 << (PostgreSQLParser.PROCEDURE - 267)) | (1 << (PostgreSQLParser.PROGRAM - 267)) | (1 << (PostgreSQLParser.QUOTE - 267)) | (1 << (PostgreSQLParser.RANGE - 267)))) != 0) or ((((_la - 331)) & ~0x3f) == 0 and ((1 << (_la - 331)) & ((1 << (PostgreSQLParser.READ - 331)) | (1 << (PostgreSQLParser.REASSIGN - 331)) | (1 << (PostgreSQLParser.RECURSIVE - 331)) | (1 << (PostgreSQLParser.REF - 331)) | (1 << (PostgreSQLParser.REFRESH - 331)) | (1 << (PostgreSQLParser.REINDEX - 331)) | (1 << (PostgreSQLParser.RELATIVE_P - 331)) | (1 << (PostgreSQLParser.RELEASE - 331)) | (1 << (PostgreSQLParser.RENAME - 331)) | (1 << (PostgreSQLParser.REPEATABLE - 331)) | (1 << (PostgreSQLParser.REPLACE - 331)) | (1 << (PostgreSQLParser.REPLICA - 331)) | (1 << (PostgreSQLParser.RESET - 331)) | (1 << (PostgreSQLParser.RESTART - 331)) | (1 << (PostgreSQLParser.RESTRICT - 331)) | (1 << (PostgreSQLParser.RETURNS - 331)) | (1 << (PostgreSQLParser.REVOKE - 331)) | (1 << (PostgreSQLParser.ROLE - 331)) | (1 << (PostgreSQLParser.ROLLBACK - 331)) | (1 << (PostgreSQLParser.ROWS - 331)) | (1 << (PostgreSQLParser.RULE - 331)) | (1 << (PostgreSQLParser.SAVEPOINT - 331)) | (1 << (PostgreSQLParser.SCHEMA - 331)) | (1 << (PostgreSQLParser.SCROLL - 331)) | (1 << (PostgreSQLParser.SEARCH - 331)) | (1 << (PostgreSQLParser.SECOND_P - 331)) | (1 << (PostgreSQLParser.SECURITY - 331)) | (1 << (PostgreSQLParser.SEQUENCE - 331)) | (1 << (PostgreSQLParser.SEQUENCES - 331)) | (1 << (PostgreSQLParser.SERIALIZABLE - 331)) | (1 << (PostgreSQLParser.SERVER - 331)) | (1 << (PostgreSQLParser.SESSION - 331)) | (1 << (PostgreSQLParser.SET - 331)) | (1 << (PostgreSQLParser.SHARE - 331)) | (1 << (PostgreSQLParser.SHOW - 331)) | (1 << (PostgreSQLParser.SIMPLE - 331)) | (1 << (PostgreSQLParser.SNAPSHOT - 331)) | (1 << (PostgreSQLParser.STABLE - 331)) | (1 << (PostgreSQLParser.STANDALONE_P - 331)) | (1 << (PostgreSQLParser.START - 331)) | (1 << (PostgreSQLParser.STATEMENT - 331)) | (1 << (PostgreSQLParser.STATISTICS - 331)) | (1 << (PostgreSQLParser.STDIN - 331)) | (1 << (PostgreSQLParser.STDOUT - 331)) | (1 << (PostgreSQLParser.STORAGE - 331)) | (1 << (PostgreSQLParser.STRICT_P - 331)) | (1 << (PostgreSQLParser.STRIP_P - 331)) | (1 << (PostgreSQLParser.SYSID - 331)) | (1 << (PostgreSQLParser.SYSTEM_P - 331)) | (1 << (PostgreSQLParser.TABLES - 331)) | (1 << (PostgreSQLParser.TABLESPACE - 331)) | (1 << (PostgreSQLParser.TEMP - 331)) | (1 << (PostgreSQLParser.TEMPLATE - 331)) | (1 << (PostgreSQLParser.TEMPORARY - 331)) | (1 << (PostgreSQLParser.TEXT_P - 331)) | (1 << (PostgreSQLParser.TRANSACTION - 331)) | (1 << (PostgreSQLParser.TRIGGER - 331)) | (1 << (PostgreSQLParser.TRUNCATE - 331)) | (1 << (PostgreSQLParser.TRUSTED - 331)) | (1 << (PostgreSQLParser.TYPE_P - 331)) | (1 << (PostgreSQLParser.TYPES_P - 331)) | (1 << (PostgreSQLParser.UNBOUNDED - 331)) | (1 << (PostgreSQLParser.UNCOMMITTED - 331)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (PostgreSQLParser.UNENCRYPTED - 395)) | (1 << (PostgreSQLParser.UNKNOWN - 395)) | (1 << (PostgreSQLParser.UNLISTEN - 395)) | (1 << (PostgreSQLParser.UNLOGGED - 395)) | (1 << (PostgreSQLParser.UNTIL - 395)) | (1 << (PostgreSQLParser.UPDATE - 395)) | (1 << (PostgreSQLParser.VACUUM - 395)) | (1 << (PostgreSQLParser.VALID - 395)) | (1 << (PostgreSQLParser.VALIDATE - 395)) | (1 << (PostgreSQLParser.VALIDATOR - 395)) | (1 << (PostgreSQLParser.VARYING - 395)) | (1 << (PostgreSQLParser.VERSION_P - 395)) | (1 << (PostgreSQLParser.VIEW - 395)) | (1 << (PostgreSQLParser.VOLATILE - 395)) | (1 << (PostgreSQLParser.WHITESPACE_P - 395)) | (1 << (PostgreSQLParser.WITHOUT - 395)) | (1 << (PostgreSQLParser.WORK - 395)) | (1 << (PostgreSQLParser.WRAPPER - 395)) | (1 << (PostgreSQLParser.WRITE - 395)) | (1 << (PostgreSQLParser.XML_P - 395)) | (1 << (PostgreSQLParser.YEAR_P - 395)) | (1 << (PostgreSQLParser.YES_P - 395)) | (1 << (PostgreSQLParser.ZONE - 395)) | (1 << (PostgreSQLParser.BIGINT - 395)) | (1 << (PostgreSQLParser.BIT - 395)) | (1 << (PostgreSQLParser.BOOLEAN_P - 395)) | (1 << (PostgreSQLParser.CHAR_P - 395)) | (1 << (PostgreSQLParser.CHARACTER - 395)) | (1 << (PostgreSQLParser.DEC - 395)) | (1 << (PostgreSQLParser.DECIMAL_P - 395)) | (1 << (PostgreSQLParser.FLOAT_P - 395)) | (1 << (PostgreSQLParser.INOUT - 395)) | (1 << (PostgreSQLParser.INT_P - 395)) | (1 << (PostgreSQLParser.INTEGER - 395)) | (1 << (PostgreSQLParser.INTERVAL - 395)) | (1 << (PostgreSQLParser.NATIONAL - 395)) | (1 << (PostgreSQLParser.NCHAR - 395)) | (1 << (PostgreSQLParser.NUMERIC - 395)) | (1 << (PostgreSQLParser.REAL - 395)) | (1 << (PostgreSQLParser.SETOF - 395)) | (1 << (PostgreSQLParser.SMALLINT - 395)) | (1 << (PostgreSQLParser.TIME - 395)) | (1 << (PostgreSQLParser.TIMESTAMP - 395)) | (1 << (PostgreSQLParser.VARCHAR - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (PostgreSQLParser.CALL - 471)) | (1 << (PostgreSQLParser.CURRENT_P - 471)) | (1 << (PostgreSQLParser.ATTACH - 471)) | (1 << (PostgreSQLParser.DETACH - 471)) | (1 << (PostgreSQLParser.EXPRESSION - 471)) | (1 << (PostgreSQLParser.GENERATED - 471)) | (1 << (PostgreSQLParser.LOGGED - 471)) | (1 << (PostgreSQLParser.STORED - 471)) | (1 << (PostgreSQLParser.INCLUDE - 471)) | (1 << (PostgreSQLParser.ROUTINE - 471)) | (1 << (PostgreSQLParser.TRANSFORM - 471)) | (1 << (PostgreSQLParser.IMPORT_P - 471)) | (1 << (PostgreSQLParser.POLICY - 471)) | (1 << (PostgreSQLParser.METHOD - 471)) | (1 << (PostgreSQLParser.REFERENCING - 471)) | (1 << (PostgreSQLParser.NEW - 471)) | (1 << (PostgreSQLParser.OLD - 471)) | (1 << (PostgreSQLParser.VALUE_P - 471)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 471)) | (1 << (PostgreSQLParser.PUBLICATION - 471)) | (1 << (PostgreSQLParser.OUT_P - 471)) | (1 << (PostgreSQLParser.ROUTINES - 471)) | (1 << (PostgreSQLParser.SCHEMAS - 471)) | (1 << (PostgreSQLParser.PROCEDURES - 471)) | (1 << (PostgreSQLParser.INPUT_P - 471)) | (1 << (PostgreSQLParser.SUPPORT - 471)) | (1 << (PostgreSQLParser.PARALLEL - 471)) | (1 << (PostgreSQLParser.SQL_P - 471)) | (1 << (PostgreSQLParser.DEPENDS - 471)) | (1 << (PostgreSQLParser.OVERRIDING - 471)) | (1 << (PostgreSQLParser.CONFLICT - 471)) | (1 << (PostgreSQLParser.SKIP_P - 471)) | (1 << (PostgreSQLParser.LOCKED - 471)) | (1 << (PostgreSQLParser.TIES - 471)) | (1 << (PostgreSQLParser.ROLLUP - 471)) | (1 << (PostgreSQLParser.CUBE - 471)) | (1 << (PostgreSQLParser.SETS - 471)) | (1 << (PostgreSQLParser.TABLESAMPLE - 471)) | (1 << (PostgreSQLParser.ORDINALITY - 471)) | (1 << (PostgreSQLParser.COLUMNS - 471)) | (1 << (PostgreSQLParser.NORMALIZED - 471)) | (1 << (PostgreSQLParser.WITHIN - 471)) | (1 << (PostgreSQLParser.FILTER - 471)) | (1 << (PostgreSQLParser.GROUPS - 471)) | (1 << (PostgreSQLParser.OTHERS - 471)) | (1 << (PostgreSQLParser.NFC - 471)) | (1 << (PostgreSQLParser.NFD - 471)) | (1 << (PostgreSQLParser.NFKC - 471)) | (1 << (PostgreSQLParser.NFKD - 471)) | (1 << (PostgreSQLParser.UESCAPE - 471)) | (1 << (PostgreSQLParser.VIEWS - 471)) | (1 << (PostgreSQLParser.ERROR - 471)))) != 0) or ((((_la - 542)) & ~0x3f) == 0 and ((1 << (_la - 542)) & ((1 << (PostgreSQLParser.RETURN - 542)) | (1 << (PostgreSQLParser.FORMAT - 542)) | (1 << (PostgreSQLParser.Identifier - 542)) | (1 << (PostgreSQLParser.QuotedIdentifier - 542)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 542)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 542)))) != 0):
                self.state = 5482
                self.func_args_list()


            self.state = 5485
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_args_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Func_argContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Func_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_args_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_args_list" ):
                listener.enterFunc_args_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_args_list" ):
                listener.exitFunc_args_list(self)




    def func_args_list(self):

        localctx = PostgreSQLParser.Func_args_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_func_args_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5487
            self.func_arg()
            self.state = 5492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5488
                self.match(PostgreSQLParser.COMMA)
                self.state = 5489
                self.func_arg()
                self.state = 5494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_with_argtypes_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_with_argtypes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Function_with_argtypesContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_with_argtypes_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_with_argtypes_list" ):
                listener.enterFunction_with_argtypes_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_with_argtypes_list" ):
                listener.exitFunction_with_argtypes_list(self)




    def function_with_argtypes_list(self):

        localctx = PostgreSQLParser.Function_with_argtypes_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_function_with_argtypes_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5495
            self.function_with_argtypes()
            self.state = 5500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5496
                self.match(PostgreSQLParser.COMMA)
                self.state = 5497
                self.function_with_argtypes()
                self.state = 5502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_with_argtypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def func_args(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_argsContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_func_name_keywordContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_with_argtypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_with_argtypes" ):
                listener.enterFunction_with_argtypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_with_argtypes" ):
                listener.exitFunction_with_argtypes(self)




    def function_with_argtypes(self):

        localctx = PostgreSQLParser.Function_with_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_function_with_argtypes)
        self._la = 0 # Token type
        try:
            self.state = 5511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5503
                self.func_name()
                self.state = 5504
                self.func_args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5506
                self.type_func_name_keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5507
                self.colid()
                self.state = 5509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_BRACKET or _la==PostgreSQLParser.DOT:
                    self.state = 5508
                    self.indirection()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_args_with_defaultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def func_args_with_defaults_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_args_with_defaults_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_args_with_defaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_args_with_defaults" ):
                listener.enterFunc_args_with_defaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_args_with_defaults" ):
                listener.exitFunc_args_with_defaults(self)




    def func_args_with_defaults(self):

        localctx = PostgreSQLParser.Func_args_with_defaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_func_args_with_defaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5513
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.IN_P - 64)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.VARIADIC - 139)) | (1 << (PostgreSQLParser.AUTHORIZATION - 139)) | (1 << (PostgreSQLParser.BINARY - 139)) | (1 << (PostgreSQLParser.COLLATION - 139)) | (1 << (PostgreSQLParser.CONCURRENTLY - 139)) | (1 << (PostgreSQLParser.CROSS - 139)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 139)) | (1 << (PostgreSQLParser.FREEZE - 139)) | (1 << (PostgreSQLParser.FULL - 139)) | (1 << (PostgreSQLParser.ILIKE - 139)) | (1 << (PostgreSQLParser.INNER_P - 139)) | (1 << (PostgreSQLParser.IS - 139)) | (1 << (PostgreSQLParser.ISNULL - 139)) | (1 << (PostgreSQLParser.JOIN - 139)) | (1 << (PostgreSQLParser.LEFT - 139)) | (1 << (PostgreSQLParser.LIKE - 139)) | (1 << (PostgreSQLParser.NATURAL - 139)) | (1 << (PostgreSQLParser.NOTNULL - 139)) | (1 << (PostgreSQLParser.OUTER_P - 139)) | (1 << (PostgreSQLParser.OVER - 139)) | (1 << (PostgreSQLParser.OVERLAPS - 139)) | (1 << (PostgreSQLParser.RIGHT - 139)) | (1 << (PostgreSQLParser.SIMILAR - 139)) | (1 << (PostgreSQLParser.VERBOSE - 139)) | (1 << (PostgreSQLParser.ABORT_P - 139)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 139)) | (1 << (PostgreSQLParser.ACCESS - 139)) | (1 << (PostgreSQLParser.ACTION - 139)) | (1 << (PostgreSQLParser.ADD_P - 139)) | (1 << (PostgreSQLParser.ADMIN - 139)) | (1 << (PostgreSQLParser.AFTER - 139)) | (1 << (PostgreSQLParser.AGGREGATE - 139)) | (1 << (PostgreSQLParser.ALSO - 139)) | (1 << (PostgreSQLParser.ALTER - 139)) | (1 << (PostgreSQLParser.ALWAYS - 139)) | (1 << (PostgreSQLParser.ASSERTION - 139)) | (1 << (PostgreSQLParser.ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.AT - 139)) | (1 << (PostgreSQLParser.ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.BACKWARD - 139)) | (1 << (PostgreSQLParser.BEFORE - 139)) | (1 << (PostgreSQLParser.BEGIN_P - 139)) | (1 << (PostgreSQLParser.BY - 139)) | (1 << (PostgreSQLParser.CACHE - 139)) | (1 << (PostgreSQLParser.CALLED - 139)) | (1 << (PostgreSQLParser.CASCADE - 139)) | (1 << (PostgreSQLParser.CASCADED - 139)) | (1 << (PostgreSQLParser.CATALOG - 139)) | (1 << (PostgreSQLParser.CHAIN - 139)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.CHECKPOINT - 139)) | (1 << (PostgreSQLParser.CLASS - 139)) | (1 << (PostgreSQLParser.CLOSE - 139)) | (1 << (PostgreSQLParser.CLUSTER - 139)) | (1 << (PostgreSQLParser.COMMENT - 139)) | (1 << (PostgreSQLParser.COMMENTS - 139)) | (1 << (PostgreSQLParser.COMMIT - 139)) | (1 << (PostgreSQLParser.COMMITTED - 139)) | (1 << (PostgreSQLParser.CONFIGURATION - 139)) | (1 << (PostgreSQLParser.CONNECTION - 139)))) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.CONSTRAINTS - 203)) | (1 << (PostgreSQLParser.CONTENT_P - 203)) | (1 << (PostgreSQLParser.CONTINUE_P - 203)) | (1 << (PostgreSQLParser.CONVERSION_P - 203)) | (1 << (PostgreSQLParser.COPY - 203)) | (1 << (PostgreSQLParser.COST - 203)) | (1 << (PostgreSQLParser.CSV - 203)) | (1 << (PostgreSQLParser.CURSOR - 203)) | (1 << (PostgreSQLParser.CYCLE - 203)) | (1 << (PostgreSQLParser.DATA_P - 203)) | (1 << (PostgreSQLParser.DATABASE - 203)) | (1 << (PostgreSQLParser.DAY_P - 203)) | (1 << (PostgreSQLParser.DEALLOCATE - 203)) | (1 << (PostgreSQLParser.DECLARE - 203)) | (1 << (PostgreSQLParser.DEFAULTS - 203)) | (1 << (PostgreSQLParser.DEFERRED - 203)) | (1 << (PostgreSQLParser.DEFINER - 203)) | (1 << (PostgreSQLParser.DELETE_P - 203)) | (1 << (PostgreSQLParser.DELIMITER - 203)) | (1 << (PostgreSQLParser.DELIMITERS - 203)) | (1 << (PostgreSQLParser.DICTIONARY - 203)) | (1 << (PostgreSQLParser.DISABLE_P - 203)) | (1 << (PostgreSQLParser.DISCARD - 203)) | (1 << (PostgreSQLParser.DOCUMENT_P - 203)) | (1 << (PostgreSQLParser.DOMAIN_P - 203)) | (1 << (PostgreSQLParser.DOUBLE_P - 203)) | (1 << (PostgreSQLParser.DROP - 203)) | (1 << (PostgreSQLParser.EACH - 203)) | (1 << (PostgreSQLParser.ENABLE_P - 203)) | (1 << (PostgreSQLParser.ENCODING - 203)) | (1 << (PostgreSQLParser.ENCRYPTED - 203)) | (1 << (PostgreSQLParser.ENUM_P - 203)) | (1 << (PostgreSQLParser.ESCAPE - 203)) | (1 << (PostgreSQLParser.EVENT - 203)) | (1 << (PostgreSQLParser.EXCLUDE - 203)) | (1 << (PostgreSQLParser.EXCLUDING - 203)) | (1 << (PostgreSQLParser.EXCLUSIVE - 203)) | (1 << (PostgreSQLParser.EXECUTE - 203)) | (1 << (PostgreSQLParser.EXPLAIN - 203)) | (1 << (PostgreSQLParser.EXTENSION - 203)) | (1 << (PostgreSQLParser.EXTERNAL - 203)) | (1 << (PostgreSQLParser.FAMILY - 203)) | (1 << (PostgreSQLParser.FIRST_P - 203)) | (1 << (PostgreSQLParser.FOLLOWING - 203)) | (1 << (PostgreSQLParser.FORCE - 203)) | (1 << (PostgreSQLParser.FORWARD - 203)) | (1 << (PostgreSQLParser.FUNCTION - 203)) | (1 << (PostgreSQLParser.FUNCTIONS - 203)) | (1 << (PostgreSQLParser.GLOBAL - 203)) | (1 << (PostgreSQLParser.GRANTED - 203)) | (1 << (PostgreSQLParser.HANDLER - 203)) | (1 << (PostgreSQLParser.HEADER_P - 203)) | (1 << (PostgreSQLParser.HOLD - 203)) | (1 << (PostgreSQLParser.HOUR_P - 203)) | (1 << (PostgreSQLParser.IDENTITY_P - 203)) | (1 << (PostgreSQLParser.IF_P - 203)) | (1 << (PostgreSQLParser.IMMEDIATE - 203)) | (1 << (PostgreSQLParser.IMMUTABLE - 203)) | (1 << (PostgreSQLParser.IMPLICIT_P - 203)) | (1 << (PostgreSQLParser.INCLUDING - 203)) | (1 << (PostgreSQLParser.INCREMENT - 203)) | (1 << (PostgreSQLParser.INDEX - 203)) | (1 << (PostgreSQLParser.INDEXES - 203)) | (1 << (PostgreSQLParser.INHERIT - 203)))) != 0) or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & ((1 << (PostgreSQLParser.INHERITS - 267)) | (1 << (PostgreSQLParser.INLINE_P - 267)) | (1 << (PostgreSQLParser.INSENSITIVE - 267)) | (1 << (PostgreSQLParser.INSERT - 267)) | (1 << (PostgreSQLParser.INSTEAD - 267)) | (1 << (PostgreSQLParser.INVOKER - 267)) | (1 << (PostgreSQLParser.ISOLATION - 267)) | (1 << (PostgreSQLParser.KEY - 267)) | (1 << (PostgreSQLParser.LABEL - 267)) | (1 << (PostgreSQLParser.LANGUAGE - 267)) | (1 << (PostgreSQLParser.LARGE_P - 267)) | (1 << (PostgreSQLParser.LAST_P - 267)) | (1 << (PostgreSQLParser.LEAKPROOF - 267)) | (1 << (PostgreSQLParser.LEVEL - 267)) | (1 << (PostgreSQLParser.LISTEN - 267)) | (1 << (PostgreSQLParser.LOAD - 267)) | (1 << (PostgreSQLParser.LOCAL - 267)) | (1 << (PostgreSQLParser.LOCATION - 267)) | (1 << (PostgreSQLParser.LOCK_P - 267)) | (1 << (PostgreSQLParser.MAPPING - 267)) | (1 << (PostgreSQLParser.MATCH - 267)) | (1 << (PostgreSQLParser.MATCHED - 267)) | (1 << (PostgreSQLParser.MATERIALIZED - 267)) | (1 << (PostgreSQLParser.MAXVALUE - 267)) | (1 << (PostgreSQLParser.MERGE - 267)) | (1 << (PostgreSQLParser.MINUTE_P - 267)) | (1 << (PostgreSQLParser.MINVALUE - 267)) | (1 << (PostgreSQLParser.MODE - 267)) | (1 << (PostgreSQLParser.MONTH_P - 267)) | (1 << (PostgreSQLParser.MOVE - 267)) | (1 << (PostgreSQLParser.NAME_P - 267)) | (1 << (PostgreSQLParser.NAMES - 267)) | (1 << (PostgreSQLParser.NEXT - 267)) | (1 << (PostgreSQLParser.NO - 267)) | (1 << (PostgreSQLParser.NOTHING - 267)) | (1 << (PostgreSQLParser.NOTIFY - 267)) | (1 << (PostgreSQLParser.NOWAIT - 267)) | (1 << (PostgreSQLParser.NULLS_P - 267)) | (1 << (PostgreSQLParser.OBJECT_P - 267)) | (1 << (PostgreSQLParser.OF - 267)) | (1 << (PostgreSQLParser.OFF - 267)) | (1 << (PostgreSQLParser.OIDS - 267)) | (1 << (PostgreSQLParser.OPERATOR - 267)) | (1 << (PostgreSQLParser.OPTION - 267)) | (1 << (PostgreSQLParser.OPTIONS - 267)) | (1 << (PostgreSQLParser.OWNED - 267)) | (1 << (PostgreSQLParser.OWNER - 267)) | (1 << (PostgreSQLParser.PARSER - 267)) | (1 << (PostgreSQLParser.PARTIAL - 267)) | (1 << (PostgreSQLParser.PARTITION - 267)) | (1 << (PostgreSQLParser.PASSING - 267)) | (1 << (PostgreSQLParser.PASSWORD - 267)) | (1 << (PostgreSQLParser.PLANS - 267)) | (1 << (PostgreSQLParser.PRECEDING - 267)) | (1 << (PostgreSQLParser.PREPARE - 267)) | (1 << (PostgreSQLParser.PREPARED - 267)) | (1 << (PostgreSQLParser.PRESERVE - 267)) | (1 << (PostgreSQLParser.PRIOR - 267)) | (1 << (PostgreSQLParser.PRIVILEGES - 267)) | (1 << (PostgreSQLParser.PROCEDURAL - 267)) | (1 << (PostgreSQLParser.PROCEDURE - 267)) | (1 << (PostgreSQLParser.PROGRAM - 267)) | (1 << (PostgreSQLParser.QUOTE - 267)) | (1 << (PostgreSQLParser.RANGE - 267)))) != 0) or ((((_la - 331)) & ~0x3f) == 0 and ((1 << (_la - 331)) & ((1 << (PostgreSQLParser.READ - 331)) | (1 << (PostgreSQLParser.REASSIGN - 331)) | (1 << (PostgreSQLParser.RECURSIVE - 331)) | (1 << (PostgreSQLParser.REF - 331)) | (1 << (PostgreSQLParser.REFRESH - 331)) | (1 << (PostgreSQLParser.REINDEX - 331)) | (1 << (PostgreSQLParser.RELATIVE_P - 331)) | (1 << (PostgreSQLParser.RELEASE - 331)) | (1 << (PostgreSQLParser.RENAME - 331)) | (1 << (PostgreSQLParser.REPEATABLE - 331)) | (1 << (PostgreSQLParser.REPLACE - 331)) | (1 << (PostgreSQLParser.REPLICA - 331)) | (1 << (PostgreSQLParser.RESET - 331)) | (1 << (PostgreSQLParser.RESTART - 331)) | (1 << (PostgreSQLParser.RESTRICT - 331)) | (1 << (PostgreSQLParser.RETURNS - 331)) | (1 << (PostgreSQLParser.REVOKE - 331)) | (1 << (PostgreSQLParser.ROLE - 331)) | (1 << (PostgreSQLParser.ROLLBACK - 331)) | (1 << (PostgreSQLParser.ROWS - 331)) | (1 << (PostgreSQLParser.RULE - 331)) | (1 << (PostgreSQLParser.SAVEPOINT - 331)) | (1 << (PostgreSQLParser.SCHEMA - 331)) | (1 << (PostgreSQLParser.SCROLL - 331)) | (1 << (PostgreSQLParser.SEARCH - 331)) | (1 << (PostgreSQLParser.SECOND_P - 331)) | (1 << (PostgreSQLParser.SECURITY - 331)) | (1 << (PostgreSQLParser.SEQUENCE - 331)) | (1 << (PostgreSQLParser.SEQUENCES - 331)) | (1 << (PostgreSQLParser.SERIALIZABLE - 331)) | (1 << (PostgreSQLParser.SERVER - 331)) | (1 << (PostgreSQLParser.SESSION - 331)) | (1 << (PostgreSQLParser.SET - 331)) | (1 << (PostgreSQLParser.SHARE - 331)) | (1 << (PostgreSQLParser.SHOW - 331)) | (1 << (PostgreSQLParser.SIMPLE - 331)) | (1 << (PostgreSQLParser.SNAPSHOT - 331)) | (1 << (PostgreSQLParser.STABLE - 331)) | (1 << (PostgreSQLParser.STANDALONE_P - 331)) | (1 << (PostgreSQLParser.START - 331)) | (1 << (PostgreSQLParser.STATEMENT - 331)) | (1 << (PostgreSQLParser.STATISTICS - 331)) | (1 << (PostgreSQLParser.STDIN - 331)) | (1 << (PostgreSQLParser.STDOUT - 331)) | (1 << (PostgreSQLParser.STORAGE - 331)) | (1 << (PostgreSQLParser.STRICT_P - 331)) | (1 << (PostgreSQLParser.STRIP_P - 331)) | (1 << (PostgreSQLParser.SYSID - 331)) | (1 << (PostgreSQLParser.SYSTEM_P - 331)) | (1 << (PostgreSQLParser.TABLES - 331)) | (1 << (PostgreSQLParser.TABLESPACE - 331)) | (1 << (PostgreSQLParser.TEMP - 331)) | (1 << (PostgreSQLParser.TEMPLATE - 331)) | (1 << (PostgreSQLParser.TEMPORARY - 331)) | (1 << (PostgreSQLParser.TEXT_P - 331)) | (1 << (PostgreSQLParser.TRANSACTION - 331)) | (1 << (PostgreSQLParser.TRIGGER - 331)) | (1 << (PostgreSQLParser.TRUNCATE - 331)) | (1 << (PostgreSQLParser.TRUSTED - 331)) | (1 << (PostgreSQLParser.TYPE_P - 331)) | (1 << (PostgreSQLParser.TYPES_P - 331)) | (1 << (PostgreSQLParser.UNBOUNDED - 331)) | (1 << (PostgreSQLParser.UNCOMMITTED - 331)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (PostgreSQLParser.UNENCRYPTED - 395)) | (1 << (PostgreSQLParser.UNKNOWN - 395)) | (1 << (PostgreSQLParser.UNLISTEN - 395)) | (1 << (PostgreSQLParser.UNLOGGED - 395)) | (1 << (PostgreSQLParser.UNTIL - 395)) | (1 << (PostgreSQLParser.UPDATE - 395)) | (1 << (PostgreSQLParser.VACUUM - 395)) | (1 << (PostgreSQLParser.VALID - 395)) | (1 << (PostgreSQLParser.VALIDATE - 395)) | (1 << (PostgreSQLParser.VALIDATOR - 395)) | (1 << (PostgreSQLParser.VARYING - 395)) | (1 << (PostgreSQLParser.VERSION_P - 395)) | (1 << (PostgreSQLParser.VIEW - 395)) | (1 << (PostgreSQLParser.VOLATILE - 395)) | (1 << (PostgreSQLParser.WHITESPACE_P - 395)) | (1 << (PostgreSQLParser.WITHOUT - 395)) | (1 << (PostgreSQLParser.WORK - 395)) | (1 << (PostgreSQLParser.WRAPPER - 395)) | (1 << (PostgreSQLParser.WRITE - 395)) | (1 << (PostgreSQLParser.XML_P - 395)) | (1 << (PostgreSQLParser.YEAR_P - 395)) | (1 << (PostgreSQLParser.YES_P - 395)) | (1 << (PostgreSQLParser.ZONE - 395)) | (1 << (PostgreSQLParser.BIGINT - 395)) | (1 << (PostgreSQLParser.BIT - 395)) | (1 << (PostgreSQLParser.BOOLEAN_P - 395)) | (1 << (PostgreSQLParser.CHAR_P - 395)) | (1 << (PostgreSQLParser.CHARACTER - 395)) | (1 << (PostgreSQLParser.DEC - 395)) | (1 << (PostgreSQLParser.DECIMAL_P - 395)) | (1 << (PostgreSQLParser.FLOAT_P - 395)) | (1 << (PostgreSQLParser.INOUT - 395)) | (1 << (PostgreSQLParser.INT_P - 395)) | (1 << (PostgreSQLParser.INTEGER - 395)) | (1 << (PostgreSQLParser.INTERVAL - 395)) | (1 << (PostgreSQLParser.NATIONAL - 395)) | (1 << (PostgreSQLParser.NCHAR - 395)) | (1 << (PostgreSQLParser.NUMERIC - 395)) | (1 << (PostgreSQLParser.REAL - 395)) | (1 << (PostgreSQLParser.SETOF - 395)) | (1 << (PostgreSQLParser.SMALLINT - 395)) | (1 << (PostgreSQLParser.TIME - 395)) | (1 << (PostgreSQLParser.TIMESTAMP - 395)) | (1 << (PostgreSQLParser.VARCHAR - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (PostgreSQLParser.CALL - 471)) | (1 << (PostgreSQLParser.CURRENT_P - 471)) | (1 << (PostgreSQLParser.ATTACH - 471)) | (1 << (PostgreSQLParser.DETACH - 471)) | (1 << (PostgreSQLParser.EXPRESSION - 471)) | (1 << (PostgreSQLParser.GENERATED - 471)) | (1 << (PostgreSQLParser.LOGGED - 471)) | (1 << (PostgreSQLParser.STORED - 471)) | (1 << (PostgreSQLParser.INCLUDE - 471)) | (1 << (PostgreSQLParser.ROUTINE - 471)) | (1 << (PostgreSQLParser.TRANSFORM - 471)) | (1 << (PostgreSQLParser.IMPORT_P - 471)) | (1 << (PostgreSQLParser.POLICY - 471)) | (1 << (PostgreSQLParser.METHOD - 471)) | (1 << (PostgreSQLParser.REFERENCING - 471)) | (1 << (PostgreSQLParser.NEW - 471)) | (1 << (PostgreSQLParser.OLD - 471)) | (1 << (PostgreSQLParser.VALUE_P - 471)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 471)) | (1 << (PostgreSQLParser.PUBLICATION - 471)) | (1 << (PostgreSQLParser.OUT_P - 471)) | (1 << (PostgreSQLParser.ROUTINES - 471)) | (1 << (PostgreSQLParser.SCHEMAS - 471)) | (1 << (PostgreSQLParser.PROCEDURES - 471)) | (1 << (PostgreSQLParser.INPUT_P - 471)) | (1 << (PostgreSQLParser.SUPPORT - 471)) | (1 << (PostgreSQLParser.PARALLEL - 471)) | (1 << (PostgreSQLParser.SQL_P - 471)) | (1 << (PostgreSQLParser.DEPENDS - 471)) | (1 << (PostgreSQLParser.OVERRIDING - 471)) | (1 << (PostgreSQLParser.CONFLICT - 471)) | (1 << (PostgreSQLParser.SKIP_P - 471)) | (1 << (PostgreSQLParser.LOCKED - 471)) | (1 << (PostgreSQLParser.TIES - 471)) | (1 << (PostgreSQLParser.ROLLUP - 471)) | (1 << (PostgreSQLParser.CUBE - 471)) | (1 << (PostgreSQLParser.SETS - 471)) | (1 << (PostgreSQLParser.TABLESAMPLE - 471)) | (1 << (PostgreSQLParser.ORDINALITY - 471)) | (1 << (PostgreSQLParser.COLUMNS - 471)) | (1 << (PostgreSQLParser.NORMALIZED - 471)) | (1 << (PostgreSQLParser.WITHIN - 471)) | (1 << (PostgreSQLParser.FILTER - 471)) | (1 << (PostgreSQLParser.GROUPS - 471)) | (1 << (PostgreSQLParser.OTHERS - 471)) | (1 << (PostgreSQLParser.NFC - 471)) | (1 << (PostgreSQLParser.NFD - 471)) | (1 << (PostgreSQLParser.NFKC - 471)) | (1 << (PostgreSQLParser.NFKD - 471)) | (1 << (PostgreSQLParser.UESCAPE - 471)) | (1 << (PostgreSQLParser.VIEWS - 471)) | (1 << (PostgreSQLParser.ERROR - 471)))) != 0) or ((((_la - 542)) & ~0x3f) == 0 and ((1 << (_la - 542)) & ((1 << (PostgreSQLParser.RETURN - 542)) | (1 << (PostgreSQLParser.FORMAT - 542)) | (1 << (PostgreSQLParser.Identifier - 542)) | (1 << (PostgreSQLParser.QuotedIdentifier - 542)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 542)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 542)))) != 0):
                self.state = 5514
                self.func_args_with_defaults_list()


            self.state = 5517
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_args_with_defaults_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Func_arg_with_defaultContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Func_arg_with_defaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_args_with_defaults_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_args_with_defaults_list" ):
                listener.enterFunc_args_with_defaults_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_args_with_defaults_list" ):
                listener.exitFunc_args_with_defaults_list(self)




    def func_args_with_defaults_list(self):

        localctx = PostgreSQLParser.Func_args_with_defaults_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_func_args_with_defaults_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5519
            self.func_arg_with_default()
            self.state = 5524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5520
                self.match(PostgreSQLParser.COMMA)
                self.state = 5521
                self.func_arg_with_default()
                self.state = 5526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_class(self):
            return self.getTypedRuleContext(PostgreSQLParser.Arg_classContext,0)


        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def param_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Param_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)




    def func_arg(self):

        localctx = PostgreSQLParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_func_arg)
        self._la = 0 # Token type
        try:
            self.state = 5540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5527
                self.arg_class()
                self.state = 5529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
                if la_ == 1:
                    self.state = 5528
                    self.param_name()


                self.state = 5531
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5533
                self.param_name()
                self.state = 5535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.IN_P or _la==PostgreSQLParser.VARIADIC or _la==PostgreSQLParser.INOUT or _la==PostgreSQLParser.OUT_P:
                    self.state = 5534
                    self.arg_class()


                self.state = 5537
                self.func_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5539
                self.func_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_classContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def OUT_P(self):
            return self.getToken(PostgreSQLParser.OUT_P, 0)

        def INOUT(self):
            return self.getToken(PostgreSQLParser.INOUT, 0)

        def VARIADIC(self):
            return self.getToken(PostgreSQLParser.VARIADIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_arg_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_class" ):
                listener.enterArg_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_class" ):
                listener.exitArg_class(self)




    def arg_class(self):

        localctx = PostgreSQLParser.Arg_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_arg_class)
        self._la = 0 # Token type
        try:
            self.state = 5549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.IN_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5542
                self.match(PostgreSQLParser.IN_P)
                self.state = 5544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OUT_P:
                    self.state = 5543
                    self.match(PostgreSQLParser.OUT_P)


                pass
            elif token in [PostgreSQLParser.OUT_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5546
                self.match(PostgreSQLParser.OUT_P)
                pass
            elif token in [PostgreSQLParser.INOUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5547
                self.match(PostgreSQLParser.INOUT)
                pass
            elif token in [PostgreSQLParser.VARIADIC]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5548
                self.match(PostgreSQLParser.VARIADIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_function_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_param_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_name" ):
                listener.enterParam_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_name" ):
                listener.exitParam_name(self)




    def param_name(self):

        localctx = PostgreSQLParser.Param_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_param_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5551
            self.type_function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_returnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_return" ):
                listener.enterFunc_return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_return" ):
                listener.exitFunc_return(self)




    def func_return(self):

        localctx = PostgreSQLParser.Func_returnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_func_return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5553
            self.func_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def type_function_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_function_nameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PostgreSQLParser.AttrsContext,0)


        def PERCENT(self):
            return self.getToken(PostgreSQLParser.PERCENT, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def SETOF(self):
            return self.getToken(PostgreSQLParser.SETOF, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_type" ):
                listener.enterFunc_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_type" ):
                listener.exitFunc_type(self)




    def func_type(self):

        localctx = PostgreSQLParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_func_type)
        self._la = 0 # Token type
        try:
            self.state = 5564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5555
                self.typename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.SETOF:
                    self.state = 5556
                    self.match(PostgreSQLParser.SETOF)


                self.state = 5559
                self.type_function_name()
                self.state = 5560
                self.attrs()
                self.state = 5561
                self.match(PostgreSQLParser.PERCENT)
                self.state = 5562
                self.match(PostgreSQLParser.TYPE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_argContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_arg_with_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg_with_default" ):
                listener.enterFunc_arg_with_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg_with_default" ):
                listener.exitFunc_arg_with_default(self)




    def func_arg_with_default(self):

        localctx = PostgreSQLParser.Func_arg_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_func_arg_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5566
            self.func_arg()
            self.state = 5569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.EQUAL or _la==PostgreSQLParser.DEFAULT:
                self.state = 5567
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.EQUAL or _la==PostgreSQLParser.DEFAULT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5568
                self.a_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggr_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggr_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggr_arg" ):
                listener.enterAggr_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggr_arg" ):
                listener.exitAggr_arg(self)




    def aggr_arg(self):

        localctx = PostgreSQLParser.Aggr_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_aggr_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5571
            self.func_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggr_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def aggr_args_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Aggr_args_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Aggr_args_listContext,i)


        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggr_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggr_args" ):
                listener.enterAggr_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggr_args" ):
                listener.exitAggr_args(self)




    def aggr_args(self):

        localctx = PostgreSQLParser.Aggr_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_aggr_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5573
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 5574
                self.match(PostgreSQLParser.STAR)
                pass

            elif la_ == 2:
                self.state = 5575
                self.aggr_args_list()
                pass

            elif la_ == 3:
                self.state = 5576
                self.match(PostgreSQLParser.ORDER)
                self.state = 5577
                self.match(PostgreSQLParser.BY)
                self.state = 5578
                self.aggr_args_list()
                pass

            elif la_ == 4:
                self.state = 5579
                self.aggr_args_list()
                self.state = 5580
                self.match(PostgreSQLParser.ORDER)
                self.state = 5581
                self.match(PostgreSQLParser.BY)
                self.state = 5582
                self.aggr_args_list()
                pass


            self.state = 5586
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggr_args_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggr_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Aggr_argContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Aggr_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggr_args_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggr_args_list" ):
                listener.enterAggr_args_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggr_args_list" ):
                listener.exitAggr_args_list(self)




    def aggr_args_list(self):

        localctx = PostgreSQLParser.Aggr_args_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_aggr_args_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5588
            self.aggr_arg()
            self.state = 5593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5589
                self.match(PostgreSQLParser.COMMA)
                self.state = 5590
                self.aggr_arg()
                self.state = 5595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_with_argtypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def aggr_args(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggr_argsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggregate_with_argtypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_with_argtypes" ):
                listener.enterAggregate_with_argtypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_with_argtypes" ):
                listener.exitAggregate_with_argtypes(self)




    def aggregate_with_argtypes(self):

        localctx = PostgreSQLParser.Aggregate_with_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_aggregate_with_argtypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5596
            self.func_name()
            self.state = 5597
            self.aggr_args()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_with_argtypes_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_with_argtypes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Aggregate_with_argtypesContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggregate_with_argtypes_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_with_argtypes_list" ):
                listener.enterAggregate_with_argtypes_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_with_argtypes_list" ):
                listener.exitAggregate_with_argtypes_list(self)




    def aggregate_with_argtypes_list(self):

        localctx = PostgreSQLParser.Aggregate_with_argtypes_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_aggregate_with_argtypes_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5599
            self.aggregate_with_argtypes()
            self.state = 5604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5600
                self.match(PostgreSQLParser.COMMA)
                self.state = 5601
                self.aggregate_with_argtypes()
                self.state = 5606
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createfunc_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createfunc_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Createfunc_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Createfunc_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createfunc_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatefunc_opt_list" ):
                listener.enterCreatefunc_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatefunc_opt_list" ):
                listener.exitCreatefunc_opt_list(self)




    def createfunc_opt_list(self):

        localctx = PostgreSQLParser.Createfunc_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_createfunc_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5608 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5607
                self.createfunc_opt_item()
                self.state = 5610 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.AS or _la==PostgreSQLParser.NOT or _la==PostgreSQLParser.WINDOW or _la==PostgreSQLParser.CALLED or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & ((1 << (PostgreSQLParser.COST - 208)) | (1 << (PostgreSQLParser.EXTERNAL - 208)) | (1 << (PostgreSQLParser.IMMUTABLE - 208)))) != 0) or _la==PostgreSQLParser.LANGUAGE or _la==PostgreSQLParser.LEAKPROOF or ((((_la - 344)) & ~0x3f) == 0 and ((1 << (_la - 344)) & ((1 << (PostgreSQLParser.RESET - 344)) | (1 << (PostgreSQLParser.RETURNS - 344)) | (1 << (PostgreSQLParser.ROWS - 344)) | (1 << (PostgreSQLParser.SECURITY - 344)) | (1 << (PostgreSQLParser.SET - 344)) | (1 << (PostgreSQLParser.STABLE - 344)) | (1 << (PostgreSQLParser.STRICT_P - 344)))) != 0) or _la==PostgreSQLParser.VOLATILE or ((((_la - 481)) & ~0x3f) == 0 and ((1 << (_la - 481)) & ((1 << (PostgreSQLParser.TRANSFORM - 481)) | (1 << (PostgreSQLParser.SUPPORT - 481)) | (1 << (PostgreSQLParser.PARALLEL - 481)))) != 0)):
                    break

            self.ParseRoutineBody();
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_func_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALLED(self):
            return self.getToken(PostgreSQLParser.CALLED, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def NULL_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NULL_P)
            else:
                return self.getToken(PostgreSQLParser.NULL_P, i)

        def INPUT_P(self):
            return self.getToken(PostgreSQLParser.INPUT_P, 0)

        def RETURNS(self):
            return self.getToken(PostgreSQLParser.RETURNS, 0)

        def STRICT_P(self):
            return self.getToken(PostgreSQLParser.STRICT_P, 0)

        def IMMUTABLE(self):
            return self.getToken(PostgreSQLParser.IMMUTABLE, 0)

        def STABLE(self):
            return self.getToken(PostgreSQLParser.STABLE, 0)

        def VOLATILE(self):
            return self.getToken(PostgreSQLParser.VOLATILE, 0)

        def EXTERNAL(self):
            return self.getToken(PostgreSQLParser.EXTERNAL, 0)

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def DEFINER(self):
            return self.getToken(PostgreSQLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(PostgreSQLParser.INVOKER, 0)

        def LEAKPROOF(self):
            return self.getToken(PostgreSQLParser.LEAKPROOF, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def COST(self):
            return self.getToken(PostgreSQLParser.COST, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def SUPPORT(self):
            return self.getToken(PostgreSQLParser.SUPPORT, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def functionsetresetclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.FunctionsetresetclauseContext,0)


        def PARALLEL(self):
            return self.getToken(PostgreSQLParser.PARALLEL, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_common_func_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_func_opt_item" ):
                listener.enterCommon_func_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_func_opt_item" ):
                listener.exitCommon_func_opt_item(self)




    def common_func_opt_item(self):

        localctx = PostgreSQLParser.Common_func_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_common_func_opt_item)
        try:
            self.state = 5649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5614
                self.match(PostgreSQLParser.CALLED)
                self.state = 5615
                self.match(PostgreSQLParser.ON)
                self.state = 5616
                self.match(PostgreSQLParser.NULL_P)
                self.state = 5617
                self.match(PostgreSQLParser.INPUT_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5618
                self.match(PostgreSQLParser.RETURNS)
                self.state = 5619
                self.match(PostgreSQLParser.NULL_P)
                self.state = 5620
                self.match(PostgreSQLParser.ON)
                self.state = 5621
                self.match(PostgreSQLParser.NULL_P)
                self.state = 5622
                self.match(PostgreSQLParser.INPUT_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5623
                self.match(PostgreSQLParser.STRICT_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5624
                self.match(PostgreSQLParser.IMMUTABLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5625
                self.match(PostgreSQLParser.STABLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5626
                self.match(PostgreSQLParser.VOLATILE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5627
                self.match(PostgreSQLParser.EXTERNAL)
                self.state = 5628
                self.match(PostgreSQLParser.SECURITY)
                self.state = 5629
                self.match(PostgreSQLParser.DEFINER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5630
                self.match(PostgreSQLParser.EXTERNAL)
                self.state = 5631
                self.match(PostgreSQLParser.SECURITY)
                self.state = 5632
                self.match(PostgreSQLParser.INVOKER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5633
                self.match(PostgreSQLParser.SECURITY)
                self.state = 5634
                self.match(PostgreSQLParser.DEFINER)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5635
                self.match(PostgreSQLParser.SECURITY)
                self.state = 5636
                self.match(PostgreSQLParser.INVOKER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5637
                self.match(PostgreSQLParser.LEAKPROOF)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5638
                self.match(PostgreSQLParser.NOT)
                self.state = 5639
                self.match(PostgreSQLParser.LEAKPROOF)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5640
                self.match(PostgreSQLParser.COST)
                self.state = 5641
                self.numericonly()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5642
                self.match(PostgreSQLParser.ROWS)
                self.state = 5643
                self.numericonly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5644
                self.match(PostgreSQLParser.SUPPORT)
                self.state = 5645
                self.any_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5646
                self.functionsetresetclause()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5647
                self.match(PostgreSQLParser.PARALLEL)
                self.state = 5648
                self.colid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createfunc_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def func_as(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_asContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def transform_type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transform_type_listContext,0)


        def WINDOW(self):
            return self.getToken(PostgreSQLParser.WINDOW, 0)

        def common_func_opt_item(self):
            return self.getTypedRuleContext(PostgreSQLParser.Common_func_opt_itemContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createfunc_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatefunc_opt_item" ):
                listener.enterCreatefunc_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatefunc_opt_item" ):
                listener.exitCreatefunc_opt_item(self)




    def createfunc_opt_item(self):

        localctx = PostgreSQLParser.Createfunc_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_createfunc_opt_item)
        try:
            self.state = 5659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.AS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5651
                self.match(PostgreSQLParser.AS)
                self.state = 5652
                self.func_as()
                pass
            elif token in [PostgreSQLParser.LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5653
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 5654
                self.nonreservedword_or_sconst()
                pass
            elif token in [PostgreSQLParser.TRANSFORM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5655
                self.match(PostgreSQLParser.TRANSFORM)
                self.state = 5656
                self.transform_type_list()
                pass
            elif token in [PostgreSQLParser.WINDOW]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5657
                self.match(PostgreSQLParser.WINDOW)
                pass
            elif token in [PostgreSQLParser.NOT, PostgreSQLParser.CALLED, PostgreSQLParser.COST, PostgreSQLParser.EXTERNAL, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.RESET, PostgreSQLParser.RETURNS, PostgreSQLParser.ROWS, PostgreSQLParser.SECURITY, PostgreSQLParser.SET, PostgreSQLParser.STABLE, PostgreSQLParser.STRICT_P, PostgreSQLParser.VOLATILE, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5658
                self.common_func_opt_item()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_asContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.def_ = None # SconstContext

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_as" ):
                listener.enterFunc_as(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_as" ):
                listener.exitFunc_as(self)




    def func_as(self):

        localctx = PostgreSQLParser.Func_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_func_as)
        try:
            self.state = 5666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5661
                localctx.def_ = self.sconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5662
                self.sconst()
                self.state = 5663
                self.match(PostgreSQLParser.COMMA)
                self.state = 5664
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.FOR)
            else:
                return self.getToken(PostgreSQLParser.FOR, i)

        def TYPE_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TYPE_P)
            else:
                return self.getToken(PostgreSQLParser.TYPE_P, i)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transform_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_type_list" ):
                listener.enterTransform_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_type_list" ):
                listener.exitTransform_type_list(self)




    def transform_type_list(self):

        localctx = PostgreSQLParser.Transform_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_transform_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5668
            self.match(PostgreSQLParser.FOR)
            self.state = 5669
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 5670
            self.typename()
            self.state = 5677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5671
                self.match(PostgreSQLParser.COMMA)
                self.state = 5672
                self.match(PostgreSQLParser.FOR)
                self.state = 5673
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 5674
                self.typename()
                self.state = 5679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Definition_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_definition_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition_" ):
                listener.enterDefinition_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition_" ):
                listener.exitDefinition_(self)




    def definition_(self):

        localctx = PostgreSQLParser.Definition_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_definition_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5680
            self.match(PostgreSQLParser.WITH)
            self.state = 5681
            self.definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_func_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Param_nameContext,0)


        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_func_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_func_column" ):
                listener.enterTable_func_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_func_column" ):
                listener.exitTable_func_column(self)




    def table_func_column(self):

        localctx = PostgreSQLParser.Table_func_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_table_func_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5683
            self.param_name()
            self.state = 5684
            self.func_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_func_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_func_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_func_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_func_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_func_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_func_column_list" ):
                listener.enterTable_func_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_func_column_list" ):
                listener.exitTable_func_column_list(self)




    def table_func_column_list(self):

        localctx = PostgreSQLParser.Table_func_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_table_func_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5686
            self.table_func_column()
            self.state = 5691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5687
                self.match(PostgreSQLParser.COMMA)
                self.state = 5688
                self.table_func_column()
                self.state = 5693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterfunctionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def alterfunc_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alterfunc_opt_listContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def restrict_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Restrict_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterfunctionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterfunctionstmt" ):
                listener.enterAlterfunctionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterfunctionstmt" ):
                listener.exitAlterfunctionstmt(self)




    def alterfunctionstmt(self):

        localctx = PostgreSQLParser.AlterfunctionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_alterfunctionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5694
            self.match(PostgreSQLParser.ALTER)
            self.state = 5695
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FUNCTION or _la==PostgreSQLParser.PROCEDURE or _la==PostgreSQLParser.ROUTINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5696
            self.function_with_argtypes()
            self.state = 5697
            self.alterfunc_opt_list()
            self.state = 5699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.RESTRICT:
                self.state = 5698
                self.restrict_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alterfunc_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_func_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Common_func_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Common_func_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterfunc_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterfunc_opt_list" ):
                listener.enterAlterfunc_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterfunc_opt_list" ):
                listener.exitAlterfunc_opt_list(self)




    def alterfunc_opt_list(self):

        localctx = PostgreSQLParser.Alterfunc_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_alterfunc_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5702 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5701
                self.common_func_opt_item()
                self.state = 5704 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.NOT or ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (PostgreSQLParser.CALLED - 187)) | (1 << (PostgreSQLParser.COST - 187)) | (1 << (PostgreSQLParser.EXTERNAL - 187)))) != 0) or _la==PostgreSQLParser.IMMUTABLE or _la==PostgreSQLParser.LEAKPROOF or ((((_la - 344)) & ~0x3f) == 0 and ((1 << (_la - 344)) & ((1 << (PostgreSQLParser.RESET - 344)) | (1 << (PostgreSQLParser.RETURNS - 344)) | (1 << (PostgreSQLParser.ROWS - 344)) | (1 << (PostgreSQLParser.SECURITY - 344)) | (1 << (PostgreSQLParser.SET - 344)) | (1 << (PostgreSQLParser.STABLE - 344)) | (1 << (PostgreSQLParser.STRICT_P - 344)))) != 0) or _la==PostgreSQLParser.VOLATILE or _la==PostgreSQLParser.SUPPORT or _la==PostgreSQLParser.PARALLEL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restrict_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_restrict_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrict_" ):
                listener.enterRestrict_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrict_" ):
                listener.exitRestrict_(self)




    def restrict_(self):

        localctx = PostgreSQLParser.Restrict_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_restrict_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5706
            self.match(PostgreSQLParser.RESTRICT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemovefuncstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypes_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_removefuncstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemovefuncstmt" ):
                listener.enterRemovefuncstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemovefuncstmt" ):
                listener.exitRemovefuncstmt(self)




    def removefuncstmt(self):

        localctx = PostgreSQLParser.RemovefuncstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_removefuncstmt)
        self._la = 0 # Token type
        try:
            self.state = 5750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5708
                self.match(PostgreSQLParser.DROP)
                self.state = 5709
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5710
                self.function_with_argtypes_list()
                self.state = 5712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5711
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5714
                self.match(PostgreSQLParser.DROP)
                self.state = 5715
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5716
                self.match(PostgreSQLParser.IF_P)
                self.state = 5717
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5718
                self.function_with_argtypes_list()
                self.state = 5720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5719
                    self.drop_behavior_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5722
                self.match(PostgreSQLParser.DROP)
                self.state = 5723
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 5724
                self.function_with_argtypes_list()
                self.state = 5726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5725
                    self.drop_behavior_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5728
                self.match(PostgreSQLParser.DROP)
                self.state = 5729
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 5730
                self.match(PostgreSQLParser.IF_P)
                self.state = 5731
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5732
                self.function_with_argtypes_list()
                self.state = 5734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5733
                    self.drop_behavior_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5736
                self.match(PostgreSQLParser.DROP)
                self.state = 5737
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 5738
                self.function_with_argtypes_list()
                self.state = 5740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5739
                    self.drop_behavior_()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5742
                self.match(PostgreSQLParser.DROP)
                self.state = 5743
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 5744
                self.match(PostgreSQLParser.IF_P)
                self.state = 5745
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5746
                self.function_with_argtypes_list()
                self.state = 5748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5747
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveaggrstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypes_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_removeaggrstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveaggrstmt" ):
                listener.enterRemoveaggrstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveaggrstmt" ):
                listener.exitRemoveaggrstmt(self)




    def removeaggrstmt(self):

        localctx = PostgreSQLParser.RemoveaggrstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_removeaggrstmt)
        self._la = 0 # Token type
        try:
            self.state = 5766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5752
                self.match(PostgreSQLParser.DROP)
                self.state = 5753
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 5754
                self.aggregate_with_argtypes_list()
                self.state = 5756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5755
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5758
                self.match(PostgreSQLParser.DROP)
                self.state = 5759
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 5760
                self.match(PostgreSQLParser.IF_P)
                self.state = 5761
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5762
                self.aggregate_with_argtypes_list()
                self.state = 5764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5763
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveoperstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypes_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_removeoperstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveoperstmt" ):
                listener.enterRemoveoperstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveoperstmt" ):
                listener.exitRemoveoperstmt(self)




    def removeoperstmt(self):

        localctx = PostgreSQLParser.RemoveoperstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_removeoperstmt)
        self._la = 0 # Token type
        try:
            self.state = 5782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5768
                self.match(PostgreSQLParser.DROP)
                self.state = 5769
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 5770
                self.operator_with_argtypes_list()
                self.state = 5772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5771
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5774
                self.match(PostgreSQLParser.DROP)
                self.state = 5775
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 5776
                self.match(PostgreSQLParser.IF_P)
                self.state = 5777
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5778
                self.operator_with_argtypes_list()
                self.state = 5780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 5779
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Oper_argtypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_oper_argtypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOper_argtypes" ):
                listener.enterOper_argtypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOper_argtypes" ):
                listener.exitOper_argtypes(self)




    def oper_argtypes(self):

        localctx = PostgreSQLParser.Oper_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_oper_argtypes)
        try:
            self.state = 5806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5784
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5785
                self.typename()
                self.state = 5786
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5788
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5789
                self.typename()
                self.state = 5790
                self.match(PostgreSQLParser.COMMA)
                self.state = 5791
                self.typename()
                self.state = 5792
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5794
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5795
                self.match(PostgreSQLParser.NONE)
                self.state = 5796
                self.match(PostgreSQLParser.COMMA)
                self.state = 5797
                self.typename()
                self.state = 5798
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5800
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5801
                self.typename()
                self.state = 5802
                self.match(PostgreSQLParser.COMMA)
                self.state = 5803
                self.match(PostgreSQLParser.NONE)
                self.state = 5804
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.All_opContext,0)


        def colid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColidContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColidContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_operator" ):
                listener.enterAny_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_operator" ):
                listener.exitAny_operator(self)




    def any_operator(self):

        localctx = PostgreSQLParser.Any_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_any_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                self.state = 5808
                self.colid()
                self.state = 5809
                self.match(PostgreSQLParser.DOT)
                self.state = 5815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5816
            self.all_op()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_with_argtypes_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_with_argtypes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Operator_with_argtypesContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_with_argtypes_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_with_argtypes_list" ):
                listener.enterOperator_with_argtypes_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_with_argtypes_list" ):
                listener.exitOperator_with_argtypes_list(self)




    def operator_with_argtypes_list(self):

        localctx = PostgreSQLParser.Operator_with_argtypes_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_operator_with_argtypes_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5818
            self.operator_with_argtypes()
            self.state = 5823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 5819
                self.match(PostgreSQLParser.COMMA)
                self.state = 5820
                self.operator_with_argtypes()
                self.state = 5825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_with_argtypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def oper_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_with_argtypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_with_argtypes" ):
                listener.enterOperator_with_argtypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_with_argtypes" ):
                listener.exitOperator_with_argtypes(self)




    def operator_with_argtypes(self):

        localctx = PostgreSQLParser.Operator_with_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_operator_with_argtypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5826
            self.any_operator()
            self.state = 5827
            self.oper_argtypes()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DostmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def dostmt_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Dostmt_opt_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dostmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDostmt" ):
                listener.enterDostmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDostmt" ):
                listener.exitDostmt(self)




    def dostmt(self):

        localctx = PostgreSQLParser.DostmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_dostmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5829
            self.match(PostgreSQLParser.DO)
            self.state = 5830
            self.dostmt_opt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dostmt_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dostmt_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Dostmt_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Dostmt_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dostmt_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDostmt_opt_list" ):
                listener.enterDostmt_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDostmt_opt_list" ):
                listener.exitDostmt_opt_list(self)




    def dostmt_opt_list(self):

        localctx = PostgreSQLParser.Dostmt_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_dostmt_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5833 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5832
                self.dostmt_opt_item()
                self.state = 5835 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.LANGUAGE or ((((_la - 563)) & ~0x3f) == 0 and ((1 << (_la - 563)) & ((1 << (PostgreSQLParser.StringConstant - 563)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 563)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 563)) | (1 << (PostgreSQLParser.EscapeStringConstant - 563)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dostmt_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dostmt_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDostmt_opt_item" ):
                listener.enterDostmt_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDostmt_opt_item" ):
                listener.exitDostmt_opt_item(self)




    def dostmt_opt_item(self):

        localctx = PostgreSQLParser.Dostmt_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_dostmt_opt_item)
        try:
            self.state = 5840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5837
                self.sconst()
                pass
            elif token in [PostgreSQLParser.LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5838
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 5839
                self.nonreservedword_or_sconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatecaststmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def cast_context(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cast_contextContext,0)


        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def INOUT(self):
            return self.getToken(PostgreSQLParser.INOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createcaststmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatecaststmt" ):
                listener.enterCreatecaststmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatecaststmt" ):
                listener.exitCreatecaststmt(self)




    def createcaststmt(self):

        localctx = PostgreSQLParser.CreatecaststmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_createcaststmt)
        self._la = 0 # Token type
        try:
            self.state = 5879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5842
                self.match(PostgreSQLParser.CREATE)
                self.state = 5843
                self.match(PostgreSQLParser.CAST)
                self.state = 5844
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5845
                self.typename()
                self.state = 5846
                self.match(PostgreSQLParser.AS)
                self.state = 5847
                self.typename()
                self.state = 5848
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5849
                self.match(PostgreSQLParser.WITH)
                self.state = 5850
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5851
                self.function_with_argtypes()
                self.state = 5853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS:
                    self.state = 5852
                    self.cast_context()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5855
                self.match(PostgreSQLParser.CREATE)
                self.state = 5856
                self.match(PostgreSQLParser.CAST)
                self.state = 5857
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5858
                self.typename()
                self.state = 5859
                self.match(PostgreSQLParser.AS)
                self.state = 5860
                self.typename()
                self.state = 5861
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5862
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 5863
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS:
                    self.state = 5864
                    self.cast_context()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5867
                self.match(PostgreSQLParser.CREATE)
                self.state = 5868
                self.match(PostgreSQLParser.CAST)
                self.state = 5869
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5870
                self.typename()
                self.state = 5871
                self.match(PostgreSQLParser.AS)
                self.state = 5872
                self.typename()
                self.state = 5873
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5874
                self.match(PostgreSQLParser.WITH)
                self.state = 5875
                self.match(PostgreSQLParser.INOUT)
                self.state = 5877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS:
                    self.state = 5876
                    self.cast_context()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_contextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def IMPLICIT_P(self):
            return self.getToken(PostgreSQLParser.IMPLICIT_P, 0)

        def ASSIGNMENT(self):
            return self.getToken(PostgreSQLParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cast_context

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_context" ):
                listener.enterCast_context(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_context" ):
                listener.exitCast_context(self)




    def cast_context(self):

        localctx = PostgreSQLParser.Cast_contextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_cast_context)
        try:
            self.state = 5885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5881
                self.match(PostgreSQLParser.AS)
                self.state = 5882
                self.match(PostgreSQLParser.IMPLICIT_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5883
                self.match(PostgreSQLParser.AS)
                self.state = 5884
                self.match(PostgreSQLParser.ASSIGNMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropcaststmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def if_exists_(self):
            return self.getTypedRuleContext(PostgreSQLParser.If_exists_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropcaststmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropcaststmt" ):
                listener.enterDropcaststmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropcaststmt" ):
                listener.exitDropcaststmt(self)




    def dropcaststmt(self):

        localctx = PostgreSQLParser.DropcaststmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_dropcaststmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5887
            self.match(PostgreSQLParser.DROP)
            self.state = 5888
            self.match(PostgreSQLParser.CAST)
            self.state = 5890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.IF_P:
                self.state = 5889
                self.if_exists_()


            self.state = 5892
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5893
            self.typename()
            self.state = 5894
            self.match(PostgreSQLParser.AS)
            self.state = 5895
            self.typename()
            self.state = 5896
            self.match(PostgreSQLParser.CLOSE_PAREN)
            self.state = 5898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                self.state = 5897
                self.drop_behavior_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_exists_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_if_exists_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_exists_" ):
                listener.enterIf_exists_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_exists_" ):
                listener.exitIf_exists_(self)




    def if_exists_(self):

        localctx = PostgreSQLParser.If_exists_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_if_exists_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5900
            self.match(PostgreSQLParser.IF_P)
            self.state = 5901
            self.match(PostgreSQLParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatetransformstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def transform_element_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transform_element_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createtransformstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatetransformstmt" ):
                listener.enterCreatetransformstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatetransformstmt" ):
                listener.exitCreatetransformstmt(self)




    def createtransformstmt(self):

        localctx = PostgreSQLParser.CreatetransformstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_createtransformstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5903
            self.match(PostgreSQLParser.CREATE)
            self.state = 5905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OR:
                self.state = 5904
                self.or_replace_()


            self.state = 5907
            self.match(PostgreSQLParser.TRANSFORM)
            self.state = 5908
            self.match(PostgreSQLParser.FOR)
            self.state = 5909
            self.typename()
            self.state = 5910
            self.match(PostgreSQLParser.LANGUAGE)
            self.state = 5911
            self.name()
            self.state = 5912
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5913
            self.transform_element_list()
            self.state = 5914
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def SQL_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SQL_P)
            else:
                return self.getToken(PostgreSQLParser.SQL_P, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WITH)
            else:
                return self.getToken(PostgreSQLParser.WITH, i)

        def FUNCTION(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.FUNCTION)
            else:
                return self.getToken(PostgreSQLParser.FUNCTION, i)

        def function_with_argtypes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Function_with_argtypesContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transform_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_element_list" ):
                listener.enterTransform_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_element_list" ):
                listener.exitTransform_element_list(self)




    def transform_element_list(self):

        localctx = PostgreSQLParser.Transform_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_transform_element_list)
        try:
            self.state = 5950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5916
                self.match(PostgreSQLParser.FROM)
                self.state = 5917
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5918
                self.match(PostgreSQLParser.WITH)
                self.state = 5919
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5920
                self.function_with_argtypes()
                self.state = 5921
                self.match(PostgreSQLParser.COMMA)
                self.state = 5922
                self.match(PostgreSQLParser.TO)
                self.state = 5923
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5924
                self.match(PostgreSQLParser.WITH)
                self.state = 5925
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5926
                self.function_with_argtypes()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5928
                self.match(PostgreSQLParser.TO)
                self.state = 5929
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5930
                self.match(PostgreSQLParser.WITH)
                self.state = 5931
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5932
                self.function_with_argtypes()
                self.state = 5933
                self.match(PostgreSQLParser.COMMA)
                self.state = 5934
                self.match(PostgreSQLParser.FROM)
                self.state = 5935
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5936
                self.match(PostgreSQLParser.WITH)
                self.state = 5937
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5938
                self.function_with_argtypes()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5940
                self.match(PostgreSQLParser.FROM)
                self.state = 5941
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5942
                self.match(PostgreSQLParser.WITH)
                self.state = 5943
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5944
                self.function_with_argtypes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5945
                self.match(PostgreSQLParser.TO)
                self.state = 5946
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5947
                self.match(PostgreSQLParser.WITH)
                self.state = 5948
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5949
                self.function_with_argtypes()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DroptransformstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def if_exists_(self):
            return self.getTypedRuleContext(PostgreSQLParser.If_exists_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_droptransformstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDroptransformstmt" ):
                listener.enterDroptransformstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDroptransformstmt" ):
                listener.exitDroptransformstmt(self)




    def droptransformstmt(self):

        localctx = PostgreSQLParser.DroptransformstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_droptransformstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5952
            self.match(PostgreSQLParser.DROP)
            self.state = 5953
            self.match(PostgreSQLParser.TRANSFORM)
            self.state = 5955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.IF_P:
                self.state = 5954
                self.if_exists_()


            self.state = 5957
            self.match(PostgreSQLParser.FOR)
            self.state = 5958
            self.typename()
            self.state = 5959
            self.match(PostgreSQLParser.LANGUAGE)
            self.state = 5960
            self.name()
            self.state = 5962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                self.state = 5961
                self.drop_behavior_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReindexstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX(self):
            return self.getToken(PostgreSQLParser.REINDEX, 0)

        def reindex_target_relation(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reindex_target_relationContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def reindex_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reindex_option_listContext,0)


        def concurrently_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Concurrently_Context,0)


        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def reindex_target_all(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reindex_target_allContext,0)


        def single_name_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Single_name_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reindexstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindexstmt" ):
                listener.enterReindexstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindexstmt" ):
                listener.exitReindexstmt(self)




    def reindexstmt(self):

        localctx = PostgreSQLParser.ReindexstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_reindexstmt)
        self._la = 0 # Token type
        try:
            self.state = 5994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5964
                self.match(PostgreSQLParser.REINDEX)
                self.state = 5966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 5965
                    self.reindex_option_list()


                self.state = 5968
                self.reindex_target_relation()
                self.state = 5970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CONCURRENTLY:
                    self.state = 5969
                    self.concurrently_()


                self.state = 5972
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5974
                self.match(PostgreSQLParser.REINDEX)
                self.state = 5976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 5975
                    self.reindex_option_list()


                self.state = 5978
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CONCURRENTLY:
                    self.state = 5979
                    self.concurrently_()


                self.state = 5982
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5983
                self.match(PostgreSQLParser.REINDEX)
                self.state = 5985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 5984
                    self.reindex_option_list()


                self.state = 5987
                self.reindex_target_all()
                self.state = 5989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CONCURRENTLY:
                    self.state = 5988
                    self.concurrently_()


                self.state = 5992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 5991
                    self.single_name_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_target_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reindex_target_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_target_relation" ):
                listener.enterReindex_target_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_target_relation" ):
                listener.exitReindex_target_relation(self)




    def reindex_target_relation(self):

        localctx = PostgreSQLParser.Reindex_target_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_reindex_target_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5996
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.TABLE or _la==PostgreSQLParser.INDEX):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_target_allContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reindex_target_all

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_target_all" ):
                listener.enterReindex_target_all(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_target_all" ):
                listener.exitReindex_target_all(self)




    def reindex_target_all(self):

        localctx = PostgreSQLParser.Reindex_target_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_reindex_target_all)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5998
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.DATABASE or _la==PostgreSQLParser.SYSTEM_P):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def utility_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Utility_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reindex_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_option_list" ):
                listener.enterReindex_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_option_list" ):
                listener.exitReindex_option_list(self)




    def reindex_option_list(self):

        localctx = PostgreSQLParser.Reindex_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_reindex_option_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6000
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 6001
            self.utility_option_list()
            self.state = 6002
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertblspcstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertblspcstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertblspcstmt" ):
                listener.enterAltertblspcstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertblspcstmt" ):
                listener.exitAltertblspcstmt(self)




    def altertblspcstmt(self):

        localctx = PostgreSQLParser.AltertblspcstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_altertblspcstmt)
        try:
            self.state = 6016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6004
                self.match(PostgreSQLParser.ALTER)
                self.state = 6005
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 6006
                self.name()
                self.state = 6007
                self.match(PostgreSQLParser.SET)
                self.state = 6008
                self.reloptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6010
                self.match(PostgreSQLParser.ALTER)
                self.state = 6011
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 6012
                self.name()
                self.state = 6013
                self.match(PostgreSQLParser.RESET)
                self.state = 6014
                self.reloptions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenamestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def RENAME(self):
            return self.getToken(PostgreSQLParser.RENAME, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def roleid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.RoleidContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.RoleidContext,i)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def procedural_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Procedural_Context,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def column_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_Context,0)


        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def ATTRIBUTE(self):
            return self.getToken(PostgreSQLParser.ATTRIBUTE, 0)

        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_renamestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenamestmt" ):
                listener.enterRenamestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenamestmt" ):
                listener.exitRenamestmt(self)




    def renamestmt(self):

        localctx = PostgreSQLParser.RenamestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_renamestmt)
        self._la = 0 # Token type
        try:
            self.state = 6505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6018
                self.match(PostgreSQLParser.ALTER)
                self.state = 6019
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 6020
                self.aggregate_with_argtypes()
                self.state = 6021
                self.match(PostgreSQLParser.RENAME)
                self.state = 6022
                self.match(PostgreSQLParser.TO)
                self.state = 6023
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6025
                self.match(PostgreSQLParser.ALTER)
                self.state = 6026
                self.match(PostgreSQLParser.COLLATION)
                self.state = 6027
                self.any_name()
                self.state = 6028
                self.match(PostgreSQLParser.RENAME)
                self.state = 6029
                self.match(PostgreSQLParser.TO)
                self.state = 6030
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6032
                self.match(PostgreSQLParser.ALTER)
                self.state = 6033
                self.match(PostgreSQLParser.CONVERSION_P)
                self.state = 6034
                self.any_name()
                self.state = 6035
                self.match(PostgreSQLParser.RENAME)
                self.state = 6036
                self.match(PostgreSQLParser.TO)
                self.state = 6037
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6039
                self.match(PostgreSQLParser.ALTER)
                self.state = 6040
                self.match(PostgreSQLParser.DATABASE)
                self.state = 6041
                self.name()
                self.state = 6042
                self.match(PostgreSQLParser.RENAME)
                self.state = 6043
                self.match(PostgreSQLParser.TO)
                self.state = 6044
                self.name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6046
                self.match(PostgreSQLParser.ALTER)
                self.state = 6047
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 6048
                self.any_name()
                self.state = 6049
                self.match(PostgreSQLParser.RENAME)
                self.state = 6050
                self.match(PostgreSQLParser.TO)
                self.state = 6051
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6053
                self.match(PostgreSQLParser.ALTER)
                self.state = 6054
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 6055
                self.any_name()
                self.state = 6056
                self.match(PostgreSQLParser.RENAME)
                self.state = 6057
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 6058
                self.name()
                self.state = 6059
                self.match(PostgreSQLParser.TO)
                self.state = 6060
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6062
                self.match(PostgreSQLParser.ALTER)
                self.state = 6063
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6064
                self.match(PostgreSQLParser.DATA_P)
                self.state = 6065
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 6066
                self.name()
                self.state = 6067
                self.match(PostgreSQLParser.RENAME)
                self.state = 6068
                self.match(PostgreSQLParser.TO)
                self.state = 6069
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6071
                self.match(PostgreSQLParser.ALTER)
                self.state = 6072
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 6073
                self.function_with_argtypes()
                self.state = 6074
                self.match(PostgreSQLParser.RENAME)
                self.state = 6075
                self.match(PostgreSQLParser.TO)
                self.state = 6076
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6078
                self.match(PostgreSQLParser.ALTER)
                self.state = 6079
                self.match(PostgreSQLParser.GROUP_P)
                self.state = 6080
                self.roleid()
                self.state = 6081
                self.match(PostgreSQLParser.RENAME)
                self.state = 6082
                self.match(PostgreSQLParser.TO)
                self.state = 6083
                self.roleid()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6085
                self.match(PostgreSQLParser.ALTER)
                self.state = 6087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PROCEDURAL:
                    self.state = 6086
                    self.procedural_()


                self.state = 6089
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 6090
                self.name()
                self.state = 6091
                self.match(PostgreSQLParser.RENAME)
                self.state = 6092
                self.match(PostgreSQLParser.TO)
                self.state = 6093
                self.name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6095
                self.match(PostgreSQLParser.ALTER)
                self.state = 6096
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6097
                self.match(PostgreSQLParser.CLASS)
                self.state = 6098
                self.any_name()
                self.state = 6099
                self.match(PostgreSQLParser.USING)
                self.state = 6100
                self.name()
                self.state = 6101
                self.match(PostgreSQLParser.RENAME)
                self.state = 6102
                self.match(PostgreSQLParser.TO)
                self.state = 6103
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6105
                self.match(PostgreSQLParser.ALTER)
                self.state = 6106
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6107
                self.match(PostgreSQLParser.FAMILY)
                self.state = 6108
                self.any_name()
                self.state = 6109
                self.match(PostgreSQLParser.USING)
                self.state = 6110
                self.name()
                self.state = 6111
                self.match(PostgreSQLParser.RENAME)
                self.state = 6112
                self.match(PostgreSQLParser.TO)
                self.state = 6113
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6115
                self.match(PostgreSQLParser.ALTER)
                self.state = 6116
                self.match(PostgreSQLParser.POLICY)
                self.state = 6117
                self.name()
                self.state = 6118
                self.match(PostgreSQLParser.ON)
                self.state = 6119
                self.qualified_name()
                self.state = 6120
                self.match(PostgreSQLParser.RENAME)
                self.state = 6121
                self.match(PostgreSQLParser.TO)
                self.state = 6122
                self.name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6124
                self.match(PostgreSQLParser.ALTER)
                self.state = 6125
                self.match(PostgreSQLParser.POLICY)
                self.state = 6126
                self.match(PostgreSQLParser.IF_P)
                self.state = 6127
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6128
                self.name()
                self.state = 6129
                self.match(PostgreSQLParser.ON)
                self.state = 6130
                self.qualified_name()
                self.state = 6131
                self.match(PostgreSQLParser.RENAME)
                self.state = 6132
                self.match(PostgreSQLParser.TO)
                self.state = 6133
                self.name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6135
                self.match(PostgreSQLParser.ALTER)
                self.state = 6136
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 6137
                self.function_with_argtypes()
                self.state = 6138
                self.match(PostgreSQLParser.RENAME)
                self.state = 6139
                self.match(PostgreSQLParser.TO)
                self.state = 6140
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6142
                self.match(PostgreSQLParser.ALTER)
                self.state = 6143
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 6144
                self.name()
                self.state = 6145
                self.match(PostgreSQLParser.RENAME)
                self.state = 6146
                self.match(PostgreSQLParser.TO)
                self.state = 6147
                self.name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6149
                self.match(PostgreSQLParser.ALTER)
                self.state = 6150
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 6151
                self.function_with_argtypes()
                self.state = 6152
                self.match(PostgreSQLParser.RENAME)
                self.state = 6153
                self.match(PostgreSQLParser.TO)
                self.state = 6154
                self.name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6156
                self.match(PostgreSQLParser.ALTER)
                self.state = 6157
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6158
                self.name()
                self.state = 6159
                self.match(PostgreSQLParser.RENAME)
                self.state = 6160
                self.match(PostgreSQLParser.TO)
                self.state = 6161
                self.name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6163
                self.match(PostgreSQLParser.ALTER)
                self.state = 6164
                self.match(PostgreSQLParser.SERVER)
                self.state = 6165
                self.name()
                self.state = 6166
                self.match(PostgreSQLParser.RENAME)
                self.state = 6167
                self.match(PostgreSQLParser.TO)
                self.state = 6168
                self.name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6170
                self.match(PostgreSQLParser.ALTER)
                self.state = 6171
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 6172
                self.name()
                self.state = 6173
                self.match(PostgreSQLParser.RENAME)
                self.state = 6174
                self.match(PostgreSQLParser.TO)
                self.state = 6175
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6177
                self.match(PostgreSQLParser.ALTER)
                self.state = 6178
                self.match(PostgreSQLParser.TABLE)
                self.state = 6179
                self.relation_expr()
                self.state = 6180
                self.match(PostgreSQLParser.RENAME)
                self.state = 6181
                self.match(PostgreSQLParser.TO)
                self.state = 6182
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6184
                self.match(PostgreSQLParser.ALTER)
                self.state = 6185
                self.match(PostgreSQLParser.TABLE)
                self.state = 6186
                self.match(PostgreSQLParser.IF_P)
                self.state = 6187
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6188
                self.relation_expr()
                self.state = 6189
                self.match(PostgreSQLParser.RENAME)
                self.state = 6190
                self.match(PostgreSQLParser.TO)
                self.state = 6191
                self.name()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6193
                self.match(PostgreSQLParser.ALTER)
                self.state = 6194
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 6195
                self.qualified_name()
                self.state = 6196
                self.match(PostgreSQLParser.RENAME)
                self.state = 6197
                self.match(PostgreSQLParser.TO)
                self.state = 6198
                self.name()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6200
                self.match(PostgreSQLParser.ALTER)
                self.state = 6201
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 6202
                self.match(PostgreSQLParser.IF_P)
                self.state = 6203
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6204
                self.qualified_name()
                self.state = 6205
                self.match(PostgreSQLParser.RENAME)
                self.state = 6206
                self.match(PostgreSQLParser.TO)
                self.state = 6207
                self.name()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6209
                self.match(PostgreSQLParser.ALTER)
                self.state = 6210
                self.match(PostgreSQLParser.VIEW)
                self.state = 6211
                self.qualified_name()
                self.state = 6212
                self.match(PostgreSQLParser.RENAME)
                self.state = 6213
                self.match(PostgreSQLParser.TO)
                self.state = 6214
                self.name()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 6216
                self.match(PostgreSQLParser.ALTER)
                self.state = 6217
                self.match(PostgreSQLParser.VIEW)
                self.state = 6218
                self.match(PostgreSQLParser.IF_P)
                self.state = 6219
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6220
                self.qualified_name()
                self.state = 6221
                self.match(PostgreSQLParser.RENAME)
                self.state = 6222
                self.match(PostgreSQLParser.TO)
                self.state = 6223
                self.name()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 6225
                self.match(PostgreSQLParser.ALTER)
                self.state = 6226
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6227
                self.match(PostgreSQLParser.VIEW)
                self.state = 6228
                self.qualified_name()
                self.state = 6229
                self.match(PostgreSQLParser.RENAME)
                self.state = 6230
                self.match(PostgreSQLParser.TO)
                self.state = 6231
                self.name()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 6233
                self.match(PostgreSQLParser.ALTER)
                self.state = 6234
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6235
                self.match(PostgreSQLParser.VIEW)
                self.state = 6236
                self.match(PostgreSQLParser.IF_P)
                self.state = 6237
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6238
                self.qualified_name()
                self.state = 6239
                self.match(PostgreSQLParser.RENAME)
                self.state = 6240
                self.match(PostgreSQLParser.TO)
                self.state = 6241
                self.name()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 6243
                self.match(PostgreSQLParser.ALTER)
                self.state = 6244
                self.match(PostgreSQLParser.INDEX)
                self.state = 6245
                self.qualified_name()
                self.state = 6246
                self.match(PostgreSQLParser.RENAME)
                self.state = 6247
                self.match(PostgreSQLParser.TO)
                self.state = 6248
                self.name()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 6250
                self.match(PostgreSQLParser.ALTER)
                self.state = 6251
                self.match(PostgreSQLParser.INDEX)
                self.state = 6252
                self.match(PostgreSQLParser.IF_P)
                self.state = 6253
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6254
                self.qualified_name()
                self.state = 6255
                self.match(PostgreSQLParser.RENAME)
                self.state = 6256
                self.match(PostgreSQLParser.TO)
                self.state = 6257
                self.name()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 6259
                self.match(PostgreSQLParser.ALTER)
                self.state = 6260
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6261
                self.match(PostgreSQLParser.TABLE)
                self.state = 6262
                self.relation_expr()
                self.state = 6263
                self.match(PostgreSQLParser.RENAME)
                self.state = 6264
                self.match(PostgreSQLParser.TO)
                self.state = 6265
                self.name()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 6267
                self.match(PostgreSQLParser.ALTER)
                self.state = 6268
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6269
                self.match(PostgreSQLParser.TABLE)
                self.state = 6270
                self.match(PostgreSQLParser.IF_P)
                self.state = 6271
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6272
                self.relation_expr()
                self.state = 6273
                self.match(PostgreSQLParser.RENAME)
                self.state = 6274
                self.match(PostgreSQLParser.TO)
                self.state = 6275
                self.name()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 6277
                self.match(PostgreSQLParser.ALTER)
                self.state = 6278
                self.match(PostgreSQLParser.TABLE)
                self.state = 6279
                self.relation_expr()
                self.state = 6280
                self.match(PostgreSQLParser.RENAME)
                self.state = 6282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 6281
                    self.column_()


                self.state = 6284
                self.name()
                self.state = 6285
                self.match(PostgreSQLParser.TO)
                self.state = 6286
                self.name()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 6288
                self.match(PostgreSQLParser.ALTER)
                self.state = 6289
                self.match(PostgreSQLParser.TABLE)
                self.state = 6290
                self.match(PostgreSQLParser.IF_P)
                self.state = 6291
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6292
                self.relation_expr()
                self.state = 6293
                self.match(PostgreSQLParser.RENAME)
                self.state = 6295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 6294
                    self.column_()


                self.state = 6297
                self.name()
                self.state = 6298
                self.match(PostgreSQLParser.TO)
                self.state = 6299
                self.name()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 6301
                self.match(PostgreSQLParser.ALTER)
                self.state = 6302
                self.match(PostgreSQLParser.VIEW)
                self.state = 6303
                self.qualified_name()
                self.state = 6304
                self.match(PostgreSQLParser.RENAME)
                self.state = 6306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 6305
                    self.column_()


                self.state = 6308
                self.name()
                self.state = 6309
                self.match(PostgreSQLParser.TO)
                self.state = 6310
                self.name()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 6312
                self.match(PostgreSQLParser.ALTER)
                self.state = 6313
                self.match(PostgreSQLParser.VIEW)
                self.state = 6314
                self.match(PostgreSQLParser.IF_P)
                self.state = 6315
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6316
                self.qualified_name()
                self.state = 6317
                self.match(PostgreSQLParser.RENAME)
                self.state = 6319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 6318
                    self.column_()


                self.state = 6321
                self.name()
                self.state = 6322
                self.match(PostgreSQLParser.TO)
                self.state = 6323
                self.name()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 6325
                self.match(PostgreSQLParser.ALTER)
                self.state = 6326
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6327
                self.match(PostgreSQLParser.VIEW)
                self.state = 6328
                self.qualified_name()
                self.state = 6329
                self.match(PostgreSQLParser.RENAME)
                self.state = 6331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 6330
                    self.column_()


                self.state = 6333
                self.name()
                self.state = 6334
                self.match(PostgreSQLParser.TO)
                self.state = 6335
                self.name()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 6337
                self.match(PostgreSQLParser.ALTER)
                self.state = 6338
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6339
                self.match(PostgreSQLParser.VIEW)
                self.state = 6340
                self.match(PostgreSQLParser.IF_P)
                self.state = 6341
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6342
                self.qualified_name()
                self.state = 6343
                self.match(PostgreSQLParser.RENAME)
                self.state = 6345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 6344
                    self.column_()


                self.state = 6347
                self.name()
                self.state = 6348
                self.match(PostgreSQLParser.TO)
                self.state = 6349
                self.name()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 6351
                self.match(PostgreSQLParser.ALTER)
                self.state = 6352
                self.match(PostgreSQLParser.TABLE)
                self.state = 6353
                self.relation_expr()
                self.state = 6354
                self.match(PostgreSQLParser.RENAME)
                self.state = 6355
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 6356
                self.name()
                self.state = 6357
                self.match(PostgreSQLParser.TO)
                self.state = 6358
                self.name()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 6360
                self.match(PostgreSQLParser.ALTER)
                self.state = 6361
                self.match(PostgreSQLParser.TABLE)
                self.state = 6362
                self.match(PostgreSQLParser.IF_P)
                self.state = 6363
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6364
                self.relation_expr()
                self.state = 6365
                self.match(PostgreSQLParser.RENAME)
                self.state = 6366
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 6367
                self.name()
                self.state = 6368
                self.match(PostgreSQLParser.TO)
                self.state = 6369
                self.name()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 6371
                self.match(PostgreSQLParser.ALTER)
                self.state = 6372
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6373
                self.match(PostgreSQLParser.TABLE)
                self.state = 6374
                self.relation_expr()
                self.state = 6375
                self.match(PostgreSQLParser.RENAME)
                self.state = 6377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 6376
                    self.column_()


                self.state = 6379
                self.name()
                self.state = 6380
                self.match(PostgreSQLParser.TO)
                self.state = 6381
                self.name()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 6383
                self.match(PostgreSQLParser.ALTER)
                self.state = 6384
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6385
                self.match(PostgreSQLParser.TABLE)
                self.state = 6386
                self.match(PostgreSQLParser.IF_P)
                self.state = 6387
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6388
                self.relation_expr()
                self.state = 6389
                self.match(PostgreSQLParser.RENAME)
                self.state = 6391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLUMN:
                    self.state = 6390
                    self.column_()


                self.state = 6393
                self.name()
                self.state = 6394
                self.match(PostgreSQLParser.TO)
                self.state = 6395
                self.name()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 6397
                self.match(PostgreSQLParser.ALTER)
                self.state = 6398
                self.match(PostgreSQLParser.RULE)
                self.state = 6399
                self.name()
                self.state = 6400
                self.match(PostgreSQLParser.ON)
                self.state = 6401
                self.qualified_name()
                self.state = 6402
                self.match(PostgreSQLParser.RENAME)
                self.state = 6403
                self.match(PostgreSQLParser.TO)
                self.state = 6404
                self.name()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 6406
                self.match(PostgreSQLParser.ALTER)
                self.state = 6407
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 6408
                self.name()
                self.state = 6409
                self.match(PostgreSQLParser.ON)
                self.state = 6410
                self.qualified_name()
                self.state = 6411
                self.match(PostgreSQLParser.RENAME)
                self.state = 6412
                self.match(PostgreSQLParser.TO)
                self.state = 6413
                self.name()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 6415
                self.match(PostgreSQLParser.ALTER)
                self.state = 6416
                self.match(PostgreSQLParser.EVENT)
                self.state = 6417
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 6418
                self.name()
                self.state = 6419
                self.match(PostgreSQLParser.RENAME)
                self.state = 6420
                self.match(PostgreSQLParser.TO)
                self.state = 6421
                self.name()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 6423
                self.match(PostgreSQLParser.ALTER)
                self.state = 6424
                self.match(PostgreSQLParser.ROLE)
                self.state = 6425
                self.roleid()
                self.state = 6426
                self.match(PostgreSQLParser.RENAME)
                self.state = 6427
                self.match(PostgreSQLParser.TO)
                self.state = 6428
                self.roleid()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 6430
                self.match(PostgreSQLParser.ALTER)
                self.state = 6431
                self.match(PostgreSQLParser.USER)
                self.state = 6432
                self.roleid()
                self.state = 6433
                self.match(PostgreSQLParser.RENAME)
                self.state = 6434
                self.match(PostgreSQLParser.TO)
                self.state = 6435
                self.roleid()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 6437
                self.match(PostgreSQLParser.ALTER)
                self.state = 6438
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 6439
                self.name()
                self.state = 6440
                self.match(PostgreSQLParser.RENAME)
                self.state = 6441
                self.match(PostgreSQLParser.TO)
                self.state = 6442
                self.name()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 6444
                self.match(PostgreSQLParser.ALTER)
                self.state = 6445
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 6446
                self.any_name()
                self.state = 6447
                self.match(PostgreSQLParser.RENAME)
                self.state = 6448
                self.match(PostgreSQLParser.TO)
                self.state = 6449
                self.name()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 6451
                self.match(PostgreSQLParser.ALTER)
                self.state = 6452
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6453
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6454
                self.match(PostgreSQLParser.PARSER)
                self.state = 6455
                self.any_name()
                self.state = 6456
                self.match(PostgreSQLParser.RENAME)
                self.state = 6457
                self.match(PostgreSQLParser.TO)
                self.state = 6458
                self.name()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 6460
                self.match(PostgreSQLParser.ALTER)
                self.state = 6461
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6462
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6463
                self.match(PostgreSQLParser.DICTIONARY)
                self.state = 6464
                self.any_name()
                self.state = 6465
                self.match(PostgreSQLParser.RENAME)
                self.state = 6466
                self.match(PostgreSQLParser.TO)
                self.state = 6467
                self.name()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 6469
                self.match(PostgreSQLParser.ALTER)
                self.state = 6470
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6471
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6472
                self.match(PostgreSQLParser.TEMPLATE)
                self.state = 6473
                self.any_name()
                self.state = 6474
                self.match(PostgreSQLParser.RENAME)
                self.state = 6475
                self.match(PostgreSQLParser.TO)
                self.state = 6476
                self.name()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 6478
                self.match(PostgreSQLParser.ALTER)
                self.state = 6479
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6480
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6481
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 6482
                self.any_name()
                self.state = 6483
                self.match(PostgreSQLParser.RENAME)
                self.state = 6484
                self.match(PostgreSQLParser.TO)
                self.state = 6485
                self.name()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 6487
                self.match(PostgreSQLParser.ALTER)
                self.state = 6488
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 6489
                self.any_name()
                self.state = 6490
                self.match(PostgreSQLParser.RENAME)
                self.state = 6491
                self.match(PostgreSQLParser.TO)
                self.state = 6492
                self.name()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 6494
                self.match(PostgreSQLParser.ALTER)
                self.state = 6495
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 6496
                self.any_name()
                self.state = 6497
                self.match(PostgreSQLParser.RENAME)
                self.state = 6498
                self.match(PostgreSQLParser.ATTRIBUTE)
                self.state = 6499
                self.name()
                self.state = 6500
                self.match(PostgreSQLParser.TO)
                self.state = 6501
                self.name()
                self.state = 6503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 6502
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_" ):
                listener.enterColumn_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_" ):
                listener.exitColumn_(self)




    def column_(self):

        localctx = PostgreSQLParser.Column_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_column_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6507
            self.match(PostgreSQLParser.COLUMN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_data_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_data_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_data_" ):
                listener.enterSet_data_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_data_" ):
                listener.exitSet_data_(self)




    def set_data_(self):

        localctx = PostgreSQLParser.Set_data_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_set_data_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6509
            self.match(PostgreSQLParser.SET)
            self.state = 6510
            self.match(PostgreSQLParser.DATA_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterobjectdependsstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def DEPENDS(self):
            return self.getToken(PostgreSQLParser.DEPENDS, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ON)
            else:
                return self.getToken(PostgreSQLParser.ON, i)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def no_(self):
            return self.getTypedRuleContext(PostgreSQLParser.No_Context,0)


        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterobjectdependsstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterobjectdependsstmt" ):
                listener.enterAlterobjectdependsstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterobjectdependsstmt" ):
                listener.exitAlterobjectdependsstmt(self)




    def alterobjectdependsstmt(self):

        localctx = PostgreSQLParser.AlterobjectdependsstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_alterobjectdependsstmt)
        self._la = 0 # Token type
        try:
            self.state = 6581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6512
                self.match(PostgreSQLParser.ALTER)
                self.state = 6513
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 6514
                self.function_with_argtypes()
                self.state = 6516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO:
                    self.state = 6515
                    self.no_()


                self.state = 6518
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6519
                self.match(PostgreSQLParser.ON)
                self.state = 6520
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6521
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6523
                self.match(PostgreSQLParser.ALTER)
                self.state = 6524
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 6525
                self.function_with_argtypes()
                self.state = 6527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO:
                    self.state = 6526
                    self.no_()


                self.state = 6529
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6530
                self.match(PostgreSQLParser.ON)
                self.state = 6531
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6532
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6534
                self.match(PostgreSQLParser.ALTER)
                self.state = 6535
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 6536
                self.function_with_argtypes()
                self.state = 6538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO:
                    self.state = 6537
                    self.no_()


                self.state = 6540
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6541
                self.match(PostgreSQLParser.ON)
                self.state = 6542
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6543
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6545
                self.match(PostgreSQLParser.ALTER)
                self.state = 6546
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 6547
                self.name()
                self.state = 6548
                self.match(PostgreSQLParser.ON)
                self.state = 6549
                self.qualified_name()
                self.state = 6551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO:
                    self.state = 6550
                    self.no_()


                self.state = 6553
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6554
                self.match(PostgreSQLParser.ON)
                self.state = 6555
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6556
                self.name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6558
                self.match(PostgreSQLParser.ALTER)
                self.state = 6559
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6560
                self.match(PostgreSQLParser.VIEW)
                self.state = 6561
                self.qualified_name()
                self.state = 6563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO:
                    self.state = 6562
                    self.no_()


                self.state = 6565
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6566
                self.match(PostgreSQLParser.ON)
                self.state = 6567
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6568
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6570
                self.match(PostgreSQLParser.ALTER)
                self.state = 6571
                self.match(PostgreSQLParser.INDEX)
                self.state = 6572
                self.qualified_name()
                self.state = 6574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO:
                    self.state = 6573
                    self.no_()


                self.state = 6576
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6577
                self.match(PostgreSQLParser.ON)
                self.state = 6578
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6579
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_no_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_" ):
                listener.enterNo_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_" ):
                listener.exitNo_(self)




    def no_(self):

        localctx = PostgreSQLParser.No_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_no_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6583
            self.match(PostgreSQLParser.NO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterobjectschemastmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterobjectschemastmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterobjectschemastmt" ):
                listener.enterAlterobjectschemastmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterobjectschemastmt" ):
                listener.exitAlterobjectschemastmt(self)




    def alterobjectschemastmt(self):

        localctx = PostgreSQLParser.AlterobjectschemastmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_alterobjectschemastmt)
        try:
            self.state = 6802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,551,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6585
                self.match(PostgreSQLParser.ALTER)
                self.state = 6586
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 6587
                self.aggregate_with_argtypes()
                self.state = 6588
                self.match(PostgreSQLParser.SET)
                self.state = 6589
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6590
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6592
                self.match(PostgreSQLParser.ALTER)
                self.state = 6593
                self.match(PostgreSQLParser.COLLATION)
                self.state = 6594
                self.any_name()
                self.state = 6595
                self.match(PostgreSQLParser.SET)
                self.state = 6596
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6597
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6599
                self.match(PostgreSQLParser.ALTER)
                self.state = 6600
                self.match(PostgreSQLParser.CONVERSION_P)
                self.state = 6601
                self.any_name()
                self.state = 6602
                self.match(PostgreSQLParser.SET)
                self.state = 6603
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6604
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6606
                self.match(PostgreSQLParser.ALTER)
                self.state = 6607
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 6608
                self.any_name()
                self.state = 6609
                self.match(PostgreSQLParser.SET)
                self.state = 6610
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6611
                self.name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6613
                self.match(PostgreSQLParser.ALTER)
                self.state = 6614
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6615
                self.name()
                self.state = 6616
                self.match(PostgreSQLParser.SET)
                self.state = 6617
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6618
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6620
                self.match(PostgreSQLParser.ALTER)
                self.state = 6621
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 6622
                self.function_with_argtypes()
                self.state = 6623
                self.match(PostgreSQLParser.SET)
                self.state = 6624
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6625
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6627
                self.match(PostgreSQLParser.ALTER)
                self.state = 6628
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6629
                self.operator_with_argtypes()
                self.state = 6630
                self.match(PostgreSQLParser.SET)
                self.state = 6631
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6632
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6634
                self.match(PostgreSQLParser.ALTER)
                self.state = 6635
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6636
                self.match(PostgreSQLParser.CLASS)
                self.state = 6637
                self.any_name()
                self.state = 6638
                self.match(PostgreSQLParser.USING)
                self.state = 6639
                self.name()
                self.state = 6640
                self.match(PostgreSQLParser.SET)
                self.state = 6641
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6642
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6644
                self.match(PostgreSQLParser.ALTER)
                self.state = 6645
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6646
                self.match(PostgreSQLParser.FAMILY)
                self.state = 6647
                self.any_name()
                self.state = 6648
                self.match(PostgreSQLParser.USING)
                self.state = 6649
                self.name()
                self.state = 6650
                self.match(PostgreSQLParser.SET)
                self.state = 6651
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6652
                self.name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6654
                self.match(PostgreSQLParser.ALTER)
                self.state = 6655
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 6656
                self.function_with_argtypes()
                self.state = 6657
                self.match(PostgreSQLParser.SET)
                self.state = 6658
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6659
                self.name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6661
                self.match(PostgreSQLParser.ALTER)
                self.state = 6662
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 6663
                self.function_with_argtypes()
                self.state = 6664
                self.match(PostgreSQLParser.SET)
                self.state = 6665
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6666
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6668
                self.match(PostgreSQLParser.ALTER)
                self.state = 6669
                self.match(PostgreSQLParser.TABLE)
                self.state = 6670
                self.relation_expr()
                self.state = 6671
                self.match(PostgreSQLParser.SET)
                self.state = 6672
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6673
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6675
                self.match(PostgreSQLParser.ALTER)
                self.state = 6676
                self.match(PostgreSQLParser.TABLE)
                self.state = 6677
                self.match(PostgreSQLParser.IF_P)
                self.state = 6678
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6679
                self.relation_expr()
                self.state = 6680
                self.match(PostgreSQLParser.SET)
                self.state = 6681
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6682
                self.name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6684
                self.match(PostgreSQLParser.ALTER)
                self.state = 6685
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 6686
                self.any_name()
                self.state = 6687
                self.match(PostgreSQLParser.SET)
                self.state = 6688
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6689
                self.name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6691
                self.match(PostgreSQLParser.ALTER)
                self.state = 6692
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6693
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6694
                self.match(PostgreSQLParser.PARSER)
                self.state = 6695
                self.any_name()
                self.state = 6696
                self.match(PostgreSQLParser.SET)
                self.state = 6697
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6698
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6700
                self.match(PostgreSQLParser.ALTER)
                self.state = 6701
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6702
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6703
                self.match(PostgreSQLParser.DICTIONARY)
                self.state = 6704
                self.any_name()
                self.state = 6705
                self.match(PostgreSQLParser.SET)
                self.state = 6706
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6707
                self.name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6709
                self.match(PostgreSQLParser.ALTER)
                self.state = 6710
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6711
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6712
                self.match(PostgreSQLParser.TEMPLATE)
                self.state = 6713
                self.any_name()
                self.state = 6714
                self.match(PostgreSQLParser.SET)
                self.state = 6715
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6716
                self.name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6718
                self.match(PostgreSQLParser.ALTER)
                self.state = 6719
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6720
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6721
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 6722
                self.any_name()
                self.state = 6723
                self.match(PostgreSQLParser.SET)
                self.state = 6724
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6725
                self.name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6727
                self.match(PostgreSQLParser.ALTER)
                self.state = 6728
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 6729
                self.qualified_name()
                self.state = 6730
                self.match(PostgreSQLParser.SET)
                self.state = 6731
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6732
                self.name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6734
                self.match(PostgreSQLParser.ALTER)
                self.state = 6735
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 6736
                self.match(PostgreSQLParser.IF_P)
                self.state = 6737
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6738
                self.qualified_name()
                self.state = 6739
                self.match(PostgreSQLParser.SET)
                self.state = 6740
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6741
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6743
                self.match(PostgreSQLParser.ALTER)
                self.state = 6744
                self.match(PostgreSQLParser.VIEW)
                self.state = 6745
                self.qualified_name()
                self.state = 6746
                self.match(PostgreSQLParser.SET)
                self.state = 6747
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6748
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6750
                self.match(PostgreSQLParser.ALTER)
                self.state = 6751
                self.match(PostgreSQLParser.VIEW)
                self.state = 6752
                self.match(PostgreSQLParser.IF_P)
                self.state = 6753
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6754
                self.qualified_name()
                self.state = 6755
                self.match(PostgreSQLParser.SET)
                self.state = 6756
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6757
                self.name()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6759
                self.match(PostgreSQLParser.ALTER)
                self.state = 6760
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6761
                self.match(PostgreSQLParser.VIEW)
                self.state = 6762
                self.qualified_name()
                self.state = 6763
                self.match(PostgreSQLParser.SET)
                self.state = 6764
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6765
                self.name()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6767
                self.match(PostgreSQLParser.ALTER)
                self.state = 6768
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6769
                self.match(PostgreSQLParser.VIEW)
                self.state = 6770
                self.match(PostgreSQLParser.IF_P)
                self.state = 6771
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6772
                self.qualified_name()
                self.state = 6773
                self.match(PostgreSQLParser.SET)
                self.state = 6774
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6775
                self.name()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6777
                self.match(PostgreSQLParser.ALTER)
                self.state = 6778
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6779
                self.match(PostgreSQLParser.TABLE)
                self.state = 6780
                self.relation_expr()
                self.state = 6781
                self.match(PostgreSQLParser.SET)
                self.state = 6782
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6783
                self.name()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 6785
                self.match(PostgreSQLParser.ALTER)
                self.state = 6786
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6787
                self.match(PostgreSQLParser.TABLE)
                self.state = 6788
                self.match(PostgreSQLParser.IF_P)
                self.state = 6789
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6790
                self.relation_expr()
                self.state = 6791
                self.match(PostgreSQLParser.SET)
                self.state = 6792
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6793
                self.name()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 6795
                self.match(PostgreSQLParser.ALTER)
                self.state = 6796
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 6797
                self.any_name()
                self.state = 6798
                self.match(PostgreSQLParser.SET)
                self.state = 6799
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6800
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteroperatorstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def operator_def_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_def_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alteroperatorstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteroperatorstmt" ):
                listener.enterAlteroperatorstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteroperatorstmt" ):
                listener.exitAlteroperatorstmt(self)




    def alteroperatorstmt(self):

        localctx = PostgreSQLParser.AlteroperatorstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_alteroperatorstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6804
            self.match(PostgreSQLParser.ALTER)
            self.state = 6805
            self.match(PostgreSQLParser.OPERATOR)
            self.state = 6806
            self.operator_with_argtypes()
            self.state = 6807
            self.match(PostgreSQLParser.SET)
            self.state = 6808
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 6809
            self.operator_def_list()
            self.state = 6810
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_def_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_def_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Operator_def_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Operator_def_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_def_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_def_list" ):
                listener.enterOperator_def_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_def_list" ):
                listener.exitOperator_def_list(self)




    def operator_def_list(self):

        localctx = PostgreSQLParser.Operator_def_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_operator_def_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6812
            self.operator_def_elem()
            self.state = 6817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 6813
                self.match(PostgreSQLParser.COMMA)
                self.state = 6814
                self.operator_def_elem()
                self.state = 6819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_def_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def operator_def_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_def_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_def_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_def_elem" ):
                listener.enterOperator_def_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_def_elem" ):
                listener.exitOperator_def_elem(self)




    def operator_def_elem(self):

        localctx = PostgreSQLParser.Operator_def_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_operator_def_elem)
        try:
            self.state = 6828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6820
                self.colLabel()
                self.state = 6821
                self.match(PostgreSQLParser.EQUAL)
                self.state = 6822
                self.match(PostgreSQLParser.NONE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6824
                self.colLabel()
                self.state = 6825
                self.match(PostgreSQLParser.EQUAL)
                self.state = 6826
                self.operator_def_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_def_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reserved_keywordContext,0)


        def qual_all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_all_opContext,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_def_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_def_arg" ):
                listener.enterOperator_def_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_def_arg" ):
                listener.exitOperator_def_arg(self)




    def operator_def_arg(self):

        localctx = PostgreSQLParser.Operator_def_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_operator_def_arg)
        try:
            self.state = 6835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6830
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6831
                self.reserved_keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6832
                self.qual_all_op()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6833
                self.numericonly()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6834
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertypestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def operator_def_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_def_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertypestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertypestmt" ):
                listener.enterAltertypestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertypestmt" ):
                listener.exitAltertypestmt(self)




    def altertypestmt(self):

        localctx = PostgreSQLParser.AltertypestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_altertypestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6837
            self.match(PostgreSQLParser.ALTER)
            self.state = 6838
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 6839
            self.any_name()
            self.state = 6840
            self.match(PostgreSQLParser.SET)
            self.state = 6841
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 6842
            self.operator_def_list()
            self.state = 6843
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterownerstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def procedural_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Procedural_Context,0)


        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterownerstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterownerstmt" ):
                listener.enterAlterownerstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterownerstmt" ):
                listener.exitAlterownerstmt(self)




    def alterownerstmt(self):

        localctx = PostgreSQLParser.AlterownerstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_alterownerstmt)
        self._la = 0 # Token type
        try:
            self.state = 7030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6845
                self.match(PostgreSQLParser.ALTER)
                self.state = 6846
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 6847
                self.aggregate_with_argtypes()
                self.state = 6848
                self.match(PostgreSQLParser.OWNER)
                self.state = 6849
                self.match(PostgreSQLParser.TO)
                self.state = 6850
                self.rolespec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6852
                self.match(PostgreSQLParser.ALTER)
                self.state = 6853
                self.match(PostgreSQLParser.COLLATION)
                self.state = 6854
                self.any_name()
                self.state = 6855
                self.match(PostgreSQLParser.OWNER)
                self.state = 6856
                self.match(PostgreSQLParser.TO)
                self.state = 6857
                self.rolespec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6859
                self.match(PostgreSQLParser.ALTER)
                self.state = 6860
                self.match(PostgreSQLParser.CONVERSION_P)
                self.state = 6861
                self.any_name()
                self.state = 6862
                self.match(PostgreSQLParser.OWNER)
                self.state = 6863
                self.match(PostgreSQLParser.TO)
                self.state = 6864
                self.rolespec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6866
                self.match(PostgreSQLParser.ALTER)
                self.state = 6867
                self.match(PostgreSQLParser.DATABASE)
                self.state = 6868
                self.name()
                self.state = 6869
                self.match(PostgreSQLParser.OWNER)
                self.state = 6870
                self.match(PostgreSQLParser.TO)
                self.state = 6871
                self.rolespec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6873
                self.match(PostgreSQLParser.ALTER)
                self.state = 6874
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 6875
                self.any_name()
                self.state = 6876
                self.match(PostgreSQLParser.OWNER)
                self.state = 6877
                self.match(PostgreSQLParser.TO)
                self.state = 6878
                self.rolespec()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6880
                self.match(PostgreSQLParser.ALTER)
                self.state = 6881
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 6882
                self.function_with_argtypes()
                self.state = 6883
                self.match(PostgreSQLParser.OWNER)
                self.state = 6884
                self.match(PostgreSQLParser.TO)
                self.state = 6885
                self.rolespec()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6887
                self.match(PostgreSQLParser.ALTER)
                self.state = 6889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PROCEDURAL:
                    self.state = 6888
                    self.procedural_()


                self.state = 6891
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 6892
                self.name()
                self.state = 6893
                self.match(PostgreSQLParser.OWNER)
                self.state = 6894
                self.match(PostgreSQLParser.TO)
                self.state = 6895
                self.rolespec()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6897
                self.match(PostgreSQLParser.ALTER)
                self.state = 6898
                self.match(PostgreSQLParser.LARGE_P)
                self.state = 6899
                self.match(PostgreSQLParser.OBJECT_P)
                self.state = 6900
                self.numericonly()
                self.state = 6901
                self.match(PostgreSQLParser.OWNER)
                self.state = 6902
                self.match(PostgreSQLParser.TO)
                self.state = 6903
                self.rolespec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6905
                self.match(PostgreSQLParser.ALTER)
                self.state = 6906
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6907
                self.operator_with_argtypes()
                self.state = 6908
                self.match(PostgreSQLParser.OWNER)
                self.state = 6909
                self.match(PostgreSQLParser.TO)
                self.state = 6910
                self.rolespec()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6912
                self.match(PostgreSQLParser.ALTER)
                self.state = 6913
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6914
                self.match(PostgreSQLParser.CLASS)
                self.state = 6915
                self.any_name()
                self.state = 6916
                self.match(PostgreSQLParser.USING)
                self.state = 6917
                self.name()
                self.state = 6918
                self.match(PostgreSQLParser.OWNER)
                self.state = 6919
                self.match(PostgreSQLParser.TO)
                self.state = 6920
                self.rolespec()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6922
                self.match(PostgreSQLParser.ALTER)
                self.state = 6923
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6924
                self.match(PostgreSQLParser.FAMILY)
                self.state = 6925
                self.any_name()
                self.state = 6926
                self.match(PostgreSQLParser.USING)
                self.state = 6927
                self.name()
                self.state = 6928
                self.match(PostgreSQLParser.OWNER)
                self.state = 6929
                self.match(PostgreSQLParser.TO)
                self.state = 6930
                self.rolespec()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6932
                self.match(PostgreSQLParser.ALTER)
                self.state = 6933
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 6934
                self.function_with_argtypes()
                self.state = 6935
                self.match(PostgreSQLParser.OWNER)
                self.state = 6936
                self.match(PostgreSQLParser.TO)
                self.state = 6937
                self.rolespec()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6939
                self.match(PostgreSQLParser.ALTER)
                self.state = 6940
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 6941
                self.function_with_argtypes()
                self.state = 6942
                self.match(PostgreSQLParser.OWNER)
                self.state = 6943
                self.match(PostgreSQLParser.TO)
                self.state = 6944
                self.rolespec()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6946
                self.match(PostgreSQLParser.ALTER)
                self.state = 6947
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6948
                self.name()
                self.state = 6949
                self.match(PostgreSQLParser.OWNER)
                self.state = 6950
                self.match(PostgreSQLParser.TO)
                self.state = 6951
                self.rolespec()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6953
                self.match(PostgreSQLParser.ALTER)
                self.state = 6954
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 6955
                self.any_name()
                self.state = 6956
                self.match(PostgreSQLParser.OWNER)
                self.state = 6957
                self.match(PostgreSQLParser.TO)
                self.state = 6958
                self.rolespec()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6960
                self.match(PostgreSQLParser.ALTER)
                self.state = 6961
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 6962
                self.name()
                self.state = 6963
                self.match(PostgreSQLParser.OWNER)
                self.state = 6964
                self.match(PostgreSQLParser.TO)
                self.state = 6965
                self.rolespec()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6967
                self.match(PostgreSQLParser.ALTER)
                self.state = 6968
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 6969
                self.any_name()
                self.state = 6970
                self.match(PostgreSQLParser.OWNER)
                self.state = 6971
                self.match(PostgreSQLParser.TO)
                self.state = 6972
                self.rolespec()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6974
                self.match(PostgreSQLParser.ALTER)
                self.state = 6975
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6976
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6977
                self.match(PostgreSQLParser.DICTIONARY)
                self.state = 6978
                self.any_name()
                self.state = 6979
                self.match(PostgreSQLParser.OWNER)
                self.state = 6980
                self.match(PostgreSQLParser.TO)
                self.state = 6981
                self.rolespec()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6983
                self.match(PostgreSQLParser.ALTER)
                self.state = 6984
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6985
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6986
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 6987
                self.any_name()
                self.state = 6988
                self.match(PostgreSQLParser.OWNER)
                self.state = 6989
                self.match(PostgreSQLParser.TO)
                self.state = 6990
                self.rolespec()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6992
                self.match(PostgreSQLParser.ALTER)
                self.state = 6993
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6994
                self.match(PostgreSQLParser.DATA_P)
                self.state = 6995
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 6996
                self.name()
                self.state = 6997
                self.match(PostgreSQLParser.OWNER)
                self.state = 6998
                self.match(PostgreSQLParser.TO)
                self.state = 6999
                self.rolespec()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7001
                self.match(PostgreSQLParser.ALTER)
                self.state = 7002
                self.match(PostgreSQLParser.SERVER)
                self.state = 7003
                self.name()
                self.state = 7004
                self.match(PostgreSQLParser.OWNER)
                self.state = 7005
                self.match(PostgreSQLParser.TO)
                self.state = 7006
                self.rolespec()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7008
                self.match(PostgreSQLParser.ALTER)
                self.state = 7009
                self.match(PostgreSQLParser.EVENT)
                self.state = 7010
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 7011
                self.name()
                self.state = 7012
                self.match(PostgreSQLParser.OWNER)
                self.state = 7013
                self.match(PostgreSQLParser.TO)
                self.state = 7014
                self.rolespec()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7016
                self.match(PostgreSQLParser.ALTER)
                self.state = 7017
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7018
                self.name()
                self.state = 7019
                self.match(PostgreSQLParser.OWNER)
                self.state = 7020
                self.match(PostgreSQLParser.TO)
                self.state = 7021
                self.rolespec()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7023
                self.match(PostgreSQLParser.ALTER)
                self.state = 7024
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7025
                self.name()
                self.state = 7026
                self.match(PostgreSQLParser.OWNER)
                self.state = 7027
                self.match(PostgreSQLParser.TO)
                self.state = 7028
                self.rolespec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatepublicationstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def publication_for_tables_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Publication_for_tables_Context,0)


        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createpublicationstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatepublicationstmt" ):
                listener.enterCreatepublicationstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatepublicationstmt" ):
                listener.exitCreatepublicationstmt(self)




    def createpublicationstmt(self):

        localctx = PostgreSQLParser.CreatepublicationstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_createpublicationstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7032
            self.match(PostgreSQLParser.CREATE)
            self.state = 7033
            self.match(PostgreSQLParser.PUBLICATION)
            self.state = 7034
            self.name()
            self.state = 7036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FOR:
                self.state = 7035
                self.publication_for_tables_()


            self.state = 7039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 7038
                self.definition_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publication_for_tables_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def publication_for_tables(self):
            return self.getTypedRuleContext(PostgreSQLParser.Publication_for_tablesContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_publication_for_tables_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublication_for_tables_" ):
                listener.enterPublication_for_tables_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublication_for_tables_" ):
                listener.exitPublication_for_tables_(self)




    def publication_for_tables_(self):

        localctx = PostgreSQLParser.Publication_for_tables_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_publication_for_tables_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7041
            self.publication_for_tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publication_for_tablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_publication_for_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublication_for_tables" ):
                listener.enterPublication_for_tables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublication_for_tables" ):
                listener.exitPublication_for_tables(self)




    def publication_for_tables(self):

        localctx = PostgreSQLParser.Publication_for_tablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_publication_for_tables)
        try:
            self.state = 7049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7043
                self.match(PostgreSQLParser.FOR)
                self.state = 7044
                self.match(PostgreSQLParser.TABLE)
                self.state = 7045
                self.relation_expr_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7046
                self.match(PostgreSQLParser.FOR)
                self.state = 7047
                self.match(PostgreSQLParser.ALL)
                self.state = 7048
                self.match(PostgreSQLParser.TABLES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterpublicationstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterpublicationstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterpublicationstmt" ):
                listener.enterAlterpublicationstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterpublicationstmt" ):
                listener.exitAlterpublicationstmt(self)




    def alterpublicationstmt(self):

        localctx = PostgreSQLParser.AlterpublicationstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_alterpublicationstmt)
        try:
            self.state = 7078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7051
                self.match(PostgreSQLParser.ALTER)
                self.state = 7052
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7053
                self.name()
                self.state = 7054
                self.match(PostgreSQLParser.SET)
                self.state = 7055
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7057
                self.match(PostgreSQLParser.ALTER)
                self.state = 7058
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7059
                self.name()
                self.state = 7060
                self.match(PostgreSQLParser.ADD_P)
                self.state = 7061
                self.match(PostgreSQLParser.TABLE)
                self.state = 7062
                self.relation_expr_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7064
                self.match(PostgreSQLParser.ALTER)
                self.state = 7065
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7066
                self.name()
                self.state = 7067
                self.match(PostgreSQLParser.SET)
                self.state = 7068
                self.match(PostgreSQLParser.TABLE)
                self.state = 7069
                self.relation_expr_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7071
                self.match(PostgreSQLParser.ALTER)
                self.state = 7072
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7073
                self.name()
                self.state = 7074
                self.match(PostgreSQLParser.DROP)
                self.state = 7075
                self.match(PostgreSQLParser.TABLE)
                self.state = 7076
                self.relation_expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatesubscriptionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def publication_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Publication_name_listContext,0)


        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createsubscriptionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatesubscriptionstmt" ):
                listener.enterCreatesubscriptionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatesubscriptionstmt" ):
                listener.exitCreatesubscriptionstmt(self)




    def createsubscriptionstmt(self):

        localctx = PostgreSQLParser.CreatesubscriptionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_createsubscriptionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7080
            self.match(PostgreSQLParser.CREATE)
            self.state = 7081
            self.match(PostgreSQLParser.SUBSCRIPTION)
            self.state = 7082
            self.name()
            self.state = 7083
            self.match(PostgreSQLParser.CONNECTION)
            self.state = 7084
            self.sconst()
            self.state = 7085
            self.match(PostgreSQLParser.PUBLICATION)
            self.state = 7086
            self.publication_name_list()
            self.state = 7088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 7087
                self.definition_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publication_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def publication_name_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Publication_name_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Publication_name_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_publication_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublication_name_list" ):
                listener.enterPublication_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublication_name_list" ):
                listener.exitPublication_name_list(self)




    def publication_name_list(self):

        localctx = PostgreSQLParser.Publication_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_publication_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7090
            self.publication_name_item()
            self.state = 7095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 7091
                self.match(PostgreSQLParser.COMMA)
                self.state = 7092
                self.publication_name_item()
                self.state = 7097
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publication_name_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_publication_name_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublication_name_item" ):
                listener.enterPublication_name_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublication_name_item" ):
                listener.exitPublication_name_item(self)




    def publication_name_item(self):

        localctx = PostgreSQLParser.Publication_name_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_publication_name_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7098
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltersubscriptionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def publication_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Publication_name_listContext,0)


        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altersubscriptionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltersubscriptionstmt" ):
                listener.enterAltersubscriptionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltersubscriptionstmt" ):
                listener.exitAltersubscriptionstmt(self)




    def altersubscriptionstmt(self):

        localctx = PostgreSQLParser.AltersubscriptionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_altersubscriptionstmt)
        self._la = 0 # Token type
        try:
            self.state = 7139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7100
                self.match(PostgreSQLParser.ALTER)
                self.state = 7101
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7102
                self.name()
                self.state = 7103
                self.match(PostgreSQLParser.SET)
                self.state = 7104
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7106
                self.match(PostgreSQLParser.ALTER)
                self.state = 7107
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7108
                self.name()
                self.state = 7109
                self.match(PostgreSQLParser.CONNECTION)
                self.state = 7110
                self.sconst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7112
                self.match(PostgreSQLParser.ALTER)
                self.state = 7113
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7114
                self.name()
                self.state = 7115
                self.match(PostgreSQLParser.REFRESH)
                self.state = 7116
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 7117
                    self.definition_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7120
                self.match(PostgreSQLParser.ALTER)
                self.state = 7121
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7122
                self.name()
                self.state = 7123
                self.match(PostgreSQLParser.SET)
                self.state = 7124
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7125
                self.publication_name_list()
                self.state = 7127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 7126
                    self.definition_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7129
                self.match(PostgreSQLParser.ALTER)
                self.state = 7130
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7131
                self.name()
                self.state = 7132
                self.match(PostgreSQLParser.ENABLE_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7134
                self.match(PostgreSQLParser.ALTER)
                self.state = 7135
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7136
                self.name()
                self.state = 7137
                self.match(PostgreSQLParser.DISABLE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropsubscriptionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropsubscriptionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropsubscriptionstmt" ):
                listener.enterDropsubscriptionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropsubscriptionstmt" ):
                listener.exitDropsubscriptionstmt(self)




    def dropsubscriptionstmt(self):

        localctx = PostgreSQLParser.DropsubscriptionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_dropsubscriptionstmt)
        self._la = 0 # Token type
        try:
            self.state = 7155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7141
                self.match(PostgreSQLParser.DROP)
                self.state = 7142
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7143
                self.name()
                self.state = 7145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 7144
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7147
                self.match(PostgreSQLParser.DROP)
                self.state = 7148
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7149
                self.match(PostgreSQLParser.IF_P)
                self.state = 7150
                self.match(PostgreSQLParser.EXISTS)
                self.state = 7151
                self.name()
                self.state = 7153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 7152
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def event(self):
            return self.getTypedRuleContext(PostgreSQLParser.EventContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def ruleactionlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.RuleactionlistContext,0)


        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def instead_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Instead_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rulestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulestmt" ):
                listener.enterRulestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulestmt" ):
                listener.exitRulestmt(self)




    def rulestmt(self):

        localctx = PostgreSQLParser.RulestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_rulestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7157
            self.match(PostgreSQLParser.CREATE)
            self.state = 7159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OR:
                self.state = 7158
                self.or_replace_()


            self.state = 7161
            self.match(PostgreSQLParser.RULE)
            self.state = 7162
            self.name()
            self.state = 7163
            self.match(PostgreSQLParser.AS)
            self.state = 7164
            self.match(PostgreSQLParser.ON)
            self.state = 7165
            self.event()
            self.state = 7166
            self.match(PostgreSQLParser.TO)
            self.state = 7167
            self.qualified_name()
            self.state = 7169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WHERE:
                self.state = 7168
                self.where_clause()


            self.state = 7171
            self.match(PostgreSQLParser.DO)
            self.state = 7173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ALSO or _la==PostgreSQLParser.INSTEAD:
                self.state = 7172
                self.instead_()


            self.state = 7175
            self.ruleactionlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleactionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def ruleactionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RuleactionstmtContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def ruleactionmulti(self):
            return self.getTypedRuleContext(PostgreSQLParser.RuleactionmultiContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ruleactionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleactionlist" ):
                listener.enterRuleactionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleactionlist" ):
                listener.exitRuleactionlist(self)




    def ruleactionlist(self):

        localctx = PostgreSQLParser.RuleactionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_ruleactionlist)
        try:
            self.state = 7183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7177
                self.match(PostgreSQLParser.NOTHING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7178
                self.ruleactionstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7179
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7180
                self.ruleactionmulti()
                self.state = 7181
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleactionmultiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleactionstmtOrEmpty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.RuleactionstmtOrEmptyContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.RuleactionstmtOrEmptyContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SEMI)
            else:
                return self.getToken(PostgreSQLParser.SEMI, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ruleactionmulti

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleactionmulti" ):
                listener.enterRuleactionmulti(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleactionmulti" ):
                listener.exitRuleactionmulti(self)




    def ruleactionmulti(self):

        localctx = PostgreSQLParser.RuleactionmultiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_ruleactionmulti)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (PostgreSQLParser.SELECT - 126)) | (1 << (PostgreSQLParser.TABLE - 126)) | (1 << (PostgreSQLParser.WITH - 126)))) != 0) or _la==PostgreSQLParser.DELETE_P or _la==PostgreSQLParser.INSERT or _la==PostgreSQLParser.NOTIFY or _la==PostgreSQLParser.UPDATE or _la==PostgreSQLParser.VALUES:
                self.state = 7185
                self.ruleactionstmtOrEmpty()


            self.state = 7194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.SEMI:
                self.state = 7188
                self.match(PostgreSQLParser.SEMI)
                self.state = 7190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (PostgreSQLParser.SELECT - 126)) | (1 << (PostgreSQLParser.TABLE - 126)) | (1 << (PostgreSQLParser.WITH - 126)))) != 0) or _la==PostgreSQLParser.DELETE_P or _la==PostgreSQLParser.INSERT or _la==PostgreSQLParser.NOTIFY or _la==PostgreSQLParser.UPDATE or _la==PostgreSQLParser.VALUES:
                    self.state = 7189
                    self.ruleactionstmtOrEmpty()


                self.state = 7196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleactionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def insertstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.InsertstmtContext,0)


        def updatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UpdatestmtContext,0)


        def deletestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeletestmtContext,0)


        def notifystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.NotifystmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ruleactionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleactionstmt" ):
                listener.enterRuleactionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleactionstmt" ):
                listener.exitRuleactionstmt(self)




    def ruleactionstmt(self):

        localctx = PostgreSQLParser.RuleactionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_ruleactionstmt)
        try:
            self.state = 7202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7197
                self.selectstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7198
                self.insertstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7199
                self.updatestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7200
                self.deletestmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7201
                self.notifystmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleactionstmtOrEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleactionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RuleactionstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ruleactionstmtOrEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleactionstmtOrEmpty" ):
                listener.enterRuleactionstmtOrEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleactionstmtOrEmpty" ):
                listener.exitRuleactionstmtOrEmpty(self)




    def ruleactionstmtOrEmpty(self):

        localctx = PostgreSQLParser.RuleactionstmtOrEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_ruleactionstmtOrEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7204
            self.ruleactionstmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent" ):
                listener.enterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent" ):
                listener.exitEvent(self)




    def event(self):

        localctx = PostgreSQLParser.EventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_event)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7206
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.SELECT or _la==PostgreSQLParser.DELETE_P or _la==PostgreSQLParser.INSERT or _la==PostgreSQLParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Instead_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTEAD(self):
            return self.getToken(PostgreSQLParser.INSTEAD, 0)

        def ALSO(self):
            return self.getToken(PostgreSQLParser.ALSO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_instead_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstead_" ):
                listener.enterInstead_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstead_" ):
                listener.exitInstead_(self)




    def instead_(self):

        localctx = PostgreSQLParser.Instead_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_instead_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7208
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ALSO or _la==PostgreSQLParser.INSTEAD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotifystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTIFY(self):
            return self.getToken(PostgreSQLParser.NOTIFY, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def notify_payload(self):
            return self.getTypedRuleContext(PostgreSQLParser.Notify_payloadContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_notifystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotifystmt" ):
                listener.enterNotifystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotifystmt" ):
                listener.exitNotifystmt(self)




    def notifystmt(self):

        localctx = PostgreSQLParser.NotifystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_notifystmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7210
            self.match(PostgreSQLParser.NOTIFY)
            self.state = 7211
            self.colid()
            self.state = 7213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.COMMA:
                self.state = 7212
                self.notify_payload()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notify_payloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_notify_payload

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotify_payload" ):
                listener.enterNotify_payload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotify_payload" ):
                listener.exitNotify_payload(self)




    def notify_payload(self):

        localctx = PostgreSQLParser.Notify_payloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_notify_payload)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7215
            self.match(PostgreSQLParser.COMMA)
            self.state = 7216
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListenstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LISTEN(self):
            return self.getToken(PostgreSQLParser.LISTEN, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_listenstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListenstmt" ):
                listener.enterListenstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListenstmt" ):
                listener.exitListenstmt(self)




    def listenstmt(self):

        localctx = PostgreSQLParser.ListenstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_listenstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7218
            self.match(PostgreSQLParser.LISTEN)
            self.state = 7219
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlistenstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLISTEN(self):
            return self.getToken(PostgreSQLParser.UNLISTEN, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_unlistenstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlistenstmt" ):
                listener.enterUnlistenstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlistenstmt" ):
                listener.exitUnlistenstmt(self)




    def unlistenstmt(self):

        localctx = PostgreSQLParser.UnlistenstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_unlistenstmt)
        try:
            self.state = 7225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7221
                self.match(PostgreSQLParser.UNLISTEN)
                self.state = 7222
                self.colid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7223
                self.match(PostgreSQLParser.UNLISTEN)
                self.state = 7224
                self.match(PostgreSQLParser.STAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_P(self):
            return self.getToken(PostgreSQLParser.ABORT_P, 0)

        def transaction_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_Context,0)


        def transaction_chain_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_chain_Context,0)


        def BEGIN_P(self):
            return self.getToken(PostgreSQLParser.BEGIN_P, 0)

        def transaction_mode_list_or_empty(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_mode_list_or_emptyContext,0)


        def START(self):
            return self.getToken(PostgreSQLParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(PostgreSQLParser.COMMIT, 0)

        def END_P(self):
            return self.getToken(PostgreSQLParser.END_P, 0)

        def ROLLBACK(self):
            return self.getToken(PostgreSQLParser.ROLLBACK, 0)

        def SAVEPOINT(self):
            return self.getToken(PostgreSQLParser.SAVEPOINT, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def RELEASE(self):
            return self.getToken(PostgreSQLParser.RELEASE, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def PREPARED(self):
            return self.getToken(PostgreSQLParser.PREPARED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transactionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionstmt" ):
                listener.enterTransactionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionstmt" ):
                listener.exitTransactionstmt(self)




    def transactionstmt(self):

        localctx = PostgreSQLParser.TransactionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_transactionstmt)
        self._la = 0 # Token type
        try:
            self.state = 7296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7227
                self.match(PostgreSQLParser.ABORT_P)
                self.state = 7229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TRANSACTION or _la==PostgreSQLParser.WORK:
                    self.state = 7228
                    self.transaction_()


                self.state = 7232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AND:
                    self.state = 7231
                    self.transaction_chain_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7234
                self.match(PostgreSQLParser.BEGIN_P)
                self.state = 7236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TRANSACTION or _la==PostgreSQLParser.WORK:
                    self.state = 7235
                    self.transaction_()


                self.state = 7239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.DEFERRABLE or _la==PostgreSQLParser.NOT or _la==PostgreSQLParser.ISOLATION or _la==PostgreSQLParser.READ:
                    self.state = 7238
                    self.transaction_mode_list_or_empty()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7241
                self.match(PostgreSQLParser.START)
                self.state = 7242
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 7244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.DEFERRABLE or _la==PostgreSQLParser.NOT or _la==PostgreSQLParser.ISOLATION or _la==PostgreSQLParser.READ:
                    self.state = 7243
                    self.transaction_mode_list_or_empty()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7246
                self.match(PostgreSQLParser.COMMIT)
                self.state = 7248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TRANSACTION or _la==PostgreSQLParser.WORK:
                    self.state = 7247
                    self.transaction_()


                self.state = 7251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AND:
                    self.state = 7250
                    self.transaction_chain_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7253
                self.match(PostgreSQLParser.END_P)
                self.state = 7255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TRANSACTION or _la==PostgreSQLParser.WORK:
                    self.state = 7254
                    self.transaction_()


                self.state = 7258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AND:
                    self.state = 7257
                    self.transaction_chain_()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7260
                self.match(PostgreSQLParser.ROLLBACK)
                self.state = 7262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TRANSACTION or _la==PostgreSQLParser.WORK:
                    self.state = 7261
                    self.transaction_()


                self.state = 7265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AND:
                    self.state = 7264
                    self.transaction_chain_()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7267
                self.match(PostgreSQLParser.SAVEPOINT)
                self.state = 7268
                self.colid()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7269
                self.match(PostgreSQLParser.RELEASE)
                self.state = 7270
                self.match(PostgreSQLParser.SAVEPOINT)
                self.state = 7271
                self.colid()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7272
                self.match(PostgreSQLParser.RELEASE)
                self.state = 7273
                self.colid()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7274
                self.match(PostgreSQLParser.ROLLBACK)
                self.state = 7276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TRANSACTION or _la==PostgreSQLParser.WORK:
                    self.state = 7275
                    self.transaction_()


                self.state = 7278
                self.match(PostgreSQLParser.TO)
                self.state = 7279
                self.match(PostgreSQLParser.SAVEPOINT)
                self.state = 7280
                self.colid()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7281
                self.match(PostgreSQLParser.ROLLBACK)
                self.state = 7283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TRANSACTION or _la==PostgreSQLParser.WORK:
                    self.state = 7282
                    self.transaction_()


                self.state = 7285
                self.match(PostgreSQLParser.TO)
                self.state = 7286
                self.colid()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7287
                self.match(PostgreSQLParser.PREPARE)
                self.state = 7288
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 7289
                self.sconst()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7290
                self.match(PostgreSQLParser.COMMIT)
                self.state = 7291
                self.match(PostgreSQLParser.PREPARED)
                self.state = 7292
                self.sconst()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7293
                self.match(PostgreSQLParser.ROLLBACK)
                self.state = 7294
                self.match(PostgreSQLParser.PREPARED)
                self.state = 7295
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WORK(self):
            return self.getToken(PostgreSQLParser.WORK, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_" ):
                listener.enterTransaction_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_" ):
                listener.exitTransaction_(self)




    def transaction_(self):

        localctx = PostgreSQLParser.Transaction_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_transaction_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7298
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.TRANSACTION or _la==PostgreSQLParser.WORK):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_mode_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def iso_level(self):
            return self.getTypedRuleContext(PostgreSQLParser.Iso_levelContext,0)


        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(PostgreSQLParser.WRITE, 0)

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_mode_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_mode_item" ):
                listener.enterTransaction_mode_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_mode_item" ):
                listener.exitTransaction_mode_item(self)




    def transaction_mode_item(self):

        localctx = PostgreSQLParser.Transaction_mode_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_transaction_mode_item)
        try:
            self.state = 7310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7300
                self.match(PostgreSQLParser.ISOLATION)
                self.state = 7301
                self.match(PostgreSQLParser.LEVEL)
                self.state = 7302
                self.iso_level()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7303
                self.match(PostgreSQLParser.READ)
                self.state = 7304
                self.match(PostgreSQLParser.ONLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7305
                self.match(PostgreSQLParser.READ)
                self.state = 7306
                self.match(PostgreSQLParser.WRITE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7307
                self.match(PostgreSQLParser.DEFERRABLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7308
                self.match(PostgreSQLParser.NOT)
                self.state = 7309
                self.match(PostgreSQLParser.DEFERRABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_mode_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transaction_mode_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Transaction_mode_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Transaction_mode_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_mode_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_mode_list" ):
                listener.enterTransaction_mode_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_mode_list" ):
                listener.exitTransaction_mode_list(self)




    def transaction_mode_list(self):

        localctx = PostgreSQLParser.Transaction_mode_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_transaction_mode_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7312
            self.transaction_mode_item()
            self.state = 7319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA or _la==PostgreSQLParser.DEFERRABLE or _la==PostgreSQLParser.NOT or _la==PostgreSQLParser.ISOLATION or _la==PostgreSQLParser.READ:
                self.state = 7314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 7313
                    self.match(PostgreSQLParser.COMMA)


                self.state = 7316
                self.transaction_mode_item()
                self.state = 7321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_mode_list_or_emptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transaction_mode_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_mode_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_mode_list_or_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_mode_list_or_empty" ):
                listener.enterTransaction_mode_list_or_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_mode_list_or_empty" ):
                listener.exitTransaction_mode_list_or_empty(self)




    def transaction_mode_list_or_empty(self):

        localctx = PostgreSQLParser.Transaction_mode_list_or_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_transaction_mode_list_or_empty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7322
            self.transaction_mode_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_chain_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def CHAIN(self):
            return self.getToken(PostgreSQLParser.CHAIN, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_chain_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_chain_" ):
                listener.enterTransaction_chain_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_chain_" ):
                listener.exitTransaction_chain_(self)




    def transaction_chain_(self):

        localctx = PostgreSQLParser.Transaction_chain_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_transaction_chain_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7324
            self.match(PostgreSQLParser.AND)
            self.state = 7326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NO:
                self.state = 7325
                self.match(PostgreSQLParser.NO)


            self.state = 7328
            self.match(PostgreSQLParser.CHAIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def RECURSIVE(self):
            return self.getToken(PostgreSQLParser.RECURSIVE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def OR(self):
            return self.getToken(PostgreSQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def check_option_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Check_option_Context,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def reloptions_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloptions_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_viewstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewstmt" ):
                listener.enterViewstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewstmt" ):
                listener.exitViewstmt(self)




    def viewstmt(self):

        localctx = PostgreSQLParser.ViewstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_viewstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7330
            self.match(PostgreSQLParser.CREATE)
            self.state = 7333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OR:
                self.state = 7331
                self.match(PostgreSQLParser.OR)
                self.state = 7332
                self.match(PostgreSQLParser.REPLACE)


            self.state = 7336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.GLOBAL or _la==PostgreSQLParser.LOCAL or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (PostgreSQLParser.TEMP - 383)) | (1 << (PostgreSQLParser.TEMPORARY - 383)) | (1 << (PostgreSQLParser.UNLOGGED - 383)))) != 0):
                self.state = 7335
                self.opttemp()


            self.state = 7355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.VIEW]:
                self.state = 7338
                self.match(PostgreSQLParser.VIEW)
                self.state = 7339
                self.qualified_name()
                self.state = 7341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 7340
                    self.column_list_()


                self.state = 7344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 7343
                    self.reloptions_()


                pass
            elif token in [PostgreSQLParser.RECURSIVE]:
                self.state = 7346
                self.match(PostgreSQLParser.RECURSIVE)
                self.state = 7347
                self.match(PostgreSQLParser.VIEW)
                self.state = 7348
                self.qualified_name()
                self.state = 7349
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7350
                self.columnlist()
                self.state = 7351
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 7352
                    self.reloptions_()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 7357
            self.match(PostgreSQLParser.AS)
            self.state = 7358
            self.selectstmt()
            self.state = 7360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 7359
                self.check_option_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Check_option_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def CASCADED(self):
            return self.getToken(PostgreSQLParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_check_option_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_option_" ):
                listener.enterCheck_option_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_option_" ):
                listener.exitCheck_option_(self)




    def check_option_(self):

        localctx = PostgreSQLParser.Check_option_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_check_option_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7362
            self.match(PostgreSQLParser.WITH)
            self.state = 7364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.CASCADED or _la==PostgreSQLParser.LOCAL:
                self.state = 7363
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.CASCADED or _la==PostgreSQLParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7366
            self.match(PostgreSQLParser.CHECK)
            self.state = 7367
            self.match(PostgreSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(PostgreSQLParser.LOAD, 0)

        def file_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.File_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_loadstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadstmt" ):
                listener.enterLoadstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadstmt" ):
                listener.exitLoadstmt(self)




    def loadstmt(self):

        localctx = PostgreSQLParser.LoadstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_loadstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7369
            self.match(PostgreSQLParser.LOAD)
            self.state = 7370
            self.file_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedbstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def createdb_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdbstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedbstmt" ):
                listener.enterCreatedbstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedbstmt" ):
                listener.exitCreatedbstmt(self)




    def createdbstmt(self):

        localctx = PostgreSQLParser.CreatedbstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_createdbstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7372
            self.match(PostgreSQLParser.CREATE)
            self.state = 7373
            self.match(PostgreSQLParser.DATABASE)
            self.state = 7374
            self.name()
            self.state = 7376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 7375
                self.with_()


            self.state = 7379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.CONNECTION or _la==PostgreSQLParser.ENCODING or _la==PostgreSQLParser.LOCATION or _la==PostgreSQLParser.OWNER or _la==PostgreSQLParser.TABLESPACE or _la==PostgreSQLParser.TEMPLATE or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)))) != 0):
                self.state = 7378
                self.createdb_opt_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createdb_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_items(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_itemsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdb_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedb_opt_list" ):
                listener.enterCreatedb_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedb_opt_list" ):
                listener.exitCreatedb_opt_list(self)




    def createdb_opt_list(self):

        localctx = PostgreSQLParser.Createdb_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_createdb_opt_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7381
            self.createdb_opt_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createdb_opt_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Createdb_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdb_opt_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedb_opt_items" ):
                listener.enterCreatedb_opt_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedb_opt_items" ):
                listener.exitCreatedb_opt_items(self)




    def createdb_opt_items(self):

        localctx = PostgreSQLParser.Createdb_opt_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_createdb_opt_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7384 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 7383
                self.createdb_opt_item()
                self.state = 7386 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.CONNECTION or _la==PostgreSQLParser.ENCODING or _la==PostgreSQLParser.LOCATION or _la==PostgreSQLParser.OWNER or _la==PostgreSQLParser.TABLESPACE or _la==PostgreSQLParser.TEMPLATE or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createdb_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_nameContext,0)


        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def equal_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Equal_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdb_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedb_opt_item" ):
                listener.enterCreatedb_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedb_opt_item" ):
                listener.exitCreatedb_opt_item(self)




    def createdb_opt_item(self):

        localctx = PostgreSQLParser.Createdb_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_createdb_opt_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7388
            self.createdb_opt_name()
            self.state = 7390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.EQUAL:
                self.state = 7389
                self.equal_()


            self.state = 7395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral]:
                self.state = 7392
                self.signediconst()
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.FALSE_P, PostgreSQLParser.ON, PostgreSQLParser.TRUE_P, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.state = 7393
                self.boolean_or_string_()
                pass
            elif token in [PostgreSQLParser.DEFAULT]:
                self.state = 7394
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createdb_opt_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def LOCATION(self):
            return self.getToken(PostgreSQLParser.LOCATION, 0)

        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdb_opt_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedb_opt_name" ):
                listener.enterCreatedb_opt_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedb_opt_name" ):
                listener.exitCreatedb_opt_name(self)




    def createdb_opt_name(self):

        localctx = PostgreSQLParser.Createdb_opt_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_createdb_opt_name)
        try:
            self.state = 7405
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7397
                self.identifier()
                pass
            elif token in [PostgreSQLParser.CONNECTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7398
                self.match(PostgreSQLParser.CONNECTION)
                self.state = 7399
                self.match(PostgreSQLParser.LIMIT)
                pass
            elif token in [PostgreSQLParser.ENCODING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7400
                self.match(PostgreSQLParser.ENCODING)
                pass
            elif token in [PostgreSQLParser.LOCATION]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7401
                self.match(PostgreSQLParser.LOCATION)
                pass
            elif token in [PostgreSQLParser.OWNER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7402
                self.match(PostgreSQLParser.OWNER)
                pass
            elif token in [PostgreSQLParser.TABLESPACE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7403
                self.match(PostgreSQLParser.TABLESPACE)
                pass
            elif token in [PostgreSQLParser.TEMPLATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7404
                self.match(PostgreSQLParser.TEMPLATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equal_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_equal_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqual_" ):
                listener.enterEqual_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqual_" ):
                listener.exitEqual_(self)




    def equal_(self):

        localctx = PostgreSQLParser.Equal_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_equal_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7407
            self.match(PostgreSQLParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterdatabasestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def createdb_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterdatabasestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterdatabasestmt" ):
                listener.enterAlterdatabasestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterdatabasestmt" ):
                listener.exitAlterdatabasestmt(self)




    def alterdatabasestmt(self):

        localctx = PostgreSQLParser.AlterdatabasestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_alterdatabasestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7409
            self.match(PostgreSQLParser.ALTER)
            self.state = 7410
            self.match(PostgreSQLParser.DATABASE)
            self.state = 7411
            self.name()
            self.state = 7422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.WITH]:
                self.state = 7412
                self.match(PostgreSQLParser.WITH)
                self.state = 7414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CONNECTION or _la==PostgreSQLParser.ENCODING or _la==PostgreSQLParser.LOCATION or _la==PostgreSQLParser.OWNER or _la==PostgreSQLParser.TABLESPACE or _la==PostgreSQLParser.TEMPLATE or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)))) != 0):
                    self.state = 7413
                    self.createdb_opt_list()


                pass
            elif token in [PostgreSQLParser.EOF, PostgreSQLParser.SEMI, PostgreSQLParser.CONNECTION, PostgreSQLParser.ENCODING, PostgreSQLParser.LOCATION, PostgreSQLParser.OWNER, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMPLATE, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.state = 7417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CONNECTION or _la==PostgreSQLParser.ENCODING or _la==PostgreSQLParser.LOCATION or _la==PostgreSQLParser.OWNER or _la==PostgreSQLParser.TABLESPACE or _la==PostgreSQLParser.TEMPLATE or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)))) != 0):
                    self.state = 7416
                    self.createdb_opt_list()


                pass
            elif token in [PostgreSQLParser.SET]:
                self.state = 7419
                self.match(PostgreSQLParser.SET)
                self.state = 7420
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 7421
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterdatabasesetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def setresetclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.SetresetclauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterdatabasesetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterdatabasesetstmt" ):
                listener.enterAlterdatabasesetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterdatabasesetstmt" ):
                listener.exitAlterdatabasesetstmt(self)




    def alterdatabasesetstmt(self):

        localctx = PostgreSQLParser.AlterdatabasesetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_alterdatabasesetstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7424
            self.match(PostgreSQLParser.ALTER)
            self.state = 7425
            self.match(PostgreSQLParser.DATABASE)
            self.state = 7426
            self.name()
            self.state = 7427
            self.setresetclause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropdbstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def drop_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropdbstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropdbstmt" ):
                listener.enterDropdbstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropdbstmt" ):
                listener.exitDropdbstmt(self)




    def dropdbstmt(self):

        localctx = PostgreSQLParser.DropdbstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_dropdbstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7429
            self.match(PostgreSQLParser.DROP)
            self.state = 7430
            self.match(PostgreSQLParser.DATABASE)
            self.state = 7433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,614,self._ctx)
            if la_ == 1:
                self.state = 7431
                self.match(PostgreSQLParser.IF_P)
                self.state = 7432
                self.match(PostgreSQLParser.EXISTS)


            self.state = 7435
            self.name()
            self.state = 7443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN or _la==PostgreSQLParser.WITH:
                self.state = 7437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 7436
                    self.with_()


                self.state = 7439
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7440
                self.drop_option_list()
                self.state = 7441
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Drop_optionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Drop_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_drop_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_option_list" ):
                listener.enterDrop_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_option_list" ):
                listener.exitDrop_option_list(self)




    def drop_option_list(self):

        localctx = PostgreSQLParser.Drop_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_drop_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7445
            self.drop_option()
            self.state = 7450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 7446
                self.match(PostgreSQLParser.COMMA)
                self.state = 7447
                self.drop_option()
                self.state = 7452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_drop_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_option" ):
                listener.enterDrop_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_option" ):
                listener.exitDrop_option(self)




    def drop_option(self):

        localctx = PostgreSQLParser.Drop_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_drop_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7453
            self.match(PostgreSQLParser.FORCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltercollationstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altercollationstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltercollationstmt" ):
                listener.enterAltercollationstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltercollationstmt" ):
                listener.exitAltercollationstmt(self)




    def altercollationstmt(self):

        localctx = PostgreSQLParser.AltercollationstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_altercollationstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7455
            self.match(PostgreSQLParser.ALTER)
            self.state = 7456
            self.match(PostgreSQLParser.COLLATION)
            self.state = 7457
            self.any_name()
            self.state = 7458
            self.match(PostgreSQLParser.REFRESH)
            self.state = 7459
            self.match(PostgreSQLParser.VERSION_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltersystemstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def generic_set(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_setContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altersystemstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltersystemstmt" ):
                listener.enterAltersystemstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltersystemstmt" ):
                listener.exitAltersystemstmt(self)




    def altersystemstmt(self):

        localctx = PostgreSQLParser.AltersystemstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_altersystemstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7461
            self.match(PostgreSQLParser.ALTER)
            self.state = 7462
            self.match(PostgreSQLParser.SYSTEM_P)
            self.state = 7463
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.RESET or _la==PostgreSQLParser.SET):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7464
            self.generic_set()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedomainstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def colquallist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColquallistContext,0)


        def as_(self):
            return self.getTypedRuleContext(PostgreSQLParser.As_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdomainstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedomainstmt" ):
                listener.enterCreatedomainstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedomainstmt" ):
                listener.exitCreatedomainstmt(self)




    def createdomainstmt(self):

        localctx = PostgreSQLParser.CreatedomainstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_createdomainstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7466
            self.match(PostgreSQLParser.CREATE)
            self.state = 7467
            self.match(PostgreSQLParser.DOMAIN_P)
            self.state = 7468
            self.any_name()
            self.state = 7470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS:
                self.state = 7469
                self.as_()


            self.state = 7472
            self.typename()
            self.state = 7473
            self.colquallist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterdomainstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def alter_column_default(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_column_defaultContext,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def tableconstraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableconstraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def VALIDATE(self):
            return self.getToken(PostgreSQLParser.VALIDATE, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterdomainstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterdomainstmt" ):
                listener.enterAlterdomainstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterdomainstmt" ):
                listener.exitAlterdomainstmt(self)




    def alterdomainstmt(self):

        localctx = PostgreSQLParser.AlterdomainstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_alterdomainstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7475
            self.match(PostgreSQLParser.ALTER)
            self.state = 7476
            self.match(PostgreSQLParser.DOMAIN_P)
            self.state = 7477
            self.any_name()
            self.state = 7500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
            if la_ == 1:
                self.state = 7478
                self.alter_column_default()
                pass

            elif la_ == 2:
                self.state = 7479
                self.match(PostgreSQLParser.DROP)
                self.state = 7480
                self.match(PostgreSQLParser.NOT)
                self.state = 7481
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 3:
                self.state = 7482
                self.match(PostgreSQLParser.SET)
                self.state = 7483
                self.match(PostgreSQLParser.NOT)
                self.state = 7484
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 4:
                self.state = 7485
                self.match(PostgreSQLParser.ADD_P)
                self.state = 7486
                self.tableconstraint()
                pass

            elif la_ == 5:
                self.state = 7487
                self.match(PostgreSQLParser.DROP)
                self.state = 7488
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 7491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
                if la_ == 1:
                    self.state = 7489
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 7490
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 7493
                self.name()
                self.state = 7495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.CASCADE or _la==PostgreSQLParser.RESTRICT:
                    self.state = 7494
                    self.drop_behavior_()


                pass

            elif la_ == 6:
                self.state = 7497
                self.match(PostgreSQLParser.VALIDATE)
                self.state = 7498
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 7499
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_as_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_" ):
                listener.enterAs_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_" ):
                listener.exitAs_(self)




    def as_(self):

        localctx = PostgreSQLParser.As_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_as_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7502
            self.match(PostgreSQLParser.AS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertsdictionarystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertsdictionarystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertsdictionarystmt" ):
                listener.enterAltertsdictionarystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertsdictionarystmt" ):
                listener.exitAltertsdictionarystmt(self)




    def altertsdictionarystmt(self):

        localctx = PostgreSQLParser.AltertsdictionarystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_altertsdictionarystmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7504
            self.match(PostgreSQLParser.ALTER)
            self.state = 7505
            self.match(PostgreSQLParser.TEXT_P)
            self.state = 7506
            self.match(PostgreSQLParser.SEARCH)
            self.state = 7507
            self.match(PostgreSQLParser.DICTIONARY)
            self.state = 7508
            self.any_name()
            self.state = 7509
            self.definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertsconfigurationstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ALTER)
            else:
                return self.getToken(PostgreSQLParser.ALTER, i)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,i)


        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def any_with(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_withContext,0)


        def any_name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_name_list_Context,0)


        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertsconfigurationstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertsconfigurationstmt" ):
                listener.enterAltertsconfigurationstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertsconfigurationstmt" ):
                listener.exitAltertsconfigurationstmt(self)




    def altertsconfigurationstmt(self):

        localctx = PostgreSQLParser.AltertsconfigurationstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_altertsconfigurationstmt)
        try:
            self.state = 7583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7511
                self.match(PostgreSQLParser.ALTER)
                self.state = 7512
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7513
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7514
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7515
                self.any_name()
                self.state = 7516
                self.match(PostgreSQLParser.ADD_P)
                self.state = 7517
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7518
                self.match(PostgreSQLParser.FOR)
                self.state = 7519
                self.name_list()
                self.state = 7520
                self.any_with()
                self.state = 7521
                self.any_name_list_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7523
                self.match(PostgreSQLParser.ALTER)
                self.state = 7524
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7525
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7526
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7527
                self.any_name()
                self.state = 7528
                self.match(PostgreSQLParser.ALTER)
                self.state = 7529
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7530
                self.match(PostgreSQLParser.FOR)
                self.state = 7531
                self.name_list()
                self.state = 7532
                self.any_with()
                self.state = 7533
                self.any_name_list_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7535
                self.match(PostgreSQLParser.ALTER)
                self.state = 7536
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7537
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7538
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7539
                self.any_name()
                self.state = 7540
                self.match(PostgreSQLParser.ALTER)
                self.state = 7541
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7542
                self.match(PostgreSQLParser.REPLACE)
                self.state = 7543
                self.any_name()
                self.state = 7544
                self.any_with()
                self.state = 7545
                self.any_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7547
                self.match(PostgreSQLParser.ALTER)
                self.state = 7548
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7549
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7550
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7551
                self.any_name()
                self.state = 7552
                self.match(PostgreSQLParser.ALTER)
                self.state = 7553
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7554
                self.match(PostgreSQLParser.FOR)
                self.state = 7555
                self.name_list()
                self.state = 7556
                self.match(PostgreSQLParser.REPLACE)
                self.state = 7557
                self.any_name()
                self.state = 7558
                self.any_with()
                self.state = 7559
                self.any_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7561
                self.match(PostgreSQLParser.ALTER)
                self.state = 7562
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7563
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7564
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7565
                self.any_name()
                self.state = 7566
                self.match(PostgreSQLParser.DROP)
                self.state = 7567
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7568
                self.match(PostgreSQLParser.FOR)
                self.state = 7569
                self.name_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7571
                self.match(PostgreSQLParser.ALTER)
                self.state = 7572
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7573
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7574
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7575
                self.any_name()
                self.state = 7576
                self.match(PostgreSQLParser.DROP)
                self.state = 7577
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7578
                self.match(PostgreSQLParser.IF_P)
                self.state = 7579
                self.match(PostgreSQLParser.EXISTS)
                self.state = 7580
                self.match(PostgreSQLParser.FOR)
                self.state = 7581
                self.name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_with" ):
                listener.enterAny_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_with" ):
                listener.exitAny_with(self)




    def any_with(self):

        localctx = PostgreSQLParser.Any_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_any_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7585
            self.match(PostgreSQLParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateconversionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,i)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def default_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Default_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createconversionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateconversionstmt" ):
                listener.enterCreateconversionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateconversionstmt" ):
                listener.exitCreateconversionstmt(self)




    def createconversionstmt(self):

        localctx = PostgreSQLParser.CreateconversionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_createconversionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7587
            self.match(PostgreSQLParser.CREATE)
            self.state = 7589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.DEFAULT:
                self.state = 7588
                self.default_()


            self.state = 7591
            self.match(PostgreSQLParser.CONVERSION_P)
            self.state = 7592
            self.any_name()
            self.state = 7593
            self.match(PostgreSQLParser.FOR)
            self.state = 7594
            self.sconst()
            self.state = 7595
            self.match(PostgreSQLParser.TO)
            self.state = 7596
            self.sconst()
            self.state = 7597
            self.match(PostgreSQLParser.FROM)
            self.state = 7598
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTER(self):
            return self.getToken(PostgreSQLParser.CLUSTER, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def verbose_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Verbose_Context,0)


        def cluster_index_specification(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cluster_index_specificationContext,0)


        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_clusterstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusterstmt" ):
                listener.enterClusterstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusterstmt" ):
                listener.exitClusterstmt(self)




    def clusterstmt(self):

        localctx = PostgreSQLParser.ClusterstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_clusterstmt)
        self._la = 0 # Token type
        try:
            self.state = 7620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,628,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7600
                self.match(PostgreSQLParser.CLUSTER)
                self.state = 7602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.VERBOSE:
                    self.state = 7601
                    self.verbose_()


                self.state = 7604
                self.qualified_name()
                self.state = 7606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.USING:
                    self.state = 7605
                    self.cluster_index_specification()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7608
                self.match(PostgreSQLParser.CLUSTER)
                self.state = 7610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.VERBOSE:
                    self.state = 7609
                    self.verbose_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7612
                self.match(PostgreSQLParser.CLUSTER)
                self.state = 7614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.VERBOSE:
                    self.state = 7613
                    self.verbose_()


                self.state = 7616
                self.name()
                self.state = 7617
                self.match(PostgreSQLParser.ON)
                self.state = 7618
                self.qualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cluster_index_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cluster_index_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCluster_index_specification" ):
                listener.enterCluster_index_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCluster_index_specification" ):
                listener.exitCluster_index_specification(self)




    def cluster_index_specification(self):

        localctx = PostgreSQLParser.Cluster_index_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_cluster_index_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7622
            self.match(PostgreSQLParser.USING)
            self.state = 7623
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VacuumstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM(self):
            return self.getToken(PostgreSQLParser.VACUUM, 0)

        def full_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Full_Context,0)


        def freeze_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Freeze_Context,0)


        def verbose_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Verbose_Context,0)


        def analyze_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_Context,0)


        def vacuum_relation_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vacuum_relation_list_Context,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def vac_analyze_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vacuumstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuumstmt" ):
                listener.enterVacuumstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuumstmt" ):
                listener.exitVacuumstmt(self)




    def vacuumstmt(self):

        localctx = PostgreSQLParser.VacuumstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_vacuumstmt)
        self._la = 0 # Token type
        try:
            self.state = 7648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,635,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7625
                self.match(PostgreSQLParser.VACUUM)
                self.state = 7627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FULL:
                    self.state = 7626
                    self.full_()


                self.state = 7630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FREEZE:
                    self.state = 7629
                    self.freeze_()


                self.state = 7633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.VERBOSE:
                    self.state = 7632
                    self.verbose_()


                self.state = 7636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ANALYSE or _la==PostgreSQLParser.ANALYZE:
                    self.state = 7635
                    self.analyze_()


                self.state = 7639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 7638
                    self.vacuum_relation_list_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7641
                self.match(PostgreSQLParser.VACUUM)
                self.state = 7642
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7643
                self.vac_analyze_option_list()
                self.state = 7644
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 7645
                    self.vacuum_relation_list_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def verbose_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Verbose_Context,0)


        def vacuum_relation_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vacuum_relation_list_Context,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def vac_analyze_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_analyzestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzestmt" ):
                listener.enterAnalyzestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzestmt" ):
                listener.exitAnalyzestmt(self)




    def analyzestmt(self):

        localctx = PostgreSQLParser.AnalyzestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_analyzestmt)
        self._la = 0 # Token type
        try:
            self.state = 7664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7650
                self.analyze_keyword()
                self.state = 7652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.VERBOSE:
                    self.state = 7651
                    self.verbose_()


                self.state = 7655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 7654
                    self.vacuum_relation_list_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7657
                self.analyze_keyword()
                self.state = 7658
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7659
                self.vac_analyze_option_list()
                self.state = 7660
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 7661
                    self.vacuum_relation_list_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utility_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def utility_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Utility_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Utility_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_utility_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtility_option_list" ):
                listener.enterUtility_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtility_option_list" ):
                listener.exitUtility_option_list(self)




    def utility_option_list(self):

        localctx = PostgreSQLParser.Utility_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_utility_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7666
            self.utility_option_elem()
            self.state = 7671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 7667
                self.match(PostgreSQLParser.COMMA)
                self.state = 7668
                self.utility_option_elem()
                self.state = 7673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vac_analyze_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vac_analyze_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Vac_analyze_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vac_analyze_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVac_analyze_option_list" ):
                listener.enterVac_analyze_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVac_analyze_option_list" ):
                listener.exitVac_analyze_option_list(self)




    def vac_analyze_option_list(self):

        localctx = PostgreSQLParser.Vac_analyze_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_vac_analyze_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7674
            self.vac_analyze_option_elem()
            self.state = 7679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 7675
                self.match(PostgreSQLParser.COMMA)
                self.state = 7676
                self.vac_analyze_option_elem()
                self.state = 7681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(PostgreSQLParser.ANALYZE, 0)

        def ANALYSE(self):
            return self.getToken(PostgreSQLParser.ANALYSE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_analyze_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_keyword" ):
                listener.enterAnalyze_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_keyword" ):
                listener.exitAnalyze_keyword(self)




    def analyze_keyword(self):

        localctx = PostgreSQLParser.Analyze_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_analyze_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7682
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ANALYSE or _la==PostgreSQLParser.ANALYZE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utility_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def utility_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Utility_option_nameContext,0)


        def utility_option_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Utility_option_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_utility_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtility_option_elem" ):
                listener.enterUtility_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtility_option_elem" ):
                listener.exitUtility_option_elem(self)




    def utility_option_elem(self):

        localctx = PostgreSQLParser.Utility_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_utility_option_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7684
            self.utility_option_name()
            self.state = 7686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (PostgreSQLParser.PLUS - 12)) | (1 << (PostgreSQLParser.MINUS - 12)) | (1 << (PostgreSQLParser.JSON - 12)) | (1 << (PostgreSQLParser.JSON_ARRAY - 12)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 12)) | (1 << (PostgreSQLParser.JSON_EXISTS - 12)) | (1 << (PostgreSQLParser.JSON_OBJECT - 12)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 12)) | (1 << (PostgreSQLParser.JSON_QUERY - 12)) | (1 << (PostgreSQLParser.JSON_SCALAR - 12)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 12)) | (1 << (PostgreSQLParser.JSON_TABLE - 12)) | (1 << (PostgreSQLParser.JSON_VALUE - 12)) | (1 << (PostgreSQLParser.MERGE_ACTION - 12)) | (1 << (PostgreSQLParser.ABSENT - 12)) | (1 << (PostgreSQLParser.ASENSITIVE - 12)) | (1 << (PostgreSQLParser.ATOMIC - 12)) | (1 << (PostgreSQLParser.BREADTH - 12)) | (1 << (PostgreSQLParser.COMPRESSION - 12)) | (1 << (PostgreSQLParser.CONDITIONAL - 12)) | (1 << (PostgreSQLParser.DEPTH - 12)) | (1 << (PostgreSQLParser.EMPTY_P - 12)) | (1 << (PostgreSQLParser.FINALIZE - 12)) | (1 << (PostgreSQLParser.INDENT - 12)) | (1 << (PostgreSQLParser.KEEP - 12)) | (1 << (PostgreSQLParser.KEYS - 12)) | (1 << (PostgreSQLParser.NESTED - 12)) | (1 << (PostgreSQLParser.OMIT - 12)) | (1 << (PostgreSQLParser.PARAMETER - 12)) | (1 << (PostgreSQLParser.PATH - 12)) | (1 << (PostgreSQLParser.PLAN - 12)) | (1 << (PostgreSQLParser.QUOTES - 12)) | (1 << (PostgreSQLParser.SCALAR - 12)) | (1 << (PostgreSQLParser.SOURCE - 12)) | (1 << (PostgreSQLParser.STRING_P - 12)) | (1 << (PostgreSQLParser.TARGET - 12)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 12)) | (1 << (PostgreSQLParser.PERIOD - 12)))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (PostgreSQLParser.FALSE_P - 98)) | (1 << (PostgreSQLParser.ON - 98)) | (1 << (PostgreSQLParser.TRUE_P - 98)) | (1 << (PostgreSQLParser.AUTHORIZATION - 98)) | (1 << (PostgreSQLParser.BINARY - 98)) | (1 << (PostgreSQLParser.COLLATION - 98)) | (1 << (PostgreSQLParser.CONCURRENTLY - 98)) | (1 << (PostgreSQLParser.CROSS - 98)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 98)) | (1 << (PostgreSQLParser.FREEZE - 98)) | (1 << (PostgreSQLParser.FULL - 98)) | (1 << (PostgreSQLParser.ILIKE - 98)) | (1 << (PostgreSQLParser.INNER_P - 98)) | (1 << (PostgreSQLParser.IS - 98)) | (1 << (PostgreSQLParser.ISNULL - 98)) | (1 << (PostgreSQLParser.JOIN - 98)) | (1 << (PostgreSQLParser.LEFT - 98)) | (1 << (PostgreSQLParser.LIKE - 98)) | (1 << (PostgreSQLParser.NATURAL - 98)) | (1 << (PostgreSQLParser.NOTNULL - 98)) | (1 << (PostgreSQLParser.OUTER_P - 98)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.OVERLAPS - 162)) | (1 << (PostgreSQLParser.RIGHT - 162)) | (1 << (PostgreSQLParser.SIMILAR - 162)) | (1 << (PostgreSQLParser.VERBOSE - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.TABLESAMPLE - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.StringConstant - 553)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 553)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 553)) | (1 << (PostgreSQLParser.Integral - 553)) | (1 << (PostgreSQLParser.BinaryIntegral - 553)) | (1 << (PostgreSQLParser.OctalIntegral - 553)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 553)) | (1 << (PostgreSQLParser.Numeric - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)) | (1 << (PostgreSQLParser.EscapeStringConstant - 553)))) != 0):
                self.state = 7685
                self.utility_option_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utility_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def FORMAT_LA(self):
            return self.getToken(PostgreSQLParser.FORMAT_LA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_utility_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtility_option_name" ):
                listener.enterUtility_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtility_option_name" ):
                listener.exitUtility_option_name(self)




    def utility_option_name(self):

        localctx = PostgreSQLParser.Utility_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_utility_option_name)
        try:
            self.state = 7691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7688
                self.nonreservedword()
                pass
            elif token in [PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7689
                self.analyze_keyword()
                pass
            elif token in [PostgreSQLParser.FORMAT_LA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7690
                self.match(PostgreSQLParser.FORMAT_LA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utility_option_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_utility_option_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtility_option_arg" ):
                listener.enterUtility_option_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtility_option_arg" ):
                listener.exitUtility_option_arg(self)




    def utility_option_arg(self):

        localctx = PostgreSQLParser.Utility_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_utility_option_arg)
        try:
            self.state = 7695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.FALSE_P, PostgreSQLParser.ON, PostgreSQLParser.TRUE_P, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7693
                self.boolean_or_string_()
                pass
            elif token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7694
                self.numericonly()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vac_analyze_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vac_analyze_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_nameContext,0)


        def vac_analyze_option_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vac_analyze_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVac_analyze_option_elem" ):
                listener.enterVac_analyze_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVac_analyze_option_elem" ):
                listener.exitVac_analyze_option_elem(self)




    def vac_analyze_option_elem(self):

        localctx = PostgreSQLParser.Vac_analyze_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_vac_analyze_option_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7697
            self.vac_analyze_option_name()
            self.state = 7699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (PostgreSQLParser.PLUS - 12)) | (1 << (PostgreSQLParser.MINUS - 12)) | (1 << (PostgreSQLParser.JSON - 12)) | (1 << (PostgreSQLParser.JSON_ARRAY - 12)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 12)) | (1 << (PostgreSQLParser.JSON_EXISTS - 12)) | (1 << (PostgreSQLParser.JSON_OBJECT - 12)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 12)) | (1 << (PostgreSQLParser.JSON_QUERY - 12)) | (1 << (PostgreSQLParser.JSON_SCALAR - 12)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 12)) | (1 << (PostgreSQLParser.JSON_TABLE - 12)) | (1 << (PostgreSQLParser.JSON_VALUE - 12)) | (1 << (PostgreSQLParser.MERGE_ACTION - 12)) | (1 << (PostgreSQLParser.ABSENT - 12)) | (1 << (PostgreSQLParser.ASENSITIVE - 12)) | (1 << (PostgreSQLParser.ATOMIC - 12)) | (1 << (PostgreSQLParser.BREADTH - 12)) | (1 << (PostgreSQLParser.COMPRESSION - 12)) | (1 << (PostgreSQLParser.CONDITIONAL - 12)) | (1 << (PostgreSQLParser.DEPTH - 12)) | (1 << (PostgreSQLParser.EMPTY_P - 12)) | (1 << (PostgreSQLParser.FINALIZE - 12)) | (1 << (PostgreSQLParser.INDENT - 12)) | (1 << (PostgreSQLParser.KEEP - 12)) | (1 << (PostgreSQLParser.KEYS - 12)) | (1 << (PostgreSQLParser.NESTED - 12)) | (1 << (PostgreSQLParser.OMIT - 12)) | (1 << (PostgreSQLParser.PARAMETER - 12)) | (1 << (PostgreSQLParser.PATH - 12)) | (1 << (PostgreSQLParser.PLAN - 12)) | (1 << (PostgreSQLParser.QUOTES - 12)) | (1 << (PostgreSQLParser.SCALAR - 12)) | (1 << (PostgreSQLParser.SOURCE - 12)) | (1 << (PostgreSQLParser.STRING_P - 12)) | (1 << (PostgreSQLParser.TARGET - 12)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 12)) | (1 << (PostgreSQLParser.PERIOD - 12)))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (PostgreSQLParser.FALSE_P - 98)) | (1 << (PostgreSQLParser.ON - 98)) | (1 << (PostgreSQLParser.TRUE_P - 98)) | (1 << (PostgreSQLParser.AUTHORIZATION - 98)) | (1 << (PostgreSQLParser.BINARY - 98)) | (1 << (PostgreSQLParser.COLLATION - 98)) | (1 << (PostgreSQLParser.CONCURRENTLY - 98)) | (1 << (PostgreSQLParser.CROSS - 98)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 98)) | (1 << (PostgreSQLParser.FREEZE - 98)) | (1 << (PostgreSQLParser.FULL - 98)) | (1 << (PostgreSQLParser.ILIKE - 98)) | (1 << (PostgreSQLParser.INNER_P - 98)) | (1 << (PostgreSQLParser.IS - 98)) | (1 << (PostgreSQLParser.ISNULL - 98)) | (1 << (PostgreSQLParser.JOIN - 98)) | (1 << (PostgreSQLParser.LEFT - 98)) | (1 << (PostgreSQLParser.LIKE - 98)) | (1 << (PostgreSQLParser.NATURAL - 98)) | (1 << (PostgreSQLParser.NOTNULL - 98)) | (1 << (PostgreSQLParser.OUTER_P - 98)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.OVERLAPS - 162)) | (1 << (PostgreSQLParser.RIGHT - 162)) | (1 << (PostgreSQLParser.SIMILAR - 162)) | (1 << (PostgreSQLParser.VERBOSE - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.TABLESAMPLE - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.StringConstant - 553)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 553)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 553)) | (1 << (PostgreSQLParser.Integral - 553)) | (1 << (PostgreSQLParser.BinaryIntegral - 553)) | (1 << (PostgreSQLParser.OctalIntegral - 553)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 553)) | (1 << (PostgreSQLParser.Numeric - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)) | (1 << (PostgreSQLParser.EscapeStringConstant - 553)))) != 0):
                self.state = 7698
                self.vac_analyze_option_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vac_analyze_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vac_analyze_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVac_analyze_option_name" ):
                listener.enterVac_analyze_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVac_analyze_option_name" ):
                listener.exitVac_analyze_option_name(self)




    def vac_analyze_option_name(self):

        localctx = PostgreSQLParser.Vac_analyze_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_vac_analyze_option_name)
        try:
            self.state = 7703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7701
                self.nonreservedword()
                pass
            elif token in [PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7702
                self.analyze_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vac_analyze_option_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vac_analyze_option_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVac_analyze_option_arg" ):
                listener.enterVac_analyze_option_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVac_analyze_option_arg" ):
                listener.exitVac_analyze_option_arg(self)




    def vac_analyze_option_arg(self):

        localctx = PostgreSQLParser.Vac_analyze_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_vac_analyze_option_arg)
        try:
            self.state = 7707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.FALSE_P, PostgreSQLParser.ON, PostgreSQLParser.TRUE_P, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7705
                self.boolean_or_string_()
                pass
            elif token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7706
                self.numericonly()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_analyze_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_" ):
                listener.enterAnalyze_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_" ):
                listener.exitAnalyze_(self)




    def analyze_(self):

        localctx = PostgreSQLParser.Analyze_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_analyze_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7709
            self.analyze_keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Verbose_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERBOSE(self):
            return self.getToken(PostgreSQLParser.VERBOSE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_verbose_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVerbose_" ):
                listener.enterVerbose_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVerbose_" ):
                listener.exitVerbose_(self)




    def verbose_(self):

        localctx = PostgreSQLParser.Verbose_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_verbose_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7711
            self.match(PostgreSQLParser.VERBOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_full_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_" ):
                listener.enterFull_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_" ):
                listener.exitFull_(self)




    def full_(self):

        localctx = PostgreSQLParser.Full_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_full_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7713
            self.match(PostgreSQLParser.FULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freeze_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FREEZE(self):
            return self.getToken(PostgreSQLParser.FREEZE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_freeze_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreeze_" ):
                listener.enterFreeze_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreeze_" ):
                listener.exitFreeze_(self)




    def freeze_(self):

        localctx = PostgreSQLParser.Freeze_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_freeze_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7715
            self.match(PostgreSQLParser.FREEZE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_name_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list_" ):
                listener.enterName_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list_" ):
                listener.exitName_list_(self)




    def name_list_(self):

        localctx = PostgreSQLParser.Name_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_name_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7717
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 7718
            self.name_list()
            self.state = 7719
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_list_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vacuum_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_relation" ):
                listener.enterVacuum_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_relation" ):
                listener.exitVacuum_relation(self)




    def vacuum_relation(self):

        localctx = PostgreSQLParser.Vacuum_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_vacuum_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7721
            self.qualified_name()
            self.state = 7723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 7722
                self.name_list_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_relation_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vacuum_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Vacuum_relationContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Vacuum_relationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vacuum_relation_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_relation_list" ):
                listener.enterVacuum_relation_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_relation_list" ):
                listener.exitVacuum_relation_list(self)




    def vacuum_relation_list(self):

        localctx = PostgreSQLParser.Vacuum_relation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_vacuum_relation_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7725
            self.vacuum_relation()
            self.state = 7730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 7726
                self.match(PostgreSQLParser.COMMA)
                self.state = 7727
                self.vacuum_relation()
                self.state = 7732
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_relation_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vacuum_relation_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vacuum_relation_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vacuum_relation_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_relation_list_" ):
                listener.enterVacuum_relation_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_relation_list_" ):
                listener.exitVacuum_relation_list_(self)




    def vacuum_relation_list_(self):

        localctx = PostgreSQLParser.Vacuum_relation_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_vacuum_relation_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7733
            self.vacuum_relation_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(PostgreSQLParser.EXPLAIN, 0)

        def explainablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExplainablestmtContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def verbose_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Verbose_Context,0)


        def VERBOSE(self):
            return self.getToken(PostgreSQLParser.VERBOSE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def explain_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Explain_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explainstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainstmt" ):
                listener.enterExplainstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainstmt" ):
                listener.exitExplainstmt(self)




    def explainstmt(self):

        localctx = PostgreSQLParser.ExplainstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_explainstmt)
        self._la = 0 # Token type
        try:
            self.state = 7753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7735
                self.match(PostgreSQLParser.EXPLAIN)
                self.state = 7736
                self.explainablestmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7737
                self.match(PostgreSQLParser.EXPLAIN)
                self.state = 7738
                self.analyze_keyword()
                self.state = 7740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.VERBOSE:
                    self.state = 7739
                    self.verbose_()


                self.state = 7742
                self.explainablestmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7744
                self.match(PostgreSQLParser.EXPLAIN)
                self.state = 7745
                self.match(PostgreSQLParser.VERBOSE)
                self.state = 7746
                self.explainablestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7747
                self.match(PostgreSQLParser.EXPLAIN)
                self.state = 7748
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7749
                self.explain_option_list()
                self.state = 7750
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7751
                self.explainablestmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainablestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def insertstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.InsertstmtContext,0)


        def updatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UpdatestmtContext,0)


        def deletestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeletestmtContext,0)


        def declarecursorstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeclarecursorstmtContext,0)


        def createasstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateasstmtContext,0)


        def creatematviewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatematviewstmtContext,0)


        def refreshmatviewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RefreshmatviewstmtContext,0)


        def executestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExecutestmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explainablestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainablestmt" ):
                listener.enterExplainablestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainablestmt" ):
                listener.exitExplainablestmt(self)




    def explainablestmt(self):

        localctx = PostgreSQLParser.ExplainablestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_explainablestmt)
        try:
            self.state = 7764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7755
                self.selectstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7756
                self.insertstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7757
                self.updatestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7758
                self.deletestmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7759
                self.declarecursorstmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7760
                self.createasstmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7761
                self.creatematviewstmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7762
                self.refreshmatviewstmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7763
                self.executestmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explain_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Explain_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Explain_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explain_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option_list" ):
                listener.enterExplain_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option_list" ):
                listener.exitExplain_option_list(self)




    def explain_option_list(self):

        localctx = PostgreSQLParser.Explain_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_explain_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7766
            self.explain_option_elem()
            self.state = 7771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 7767
                self.match(PostgreSQLParser.COMMA)
                self.state = 7768
                self.explain_option_elem()
                self.state = 7773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explain_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Explain_option_nameContext,0)


        def explain_option_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Explain_option_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explain_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option_elem" ):
                listener.enterExplain_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option_elem" ):
                listener.exitExplain_option_elem(self)




    def explain_option_elem(self):

        localctx = PostgreSQLParser.Explain_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_explain_option_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7774
            self.explain_option_name()
            self.state = 7776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (PostgreSQLParser.PLUS - 12)) | (1 << (PostgreSQLParser.MINUS - 12)) | (1 << (PostgreSQLParser.JSON - 12)) | (1 << (PostgreSQLParser.JSON_ARRAY - 12)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 12)) | (1 << (PostgreSQLParser.JSON_EXISTS - 12)) | (1 << (PostgreSQLParser.JSON_OBJECT - 12)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 12)) | (1 << (PostgreSQLParser.JSON_QUERY - 12)) | (1 << (PostgreSQLParser.JSON_SCALAR - 12)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 12)) | (1 << (PostgreSQLParser.JSON_TABLE - 12)) | (1 << (PostgreSQLParser.JSON_VALUE - 12)) | (1 << (PostgreSQLParser.MERGE_ACTION - 12)) | (1 << (PostgreSQLParser.ABSENT - 12)) | (1 << (PostgreSQLParser.ASENSITIVE - 12)) | (1 << (PostgreSQLParser.ATOMIC - 12)) | (1 << (PostgreSQLParser.BREADTH - 12)) | (1 << (PostgreSQLParser.COMPRESSION - 12)) | (1 << (PostgreSQLParser.CONDITIONAL - 12)) | (1 << (PostgreSQLParser.DEPTH - 12)) | (1 << (PostgreSQLParser.EMPTY_P - 12)) | (1 << (PostgreSQLParser.FINALIZE - 12)) | (1 << (PostgreSQLParser.INDENT - 12)) | (1 << (PostgreSQLParser.KEEP - 12)) | (1 << (PostgreSQLParser.KEYS - 12)) | (1 << (PostgreSQLParser.NESTED - 12)) | (1 << (PostgreSQLParser.OMIT - 12)) | (1 << (PostgreSQLParser.PARAMETER - 12)) | (1 << (PostgreSQLParser.PATH - 12)) | (1 << (PostgreSQLParser.PLAN - 12)) | (1 << (PostgreSQLParser.QUOTES - 12)) | (1 << (PostgreSQLParser.SCALAR - 12)) | (1 << (PostgreSQLParser.SOURCE - 12)) | (1 << (PostgreSQLParser.STRING_P - 12)) | (1 << (PostgreSQLParser.TARGET - 12)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 12)) | (1 << (PostgreSQLParser.PERIOD - 12)))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (PostgreSQLParser.FALSE_P - 98)) | (1 << (PostgreSQLParser.ON - 98)) | (1 << (PostgreSQLParser.TRUE_P - 98)) | (1 << (PostgreSQLParser.AUTHORIZATION - 98)) | (1 << (PostgreSQLParser.BINARY - 98)) | (1 << (PostgreSQLParser.COLLATION - 98)) | (1 << (PostgreSQLParser.CONCURRENTLY - 98)) | (1 << (PostgreSQLParser.CROSS - 98)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 98)) | (1 << (PostgreSQLParser.FREEZE - 98)) | (1 << (PostgreSQLParser.FULL - 98)) | (1 << (PostgreSQLParser.ILIKE - 98)) | (1 << (PostgreSQLParser.INNER_P - 98)) | (1 << (PostgreSQLParser.IS - 98)) | (1 << (PostgreSQLParser.ISNULL - 98)) | (1 << (PostgreSQLParser.JOIN - 98)) | (1 << (PostgreSQLParser.LEFT - 98)) | (1 << (PostgreSQLParser.LIKE - 98)) | (1 << (PostgreSQLParser.NATURAL - 98)) | (1 << (PostgreSQLParser.NOTNULL - 98)) | (1 << (PostgreSQLParser.OUTER_P - 98)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.OVERLAPS - 162)) | (1 << (PostgreSQLParser.RIGHT - 162)) | (1 << (PostgreSQLParser.SIMILAR - 162)) | (1 << (PostgreSQLParser.VERBOSE - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.TABLESAMPLE - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.StringConstant - 553)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 553)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 553)) | (1 << (PostgreSQLParser.Integral - 553)) | (1 << (PostgreSQLParser.BinaryIntegral - 553)) | (1 << (PostgreSQLParser.OctalIntegral - 553)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 553)) | (1 << (PostgreSQLParser.Numeric - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)) | (1 << (PostgreSQLParser.EscapeStringConstant - 553)))) != 0):
                self.state = 7775
                self.explain_option_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explain_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option_name" ):
                listener.enterExplain_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option_name" ):
                listener.exitExplain_option_name(self)




    def explain_option_name(self):

        localctx = PostgreSQLParser.Explain_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_explain_option_name)
        try:
            self.state = 7780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7778
                self.nonreservedword()
                pass
            elif token in [PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7779
                self.analyze_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_option_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explain_option_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option_arg" ):
                listener.enterExplain_option_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option_arg" ):
                listener.exitExplain_option_arg(self)




    def explain_option_arg(self):

        localctx = PostgreSQLParser.Explain_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_explain_option_arg)
        try:
            self.state = 7784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.FALSE_P, PostgreSQLParser.ON, PostgreSQLParser.TRUE_P, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7782
                self.boolean_or_string_()
                pass
            elif token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7783
                self.numericonly()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def preparablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.PreparablestmtContext,0)


        def prep_type_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Prep_type_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_preparestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparestmt" ):
                listener.enterPreparestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparestmt" ):
                listener.exitPreparestmt(self)




    def preparestmt(self):

        localctx = PostgreSQLParser.PreparestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_preparestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7786
            self.match(PostgreSQLParser.PREPARE)
            self.state = 7787
            self.name()
            self.state = 7789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 7788
                self.prep_type_clause()


            self.state = 7791
            self.match(PostgreSQLParser.AS)
            self.state = 7792
            self.preparablestmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prep_type_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_prep_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrep_type_clause" ):
                listener.enterPrep_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrep_type_clause" ):
                listener.exitPrep_type_clause(self)




    def prep_type_clause(self):

        localctx = PostgreSQLParser.Prep_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_prep_type_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7794
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 7795
            self.type_list()
            self.state = 7796
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparablestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def insertstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.InsertstmtContext,0)


        def updatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UpdatestmtContext,0)


        def deletestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeletestmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_preparablestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparablestmt" ):
                listener.enterPreparablestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparablestmt" ):
                listener.exitPreparablestmt(self)




    def preparablestmt(self):

        localctx = PostgreSQLParser.PreparablestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_preparablestmt)
        try:
            self.state = 7802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,658,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7798
                self.selectstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7799
                self.insertstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7800
                self.updatestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7801
                self.deletestmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecutestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def execute_param_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Execute_param_clauseContext,0)


        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def create_as_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_as_targetContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def with_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_data_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_executestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecutestmt" ):
                listener.enterExecutestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecutestmt" ):
                listener.exitExecutestmt(self)




    def executestmt(self):

        localctx = PostgreSQLParser.ExecutestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_executestmt)
        self._la = 0 # Token type
        try:
            self.state = 7842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,666,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7804
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 7805
                self.name()
                self.state = 7807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 7806
                    self.execute_param_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7809
                self.match(PostgreSQLParser.CREATE)
                self.state = 7811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.GLOBAL or _la==PostgreSQLParser.LOCAL or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (PostgreSQLParser.TEMP - 383)) | (1 << (PostgreSQLParser.TEMPORARY - 383)) | (1 << (PostgreSQLParser.UNLOGGED - 383)))) != 0):
                    self.state = 7810
                    self.opttemp()


                self.state = 7813
                self.match(PostgreSQLParser.TABLE)
                self.state = 7814
                self.create_as_target()
                self.state = 7815
                self.match(PostgreSQLParser.AS)
                self.state = 7816
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 7817
                self.name()
                self.state = 7819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 7818
                    self.execute_param_clause()


                self.state = 7822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 7821
                    self.with_data_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7824
                self.match(PostgreSQLParser.CREATE)
                self.state = 7826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.GLOBAL or _la==PostgreSQLParser.LOCAL or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (PostgreSQLParser.TEMP - 383)) | (1 << (PostgreSQLParser.TEMPORARY - 383)) | (1 << (PostgreSQLParser.UNLOGGED - 383)))) != 0):
                    self.state = 7825
                    self.opttemp()


                self.state = 7828
                self.match(PostgreSQLParser.TABLE)
                self.state = 7829
                self.match(PostgreSQLParser.IF_P)
                self.state = 7830
                self.match(PostgreSQLParser.NOT)
                self.state = 7831
                self.match(PostgreSQLParser.EXISTS)
                self.state = 7832
                self.create_as_target()
                self.state = 7833
                self.match(PostgreSQLParser.AS)
                self.state = 7834
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 7835
                self.name()
                self.state = 7837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OPEN_PAREN:
                    self.state = 7836
                    self.execute_param_clause()


                self.state = 7840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH:
                    self.state = 7839
                    self.with_data_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_param_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_execute_param_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_param_clause" ):
                listener.enterExecute_param_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_param_clause" ):
                listener.exitExecute_param_clause(self)




    def execute_param_clause(self):

        localctx = PostgreSQLParser.Execute_param_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_execute_param_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7844
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 7845
            self.expr_list()
            self.state = 7846
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocatestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(PostgreSQLParser.DEALLOCATE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_deallocatestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocatestmt" ):
                listener.enterDeallocatestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocatestmt" ):
                listener.exitDeallocatestmt(self)




    def deallocatestmt(self):

        localctx = PostgreSQLParser.DeallocatestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_deallocatestmt)
        try:
            self.state = 7858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7848
                self.match(PostgreSQLParser.DEALLOCATE)
                self.state = 7849
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7850
                self.match(PostgreSQLParser.DEALLOCATE)
                self.state = 7851
                self.match(PostgreSQLParser.PREPARE)
                self.state = 7852
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7853
                self.match(PostgreSQLParser.DEALLOCATE)
                self.state = 7854
                self.match(PostgreSQLParser.ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7855
                self.match(PostgreSQLParser.DEALLOCATE)
                self.state = 7856
                self.match(PostgreSQLParser.PREPARE)
                self.state = 7857
                self.match(PostgreSQLParser.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def insert_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Insert_targetContext,0)


        def insert_rest(self):
            return self.getTypedRuleContext(PostgreSQLParser.Insert_restContext,0)


        def with_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clause_Context,0)


        def on_conflict_(self):
            return self.getTypedRuleContext(PostgreSQLParser.On_conflict_Context,0)


        def returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insertstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertstmt" ):
                listener.enterInsertstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertstmt" ):
                listener.exitInsertstmt(self)




    def insertstmt(self):

        localctx = PostgreSQLParser.InsertstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_insertstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 7860
                self.with_clause_()


            self.state = 7863
            self.match(PostgreSQLParser.INSERT)
            self.state = 7864
            self.match(PostgreSQLParser.INTO)
            self.state = 7865
            self.insert_target()
            self.state = 7866
            self.insert_rest()
            self.state = 7868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ON:
                self.state = 7867
                self.on_conflict_()


            self.state = 7871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.RETURNING:
                self.state = 7870
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insert_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_target" ):
                listener.enterInsert_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_target" ):
                listener.exitInsert_target(self)




    def insert_target(self):

        localctx = PostgreSQLParser.Insert_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_insert_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7873
            self.qualified_name()
            self.state = 7876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS:
                self.state = 7874
                self.match(PostgreSQLParser.AS)
                self.state = 7875
                self.colid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def OVERRIDING(self):
            return self.getToken(PostgreSQLParser.OVERRIDING, 0)

        def override_kind(self):
            return self.getTypedRuleContext(PostgreSQLParser.Override_kindContext,0)


        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def insert_column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Insert_column_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insert_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_rest" ):
                listener.enterInsert_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_rest" ):
                listener.exitInsert_rest(self)




    def insert_rest(self):

        localctx = PostgreSQLParser.Insert_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_insert_rest)
        self._la = 0 # Token type
        try:
            self.state = 7897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7878
                self.selectstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7879
                self.match(PostgreSQLParser.OVERRIDING)
                self.state = 7880
                self.override_kind()
                self.state = 7881
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 7882
                self.selectstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7884
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7885
                self.insert_column_list()
                self.state = 7886
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OVERRIDING:
                    self.state = 7887
                    self.match(PostgreSQLParser.OVERRIDING)
                    self.state = 7888
                    self.override_kind()
                    self.state = 7889
                    self.match(PostgreSQLParser.VALUE_P)


                self.state = 7893
                self.selectstmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7895
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 7896
                self.match(PostgreSQLParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Override_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_override_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverride_kind" ):
                listener.enterOverride_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverride_kind" ):
                listener.exitOverride_kind(self)




    def override_kind(self):

        localctx = PostgreSQLParser.Override_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_override_kind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7899
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.USER or _la==PostgreSQLParser.SYSTEM_P):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_column_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Insert_column_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Insert_column_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insert_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_column_list" ):
                listener.enterInsert_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_column_list" ):
                listener.exitInsert_column_list(self)




    def insert_column_list(self):

        localctx = PostgreSQLParser.Insert_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_insert_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7901
            self.insert_column_item()
            self.state = 7906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 7902
                self.match(PostgreSQLParser.COMMA)
                self.state = 7903
                self.insert_column_item()
                self.state = 7908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_column_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insert_column_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_column_item" ):
                listener.enterInsert_column_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_column_item" ):
                listener.exitInsert_column_item(self)




    def insert_column_item(self):

        localctx = PostgreSQLParser.Insert_column_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_insert_column_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7909
            self.colid()
            self.state = 7910
            self.opt_indirection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_conflict_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(PostgreSQLParser.CONFLICT, 0)

        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_clause_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_clause_listContext,0)


        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def conf_expr_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Conf_expr_Context,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_on_conflict_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_conflict_" ):
                listener.enterOn_conflict_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_conflict_" ):
                listener.exitOn_conflict_(self)




    def on_conflict_(self):

        localctx = PostgreSQLParser.On_conflict_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_on_conflict_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7912
            self.match(PostgreSQLParser.ON)
            self.state = 7913
            self.match(PostgreSQLParser.CONFLICT)
            self.state = 7915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN or _la==PostgreSQLParser.ON:
                self.state = 7914
                self.conf_expr_()


            self.state = 7917
            self.match(PostgreSQLParser.DO)
            self.state = 7925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.UPDATE]:
                self.state = 7918
                self.match(PostgreSQLParser.UPDATE)
                self.state = 7919
                self.match(PostgreSQLParser.SET)
                self.state = 7920
                self.set_clause_list()
                self.state = 7922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 7921
                    self.where_clause()


                pass
            elif token in [PostgreSQLParser.NOTHING]:
                self.state = 7924
                self.match(PostgreSQLParser.NOTHING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_expr_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def index_params(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_paramsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_conf_expr_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_expr_" ):
                listener.enterConf_expr_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_expr_" ):
                listener.exitConf_expr_(self)




    def conf_expr_(self):

        localctx = PostgreSQLParser.Conf_expr_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_conf_expr_)
        self._la = 0 # Token type
        try:
            self.state = 7936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7927
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7928
                self.index_params()
                self.state = 7929
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 7930
                    self.where_clause()


                pass
            elif token in [PostgreSQLParser.ON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7933
                self.match(PostgreSQLParser.ON)
                self.state = 7934
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 7935
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returning_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(PostgreSQLParser.RETURNING, 0)

        def target_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Target_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturning_clause" ):
                listener.enterReturning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturning_clause" ):
                listener.exitReturning_clause(self)




    def returning_clause(self):

        localctx = PostgreSQLParser.Returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_returning_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7938
            self.match(PostgreSQLParser.RETURNING)
            self.state = 7939
            self.target_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(PostgreSQLParser.MERGE, 0)

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,i)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Merge_insert_clauseContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Merge_update_clauseContext,0)


        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def alias_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alias_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alias_clauseContext,i)


        def merge_delete_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Merge_delete_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_mergestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergestmt" ):
                listener.enterMergestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergestmt" ):
                listener.exitMergestmt(self)




    def mergestmt(self):

        localctx = PostgreSQLParser.MergestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_mergestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7941
            self.match(PostgreSQLParser.MERGE)
            self.state = 7943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.INTO:
                self.state = 7942
                self.match(PostgreSQLParser.INTO)


            self.state = 7945
            self.qualified_name()
            self.state = 7947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                self.state = 7946
                self.alias_clause()


            self.state = 7949
            self.match(PostgreSQLParser.USING)
            self.state = 7952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN]:
                self.state = 7950
                self.select_with_parens()
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.state = 7951
                self.qualified_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                self.state = 7954
                self.alias_clause()


            self.state = 7957
            self.match(PostgreSQLParser.ON)
            self.state = 7958
            self.a_expr()
            self.state = 7967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
            if la_ == 1:
                self.state = 7959
                self.merge_insert_clause()
                self.state = 7961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,684,self._ctx)
                if la_ == 1:
                    self.state = 7960
                    self.merge_update_clause()


                pass

            elif la_ == 2:
                self.state = 7963
                self.merge_update_clause()
                self.state = 7965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,685,self._ctx)
                if la_ == 1:
                    self.state = 7964
                    self.merge_insert_clause()


                pass


            self.state = 7970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WHEN:
                self.state = 7969
                self.merge_delete_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_insert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def values_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_clauseContext,0)


        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def insert_column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Insert_column_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_merge_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert_clause" ):
                listener.enterMerge_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert_clause" ):
                listener.exitMerge_insert_clause(self)




    def merge_insert_clause(self):

        localctx = PostgreSQLParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7972
            self.match(PostgreSQLParser.WHEN)
            self.state = 7973
            self.match(PostgreSQLParser.NOT)
            self.state = 7974
            self.match(PostgreSQLParser.MATCHED)
            self.state = 7977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AND:
                self.state = 7975
                self.match(PostgreSQLParser.AND)
                self.state = 7976
                self.a_expr()


            self.state = 7980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.THEN:
                self.state = 7979
                self.match(PostgreSQLParser.THEN)


            self.state = 7982
            self.match(PostgreSQLParser.INSERT)
            self.state = 7987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 7983
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7984
                self.insert_column_list()
                self.state = 7985
                self.match(PostgreSQLParser.CLOSE_PAREN)


            self.state = 7989
            self.values_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_clause_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_clause_listContext,0)


        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_merge_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_clause" ):
                listener.enterMerge_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_clause" ):
                listener.exitMerge_update_clause(self)




    def merge_update_clause(self):

        localctx = PostgreSQLParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7991
            self.match(PostgreSQLParser.WHEN)
            self.state = 7992
            self.match(PostgreSQLParser.MATCHED)
            self.state = 7995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AND:
                self.state = 7993
                self.match(PostgreSQLParser.AND)
                self.state = 7994
                self.a_expr()


            self.state = 7998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.THEN:
                self.state = 7997
                self.match(PostgreSQLParser.THEN)


            self.state = 8000
            self.match(PostgreSQLParser.UPDATE)
            self.state = 8001
            self.match(PostgreSQLParser.SET)
            self.state = 8002
            self.set_clause_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_delete_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_merge_delete_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_delete_clause" ):
                listener.enterMerge_delete_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_delete_clause" ):
                listener.exitMerge_delete_clause(self)




    def merge_delete_clause(self):

        localctx = PostgreSQLParser.Merge_delete_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_merge_delete_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8004
            self.match(PostgreSQLParser.WHEN)
            self.state = 8005
            self.match(PostgreSQLParser.MATCHED)
            self.state = 8007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.THEN:
                self.state = 8006
                self.match(PostgreSQLParser.THEN)


            self.state = 8009
            self.match(PostgreSQLParser.DELETE_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeletestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def relation_expr_opt_alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_opt_aliasContext,0)


        def with_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clause_Context,0)


        def using_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Using_clauseContext,0)


        def where_or_current_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_or_current_clauseContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_deletestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeletestmt" ):
                listener.enterDeletestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeletestmt" ):
                listener.exitDeletestmt(self)




    def deletestmt(self):

        localctx = PostgreSQLParser.DeletestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_deletestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 8011
                self.with_clause_()


            self.state = 8014
            self.match(PostgreSQLParser.DELETE_P)
            self.state = 8015
            self.match(PostgreSQLParser.FROM)
            self.state = 8016
            self.relation_expr_opt_alias()
            self.state = 8018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.USING:
                self.state = 8017
                self.using_clause()


            self.state = 8021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WHERE:
                self.state = 8020
                self.where_or_current_clause()


            self.state = 8024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.RETURNING:
                self.state = 8023
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def from_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_clause" ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_clause" ):
                listener.exitUsing_clause(self)




    def using_clause(self):

        localctx = PostgreSQLParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_using_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8026
            self.match(PostgreSQLParser.USING)
            self.state = 8027
            self.from_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK_P(self):
            return self.getToken(PostgreSQLParser.LOCK_P, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def table_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_Context,0)


        def lock_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Lock_Context,0)


        def nowait_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nowait_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_lockstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockstmt" ):
                listener.enterLockstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockstmt" ):
                listener.exitLockstmt(self)




    def lockstmt(self):

        localctx = PostgreSQLParser.LockstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_lockstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8029
            self.match(PostgreSQLParser.LOCK_P)
            self.state = 8031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.TABLE:
                self.state = 8030
                self.table_()


            self.state = 8033
            self.relation_expr_list()
            self.state = 8035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.IN_P:
                self.state = 8034
                self.lock_()


            self.state = 8038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NOWAIT:
                self.state = 8037
                self.nowait_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def lock_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Lock_typeContext,0)


        def MODE(self):
            return self.getToken(PostgreSQLParser.MODE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_lock_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_" ):
                listener.enterLock_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_" ):
                listener.exitLock_(self)




    def lock_(self):

        localctx = PostgreSQLParser.Lock_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_lock_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8040
            self.match(PostgreSQLParser.IN_P)
            self.state = 8041
            self.lock_type()
            self.state = 8042
            self.match(PostgreSQLParser.MODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def SHARE(self):
            return self.getToken(PostgreSQLParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(PostgreSQLParser.EXCLUSIVE, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = PostgreSQLParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 8056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ACCESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8044
                self.match(PostgreSQLParser.ACCESS)
                self.state = 8045
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.EXCLUSIVE or _la==PostgreSQLParser.SHARE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PostgreSQLParser.ROW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8046
                self.match(PostgreSQLParser.ROW)
                self.state = 8047
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.EXCLUSIVE or _la==PostgreSQLParser.SHARE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PostgreSQLParser.SHARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8048
                self.match(PostgreSQLParser.SHARE)
                self.state = 8053
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.UPDATE]:
                    self.state = 8049
                    self.match(PostgreSQLParser.UPDATE)
                    self.state = 8050
                    self.match(PostgreSQLParser.EXCLUSIVE)
                    pass
                elif token in [PostgreSQLParser.ROW]:
                    self.state = 8051
                    self.match(PostgreSQLParser.ROW)
                    self.state = 8052
                    self.match(PostgreSQLParser.EXCLUSIVE)
                    pass
                elif token in [PostgreSQLParser.MODE]:
                    pass
                else:
                    pass
                pass
            elif token in [PostgreSQLParser.EXCLUSIVE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8055
                self.match(PostgreSQLParser.EXCLUSIVE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nowait_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOWAIT(self):
            return self.getToken(PostgreSQLParser.NOWAIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nowait_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNowait_" ):
                listener.enterNowait_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNowait_" ):
                listener.exitNowait_(self)




    def nowait_(self):

        localctx = PostgreSQLParser.Nowait_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_nowait_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8058
            self.match(PostgreSQLParser.NOWAIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nowait_or_skip_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOWAIT(self):
            return self.getToken(PostgreSQLParser.NOWAIT, 0)

        def SKIP_P(self):
            return self.getToken(PostgreSQLParser.SKIP_P, 0)

        def LOCKED(self):
            return self.getToken(PostgreSQLParser.LOCKED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nowait_or_skip_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNowait_or_skip_" ):
                listener.enterNowait_or_skip_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNowait_or_skip_" ):
                listener.exitNowait_or_skip_(self)




    def nowait_or_skip_(self):

        localctx = PostgreSQLParser.Nowait_or_skip_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_nowait_or_skip_)
        try:
            self.state = 8063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.NOWAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8060
                self.match(PostgreSQLParser.NOWAIT)
                pass
            elif token in [PostgreSQLParser.SKIP_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8061
                self.match(PostgreSQLParser.SKIP_P)
                self.state = 8062
                self.match(PostgreSQLParser.LOCKED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def relation_expr_opt_alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_opt_aliasContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_clause_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_clause_listContext,0)


        def with_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clause_Context,0)


        def from_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_clauseContext,0)


        def where_or_current_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_or_current_clauseContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_updatestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatestmt" ):
                listener.enterUpdatestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatestmt" ):
                listener.exitUpdatestmt(self)




    def updatestmt(self):

        localctx = PostgreSQLParser.UpdatestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_updatestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 8065
                self.with_clause_()


            self.state = 8068
            self.match(PostgreSQLParser.UPDATE)
            self.state = 8069
            self.relation_expr_opt_alias()
            self.state = 8070
            self.match(PostgreSQLParser.SET)
            self.state = 8071
            self.set_clause_list()
            self.state = 8073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FROM:
                self.state = 8072
                self.from_clause()


            self.state = 8076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WHERE:
                self.state = 8075
                self.where_or_current_clause()


            self.state = 8079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.RETURNING:
                self.state = 8078
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_clause_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Set_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Set_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_clause_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_clause_list" ):
                listener.enterSet_clause_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_clause_list" ):
                listener.exitSet_clause_list(self)




    def set_clause_list(self):

        localctx = PostgreSQLParser.Set_clause_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_set_clause_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8081
            self.set_clause()
            self.state = 8086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8082
                self.match(PostgreSQLParser.COMMA)
                self.state = 8083
                self.set_clause()
                self.state = 8088
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_targetContext,0)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def set_target_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_target_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_clause" ):
                listener.enterSet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_clause" ):
                listener.exitSet_clause(self)




    def set_clause(self):

        localctx = PostgreSQLParser.Set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_set_clause)
        try:
            self.state = 8099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8089
                self.set_target()
                self.state = 8090
                self.match(PostgreSQLParser.EQUAL)
                self.state = 8091
                self.a_expr()
                pass
            elif token in [PostgreSQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8093
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8094
                self.set_target_list()
                self.state = 8095
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8096
                self.match(PostgreSQLParser.EQUAL)
                self.state = 8097
                self.a_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_target" ):
                listener.enterSet_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_target" ):
                listener.exitSet_target(self)




    def set_target(self):

        localctx = PostgreSQLParser.Set_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_set_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8101
            self.colid()
            self.state = 8102
            self.opt_indirection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_target_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Set_targetContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Set_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_target_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_target_list" ):
                listener.enterSet_target_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_target_list" ):
                listener.exitSet_target_list(self)




    def set_target_list(self):

        localctx = PostgreSQLParser.Set_target_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_set_target_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8104
            self.set_target()
            self.state = 8109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8105
                self.match(PostgreSQLParser.COMMA)
                self.state = 8106
                self.set_target()
                self.state = 8111
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarecursorstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(PostgreSQLParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_nameContext,0)


        def cursor_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_optionsContext,0)


        def CURSOR(self):
            return self.getToken(PostgreSQLParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def hold_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hold_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_declarecursorstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarecursorstmt" ):
                listener.enterDeclarecursorstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarecursorstmt" ):
                listener.exitDeclarecursorstmt(self)




    def declarecursorstmt(self):

        localctx = PostgreSQLParser.DeclarecursorstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_declarecursorstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8112
            self.match(PostgreSQLParser.DECLARE)
            self.state = 8113
            self.cursor_name()
            self.state = 8114
            self.cursor_options()
            self.state = 8115
            self.match(PostgreSQLParser.CURSOR)
            self.state = 8117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH or _la==PostgreSQLParser.WITHOUT:
                self.state = 8116
                self.hold_()


            self.state = 8119
            self.match(PostgreSQLParser.FOR)
            self.state = 8120
            self.selectstmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = PostgreSQLParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_cursor_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8122
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NO)
            else:
                return self.getToken(PostgreSQLParser.NO, i)

        def SCROLL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SCROLL)
            else:
                return self.getToken(PostgreSQLParser.SCROLL, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.BINARY)
            else:
                return self.getToken(PostgreSQLParser.BINARY, i)

        def INSENSITIVE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INSENSITIVE)
            else:
                return self.getToken(PostgreSQLParser.INSENSITIVE, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cursor_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_options" ):
                listener.enterCursor_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_options" ):
                listener.exitCursor_options(self)




    def cursor_options(self):

        localctx = PostgreSQLParser.Cursor_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_cursor_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.BINARY or _la==PostgreSQLParser.INSENSITIVE or _la==PostgreSQLParser.NO or _la==PostgreSQLParser.SCROLL:
                self.state = 8129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.NO]:
                    self.state = 8124
                    self.match(PostgreSQLParser.NO)
                    self.state = 8125
                    self.match(PostgreSQLParser.SCROLL)
                    pass
                elif token in [PostgreSQLParser.SCROLL]:
                    self.state = 8126
                    self.match(PostgreSQLParser.SCROLL)
                    pass
                elif token in [PostgreSQLParser.BINARY]:
                    self.state = 8127
                    self.match(PostgreSQLParser.BINARY)
                    pass
                elif token in [PostgreSQLParser.INSENSITIVE]:
                    self.state = 8128
                    self.match(PostgreSQLParser.INSENSITIVE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hold_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def HOLD(self):
            return self.getToken(PostgreSQLParser.HOLD, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hold_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHold_" ):
                listener.enterHold_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHold_" ):
                listener.exitHold_(self)




    def hold_(self):

        localctx = PostgreSQLParser.Hold_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_hold_)
        try:
            self.state = 8138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8134
                self.match(PostgreSQLParser.WITH)
                self.state = 8135
                self.match(PostgreSQLParser.HOLD)
                pass
            elif token in [PostgreSQLParser.WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8136
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 8137
                self.match(PostgreSQLParser.HOLD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_no_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_no_parensContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_selectstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectstmt" ):
                listener.enterSelectstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectstmt" ):
                listener.exitSelectstmt(self)




    def selectstmt(self):

        localctx = PostgreSQLParser.SelectstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_selectstmt)
        try:
            self.state = 8142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,715,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8140
                self.select_no_parens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8141
                self.select_with_parens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_with_parensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def select_no_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_no_parensContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_with_parens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_with_parens" ):
                listener.enterSelect_with_parens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_with_parens" ):
                listener.exitSelect_with_parens(self)




    def select_with_parens(self):

        localctx = PostgreSQLParser.Select_with_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_select_with_parens)
        try:
            self.state = 8152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,716,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8144
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8145
                self.select_no_parens()
                self.state = 8146
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8148
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8149
                self.select_with_parens()
                self.state = 8150
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_no_parensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_clauseContext,0)


        def sort_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clause_Context,0)


        def for_locking_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_clauseContext,0)


        def select_limit(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_limitContext,0)


        def select_limit_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_limit_Context,0)


        def for_locking_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_clause_Context,0)


        def with_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_no_parens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_no_parens" ):
                listener.enterSelect_no_parens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_no_parens" ):
                listener.exitSelect_no_parens(self)




    def select_no_parens(self):

        localctx = PostgreSQLParser.Select_no_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_select_no_parens)
        self._la = 0 # Token type
        try:
            self.state = 8183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN, PostgreSQLParser.SELECT, PostgreSQLParser.TABLE, PostgreSQLParser.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8154
                self.select_clause()
                self.state = 8156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ORDER:
                    self.state = 8155
                    self.sort_clause_()


                self.state = 8166
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.FOR]:
                    self.state = 8158
                    self.for_locking_clause()
                    self.state = 8160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (PostgreSQLParser.FETCH - 99)) | (1 << (PostgreSQLParser.LIMIT - 99)) | (1 << (PostgreSQLParser.OFFSET - 99)))) != 0):
                        self.state = 8159
                        self.select_limit_()


                    pass
                elif token in [PostgreSQLParser.FETCH, PostgreSQLParser.LIMIT, PostgreSQLParser.OFFSET]:
                    self.state = 8162
                    self.select_limit()
                    self.state = 8164
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.FOR:
                        self.state = 8163
                        self.for_locking_clause_()


                    pass
                elif token in [PostgreSQLParser.EOF, PostgreSQLParser.CLOSE_PAREN, PostgreSQLParser.SEMI, PostgreSQLParser.FORMAT_LA, PostgreSQLParser.CREATE, PostgreSQLParser.GRANT, PostgreSQLParser.ON, PostgreSQLParser.RETURNING, PostgreSQLParser.WITH]:
                    pass
                else:
                    pass
                pass
            elif token in [PostgreSQLParser.WITH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8168
                self.with_clause()
                self.state = 8169
                self.select_clause()
                self.state = 8171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ORDER:
                    self.state = 8170
                    self.sort_clause_()


                self.state = 8181
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.FOR]:
                    self.state = 8173
                    self.for_locking_clause()
                    self.state = 8175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (PostgreSQLParser.FETCH - 99)) | (1 << (PostgreSQLParser.LIMIT - 99)) | (1 << (PostgreSQLParser.OFFSET - 99)))) != 0):
                        self.state = 8174
                        self.select_limit_()


                    pass
                elif token in [PostgreSQLParser.FETCH, PostgreSQLParser.LIMIT, PostgreSQLParser.OFFSET]:
                    self.state = 8177
                    self.select_limit()
                    self.state = 8179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.FOR:
                        self.state = 8178
                        self.for_locking_clause_()


                    pass
                elif token in [PostgreSQLParser.EOF, PostgreSQLParser.CLOSE_PAREN, PostgreSQLParser.SEMI, PostgreSQLParser.FORMAT_LA, PostgreSQLParser.CREATE, PostgreSQLParser.GRANT, PostgreSQLParser.ON, PostgreSQLParser.RETURNING, PostgreSQLParser.WITH]:
                    pass
                else:
                    pass
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_select_intersect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_select_intersectContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_select_intersectContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.UNION)
            else:
                return self.getToken(PostgreSQLParser.UNION, i)

        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.EXCEPT)
            else:
                return self.getToken(PostgreSQLParser.EXCEPT, i)

        def all_or_distinct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.All_or_distinctContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.All_or_distinctContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_clause" ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_clause" ):
                listener.exitSelect_clause(self)




    def select_clause(self):

        localctx = PostgreSQLParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8185
            self.simple_select_intersect()
            self.state = 8193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.EXCEPT or _la==PostgreSQLParser.UNION:
                self.state = 8186
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.EXCEPT or _la==PostgreSQLParser.UNION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT:
                    self.state = 8187
                    self.all_or_distinct()


                self.state = 8190
                self.simple_select_intersect()
                self.state = 8195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_intersectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_select_pramary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_select_pramaryContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_select_pramaryContext,i)


        def INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTERSECT)
            else:
                return self.getToken(PostgreSQLParser.INTERSECT, i)

        def all_or_distinct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.All_or_distinctContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.All_or_distinctContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_select_intersect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_intersect" ):
                listener.enterSimple_select_intersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_intersect" ):
                listener.exitSimple_select_intersect(self)




    def simple_select_intersect(self):

        localctx = PostgreSQLParser.Simple_select_intersectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_simple_select_intersect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8196
            self.simple_select_pramary()
            self.state = 8204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.INTERSECT:
                self.state = 8197
                self.match(PostgreSQLParser.INTERSECT)
                self.state = 8199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT:
                    self.state = 8198
                    self.all_or_distinct()


                self.state = 8201
                self.simple_select_pramary()
                self.state = 8206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_pramaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def distinct_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Distinct_clauseContext,0)


        def target_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Target_listContext,0)


        def all_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.All_clause_Context,0)


        def target_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Target_list_Context,0)


        def into_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Into_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def group_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Having_clauseContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_clauseContext,0)


        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_select_pramary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_pramary" ):
                listener.enterSimple_select_pramary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_pramary" ):
                listener.exitSimple_select_pramary(self)




    def simple_select_pramary(self):

        localctx = PostgreSQLParser.Simple_select_pramaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_simple_select_pramary)
        self._la = 0 # Token type
        try:
            self.state = 8258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8207
                self.match(PostgreSQLParser.SELECT)
                self.state = 8252
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.EOF, PostgreSQLParser.OPEN_PAREN, PostgreSQLParser.CLOSE_PAREN, PostgreSQLParser.SEMI, PostgreSQLParser.STAR, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.PARAM, PostgreSQLParser.Operator, PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.FORMAT_LA, PostgreSQLParser.ALL, PostgreSQLParser.ARRAY, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CREATE, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.EXCEPT, PostgreSQLParser.FALSE_P, PostgreSQLParser.FETCH, PostgreSQLParser.FOR, PostgreSQLParser.FROM, PostgreSQLParser.GRANT, PostgreSQLParser.GROUP_P, PostgreSQLParser.HAVING, PostgreSQLParser.INTERSECT, PostgreSQLParser.INTO, PostgreSQLParser.LIMIT, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.OFFSET, PostgreSQLParser.ON, PostgreSQLParser.ORDER, PostgreSQLParser.RETURNING, PostgreSQLParser.SESSION_USER, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNION, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.WHERE, PostgreSQLParser.WINDOW, PostgreSQLParser.WITH, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.BinaryStringConstant, PostgreSQLParser.HexadecimalStringConstant, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                    self.state = 8209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.ALL:
                        self.state = 8208
                        self.all_clause_()


                    self.state = 8212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                        self.state = 8211
                        self.target_list_()


                    self.state = 8215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.INTO:
                        self.state = 8214
                        self.into_clause()


                    self.state = 8218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.FROM:
                        self.state = 8217
                        self.from_clause()


                    self.state = 8221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.WHERE:
                        self.state = 8220
                        self.where_clause()


                    self.state = 8224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.GROUP_P:
                        self.state = 8223
                        self.group_clause()


                    self.state = 8227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.HAVING:
                        self.state = 8226
                        self.having_clause()


                    self.state = 8230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.WINDOW:
                        self.state = 8229
                        self.window_clause()


                    pass
                elif token in [PostgreSQLParser.DISTINCT]:
                    self.state = 8232
                    self.distinct_clause()
                    self.state = 8233
                    self.target_list()
                    self.state = 8235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.INTO:
                        self.state = 8234
                        self.into_clause()


                    self.state = 8238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.FROM:
                        self.state = 8237
                        self.from_clause()


                    self.state = 8241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.WHERE:
                        self.state = 8240
                        self.where_clause()


                    self.state = 8244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.GROUP_P:
                        self.state = 8243
                        self.group_clause()


                    self.state = 8247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.HAVING:
                        self.state = 8246
                        self.having_clause()


                    self.state = 8250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.WINDOW:
                        self.state = 8249
                        self.window_clause()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PostgreSQLParser.VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8254
                self.values_clause()
                pass
            elif token in [PostgreSQLParser.TABLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8255
                self.match(PostgreSQLParser.TABLE)
                self.state = 8256
                self.relation_expr()
                pass
            elif token in [PostgreSQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8257
                self.select_with_parens()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def cte_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cte_listContext,0)


        def RECURSIVE(self):
            return self.getToken(PostgreSQLParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = PostgreSQLParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8260
            self.match(PostgreSQLParser.WITH)
            self.state = 8262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,746,self._ctx)
            if la_ == 1:
                self.state = 8261
                self.match(PostgreSQLParser.RECURSIVE)


            self.state = 8264
            self.cte_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_table_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Common_table_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Common_table_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cte_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_list" ):
                listener.enterCte_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_list" ):
                listener.exitCte_list(self)




    def cte_list(self):

        localctx = PostgreSQLParser.Cte_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_cte_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8266
            self.common_table_expr()
            self.state = 8271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8267
                self.match(PostgreSQLParser.COMMA)
                self.state = 8268
                self.common_table_expr()
                self.state = 8273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def preparablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.PreparablestmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_list_Context,0)


        def materialized_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Materialized_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_common_table_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expr" ):
                listener.enterCommon_table_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expr" ):
                listener.exitCommon_table_expr(self)




    def common_table_expr(self):

        localctx = PostgreSQLParser.Common_table_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_common_table_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8274
            self.name()
            self.state = 8276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 8275
                self.name_list_()


            self.state = 8278
            self.match(PostgreSQLParser.AS)
            self.state = 8280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NOT or _la==PostgreSQLParser.MATERIALIZED:
                self.state = 8279
                self.materialized_()


            self.state = 8282
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8283
            self.preparablestmt()
            self.state = 8284
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Materialized_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_materialized_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterialized_" ):
                listener.enterMaterialized_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterialized_" ):
                listener.exitMaterialized_(self)




    def materialized_(self):

        localctx = PostgreSQLParser.Materialized_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_materialized_)
        try:
            self.state = 8289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.MATERIALIZED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8286
                self.match(PostgreSQLParser.MATERIALIZED)
                pass
            elif token in [PostgreSQLParser.NOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8287
                self.match(PostgreSQLParser.NOT)
                self.state = 8288
                self.match(PostgreSQLParser.MATERIALIZED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_with_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_" ):
                listener.enterWith_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_" ):
                listener.exitWith_clause_(self)




    def with_clause_(self):

        localctx = PostgreSQLParser.With_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_with_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8291
            self.with_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def opttempTableName(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempTableNameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = PostgreSQLParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8293
            self.match(PostgreSQLParser.INTO)
            self.state = 8294
            self.opttempTableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Strict_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRICT_P(self):
            return self.getToken(PostgreSQLParser.STRICT_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_strict_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrict_" ):
                listener.enterStrict_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrict_" ):
                listener.exitStrict_(self)




    def strict_(self):

        localctx = PostgreSQLParser.Strict_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_strict_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8296
            self.match(PostgreSQLParser.STRICT_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttempTableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def table_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_Context,0)


        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(PostgreSQLParser.GLOBAL, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttempTableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttempTableName" ):
                listener.enterOpttempTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttempTableName" ):
                listener.exitOpttempTableName(self)




    def opttempTableName(self):

        localctx = PostgreSQLParser.OpttempTableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_opttempTableName)
        self._la = 0 # Token type
        try:
            self.state = 8314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,754,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.GLOBAL or _la==PostgreSQLParser.LOCAL:
                    self.state = 8298
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.GLOBAL or _la==PostgreSQLParser.LOCAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 8301
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.TEMP or _la==PostgreSQLParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TABLE:
                    self.state = 8302
                    self.table_()


                self.state = 8305
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8306
                self.match(PostgreSQLParser.UNLOGGED)
                self.state = 8308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TABLE:
                    self.state = 8307
                    self.table_()


                self.state = 8310
                self.qualified_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8311
                self.match(PostgreSQLParser.TABLE)
                self.state = 8312
                self.qualified_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8313
                self.qualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_" ):
                listener.enterTable_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_" ):
                listener.exitTable_(self)




    def table_(self):

        localctx = PostgreSQLParser.Table_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_table_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8316
            self.match(PostgreSQLParser.TABLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_or_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_all_or_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_or_distinct" ):
                listener.enterAll_or_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_or_distinct" ):
                listener.exitAll_or_distinct(self)




    def all_or_distinct(self):

        localctx = PostgreSQLParser.All_or_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_all_or_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8318
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distinct_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_distinct_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct_clause" ):
                listener.enterDistinct_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct_clause" ):
                listener.exitDistinct_clause(self)




    def distinct_clause(self):

        localctx = PostgreSQLParser.Distinct_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_distinct_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8320
            self.match(PostgreSQLParser.DISTINCT)
            self.state = 8326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ON:
                self.state = 8321
                self.match(PostgreSQLParser.ON)
                self.state = 8322
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8323
                self.expr_list()
                self.state = 8324
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_all_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_clause_" ):
                listener.enterAll_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_clause_" ):
                listener.exitAll_clause_(self)




    def all_clause_(self):

        localctx = PostgreSQLParser.All_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_all_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8328
            self.match(PostgreSQLParser.ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sort_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sort_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_clause_" ):
                listener.enterSort_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_clause_" ):
                listener.exitSort_clause_(self)




    def sort_clause_(self):

        localctx = PostgreSQLParser.Sort_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_sort_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8330
            self.sort_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def sortby_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sortby_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sort_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_clause" ):
                listener.enterSort_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_clause" ):
                listener.exitSort_clause(self)




    def sort_clause(self):

        localctx = PostgreSQLParser.Sort_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_sort_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8332
            self.match(PostgreSQLParser.ORDER)
            self.state = 8333
            self.match(PostgreSQLParser.BY)
            self.state = 8334
            self.sortby_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sortby_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sortby(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SortbyContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SortbyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sortby_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortby_list" ):
                listener.enterSortby_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortby_list" ):
                listener.exitSortby_list(self)




    def sortby_list(self):

        localctx = PostgreSQLParser.Sortby_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_sortby_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8336
            self.sortby()
            self.state = 8341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8337
                self.match(PostgreSQLParser.COMMA)
                self.state = 8338
                self.sortby()
                self.state = 8343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def qual_all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_all_opContext,0)


        def nulls_order_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nulls_order_Context,0)


        def asc_desc_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Asc_desc_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sortby

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortby" ):
                listener.enterSortby(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortby" ):
                listener.exitSortby(self)




    def sortby(self):

        localctx = PostgreSQLParser.SortbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_sortby)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8344
            self.a_expr()
            self.state = 8350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.USING]:
                self.state = 8345
                self.match(PostgreSQLParser.USING)
                self.state = 8346
                self.qual_all_op()
                pass
            elif token in [PostgreSQLParser.EOF, PostgreSQLParser.CLOSE_PAREN, PostgreSQLParser.COMMA, PostgreSQLParser.SEMI, PostgreSQLParser.ABSENT, PostgreSQLParser.FORMAT_LA, PostgreSQLParser.ASC, PostgreSQLParser.CREATE, PostgreSQLParser.DESC, PostgreSQLParser.FETCH, PostgreSQLParser.FOR, PostgreSQLParser.GRANT, PostgreSQLParser.LIMIT, PostgreSQLParser.NULL_P, PostgreSQLParser.OFFSET, PostgreSQLParser.ON, PostgreSQLParser.RETURNING, PostgreSQLParser.WITH, PostgreSQLParser.NULLS_P, PostgreSQLParser.RANGE, PostgreSQLParser.ROWS, PostgreSQLParser.GROUPS]:
                self.state = 8348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC:
                    self.state = 8347
                    self.asc_desc_()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 8353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NULLS_P:
                self.state = 8352
                self.nulls_order_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_limitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limit_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Limit_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Offset_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_limit" ):
                listener.enterSelect_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_limit" ):
                listener.exitSelect_limit(self)




    def select_limit(self):

        localctx = PostgreSQLParser.Select_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_select_limit)
        self._la = 0 # Token type
        try:
            self.state = 8363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.FETCH, PostgreSQLParser.LIMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8355
                self.limit_clause()
                self.state = 8357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.OFFSET:
                    self.state = 8356
                    self.offset_clause()


                pass
            elif token in [PostgreSQLParser.OFFSET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8359
                self.offset_clause()
                self.state = 8361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FETCH or _la==PostgreSQLParser.LIMIT:
                    self.state = 8360
                    self.limit_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_limit_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_limit(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_limitContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_limit_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_limit_" ):
                listener.enterSelect_limit_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_limit_" ):
                listener.exitSelect_limit_(self)




    def select_limit_(self):

        localctx = PostgreSQLParser.Select_limit_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_select_limit_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8365
            self.select_limit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def select_limit_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_limit_valueContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def select_offset_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_offset_valueContext,0)


        def FETCH(self):
            return self.getToken(PostgreSQLParser.FETCH, 0)

        def first_or_next(self):
            return self.getTypedRuleContext(PostgreSQLParser.First_or_nextContext,0)


        def select_fetch_first_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_fetch_first_valueContext,0)


        def row_or_rows(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_or_rowsContext,0)


        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(PostgreSQLParser.TIES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = PostgreSQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_limit_clause)
        self._la = 0 # Token type
        try:
            self.state = 8390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.LIMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8367
                self.match(PostgreSQLParser.LIMIT)
                self.state = 8368
                self.select_limit_value()
                self.state = 8371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 8369
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 8370
                    self.select_offset_value()


                pass
            elif token in [PostgreSQLParser.FETCH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8373
                self.match(PostgreSQLParser.FETCH)
                self.state = 8374
                self.first_or_next()
                self.state = 8388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,766,self._ctx)
                if la_ == 1:
                    self.state = 8375
                    self.select_fetch_first_value()
                    self.state = 8376
                    self.row_or_rows()
                    self.state = 8380
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PostgreSQLParser.ONLY]:
                        self.state = 8377
                        self.match(PostgreSQLParser.ONLY)
                        pass
                    elif token in [PostgreSQLParser.WITH]:
                        self.state = 8378
                        self.match(PostgreSQLParser.WITH)
                        self.state = 8379
                        self.match(PostgreSQLParser.TIES)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 8382
                    self.row_or_rows()
                    self.state = 8386
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PostgreSQLParser.ONLY]:
                        self.state = 8383
                        self.match(PostgreSQLParser.ONLY)
                        pass
                    elif token in [PostgreSQLParser.WITH]:
                        self.state = 8384
                        self.match(PostgreSQLParser.WITH)
                        self.state = 8385
                        self.match(PostgreSQLParser.TIES)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(PostgreSQLParser.OFFSET, 0)

        def select_offset_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_offset_valueContext,0)


        def select_fetch_first_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_fetch_first_valueContext,0)


        def row_or_rows(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_or_rowsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)




    def offset_clause(self):

        localctx = PostgreSQLParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_offset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8392
            self.match(PostgreSQLParser.OFFSET)
            self.state = 8397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,768,self._ctx)
            if la_ == 1:
                self.state = 8393
                self.select_offset_value()
                pass

            elif la_ == 2:
                self.state = 8394
                self.select_fetch_first_value()
                self.state = 8395
                self.row_or_rows()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_limit_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_limit_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_limit_value" ):
                listener.enterSelect_limit_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_limit_value" ):
                listener.exitSelect_limit_value(self)




    def select_limit_value(self):

        localctx = PostgreSQLParser.Select_limit_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_select_limit_value)
        try:
            self.state = 8401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.PARAM, PostgreSQLParser.Operator, PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ARRAY, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.FALSE_P, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.SESSION_USER, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.BinaryStringConstant, PostgreSQLParser.HexadecimalStringConstant, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8399
                self.a_expr()
                pass
            elif token in [PostgreSQLParser.ALL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8400
                self.match(PostgreSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_offset_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_offset_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_offset_value" ):
                listener.enterSelect_offset_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_offset_value" ):
                listener.exitSelect_offset_value(self)




    def select_offset_value(self):

        localctx = PostgreSQLParser.Select_offset_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_select_offset_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8403
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_fetch_first_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def i_or_f_const(self):
            return self.getTypedRuleContext(PostgreSQLParser.I_or_f_constContext,0)


        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_fetch_first_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_fetch_first_value" ):
                listener.enterSelect_fetch_first_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_fetch_first_value" ):
                listener.exitSelect_fetch_first_value(self)




    def select_fetch_first_value(self):

        localctx = PostgreSQLParser.Select_fetch_first_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_select_fetch_first_value)
        try:
            self.state = 8410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN, PostgreSQLParser.PARAM, PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ARRAY, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.FALSE_P, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NULL_P, PostgreSQLParser.SESSION_USER, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.BinaryStringConstant, PostgreSQLParser.HexadecimalStringConstant, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8405
                self.c_expr()
                pass
            elif token in [PostgreSQLParser.PLUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8406
                self.match(PostgreSQLParser.PLUS)
                self.state = 8407
                self.i_or_f_const()
                pass
            elif token in [PostgreSQLParser.MINUS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8408
                self.match(PostgreSQLParser.MINUS)
                self.state = 8409
                self.i_or_f_const()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class I_or_f_constContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def fconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.FconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_i_or_f_const

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterI_or_f_const" ):
                listener.enterI_or_f_const(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitI_or_f_const" ):
                listener.exitI_or_f_const(self)




    def i_or_f_const(self):

        localctx = PostgreSQLParser.I_or_f_constContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_i_or_f_const)
        try:
            self.state = 8414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8412
                self.iconst()
                pass
            elif token in [PostgreSQLParser.Numeric]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8413
                self.fconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_or_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_or_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_rows" ):
                listener.enterRow_or_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_rows" ):
                listener.exitRow_or_rows(self)




    def row_or_rows(self):

        localctx = PostgreSQLParser.Row_or_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_row_or_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8416
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ROWS or _la==PostgreSQLParser.ROW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class First_or_nextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def NEXT(self):
            return self.getToken(PostgreSQLParser.NEXT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_first_or_next

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst_or_next" ):
                listener.enterFirst_or_next(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst_or_next" ):
                listener.exitFirst_or_next(self)




    def first_or_next(self):

        localctx = PostgreSQLParser.First_or_nextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_first_or_next)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8418
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FIRST_P or _la==PostgreSQLParser.NEXT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def group_by_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_by_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_clause" ):
                listener.enterGroup_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_clause" ):
                listener.exitGroup_clause(self)




    def group_clause(self):

        localctx = PostgreSQLParser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_group_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8420
            self.match(PostgreSQLParser.GROUP_P)
            self.state = 8421
            self.match(PostgreSQLParser.BY)
            self.state = 8422
            self.group_by_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Group_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_by_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_list" ):
                listener.enterGroup_by_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_list" ):
                listener.exitGroup_by_list(self)




    def group_by_list(self):

        localctx = PostgreSQLParser.Group_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_group_by_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8424
            self.group_by_item()
            self.state = 8429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8425
                self.match(PostgreSQLParser.COMMA)
                self.state = 8426
                self.group_by_item()
                self.state = 8431
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def empty_grouping_set(self):
            return self.getTypedRuleContext(PostgreSQLParser.Empty_grouping_setContext,0)


        def cube_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cube_clauseContext,0)


        def rollup_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Rollup_clauseContext,0)


        def grouping_sets_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grouping_sets_clauseContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)




    def group_by_item(self):

        localctx = PostgreSQLParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_group_by_item)
        try:
            self.state = 8437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,773,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8432
                self.empty_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8433
                self.cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8434
                self.rollup_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8435
                self.grouping_sets_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8436
                self.a_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_empty_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_grouping_set" ):
                listener.enterEmpty_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_grouping_set" ):
                listener.exitEmpty_grouping_set(self)




    def empty_grouping_set(self):

        localctx = PostgreSQLParser.Empty_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_empty_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8439
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8440
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(PostgreSQLParser.ROLLUP, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rollup_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_clause" ):
                listener.enterRollup_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_clause" ):
                listener.exitRollup_clause(self)




    def rollup_clause(self):

        localctx = PostgreSQLParser.Rollup_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_rollup_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8442
            self.match(PostgreSQLParser.ROLLUP)
            self.state = 8443
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8444
            self.expr_list()
            self.state = 8445
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(PostgreSQLParser.CUBE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cube_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_clause" ):
                listener.enterCube_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_clause" ):
                listener.exitCube_clause(self)




    def cube_clause(self):

        localctx = PostgreSQLParser.Cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_cube_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8447
            self.match(PostgreSQLParser.CUBE)
            self.state = 8448
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8449
            self.expr_list()
            self.state = 8450
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(PostgreSQLParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(PostgreSQLParser.SETS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def group_by_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_by_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grouping_sets_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_clause" ):
                listener.enterGrouping_sets_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_clause" ):
                listener.exitGrouping_sets_clause(self)




    def grouping_sets_clause(self):

        localctx = PostgreSQLParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_grouping_sets_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8452
            self.match(PostgreSQLParser.GROUPING)
            self.state = 8453
            self.match(PostgreSQLParser.SETS)
            self.state = 8454
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8455
            self.group_by_list()
            self.state = 8456
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PostgreSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8458
            self.match(PostgreSQLParser.HAVING)
            self.state = 8459
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_locking_items(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_itemsContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_clause" ):
                listener.enterFor_locking_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_clause" ):
                listener.exitFor_locking_clause(self)




    def for_locking_clause(self):

        localctx = PostgreSQLParser.For_locking_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_for_locking_clause)
        try:
            self.state = 8465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,774,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8461
                self.for_locking_items()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8462
                self.match(PostgreSQLParser.FOR)
                self.state = 8463
                self.match(PostgreSQLParser.READ)
                self.state = 8464
                self.match(PostgreSQLParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_locking_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_clause_" ):
                listener.enterFor_locking_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_clause_" ):
                listener.exitFor_locking_clause_(self)




    def for_locking_clause_(self):

        localctx = PostgreSQLParser.For_locking_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_for_locking_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8467
            self.for_locking_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_locking_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.For_locking_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.For_locking_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_items" ):
                listener.enterFor_locking_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_items" ):
                listener.exitFor_locking_items(self)




    def for_locking_items(self):

        localctx = PostgreSQLParser.For_locking_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_for_locking_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8470 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 8469
                self.for_locking_item()
                self.state = 8472 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.FOR):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_locking_strength(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_strengthContext,0)


        def locked_rels_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Locked_rels_listContext,0)


        def nowait_or_skip_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nowait_or_skip_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_item" ):
                listener.enterFor_locking_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_item" ):
                listener.exitFor_locking_item(self)




    def for_locking_item(self):

        localctx = PostgreSQLParser.For_locking_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_for_locking_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8474
            self.for_locking_strength()
            self.state = 8476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OF:
                self.state = 8475
                self.locked_rels_list()


            self.state = 8479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NOWAIT or _la==PostgreSQLParser.SKIP_P:
                self.state = 8478
                self.nowait_or_skip_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_strengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SHARE(self):
            return self.getToken(PostgreSQLParser.SHARE, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_strength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_strength" ):
                listener.enterFor_locking_strength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_strength" ):
                listener.exitFor_locking_strength(self)




    def for_locking_strength(self):

        localctx = PostgreSQLParser.For_locking_strengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_for_locking_strength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8481
            self.match(PostgreSQLParser.FOR)
            self.state = 8491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.NO, PostgreSQLParser.UPDATE]:
                self.state = 8484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NO:
                    self.state = 8482
                    self.match(PostgreSQLParser.NO)
                    self.state = 8483
                    self.match(PostgreSQLParser.KEY)


                self.state = 8486
                self.match(PostgreSQLParser.UPDATE)
                pass
            elif token in [PostgreSQLParser.KEY, PostgreSQLParser.SHARE]:
                self.state = 8488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.KEY:
                    self.state = 8487
                    self.match(PostgreSQLParser.KEY)


                self.state = 8490
                self.match(PostgreSQLParser.SHARE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locked_rels_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_locked_rels_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocked_rels_list" ):
                listener.enterLocked_rels_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocked_rels_list" ):
                listener.exitLocked_rels_list(self)




    def locked_rels_list(self):

        localctx = PostgreSQLParser.Locked_rels_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_locked_rels_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8493
            self.match(PostgreSQLParser.OF)
            self.state = 8494
            self.qualified_name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OPEN_PAREN)
            else:
                return self.getToken(PostgreSQLParser.OPEN_PAREN, i)

        def expr_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expr_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,i)


        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CLOSE_PAREN)
            else:
                return self.getToken(PostgreSQLParser.CLOSE_PAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)




    def values_clause(self):

        localctx = PostgreSQLParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8496
            self.match(PostgreSQLParser.VALUES)
            self.state = 8497
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8498
            self.expr_list()
            self.state = 8499
            self.match(PostgreSQLParser.CLOSE_PAREN)
            self.state = 8507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8500
                self.match(PostgreSQLParser.COMMA)
                self.state = 8501
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8502
                self.expr_list()
                self.state = 8503
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def from_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = PostgreSQLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8510
            self.match(PostgreSQLParser.FROM)
            self.state = 8511
            self.from_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_refContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_refContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_from_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_list" ):
                listener.enterFrom_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_list" ):
                listener.exitFrom_list(self)




    def from_list(self):

        localctx = PostgreSQLParser.From_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_from_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8513
            self.table_ref()
            self.state = 8518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8514
                self.match(PostgreSQLParser.COMMA)
                self.state = 8515
                self.table_ref()
                self.state = 8520
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def func_table(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_tableContext,0)


        def xmltable(self):
            return self.getTypedRuleContext(PostgreSQLParser.XmltableContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def LATERAL_P(self):
            return self.getToken(PostgreSQLParser.LATERAL_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_refContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_refContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CROSS)
            else:
                return self.getToken(PostgreSQLParser.CROSS, i)

        def JOIN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN)
            else:
                return self.getToken(PostgreSQLParser.JOIN, i)

        def NATURAL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NATURAL)
            else:
                return self.getToken(PostgreSQLParser.NATURAL, i)

        def join_qual(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_qualContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_qualContext,i)


        def alias_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alias_clauseContext,0)


        def tablesample_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Tablesample_clauseContext,0)


        def func_alias_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_alias_clauseContext,0)


        def join_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_typeContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_typeContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref" ):
                listener.enterTable_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref" ):
                listener.exitTable_ref(self)




    def table_ref(self):

        localctx = PostgreSQLParser.Table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_table_ref)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
            if la_ == 1:
                self.state = 8521
                self.relation_expr()
                self.state = 8523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 8522
                    self.alias_clause()


                self.state = 8526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.TABLESAMPLE:
                    self.state = 8525
                    self.tablesample_clause()


                pass

            elif la_ == 2:
                self.state = 8528
                self.func_table()
                self.state = 8530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 8529
                    self.func_alias_clause()


                pass

            elif la_ == 3:
                self.state = 8532
                self.xmltable()
                self.state = 8534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 8533
                    self.alias_clause()


                pass

            elif la_ == 4:
                self.state = 8536
                self.select_with_parens()
                self.state = 8538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 8537
                    self.alias_clause()


                pass

            elif la_ == 5:
                self.state = 8540
                self.match(PostgreSQLParser.LATERAL_P)
                self.state = 8553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,791,self._ctx)
                if la_ == 1:
                    self.state = 8541
                    self.xmltable()
                    self.state = 8543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                        self.state = 8542
                        self.alias_clause()


                    pass

                elif la_ == 2:
                    self.state = 8545
                    self.func_table()
                    self.state = 8547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                        self.state = 8546
                        self.func_alias_clause()


                    pass

                elif la_ == 3:
                    self.state = 8549
                    self.select_with_parens()
                    self.state = 8551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                        self.state = 8550
                        self.alias_clause()


                    pass


                pass

            elif la_ == 6:
                self.state = 8555
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8556
                self.table_ref()
                self.state = 8573
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.CROSS]:
                    self.state = 8557
                    self.match(PostgreSQLParser.CROSS)
                    self.state = 8558
                    self.match(PostgreSQLParser.JOIN)
                    self.state = 8559
                    self.table_ref()
                    pass
                elif token in [PostgreSQLParser.NATURAL]:
                    self.state = 8560
                    self.match(PostgreSQLParser.NATURAL)
                    self.state = 8562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (PostgreSQLParser.FULL - 151)) | (1 << (PostgreSQLParser.INNER_P - 151)) | (1 << (PostgreSQLParser.LEFT - 151)) | (1 << (PostgreSQLParser.RIGHT - 151)))) != 0):
                        self.state = 8561
                        self.join_type()


                    self.state = 8564
                    self.match(PostgreSQLParser.JOIN)
                    self.state = 8565
                    self.table_ref()
                    pass
                elif token in [PostgreSQLParser.FULL, PostgreSQLParser.INNER_P, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.RIGHT]:
                    self.state = 8567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (PostgreSQLParser.FULL - 151)) | (1 << (PostgreSQLParser.INNER_P - 151)) | (1 << (PostgreSQLParser.LEFT - 151)) | (1 << (PostgreSQLParser.RIGHT - 151)))) != 0):
                        self.state = 8566
                        self.join_type()


                    self.state = 8569
                    self.match(PostgreSQLParser.JOIN)
                    self.state = 8570
                    self.table_ref()
                    self.state = 8571
                    self.join_qual()
                    pass
                elif token in [PostgreSQLParser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 8575
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)) | (1 << (PostgreSQLParser.AS - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                    self.state = 8576
                    self.alias_clause()


                pass


            self.state = 8599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,800,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8597
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PostgreSQLParser.CROSS]:
                        self.state = 8581
                        self.match(PostgreSQLParser.CROSS)
                        self.state = 8582
                        self.match(PostgreSQLParser.JOIN)
                        self.state = 8583
                        self.table_ref()
                        pass
                    elif token in [PostgreSQLParser.NATURAL]:
                        self.state = 8584
                        self.match(PostgreSQLParser.NATURAL)
                        self.state = 8586
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (PostgreSQLParser.FULL - 151)) | (1 << (PostgreSQLParser.INNER_P - 151)) | (1 << (PostgreSQLParser.LEFT - 151)) | (1 << (PostgreSQLParser.RIGHT - 151)))) != 0):
                            self.state = 8585
                            self.join_type()


                        self.state = 8588
                        self.match(PostgreSQLParser.JOIN)
                        self.state = 8589
                        self.table_ref()
                        pass
                    elif token in [PostgreSQLParser.FULL, PostgreSQLParser.INNER_P, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.RIGHT]:
                        self.state = 8591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (PostgreSQLParser.FULL - 151)) | (1 << (PostgreSQLParser.INNER_P - 151)) | (1 << (PostgreSQLParser.LEFT - 151)) | (1 << (PostgreSQLParser.RIGHT - 151)))) != 0):
                            self.state = 8590
                            self.join_type()


                        self.state = 8593
                        self.match(PostgreSQLParser.JOIN)
                        self.state = 8594
                        self.table_ref()
                        self.state = 8595
                        self.join_qual()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 8601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,800,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alias_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_clause" ):
                listener.enterAlias_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_clause" ):
                listener.exitAlias_clause(self)




    def alias_clause(self):

        localctx = PostgreSQLParser.Alias_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_alias_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS:
                self.state = 8602
                self.match(PostgreSQLParser.AS)


            self.state = 8605
            self.colid()
            self.state = 8610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 8606
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8607
                self.name_list()
                self.state = 8608
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_alias_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alias_clauseContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def tablefuncelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_alias_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_alias_clause" ):
                listener.enterFunc_alias_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_alias_clause" ):
                listener.exitFunc_alias_clause(self)




    def func_alias_clause(self):

        localctx = PostgreSQLParser.Func_alias_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_func_alias_clause)
        self._la = 0 # Token type
        try:
            self.state = 8624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8612
                self.alias_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8618
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.AS]:
                    self.state = 8613
                    self.match(PostgreSQLParser.AS)
                    self.state = 8615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.JSON - 30)) | (1 << (PostgreSQLParser.JSON_ARRAY - 30)) | (1 << (PostgreSQLParser.JSON_ARRAYAGG - 30)) | (1 << (PostgreSQLParser.JSON_EXISTS - 30)) | (1 << (PostgreSQLParser.JSON_OBJECT - 30)) | (1 << (PostgreSQLParser.JSON_OBJECTAGG - 30)) | (1 << (PostgreSQLParser.JSON_QUERY - 30)) | (1 << (PostgreSQLParser.JSON_SCALAR - 30)) | (1 << (PostgreSQLParser.JSON_SERIALIZE - 30)) | (1 << (PostgreSQLParser.JSON_TABLE - 30)) | (1 << (PostgreSQLParser.JSON_VALUE - 30)) | (1 << (PostgreSQLParser.MERGE_ACTION - 30)) | (1 << (PostgreSQLParser.ABSENT - 30)) | (1 << (PostgreSQLParser.ASENSITIVE - 30)) | (1 << (PostgreSQLParser.ATOMIC - 30)) | (1 << (PostgreSQLParser.BREADTH - 30)) | (1 << (PostgreSQLParser.COMPRESSION - 30)) | (1 << (PostgreSQLParser.CONDITIONAL - 30)) | (1 << (PostgreSQLParser.DEPTH - 30)) | (1 << (PostgreSQLParser.EMPTY_P - 30)) | (1 << (PostgreSQLParser.FINALIZE - 30)) | (1 << (PostgreSQLParser.INDENT - 30)) | (1 << (PostgreSQLParser.KEEP - 30)) | (1 << (PostgreSQLParser.KEYS - 30)) | (1 << (PostgreSQLParser.NESTED - 30)) | (1 << (PostgreSQLParser.OMIT - 30)) | (1 << (PostgreSQLParser.PARAMETER - 30)) | (1 << (PostgreSQLParser.PATH - 30)) | (1 << (PostgreSQLParser.PLAN - 30)) | (1 << (PostgreSQLParser.QUOTES - 30)) | (1 << (PostgreSQLParser.SCALAR - 30)) | (1 << (PostgreSQLParser.SOURCE - 30)) | (1 << (PostgreSQLParser.STRING_P - 30)) | (1 << (PostgreSQLParser.TARGET - 30)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 30)) | (1 << (PostgreSQLParser.PERIOD - 30)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PostgreSQLParser.BETWEEN - 418)) | (1 << (PostgreSQLParser.BIGINT - 418)) | (1 << (PostgreSQLParser.BIT - 418)) | (1 << (PostgreSQLParser.BOOLEAN_P - 418)) | (1 << (PostgreSQLParser.CHAR_P - 418)) | (1 << (PostgreSQLParser.CHARACTER - 418)) | (1 << (PostgreSQLParser.COALESCE - 418)) | (1 << (PostgreSQLParser.DEC - 418)) | (1 << (PostgreSQLParser.DECIMAL_P - 418)) | (1 << (PostgreSQLParser.EXISTS - 418)) | (1 << (PostgreSQLParser.EXTRACT - 418)) | (1 << (PostgreSQLParser.FLOAT_P - 418)) | (1 << (PostgreSQLParser.GREATEST - 418)) | (1 << (PostgreSQLParser.INOUT - 418)) | (1 << (PostgreSQLParser.INT_P - 418)) | (1 << (PostgreSQLParser.INTEGER - 418)) | (1 << (PostgreSQLParser.INTERVAL - 418)) | (1 << (PostgreSQLParser.LEAST - 418)) | (1 << (PostgreSQLParser.NATIONAL - 418)) | (1 << (PostgreSQLParser.NCHAR - 418)) | (1 << (PostgreSQLParser.NONE - 418)) | (1 << (PostgreSQLParser.NULLIF - 418)) | (1 << (PostgreSQLParser.NUMERIC - 418)) | (1 << (PostgreSQLParser.OVERLAY - 418)) | (1 << (PostgreSQLParser.POSITION - 418)) | (1 << (PostgreSQLParser.PRECISION - 418)) | (1 << (PostgreSQLParser.REAL - 418)) | (1 << (PostgreSQLParser.ROW - 418)) | (1 << (PostgreSQLParser.SETOF - 418)) | (1 << (PostgreSQLParser.SMALLINT - 418)) | (1 << (PostgreSQLParser.SUBSTRING - 418)) | (1 << (PostgreSQLParser.TIME - 418)) | (1 << (PostgreSQLParser.TIMESTAMP - 418)) | (1 << (PostgreSQLParser.TREAT - 418)) | (1 << (PostgreSQLParser.TRIM - 418)) | (1 << (PostgreSQLParser.VALUES - 418)) | (1 << (PostgreSQLParser.VARCHAR - 418)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 418)) | (1 << (PostgreSQLParser.XMLCONCAT - 418)) | (1 << (PostgreSQLParser.XMLELEMENT - 418)) | (1 << (PostgreSQLParser.XMLEXISTS - 418)) | (1 << (PostgreSQLParser.XMLFOREST - 418)) | (1 << (PostgreSQLParser.XMLPARSE - 418)) | (1 << (PostgreSQLParser.XMLPI - 418)) | (1 << (PostgreSQLParser.XMLROOT - 418)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 418)) | (1 << (PostgreSQLParser.CALL - 418)) | (1 << (PostgreSQLParser.CURRENT_P - 418)) | (1 << (PostgreSQLParser.ATTACH - 418)) | (1 << (PostgreSQLParser.DETACH - 418)) | (1 << (PostgreSQLParser.EXPRESSION - 418)) | (1 << (PostgreSQLParser.GENERATED - 418)) | (1 << (PostgreSQLParser.LOGGED - 418)) | (1 << (PostgreSQLParser.STORED - 418)) | (1 << (PostgreSQLParser.INCLUDE - 418)) | (1 << (PostgreSQLParser.ROUTINE - 418)) | (1 << (PostgreSQLParser.TRANSFORM - 418)))) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & ((1 << (PostgreSQLParser.IMPORT_P - 482)) | (1 << (PostgreSQLParser.POLICY - 482)) | (1 << (PostgreSQLParser.METHOD - 482)) | (1 << (PostgreSQLParser.REFERENCING - 482)) | (1 << (PostgreSQLParser.NEW - 482)) | (1 << (PostgreSQLParser.OLD - 482)) | (1 << (PostgreSQLParser.VALUE_P - 482)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 482)) | (1 << (PostgreSQLParser.PUBLICATION - 482)) | (1 << (PostgreSQLParser.OUT_P - 482)) | (1 << (PostgreSQLParser.ROUTINES - 482)) | (1 << (PostgreSQLParser.SCHEMAS - 482)) | (1 << (PostgreSQLParser.PROCEDURES - 482)) | (1 << (PostgreSQLParser.INPUT_P - 482)) | (1 << (PostgreSQLParser.SUPPORT - 482)) | (1 << (PostgreSQLParser.PARALLEL - 482)) | (1 << (PostgreSQLParser.SQL_P - 482)) | (1 << (PostgreSQLParser.DEPENDS - 482)) | (1 << (PostgreSQLParser.OVERRIDING - 482)) | (1 << (PostgreSQLParser.CONFLICT - 482)) | (1 << (PostgreSQLParser.SKIP_P - 482)) | (1 << (PostgreSQLParser.LOCKED - 482)) | (1 << (PostgreSQLParser.TIES - 482)) | (1 << (PostgreSQLParser.ROLLUP - 482)) | (1 << (PostgreSQLParser.CUBE - 482)) | (1 << (PostgreSQLParser.GROUPING - 482)) | (1 << (PostgreSQLParser.SETS - 482)) | (1 << (PostgreSQLParser.ORDINALITY - 482)) | (1 << (PostgreSQLParser.XMLTABLE - 482)) | (1 << (PostgreSQLParser.COLUMNS - 482)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 482)) | (1 << (PostgreSQLParser.NORMALIZED - 482)) | (1 << (PostgreSQLParser.WITHIN - 482)) | (1 << (PostgreSQLParser.FILTER - 482)) | (1 << (PostgreSQLParser.GROUPS - 482)) | (1 << (PostgreSQLParser.OTHERS - 482)) | (1 << (PostgreSQLParser.NFC - 482)) | (1 << (PostgreSQLParser.NFD - 482)) | (1 << (PostgreSQLParser.NFKC - 482)) | (1 << (PostgreSQLParser.NFKD - 482)) | (1 << (PostgreSQLParser.UESCAPE - 482)) | (1 << (PostgreSQLParser.VIEWS - 482)) | (1 << (PostgreSQLParser.NORMALIZE - 482)) | (1 << (PostgreSQLParser.ERROR - 482)) | (1 << (PostgreSQLParser.RETURN - 482)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (PostgreSQLParser.FORMAT - 553)) | (1 << (PostgreSQLParser.Identifier - 553)) | (1 << (PostgreSQLParser.QuotedIdentifier - 553)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 553)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 553)))) != 0):
                        self.state = 8614
                        self.colid()


                    pass
                elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                    self.state = 8617
                    self.colid()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8620
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8621
                self.tablefuncelementlist()
                self.state = 8622
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def INNER_P(self):
            return self.getToken(PostgreSQLParser.INNER_P, 0)

        def OUTER_P(self):
            return self.getToken(PostgreSQLParser.OUTER_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)




    def join_type(self):

        localctx = PostgreSQLParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8626
            _la = self._input.LA(1)
            if not(((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (PostgreSQLParser.FULL - 151)) | (1 << (PostgreSQLParser.INNER_P - 151)) | (1 << (PostgreSQLParser.LEFT - 151)) | (1 << (PostgreSQLParser.RIGHT - 151)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OUTER_P:
                self.state = 8627
                self.match(PostgreSQLParser.OUTER_P)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_qualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_qual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_qual" ):
                listener.enterJoin_qual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_qual" ):
                listener.exitJoin_qual(self)




    def join_qual(self):

        localctx = PostgreSQLParser.Join_qualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_join_qual)
        try:
            self.state = 8637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.USING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8630
                self.match(PostgreSQLParser.USING)
                self.state = 8631
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8632
                self.name_list()
                self.state = 8633
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.ON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8635
                self.match(PostgreSQLParser.ON)
                self.state = 8636
                self.a_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relation_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_expr" ):
                listener.enterRelation_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_expr" ):
                listener.exitRelation_expr(self)




    def relation_expr(self):

        localctx = PostgreSQLParser.Relation_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_relation_expr)
        self._la = 0 # Token type
        try:
            self.state = 8651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8639
                self.qualified_name()
                self.state = 8641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.STAR:
                    self.state = 8640
                    self.match(PostgreSQLParser.STAR)


                pass
            elif token in [PostgreSQLParser.ONLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8643
                self.match(PostgreSQLParser.ONLY)
                self.state = 8649
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                    self.state = 8644
                    self.qualified_name()
                    pass
                elif token in [PostgreSQLParser.OPEN_PAREN]:
                    self.state = 8645
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 8646
                    self.qualified_name()
                    self.state = 8647
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Relation_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relation_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_expr_list" ):
                listener.enterRelation_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_expr_list" ):
                listener.exitRelation_expr_list(self)




    def relation_expr_list(self):

        localctx = PostgreSQLParser.Relation_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_relation_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8653
            self.relation_expr()
            self.state = 8658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8654
                self.match(PostgreSQLParser.COMMA)
                self.state = 8655
                self.relation_expr()
                self.state = 8660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_expr_opt_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relation_expr_opt_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_expr_opt_alias" ):
                listener.enterRelation_expr_opt_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_expr_opt_alias" ):
                listener.exitRelation_expr_opt_alias(self)




    def relation_expr_opt_alias(self):

        localctx = PostgreSQLParser.Relation_expr_opt_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_relation_expr_opt_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8661
            self.relation_expr()
            self.state = 8666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
            if la_ == 1:
                self.state = 8663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS:
                    self.state = 8662
                    self.match(PostgreSQLParser.AS)


                self.state = 8665
                self.colid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tablesample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(PostgreSQLParser.TABLESAMPLE, 0)

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def repeatable_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Repeatable_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablesample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablesample_clause" ):
                listener.enterTablesample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablesample_clause" ):
                listener.exitTablesample_clause(self)




    def tablesample_clause(self):

        localctx = PostgreSQLParser.Tablesample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_tablesample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8668
            self.match(PostgreSQLParser.TABLESAMPLE)
            self.state = 8669
            self.func_name()
            self.state = 8670
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8671
            self.expr_list()
            self.state = 8672
            self.match(PostgreSQLParser.CLOSE_PAREN)
            self.state = 8674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.REPEATABLE:
                self.state = 8673
                self.repeatable_clause_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeatable_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(PostgreSQLParser.REPEATABLE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_repeatable_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatable_clause_" ):
                listener.enterRepeatable_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatable_clause_" ):
                listener.exitRepeatable_clause_(self)




    def repeatable_clause_(self):

        localctx = PostgreSQLParser.Repeatable_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_repeatable_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8676
            self.match(PostgreSQLParser.REPEATABLE)
            self.state = 8677
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8678
            self.a_expr()
            self.state = 8679
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_expr_windowless(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_windowlessContext,0)


        def ordinality_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Ordinality_Context,0)


        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def rowsfrom_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Rowsfrom_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_table" ):
                listener.enterFunc_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_table" ):
                listener.exitFunc_table(self)




    def func_table(self):

        localctx = PostgreSQLParser.Func_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_func_table)
        try:
            self.state = 8693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8681
                self.func_expr_windowless()
                self.state = 8683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 8682
                    self.ordinality_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8685
                self.match(PostgreSQLParser.ROWS)
                self.state = 8686
                self.match(PostgreSQLParser.FROM)
                self.state = 8687
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8688
                self.rowsfrom_list()
                self.state = 8689
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                if la_ == 1:
                    self.state = 8690
                    self.ordinality_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowsfrom_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_expr_windowless(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_windowlessContext,0)


        def col_def_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Col_def_list_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsfrom_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsfrom_item" ):
                listener.enterRowsfrom_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsfrom_item" ):
                listener.exitRowsfrom_item(self)




    def rowsfrom_item(self):

        localctx = PostgreSQLParser.Rowsfrom_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_rowsfrom_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8695
            self.func_expr_windowless()
            self.state = 8697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS:
                self.state = 8696
                self.col_def_list_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowsfrom_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowsfrom_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Rowsfrom_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Rowsfrom_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsfrom_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsfrom_list" ):
                listener.enterRowsfrom_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsfrom_list" ):
                listener.exitRowsfrom_list(self)




    def rowsfrom_list(self):

        localctx = PostgreSQLParser.Rowsfrom_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_rowsfrom_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8699
            self.rowsfrom_item()
            self.state = 8704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8700
                self.match(PostgreSQLParser.COMMA)
                self.state = 8701
                self.rowsfrom_item()
                self.state = 8706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_def_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def tablefuncelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_col_def_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_def_list_" ):
                listener.enterCol_def_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_def_list_" ):
                listener.exitCol_def_list_(self)




    def col_def_list_(self):

        localctx = PostgreSQLParser.Col_def_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_col_def_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8707
            self.match(PostgreSQLParser.AS)
            self.state = 8708
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8709
            self.tablefuncelementlist()
            self.state = 8710
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinality_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(PostgreSQLParser.ORDINALITY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ordinality_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinality_" ):
                listener.enterOrdinality_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinality_" ):
                listener.exitOrdinality_(self)




    def ordinality_(self):

        localctx = PostgreSQLParser.Ordinality_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_ordinality_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8712
            self.match(PostgreSQLParser.WITH)
            self.state = 8713
            self.match(PostgreSQLParser.ORDINALITY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PostgreSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8715
            self.match(PostgreSQLParser.WHERE)
            self.state = 8716
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_or_current_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_nameContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_or_current_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_or_current_clause" ):
                listener.enterWhere_or_current_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_or_current_clause" ):
                listener.exitWhere_or_current_clause(self)




    def where_or_current_clause(self):

        localctx = PostgreSQLParser.Where_or_current_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_where_or_current_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8718
            self.match(PostgreSQLParser.WHERE)
            self.state = 8723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,820,self._ctx)
            if la_ == 1:
                self.state = 8719
                self.match(PostgreSQLParser.CURRENT_P)
                self.state = 8720
                self.match(PostgreSQLParser.OF)
                self.state = 8721
                self.cursor_name()
                pass

            elif la_ == 2:
                self.state = 8722
                self.a_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttablefuncelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablefuncelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttablefuncelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttablefuncelementlist" ):
                listener.enterOpttablefuncelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttablefuncelementlist" ):
                listener.exitOpttablefuncelementlist(self)




    def opttablefuncelementlist(self):

        localctx = PostgreSQLParser.OpttablefuncelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_opttablefuncelementlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8725
            self.tablefuncelementlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablefuncelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablefuncelement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TablefuncelementContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablefuncelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablefuncelementlist" ):
                listener.enterTablefuncelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablefuncelementlist" ):
                listener.exitTablefuncelementlist(self)




    def tablefuncelementlist(self):

        localctx = PostgreSQLParser.TablefuncelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_tablefuncelementlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8727
            self.tablefuncelement()
            self.state = 8732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8728
                self.match(PostgreSQLParser.COMMA)
                self.state = 8729
                self.tablefuncelement()
                self.state = 8734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablefuncelementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def collate_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablefuncelement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablefuncelement" ):
                listener.enterTablefuncelement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablefuncelement" ):
                listener.exitTablefuncelement(self)




    def tablefuncelement(self):

        localctx = PostgreSQLParser.TablefuncelementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_tablefuncelement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8735
            self.colid()
            self.state = 8736
            self.typename()
            self.state = 8738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.COLLATE:
                self.state = 8737
                self.collate_clause_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XmltableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLTABLE(self):
            return self.getToken(PostgreSQLParser.XMLTABLE, 0)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OPEN_PAREN)
            else:
                return self.getToken(PostgreSQLParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CLOSE_PAREN)
            else:
                return self.getToken(PostgreSQLParser.CLOSE_PAREN, i)

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def xmlexists_argument(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xmlexists_argumentContext,0)


        def COLUMNS(self):
            return self.getToken(PostgreSQLParser.COLUMNS, 0)

        def xmltable_column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xmltable_column_listContext,0)


        def XMLNAMESPACES(self):
            return self.getToken(PostgreSQLParser.XMLNAMESPACES, 0)

        def xml_namespace_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_namespace_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable" ):
                listener.enterXmltable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable" ):
                listener.exitXmltable(self)




    def xmltable(self):

        localctx = PostgreSQLParser.XmltableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_xmltable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8740
            self.match(PostgreSQLParser.XMLTABLE)
            self.state = 8741
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,823,self._ctx)
            if la_ == 1:
                self.state = 8742
                self.c_expr()
                self.state = 8743
                self.xmlexists_argument()
                self.state = 8744
                self.match(PostgreSQLParser.COLUMNS)
                self.state = 8745
                self.xmltable_column_list()
                pass

            elif la_ == 2:
                self.state = 8747
                self.match(PostgreSQLParser.XMLNAMESPACES)
                self.state = 8748
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8749
                self.xml_namespace_list()
                self.state = 8750
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8751
                self.match(PostgreSQLParser.COMMA)
                self.state = 8752
                self.c_expr()
                self.state = 8753
                self.xmlexists_argument()
                self.state = 8754
                self.match(PostgreSQLParser.COLUMNS)
                self.state = 8755
                self.xmltable_column_list()
                pass


            self.state = 8759
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xmltable_column_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xmltable_column_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xmltable_column_elContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_column_list" ):
                listener.enterXmltable_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_column_list" ):
                listener.exitXmltable_column_list(self)




    def xmltable_column_list(self):

        localctx = PostgreSQLParser.Xmltable_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_xmltable_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8761
            self.xmltable_column_el()
            self.state = 8766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8762
                self.match(PostgreSQLParser.COMMA)
                self.state = 8763
                self.xmltable_column_el()
                self.state = 8768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_column_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(PostgreSQLParser.ORDINALITY, 0)

        def xmltable_column_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xmltable_column_option_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable_column_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_column_el" ):
                listener.enterXmltable_column_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_column_el" ):
                listener.exitXmltable_column_el(self)




    def xmltable_column_el(self):

        localctx = PostgreSQLParser.Xmltable_column_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_xmltable_column_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8769
            self.colid()
            self.state = 8776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.FLOAT_P, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NUMERIC, PostgreSQLParser.REAL, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.VARCHAR, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.COLUMNS, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.state = 8770
                self.typename()
                self.state = 8772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (PostgreSQLParser.DEFAULT - 91)) | (1 << (PostgreSQLParser.NOT - 91)) | (1 << (PostgreSQLParser.NULL_P - 91)))) != 0) or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)))) != 0):
                    self.state = 8771
                    self.xmltable_column_option_list()


                pass
            elif token in [PostgreSQLParser.FOR]:
                self.state = 8774
                self.match(PostgreSQLParser.FOR)
                self.state = 8775
                self.match(PostgreSQLParser.ORDINALITY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_column_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xmltable_column_option_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xmltable_column_option_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xmltable_column_option_elContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable_column_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_column_option_list" ):
                listener.enterXmltable_column_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_column_option_list" ):
                listener.exitXmltable_column_option_list(self)




    def xmltable_column_option_list(self):

        localctx = PostgreSQLParser.Xmltable_column_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_xmltable_column_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8779 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 8778
                self.xmltable_column_option_el()
                self.state = 8781 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (PostgreSQLParser.DEFAULT - 91)) | (1 << (PostgreSQLParser.NOT - 91)) | (1 << (PostgreSQLParser.NULL_P - 91)))) != 0) or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_column_option_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable_column_option_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_column_option_el" ):
                listener.enterXmltable_column_option_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_column_option_el" ):
                listener.exitXmltable_column_option_el(self)




    def xmltable_column_option_el(self):

        localctx = PostgreSQLParser.Xmltable_column_option_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_xmltable_column_option_el)
        try:
            self.state = 8791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8783
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 8784
                self.a_expr()
                pass
            elif token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8785
                self.identifier()
                self.state = 8786
                self.a_expr()
                pass
            elif token in [PostgreSQLParser.NOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8788
                self.match(PostgreSQLParser.NOT)
                self.state = 8789
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [PostgreSQLParser.NULL_P]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8790
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_namespace_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xml_namespace_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xml_namespace_elContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_namespace_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_list" ):
                listener.enterXml_namespace_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_list" ):
                listener.exitXml_namespace_list(self)




    def xml_namespace_list(self):

        localctx = PostgreSQLParser.Xml_namespace_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_xml_namespace_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8793
            self.xml_namespace_el()
            self.state = 8798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 8794
                self.match(PostgreSQLParser.COMMA)
                self.state = 8795
                self.xml_namespace_el()
                self.state = 8800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def b_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.B_exprContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_namespace_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_el" ):
                listener.enterXml_namespace_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_el" ):
                listener.exitXml_namespace_el(self)




    def xml_namespace_el(self):

        localctx = PostgreSQLParser.Xml_namespace_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_xml_namespace_el)
        try:
            self.state = 8807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,830,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8801
                self.b_expr(0)
                self.state = 8802
                self.match(PostgreSQLParser.AS)
                self.state = 8803
                self.colLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8805
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 8806
                self.b_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypename(self):
            return self.getTypedRuleContext(PostgreSQLParser.SimpletypenameContext,0)


        def opt_array_bounds(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opt_array_boundsContext,0)


        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def SETOF(self):
            return self.getToken(PostgreSQLParser.SETOF, 0)

        def OPEN_BRACKET(self):
            return self.getToken(PostgreSQLParser.OPEN_BRACKET, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(PostgreSQLParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_typename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypename" ):
                listener.enterTypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypename" ):
                listener.exitTypename(self)




    def typename(self):

        localctx = PostgreSQLParser.TypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_typename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SETOF:
                self.state = 8809
                self.match(PostgreSQLParser.SETOF)


            self.state = 8812
            self.simpletypename()
            self.state = 8821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.state = 8813
                self.opt_array_bounds()
                pass

            elif la_ == 2:
                self.state = 8814
                self.match(PostgreSQLParser.ARRAY)
                self.state = 8819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
                if la_ == 1:
                    self.state = 8815
                    self.match(PostgreSQLParser.OPEN_BRACKET)
                    self.state = 8816
                    self.iconst()
                    self.state = 8817
                    self.match(PostgreSQLParser.CLOSE_BRACKET)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_array_boundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OPEN_BRACKET)
            else:
                return self.getToken(PostgreSQLParser.OPEN_BRACKET, i)

        def CLOSE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CLOSE_BRACKET)
            else:
                return self.getToken(PostgreSQLParser.CLOSE_BRACKET, i)

        def iconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.IconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.IconstContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opt_array_bounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_array_bounds" ):
                listener.enterOpt_array_bounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_array_bounds" ):
                listener.exitOpt_array_bounds(self)




    def opt_array_bounds(self):

        localctx = PostgreSQLParser.Opt_array_boundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_opt_array_bounds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,835,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8823
                    self.match(PostgreSQLParser.OPEN_BRACKET)
                    self.state = 8825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (PostgreSQLParser.Integral - 576)) | (1 << (PostgreSQLParser.BinaryIntegral - 576)) | (1 << (PostgreSQLParser.OctalIntegral - 576)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 576)))) != 0):
                        self.state = 8824
                        self.iconst()


                    self.state = 8827
                    self.match(PostgreSQLParser.CLOSE_BRACKET) 
                self.state = 8832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,835,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generictype(self):
            return self.getTypedRuleContext(PostgreSQLParser.GenerictypeContext,0)


        def numeric(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericContext,0)


        def bit(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitContext,0)


        def character(self):
            return self.getTypedRuleContext(PostgreSQLParser.CharacterContext,0)


        def constdatetime(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstdatetimeContext,0)


        def constinterval(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstintervalContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def interval_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_Context,0)


        def jsonType(self):
            return self.getTypedRuleContext(PostgreSQLParser.JsonTypeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simpletypename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypename" ):
                listener.enterSimpletypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypename" ):
                listener.exitSimpletypename(self)




    def simpletypename(self):

        localctx = PostgreSQLParser.SimpletypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_simpletypename)
        try:
            self.state = 8849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8833
                self.generictype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8834
                self.numeric()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8835
                self.bit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8836
                self.character()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8837
                self.constdatetime()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8838
                self.constinterval()
                self.state = 8846
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,837,self._ctx)
                if la_ == 1:
                    self.state = 8840
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,836,self._ctx)
                    if la_ == 1:
                        self.state = 8839
                        self.interval_()


                    pass

                elif la_ == 2:
                    self.state = 8842
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 8843
                    self.iconst()
                    self.state = 8844
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8848
                self.jsonType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConsttypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericContext,0)


        def constbit(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstbitContext,0)


        def constcharacter(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstcharacterContext,0)


        def constdatetime(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstdatetimeContext,0)


        def jsonType(self):
            return self.getTypedRuleContext(PostgreSQLParser.JsonTypeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_consttypename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConsttypename" ):
                listener.enterConsttypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConsttypename" ):
                listener.exitConsttypename(self)




    def consttypename(self):

        localctx = PostgreSQLParser.ConsttypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_consttypename)
        try:
            self.state = 8856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.DOUBLE_P, PostgreSQLParser.BIGINT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.FLOAT_P, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.NUMERIC, PostgreSQLParser.REAL, PostgreSQLParser.SMALLINT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8851
                self.numeric()
                pass
            elif token in [PostgreSQLParser.BIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8852
                self.constbit()
                pass
            elif token in [PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.VARCHAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8853
                self.constcharacter()
                pass
            elif token in [PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8854
                self.constdatetime()
                pass
            elif token in [PostgreSQLParser.JSON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8855
                self.jsonType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenerictypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_function_nameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PostgreSQLParser.AttrsContext,0)


        def type_modifiers_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_modifiers_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generictype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerictype" ):
                listener.enterGenerictype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerictype" ):
                listener.exitGenerictype(self)




    def generictype(self):

        localctx = PostgreSQLParser.GenerictypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_generictype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8858
            self.type_function_name()
            self.state = 8860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,840,self._ctx)
            if la_ == 1:
                self.state = 8859
                self.attrs()


            self.state = 8863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,841,self._ctx)
            if la_ == 1:
                self.state = 8862
                self.type_modifiers_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_modifiers_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_modifiers_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_modifiers_" ):
                listener.enterType_modifiers_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_modifiers_" ):
                listener.exitType_modifiers_(self)




    def type_modifiers_(self):

        localctx = PostgreSQLParser.Type_modifiers_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_type_modifiers_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8865
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8866
            self.expr_list()
            self.state = 8867
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_P(self):
            return self.getToken(PostgreSQLParser.INT_P, 0)

        def INTEGER(self):
            return self.getToken(PostgreSQLParser.INTEGER, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSQLParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def FLOAT_P(self):
            return self.getToken(PostgreSQLParser.FLOAT_P, 0)

        def float_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Float_Context,0)


        def DOUBLE_P(self):
            return self.getToken(PostgreSQLParser.DOUBLE_P, 0)

        def PRECISION(self):
            return self.getToken(PostgreSQLParser.PRECISION, 0)

        def DECIMAL_P(self):
            return self.getToken(PostgreSQLParser.DECIMAL_P, 0)

        def type_modifiers_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_modifiers_Context,0)


        def DEC(self):
            return self.getToken(PostgreSQLParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSQLParser.NUMERIC, 0)

        def BOOLEAN_P(self):
            return self.getToken(PostgreSQLParser.BOOLEAN_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)




    def numeric(self):

        localctx = PostgreSQLParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_numeric)
        try:
            self.state = 8893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.INT_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8869
                self.match(PostgreSQLParser.INT_P)
                pass
            elif token in [PostgreSQLParser.INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8870
                self.match(PostgreSQLParser.INTEGER)
                pass
            elif token in [PostgreSQLParser.SMALLINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8871
                self.match(PostgreSQLParser.SMALLINT)
                pass
            elif token in [PostgreSQLParser.BIGINT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8872
                self.match(PostgreSQLParser.BIGINT)
                pass
            elif token in [PostgreSQLParser.REAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8873
                self.match(PostgreSQLParser.REAL)
                pass
            elif token in [PostgreSQLParser.FLOAT_P]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8874
                self.match(PostgreSQLParser.FLOAT_P)
                self.state = 8876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,842,self._ctx)
                if la_ == 1:
                    self.state = 8875
                    self.float_()


                pass
            elif token in [PostgreSQLParser.DOUBLE_P]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8878
                self.match(PostgreSQLParser.DOUBLE_P)
                self.state = 8879
                self.match(PostgreSQLParser.PRECISION)
                pass
            elif token in [PostgreSQLParser.DECIMAL_P]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8880
                self.match(PostgreSQLParser.DECIMAL_P)
                self.state = 8882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
                if la_ == 1:
                    self.state = 8881
                    self.type_modifiers_()


                pass
            elif token in [PostgreSQLParser.DEC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8884
                self.match(PostgreSQLParser.DEC)
                self.state = 8886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
                if la_ == 1:
                    self.state = 8885
                    self.type_modifiers_()


                pass
            elif token in [PostgreSQLParser.NUMERIC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8888
                self.match(PostgreSQLParser.NUMERIC)
                self.state = 8890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,845,self._ctx)
                if la_ == 1:
                    self.state = 8889
                    self.type_modifiers_()


                pass
            elif token in [PostgreSQLParser.BOOLEAN_P]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8892
                self.match(PostgreSQLParser.BOOLEAN_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_float_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_" ):
                listener.enterFloat_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_" ):
                listener.exitFloat_(self)




    def float_(self):

        localctx = PostgreSQLParser.Float_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_float_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8895
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8896
            self.iconst()
            self.state = 8897
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwithlength(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitwithlengthContext,0)


        def bitwithoutlength(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitwithoutlengthContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit" ):
                listener.enterBit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit" ):
                listener.exitBit(self)




    def bit(self):

        localctx = PostgreSQLParser.BitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_bit)
        try:
            self.state = 8901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,847,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8899
                self.bitwithlength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8900
                self.bitwithoutlength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstbitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwithlength(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitwithlengthContext,0)


        def bitwithoutlength(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitwithoutlengthContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constbit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstbit" ):
                listener.enterConstbit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstbit" ):
                listener.exitConstbit(self)




    def constbit(self):

        localctx = PostgreSQLParser.ConstbitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_constbit)
        try:
            self.state = 8905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8903
                self.bitwithlength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8904
                self.bitwithoutlength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwithlengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(PostgreSQLParser.BIT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def varying_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Varying_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bitwithlength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwithlength" ):
                listener.enterBitwithlength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwithlength" ):
                listener.exitBitwithlength(self)




    def bitwithlength(self):

        localctx = PostgreSQLParser.BitwithlengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_bitwithlength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8907
            self.match(PostgreSQLParser.BIT)
            self.state = 8909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.VARYING:
                self.state = 8908
                self.varying_()


            self.state = 8911
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8912
            self.expr_list()
            self.state = 8913
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwithoutlengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(PostgreSQLParser.BIT, 0)

        def varying_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Varying_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bitwithoutlength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwithoutlength" ):
                listener.enterBitwithoutlength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwithoutlength" ):
                listener.exitBitwithoutlength(self)




    def bitwithoutlength(self):

        localctx = PostgreSQLParser.BitwithoutlengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_bitwithoutlength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8915
            self.match(PostgreSQLParser.BIT)
            self.state = 8917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 8916
                self.varying_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_c(self):
            return self.getTypedRuleContext(PostgreSQLParser.Character_cContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter" ):
                listener.enterCharacter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter" ):
                listener.exitCharacter(self)




    def character(self):

        localctx = PostgreSQLParser.CharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_character)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8919
            self.character_c()
            self.state = 8924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,851,self._ctx)
            if la_ == 1:
                self.state = 8920
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8921
                self.iconst()
                self.state = 8922
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstcharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_c(self):
            return self.getTypedRuleContext(PostgreSQLParser.Character_cContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constcharacter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstcharacter" ):
                listener.enterConstcharacter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstcharacter" ):
                listener.exitConstcharacter(self)




    def constcharacter(self):

        localctx = PostgreSQLParser.ConstcharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_constcharacter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8926
            self.character_c()
            self.state = 8931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_PAREN:
                self.state = 8927
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8928
                self.iconst()
                self.state = 8929
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_cContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(PostgreSQLParser.CHARACTER, 0)

        def CHAR_P(self):
            return self.getToken(PostgreSQLParser.CHAR_P, 0)

        def NCHAR(self):
            return self.getToken(PostgreSQLParser.NCHAR, 0)

        def varying_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Varying_Context,0)


        def VARCHAR(self):
            return self.getToken(PostgreSQLParser.VARCHAR, 0)

        def NATIONAL(self):
            return self.getToken(PostgreSQLParser.NATIONAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_character_c

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_c" ):
                listener.enterCharacter_c(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_c" ):
                listener.exitCharacter_c(self)




    def character_c(self):

        localctx = PostgreSQLParser.Character_cContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_character_c)
        self._la = 0 # Token type
        try:
            self.state = 8943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.NCHAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8933
                _la = self._input.LA(1)
                if not(((((_la - 422)) & ~0x3f) == 0 and ((1 << (_la - 422)) & ((1 << (PostgreSQLParser.CHAR_P - 422)) | (1 << (PostgreSQLParser.CHARACTER - 422)) | (1 << (PostgreSQLParser.NCHAR - 422)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8935
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
                if la_ == 1:
                    self.state = 8934
                    self.varying_()


                pass
            elif token in [PostgreSQLParser.VARCHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8937
                self.match(PostgreSQLParser.VARCHAR)
                pass
            elif token in [PostgreSQLParser.NATIONAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8938
                self.match(PostgreSQLParser.NATIONAL)
                self.state = 8939
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.CHAR_P or _la==PostgreSQLParser.CHARACTER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,854,self._ctx)
                if la_ == 1:
                    self.state = 8940
                    self.varying_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varying_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(PostgreSQLParser.VARYING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_varying_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarying_" ):
                listener.enterVarying_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarying_" ):
                listener.exitVarying_(self)




    def varying_(self):

        localctx = PostgreSQLParser.Varying_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_varying_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8945
            self.match(PostgreSQLParser.VARYING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstdatetimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def timezone_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Timezone_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constdatetime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstdatetime" ):
                listener.enterConstdatetime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstdatetime" ):
                listener.exitConstdatetime(self)




    def constdatetime(self):

        localctx = PostgreSQLParser.ConstdatetimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_constdatetime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8947
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.TIME or _la==PostgreSQLParser.TIMESTAMP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
            if la_ == 1:
                self.state = 8948
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8949
                self.iconst()
                self.state = 8950
                self.match(PostgreSQLParser.CLOSE_PAREN)


            self.state = 8955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,857,self._ctx)
            if la_ == 1:
                self.state = 8954
                self.timezone_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstintervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(PostgreSQLParser.INTERVAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constinterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstinterval" ):
                listener.enterConstinterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstinterval" ):
                listener.exitConstinterval(self)




    def constinterval(self):

        localctx = PostgreSQLParser.ConstintervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_constinterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8957
            self.match(PostgreSQLParser.INTERVAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timezone_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_timezone_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimezone_" ):
                listener.enterTimezone_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimezone_" ):
                listener.exitTimezone_(self)




    def timezone_(self):

        localctx = PostgreSQLParser.Timezone_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_timezone_)
        try:
            self.state = 8965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8959
                self.match(PostgreSQLParser.WITH)
                self.state = 8960
                self.match(PostgreSQLParser.TIME)
                self.state = 8961
                self.match(PostgreSQLParser.ZONE)
                pass
            elif token in [PostgreSQLParser.WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8962
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 8963
                self.match(PostgreSQLParser.TIME)
                self.state = 8964
                self.match(PostgreSQLParser.ZONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR_P(self):
            return self.getToken(PostgreSQLParser.YEAR_P, 0)

        def MONTH_P(self):
            return self.getToken(PostgreSQLParser.MONTH_P, 0)

        def DAY_P(self):
            return self.getToken(PostgreSQLParser.DAY_P, 0)

        def HOUR_P(self):
            return self.getToken(PostgreSQLParser.HOUR_P, 0)

        def MINUTE_P(self):
            return self.getToken(PostgreSQLParser.MINUTE_P, 0)

        def interval_second(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_secondContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_" ):
                listener.enterInterval_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_" ):
                listener.exitInterval_(self)




    def interval_(self):

        localctx = PostgreSQLParser.Interval_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_interval_)
        try:
            self.state = 8992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,861,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8967
                self.match(PostgreSQLParser.YEAR_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8968
                self.match(PostgreSQLParser.MONTH_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8969
                self.match(PostgreSQLParser.DAY_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8970
                self.match(PostgreSQLParser.HOUR_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8971
                self.match(PostgreSQLParser.MINUTE_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8972
                self.interval_second()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8973
                self.match(PostgreSQLParser.YEAR_P)
                self.state = 8974
                self.match(PostgreSQLParser.TO)
                self.state = 8975
                self.match(PostgreSQLParser.MONTH_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8976
                self.match(PostgreSQLParser.DAY_P)
                self.state = 8977
                self.match(PostgreSQLParser.TO)
                self.state = 8981
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.HOUR_P]:
                    self.state = 8978
                    self.match(PostgreSQLParser.HOUR_P)
                    pass
                elif token in [PostgreSQLParser.MINUTE_P]:
                    self.state = 8979
                    self.match(PostgreSQLParser.MINUTE_P)
                    pass
                elif token in [PostgreSQLParser.SECOND_P]:
                    self.state = 8980
                    self.interval_second()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8983
                self.match(PostgreSQLParser.HOUR_P)
                self.state = 8984
                self.match(PostgreSQLParser.TO)
                self.state = 8987
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.MINUTE_P]:
                    self.state = 8985
                    self.match(PostgreSQLParser.MINUTE_P)
                    pass
                elif token in [PostgreSQLParser.SECOND_P]:
                    self.state = 8986
                    self.interval_second()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8989
                self.match(PostgreSQLParser.MINUTE_P)
                self.state = 8990
                self.match(PostgreSQLParser.TO)
                self.state = 8991
                self.interval_second()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_secondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND_P(self):
            return self.getToken(PostgreSQLParser.SECOND_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_second

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_second" ):
                listener.enterInterval_second(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_second" ):
                listener.exitInterval_second(self)




    def interval_second(self):

        localctx = PostgreSQLParser.Interval_secondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_interval_second)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8994
            self.match(PostgreSQLParser.SECOND_P)
            self.state = 8999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,862,self._ctx)
            if la_ == 1:
                self.state = 8995
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8996
                self.iconst()
                self.state = 8997
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_jsonType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonType" ):
                listener.enterJsonType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonType" ):
                listener.exitJsonType(self)




    def jsonType(self):

        localctx = PostgreSQLParser.JsonTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_jsonType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9001
            self.match(PostgreSQLParser.JSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Escape_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_escape_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscape_" ):
                listener.enterEscape_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscape_" ):
                listener.exitEscape_(self)




    def escape_(self):

        localctx = PostgreSQLParser.Escape_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_escape_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9003
            self.match(PostgreSQLParser.ESCAPE)
            self.state = 9004
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_qual(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_qualContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr" ):
                listener.enterA_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr" ):
                listener.exitA_expr(self)




    def a_expr(self):

        localctx = PostgreSQLParser.A_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_a_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9006
            self.a_expr_qual()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_qualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_lessless(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_lesslessContext,0)


        def qual_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_opContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_qual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_qual" ):
                listener.enterA_expr_qual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_qual" ):
                listener.exitA_expr_qual(self)




    def a_expr_qual(self):

        localctx = PostgreSQLParser.A_expr_qualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_a_expr_qual)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9008
            self.a_expr_lessless()
            self.state = 9012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,863,self._ctx)
            if la_ == 1:
                self.state = 9009
                if not self.OnlyAcceptableOps():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.OnlyAcceptableOps()")
                self.state = 9010
                self.qual_op()
                pass

            elif la_ == 2:
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_lesslessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_orContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_orContext,i)


        def LESS_LESS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LESS_LESS)
            else:
                return self.getToken(PostgreSQLParser.LESS_LESS, i)

        def GREATER_GREATER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.GREATER_GREATER)
            else:
                return self.getToken(PostgreSQLParser.GREATER_GREATER, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_lessless

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_lessless" ):
                listener.enterA_expr_lessless(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_lessless" ):
                listener.exitA_expr_lessless(self)




    def a_expr_lessless(self):

        localctx = PostgreSQLParser.A_expr_lesslessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_a_expr_lessless)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9014
            self.a_expr_or()
            self.state = 9019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,864,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9015
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.LESS_LESS or _la==PostgreSQLParser.GREATER_GREATER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9016
                    self.a_expr_or() 
                self.state = 9021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,864,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_andContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_andContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR)
            else:
                return self.getToken(PostgreSQLParser.OR, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_or" ):
                listener.enterA_expr_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_or" ):
                listener.exitA_expr_or(self)




    def a_expr_or(self):

        localctx = PostgreSQLParser.A_expr_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_a_expr_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9022
            self.a_expr_and()
            self.state = 9027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,865,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9023
                    self.match(PostgreSQLParser.OR)
                    self.state = 9024
                    self.a_expr_and() 
                self.state = 9029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,865,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_between(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_betweenContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_betweenContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND)
            else:
                return self.getToken(PostgreSQLParser.AND, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_and" ):
                listener.enterA_expr_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_and" ):
                listener.exitA_expr_and(self)




    def a_expr_and(self):

        localctx = PostgreSQLParser.A_expr_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_a_expr_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9030
            self.a_expr_between()
            self.state = 9035
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,866,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9031
                    self.match(PostgreSQLParser.AND)
                    self.state = 9032
                    self.a_expr_between() 
                self.state = 9037
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,866,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_betweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_in(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_inContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_inContext,i)


        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_between" ):
                listener.enterA_expr_between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_between" ):
                listener.exitA_expr_between(self)




    def a_expr_between(self):

        localctx = PostgreSQLParser.A_expr_betweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_a_expr_between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9038
            self.a_expr_in()
            self.state = 9050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,869,self._ctx)
            if la_ == 1:
                self.state = 9040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOT:
                    self.state = 9039
                    self.match(PostgreSQLParser.NOT)


                self.state = 9042
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 9044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.SYMMETRIC:
                    self.state = 9043
                    self.match(PostgreSQLParser.SYMMETRIC)


                self.state = 9046
                self.a_expr_in()
                self.state = 9047
                self.match(PostgreSQLParser.AND)
                self.state = 9048
                self.a_expr_in()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_unary_not(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_unary_notContext,0)


        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def in_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.In_exprContext,0)


        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_in" ):
                listener.enterA_expr_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_in" ):
                listener.exitA_expr_in(self)




    def a_expr_in(self):

        localctx = PostgreSQLParser.A_expr_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_a_expr_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9052
            self.a_expr_unary_not()
            self.state = 9058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,871,self._ctx)
            if la_ == 1:
                self.state = 9054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOT:
                    self.state = 9053
                    self.match(PostgreSQLParser.NOT)


                self.state = 9056
                self.match(PostgreSQLParser.IN_P)
                self.state = 9057
                self.in_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_unary_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_isnull(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_isnullContext,0)


        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_unary_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_unary_not" ):
                listener.enterA_expr_unary_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_unary_not" ):
                listener.exitA_expr_unary_not(self)




    def a_expr_unary_not(self):

        localctx = PostgreSQLParser.A_expr_unary_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_a_expr_unary_not)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NOT:
                self.state = 9060
                self.match(PostgreSQLParser.NOT)


            self.state = 9063
            self.a_expr_isnull()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_isnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_is_not(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_is_notContext,0)


        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_isnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_isnull" ):
                listener.enterA_expr_isnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_isnull" ):
                listener.exitA_expr_isnull(self)




    def a_expr_isnull(self):

        localctx = PostgreSQLParser.A_expr_isnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_a_expr_isnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9065
            self.a_expr_is_not()
            self.state = 9067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
            if la_ == 1:
                self.state = 9066
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ISNULL or _la==PostgreSQLParser.NOTNULL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_is_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_compare(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_compareContext,0)


        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def UNKNOWN(self):
            return self.getToken(PostgreSQLParser.UNKNOWN, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def NORMALIZED(self):
            return self.getToken(PostgreSQLParser.NORMALIZED, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def unicode_normal_form(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unicode_normal_formContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_is_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_is_not" ):
                listener.enterA_expr_is_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_is_not" ):
                listener.exitA_expr_is_not(self)




    def a_expr_is_not(self):

        localctx = PostgreSQLParser.A_expr_is_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_a_expr_is_not)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9069
            self.a_expr_compare()
            self.state = 9093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,877,self._ctx)
            if la_ == 1:
                self.state = 9070
                self.match(PostgreSQLParser.IS)
                self.state = 9072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOT:
                    self.state = 9071
                    self.match(PostgreSQLParser.NOT)


                self.state = 9091
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.NULL_P]:
                    self.state = 9074
                    self.match(PostgreSQLParser.NULL_P)
                    pass
                elif token in [PostgreSQLParser.TRUE_P]:
                    self.state = 9075
                    self.match(PostgreSQLParser.TRUE_P)
                    pass
                elif token in [PostgreSQLParser.FALSE_P]:
                    self.state = 9076
                    self.match(PostgreSQLParser.FALSE_P)
                    pass
                elif token in [PostgreSQLParser.UNKNOWN]:
                    self.state = 9077
                    self.match(PostgreSQLParser.UNKNOWN)
                    pass
                elif token in [PostgreSQLParser.DISTINCT]:
                    self.state = 9078
                    self.match(PostgreSQLParser.DISTINCT)
                    self.state = 9079
                    self.match(PostgreSQLParser.FROM)
                    self.state = 9080
                    self.a_expr()
                    pass
                elif token in [PostgreSQLParser.OF]:
                    self.state = 9081
                    self.match(PostgreSQLParser.OF)
                    self.state = 9082
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9083
                    self.type_list()
                    self.state = 9084
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass
                elif token in [PostgreSQLParser.DOCUMENT_P]:
                    self.state = 9086
                    self.match(PostgreSQLParser.DOCUMENT_P)
                    pass
                elif token in [PostgreSQLParser.NORMALIZED, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD]:
                    self.state = 9088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (PostgreSQLParser.NFC - 521)) | (1 << (PostgreSQLParser.NFD - 521)) | (1 << (PostgreSQLParser.NFKC - 521)) | (1 << (PostgreSQLParser.NFKD - 521)))) != 0):
                        self.state = 9087
                        self.unicode_normal_form()


                    self.state = 9090
                    self.match(PostgreSQLParser.NORMALIZED)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_compareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_like(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_likeContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_likeContext,i)


        def subquery_Op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Subquery_OpContext,0)


        def sub_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sub_typeContext,0)


        def LT(self):
            return self.getToken(PostgreSQLParser.LT, 0)

        def GT(self):
            return self.getToken(PostgreSQLParser.GT, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def LESS_EQUALS(self):
            return self.getToken(PostgreSQLParser.LESS_EQUALS, 0)

        def GREATER_EQUALS(self):
            return self.getToken(PostgreSQLParser.GREATER_EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(PostgreSQLParser.NOT_EQUALS, 0)

        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_compare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_compare" ):
                listener.enterA_expr_compare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_compare" ):
                listener.exitA_expr_compare(self)




    def a_expr_compare(self):

        localctx = PostgreSQLParser.A_expr_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_a_expr_compare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9095
            self.a_expr_like()
            self.state = 9107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,879,self._ctx)
            if la_ == 1:
                self.state = 9096
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.EQUAL) | (1 << PostgreSQLParser.LT) | (1 << PostgreSQLParser.GT) | (1 << PostgreSQLParser.LESS_EQUALS) | (1 << PostgreSQLParser.GREATER_EQUALS) | (1 << PostgreSQLParser.NOT_EQUALS))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9097
                self.a_expr_like()

            elif la_ == 2:
                self.state = 9098
                self.subquery_Op()
                self.state = 9099
                self.sub_type()
                self.state = 9105
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
                if la_ == 1:
                    self.state = 9100
                    self.select_with_parens()
                    pass

                elif la_ == 2:
                    self.state = 9101
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9102
                    self.a_expr()
                    self.state = 9103
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_likeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_qual_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_qual_opContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_qual_opContext,i)


        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(PostgreSQLParser.ILIKE, 0)

        def SIMILAR(self):
            return self.getToken(PostgreSQLParser.SIMILAR, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def escape_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Escape_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_like

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_like" ):
                listener.enterA_expr_like(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_like" ):
                listener.exitA_expr_like(self)




    def a_expr_like(self):

        localctx = PostgreSQLParser.A_expr_likeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_a_expr_like)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9109
            self.a_expr_qual_op()
            self.state = 9123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,883,self._ctx)
            if la_ == 1:
                self.state = 9111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOT:
                    self.state = 9110
                    self.match(PostgreSQLParser.NOT)


                self.state = 9117
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.LIKE]:
                    self.state = 9113
                    self.match(PostgreSQLParser.LIKE)
                    pass
                elif token in [PostgreSQLParser.ILIKE]:
                    self.state = 9114
                    self.match(PostgreSQLParser.ILIKE)
                    pass
                elif token in [PostgreSQLParser.SIMILAR]:
                    self.state = 9115
                    self.match(PostgreSQLParser.SIMILAR)
                    self.state = 9116
                    self.match(PostgreSQLParser.TO)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9119
                self.a_expr_qual_op()
                self.state = 9121
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,882,self._ctx)
                if la_ == 1:
                    self.state = 9120
                    self.escape_()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_qual_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_unary_qualop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_unary_qualopContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_unary_qualopContext,i)


        def qual_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qual_opContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qual_opContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_qual_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_qual_op" ):
                listener.enterA_expr_qual_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_qual_op" ):
                listener.exitA_expr_qual_op(self)




    def a_expr_qual_op(self):

        localctx = PostgreSQLParser.A_expr_qual_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_a_expr_qual_op)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9125
            self.a_expr_unary_qualop()
            self.state = 9131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,884,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9126
                    self.qual_op()
                    self.state = 9127
                    self.a_expr_unary_qualop() 
                self.state = 9133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,884,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_unary_qualopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_add(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_addContext,0)


        def qual_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_opContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_unary_qualop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_unary_qualop" ):
                listener.enterA_expr_unary_qualop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_unary_qualop" ):
                listener.exitA_expr_unary_qualop(self)




    def a_expr_unary_qualop(self):

        localctx = PostgreSQLParser.A_expr_unary_qualopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_a_expr_unary_qualop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,885,self._ctx)
            if la_ == 1:
                self.state = 9134
                self.qual_op()


            self.state = 9137
            self.a_expr_add()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_mul(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_mulContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_mulContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_add" ):
                listener.enterA_expr_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_add" ):
                listener.exitA_expr_add(self)




    def a_expr_add(self):

        localctx = PostgreSQLParser.A_expr_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_a_expr_add)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9139
            self.a_expr_mul()
            self.state = 9144
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,886,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9140
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9141
                    self.a_expr_mul() 
                self.state = 9146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,886,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_mulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_caret(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_caretContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_caretContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.STAR)
            else:
                return self.getToken(PostgreSQLParser.STAR, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SLASH)
            else:
                return self.getToken(PostgreSQLParser.SLASH, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PERCENT)
            else:
                return self.getToken(PostgreSQLParser.PERCENT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_mul

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_mul" ):
                listener.enterA_expr_mul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_mul" ):
                listener.exitA_expr_mul(self)




    def a_expr_mul(self):

        localctx = PostgreSQLParser.A_expr_mulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_a_expr_mul)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9147
            self.a_expr_caret()
            self.state = 9152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,887,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9148
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.SLASH) | (1 << PostgreSQLParser.PERCENT))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9149
                    self.a_expr_caret() 
                self.state = 9154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,887,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_caretContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_unary_sign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_unary_signContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_unary_signContext,i)


        def CARET(self):
            return self.getToken(PostgreSQLParser.CARET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_caret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_caret" ):
                listener.enterA_expr_caret(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_caret" ):
                listener.exitA_expr_caret(self)




    def a_expr_caret(self):

        localctx = PostgreSQLParser.A_expr_caretContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_a_expr_caret)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9155
            self.a_expr_unary_sign()
            self.state = 9158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
            if la_ == 1:
                self.state = 9156
                self.match(PostgreSQLParser.CARET)
                self.state = 9157
                self.a_expr_unary_sign()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_unary_signContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_at_time_zone(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_at_time_zoneContext,0)


        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_unary_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_unary_sign" ):
                listener.enterA_expr_unary_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_unary_sign" ):
                listener.exitA_expr_unary_sign(self)




    def a_expr_unary_sign(self):

        localctx = PostgreSQLParser.A_expr_unary_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_a_expr_unary_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS:
                self.state = 9160
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 9163
            self.a_expr_at_time_zone()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_at_time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_collate(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_collateContext,0)


        def AT(self):
            return self.getToken(PostgreSQLParser.AT, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_at_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_at_time_zone" ):
                listener.enterA_expr_at_time_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_at_time_zone" ):
                listener.exitA_expr_at_time_zone(self)




    def a_expr_at_time_zone(self):

        localctx = PostgreSQLParser.A_expr_at_time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_a_expr_at_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9165
            self.a_expr_collate()
            self.state = 9170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,890,self._ctx)
            if la_ == 1:
                self.state = 9166
                self.match(PostgreSQLParser.AT)
                self.state = 9167
                self.match(PostgreSQLParser.TIME)
                self.state = 9168
                self.match(PostgreSQLParser.ZONE)
                self.state = 9169
                self.a_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_collateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_typecast(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_typecastContext,0)


        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_collate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_collate" ):
                listener.enterA_expr_collate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_collate" ):
                listener.exitA_expr_collate(self)




    def a_expr_collate(self):

        localctx = PostgreSQLParser.A_expr_collateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_a_expr_collate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9172
            self.a_expr_typecast()
            self.state = 9175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
            if la_ == 1:
                self.state = 9173
                self.match(PostgreSQLParser.COLLATE)
                self.state = 9174
                self.any_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_typecastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def TYPECAST(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TYPECAST)
            else:
                return self.getToken(PostgreSQLParser.TYPECAST, i)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_typecast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_typecast" ):
                listener.enterA_expr_typecast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_typecast" ):
                listener.exitA_expr_typecast(self)




    def a_expr_typecast(self):

        localctx = PostgreSQLParser.A_expr_typecastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_a_expr_typecast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9177
            self.c_expr()
            self.state = 9182
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,892,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9178
                    self.match(PostgreSQLParser.TYPECAST)
                    self.state = 9179
                    self.typename() 
                self.state = 9184
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,892,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class B_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def b_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.B_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.B_exprContext,i)


        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def qual_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_opContext,0)


        def CARET(self):
            return self.getToken(PostgreSQLParser.CARET, 0)

        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PostgreSQLParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(PostgreSQLParser.PERCENT, 0)

        def LT(self):
            return self.getToken(PostgreSQLParser.LT, 0)

        def GT(self):
            return self.getToken(PostgreSQLParser.GT, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def LESS_EQUALS(self):
            return self.getToken(PostgreSQLParser.LESS_EQUALS, 0)

        def GREATER_EQUALS(self):
            return self.getToken(PostgreSQLParser.GREATER_EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(PostgreSQLParser.NOT_EQUALS, 0)

        def TYPECAST(self):
            return self.getToken(PostgreSQLParser.TYPECAST, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_b_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterB_expr" ):
                listener.enterB_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitB_expr" ):
                listener.exitB_expr(self)



    def b_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSQLParser.B_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1204
        self.enterRecursionRule(localctx, 1204, self.RULE_b_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,893,self._ctx)
            if la_ == 1:
                self.state = 9186
                self.c_expr()
                pass

            elif la_ == 2:
                self.state = 9187
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9188
                self.b_expr(9)
                pass

            elif la_ == 3:
                self.state = 9189
                self.qual_op()
                self.state = 9190
                self.b_expr(3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 9233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,897,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 9231
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,896,self._ctx)
                    if la_ == 1:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9194
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 9195
                        self.match(PostgreSQLParser.CARET)
                        self.state = 9196
                        self.b_expr(9)
                        pass

                    elif la_ == 2:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9197
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 9198
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.SLASH) | (1 << PostgreSQLParser.PERCENT))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 9199
                        self.b_expr(8)
                        pass

                    elif la_ == 3:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9200
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 9201
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 9202
                        self.b_expr(7)
                        pass

                    elif la_ == 4:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9203
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 9204
                        self.qual_op()
                        self.state = 9205
                        self.b_expr(6)
                        pass

                    elif la_ == 5:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9207
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 9208
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.EQUAL) | (1 << PostgreSQLParser.LT) | (1 << PostgreSQLParser.GT) | (1 << PostgreSQLParser.LESS_EQUALS) | (1 << PostgreSQLParser.GREATER_EQUALS) | (1 << PostgreSQLParser.NOT_EQUALS))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 9209
                        self.b_expr(5)
                        pass

                    elif la_ == 6:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9210
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 9211
                        self.match(PostgreSQLParser.TYPECAST)
                        self.state = 9212
                        self.typename()
                        pass

                    elif la_ == 7:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9213
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 9214
                        self.qual_op()
                        pass

                    elif la_ == 8:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9215
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 9216
                        self.match(PostgreSQLParser.IS)
                        self.state = 9218
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PostgreSQLParser.NOT:
                            self.state = 9217
                            self.match(PostgreSQLParser.NOT)


                        self.state = 9229
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PostgreSQLParser.DISTINCT]:
                            self.state = 9220
                            self.match(PostgreSQLParser.DISTINCT)
                            self.state = 9221
                            self.match(PostgreSQLParser.FROM)
                            self.state = 9222
                            self.b_expr(0)
                            pass
                        elif token in [PostgreSQLParser.OF]:
                            self.state = 9223
                            self.match(PostgreSQLParser.OF)
                            self.state = 9224
                            self.match(PostgreSQLParser.OPEN_PAREN)
                            self.state = 9225
                            self.type_list()
                            self.state = 9226
                            self.match(PostgreSQLParser.CLOSE_PAREN)
                            pass
                        elif token in [PostgreSQLParser.DOCUMENT_P]:
                            self.state = 9228
                            self.match(PostgreSQLParser.DOCUMENT_P)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 9235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,897,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class C_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_c_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class C_expr_existsContext(C_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.C_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)
        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_expr_exists" ):
                listener.enterC_expr_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_expr_exists" ):
                listener.exitC_expr_exists(self)


    class C_expr_caseContext(C_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.C_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_expr_case" ):
                listener.enterC_expr_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_expr_case" ):
                listener.exitC_expr_case(self)


    class C_expr_exprContext(C_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.C_exprContext
            super().__init__(parser)
            self.a_expr_in_parens = None # A_exprContext
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)
        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)

        def array_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_exprContext,0)

        def PARAM(self):
            return self.getToken(PostgreSQLParser.PARAM, 0)
        def opt_indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opt_indirectionContext,0)

        def GROUPING(self):
            return self.getToken(PostgreSQLParser.GROUPING, 0)
        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)
        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)
        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)
        def columnref(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnrefContext,0)

        def aexprconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.AexprconstContext,0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)

        def func_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_exprContext,0)

        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)

        def explicit_row(self):
            return self.getTypedRuleContext(PostgreSQLParser.Explicit_rowContext,0)

        def implicit_row(self):
            return self.getTypedRuleContext(PostgreSQLParser.Implicit_rowContext,0)

        def row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.RowContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.RowContext,i)

        def OVERLAPS(self):
            return self.getToken(PostgreSQLParser.OVERLAPS, 0)
        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_expr_expr" ):
                listener.enterC_expr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_expr_expr" ):
                listener.exitC_expr_expr(self)



    def c_expr(self):

        localctx = PostgreSQLParser.C_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_c_expr)
        try:
            self.state = 9272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,900,self._ctx)
            if la_ == 1:
                localctx = PostgreSQLParser.C_expr_existsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 9236
                self.match(PostgreSQLParser.EXISTS)
                self.state = 9237
                self.select_with_parens()
                pass

            elif la_ == 2:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 9238
                self.match(PostgreSQLParser.ARRAY)
                self.state = 9241
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.OPEN_PAREN]:
                    self.state = 9239
                    self.select_with_parens()
                    pass
                elif token in [PostgreSQLParser.OPEN_BRACKET]:
                    self.state = 9240
                    self.array_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 9243
                self.match(PostgreSQLParser.PARAM)
                self.state = 9244
                self.opt_indirection()
                pass

            elif la_ == 4:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 9245
                self.match(PostgreSQLParser.GROUPING)
                self.state = 9246
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9247
                self.expr_list()
                self.state = 9248
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 5:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 9250
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 9251
                self.select_with_parens()
                pass

            elif la_ == 6:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 9252
                self.columnref()
                pass

            elif la_ == 7:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 9253
                self.aexprconst()
                pass

            elif la_ == 8:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 9254
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9255
                localctx.a_expr_in_parens = self.a_expr()
                self.state = 9256
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 9257
                self.opt_indirection()
                pass

            elif la_ == 9:
                localctx = PostgreSQLParser.C_expr_caseContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 9259
                self.case_expr()
                pass

            elif la_ == 10:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 9260
                self.func_expr()
                pass

            elif la_ == 11:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 9261
                self.select_with_parens()
                self.state = 9263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
                if la_ == 1:
                    self.state = 9262
                    self.indirection()


                pass

            elif la_ == 12:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 9265
                self.explicit_row()
                pass

            elif la_ == 13:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 9266
                self.implicit_row()
                pass

            elif la_ == 14:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 9267
                self.row()
                self.state = 9268
                self.match(PostgreSQLParser.OVERLAPS)
                self.state = 9269
                self.row()
                pass

            elif la_ == 15:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 9271
                self.match(PostgreSQLParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlsqlvariablenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLSQLVARIABLENAME(self):
            return self.getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_plsqlvariablename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlsqlvariablename" ):
                listener.enterPlsqlvariablename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlsqlvariablename" ):
                listener.exitPlsqlvariablename(self)




    def plsqlvariablename(self):

        localctx = PostgreSQLParser.PlsqlvariablenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_plsqlvariablename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9274
            self.match(PostgreSQLParser.PLSQLVARIABLENAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_applicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def func_arg_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_arg_listContext,0)


        def VARIADIC(self):
            return self.getToken(PostgreSQLParser.VARIADIC, 0)

        def func_arg_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_arg_exprContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def sort_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_application

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_application" ):
                listener.enterFunc_application(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_application" ):
                listener.exitFunc_application(self)




    def func_application(self):

        localctx = PostgreSQLParser.Func_applicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_func_application)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9276
            self.func_name()
            self.state = 9277
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.PARAM, PostgreSQLParser.Operator, PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ARRAY, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.FALSE_P, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.SESSION_USER, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.BinaryStringConstant, PostgreSQLParser.HexadecimalStringConstant, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.state = 9278
                self.func_arg_list()
                self.state = 9282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 9279
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9280
                    self.match(PostgreSQLParser.VARIADIC)
                    self.state = 9281
                    self.func_arg_expr()


                self.state = 9285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ORDER:
                    self.state = 9284
                    self.sort_clause_()


                pass
            elif token in [PostgreSQLParser.VARIADIC]:
                self.state = 9287
                self.match(PostgreSQLParser.VARIADIC)
                self.state = 9288
                self.func_arg_expr()
                self.state = 9290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ORDER:
                    self.state = 9289
                    self.sort_clause_()


                pass
            elif token in [PostgreSQLParser.ALL, PostgreSQLParser.DISTINCT]:
                self.state = 9292
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9293
                self.func_arg_list()
                self.state = 9295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ORDER:
                    self.state = 9294
                    self.sort_clause_()


                pass
            elif token in [PostgreSQLParser.STAR]:
                self.state = 9297
                self.match(PostgreSQLParser.STAR)
                pass
            elif token in [PostgreSQLParser.CLOSE_PAREN]:
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9301
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_application(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_applicationContext,0)


        def within_group_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Within_group_clauseContext,0)


        def filter_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Over_clauseContext,0)


        def func_expr_common_subexpr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_common_subexprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_expr" ):
                listener.enterFunc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_expr" ):
                listener.exitFunc_expr(self)




    def func_expr(self):

        localctx = PostgreSQLParser.Func_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_func_expr)
        try:
            self.state = 9314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,909,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9303
                self.func_application()
                self.state = 9305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,906,self._ctx)
                if la_ == 1:
                    self.state = 9304
                    self.within_group_clause()


                self.state = 9308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,907,self._ctx)
                if la_ == 1:
                    self.state = 9307
                    self.filter_clause()


                self.state = 9311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,908,self._ctx)
                if la_ == 1:
                    self.state = 9310
                    self.over_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9313
                self.func_expr_common_subexpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_expr_windowlessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_application(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_applicationContext,0)


        def func_expr_common_subexpr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_common_subexprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_expr_windowless

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_expr_windowless" ):
                listener.enterFunc_expr_windowless(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_expr_windowless" ):
                listener.exitFunc_expr_windowless(self)




    def func_expr_windowless(self):

        localctx = PostgreSQLParser.Func_expr_windowlessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_func_expr_windowless)
        try:
            self.state = 9318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,910,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9316
                self.func_application()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9317
                self.func_expr_common_subexpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_expr_common_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def CURRENT_DATE(self):
            return self.getToken(PostgreSQLParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIME, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(PostgreSQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PostgreSQLParser.CURRENT_ROLE, 0)

        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def SYSTEM_USER(self):
            return self.getToken(PostgreSQLParser.SYSTEM_USER, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(PostgreSQLParser.CURRENT_CATALOG, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def extract_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Extract_listContext,0)


        def NORMALIZE(self):
            return self.getToken(PostgreSQLParser.NORMALIZE, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def unicode_normal_form(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unicode_normal_formContext,0)


        def OVERLAY(self):
            return self.getToken(PostgreSQLParser.OVERLAY, 0)

        def overlay_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Overlay_listContext,0)


        def func_arg_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_arg_listContext,0)


        def POSITION(self):
            return self.getToken(PostgreSQLParser.POSITION, 0)

        def position_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Position_listContext,0)


        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def substr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Substr_listContext,0)


        def TREAT(self):
            return self.getToken(PostgreSQLParser.TREAT, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def trim_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Trim_listContext,0)


        def BOTH(self):
            return self.getToken(PostgreSQLParser.BOTH, 0)

        def LEADING(self):
            return self.getToken(PostgreSQLParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(PostgreSQLParser.TRAILING, 0)

        def NULLIF(self):
            return self.getToken(PostgreSQLParser.NULLIF, 0)

        def COALESCE(self):
            return self.getToken(PostgreSQLParser.COALESCE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def GREATEST(self):
            return self.getToken(PostgreSQLParser.GREATEST, 0)

        def LEAST(self):
            return self.getToken(PostgreSQLParser.LEAST, 0)

        def XMLCONCAT(self):
            return self.getToken(PostgreSQLParser.XMLCONCAT, 0)

        def XMLELEMENT(self):
            return self.getToken(PostgreSQLParser.XMLELEMENT, 0)

        def NAME_P(self):
            return self.getToken(PostgreSQLParser.NAME_P, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def xml_attributes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_attributesContext,0)


        def XMLEXISTS(self):
            return self.getToken(PostgreSQLParser.XMLEXISTS, 0)

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def xmlexists_argument(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xmlexists_argumentContext,0)


        def XMLFOREST(self):
            return self.getToken(PostgreSQLParser.XMLFOREST, 0)

        def xml_attribute_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_attribute_listContext,0)


        def XMLPARSE(self):
            return self.getToken(PostgreSQLParser.XMLPARSE, 0)

        def document_or_content(self):
            return self.getTypedRuleContext(PostgreSQLParser.Document_or_contentContext,0)


        def xml_whitespace_option(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_whitespace_optionContext,0)


        def XMLPI(self):
            return self.getToken(PostgreSQLParser.XMLPI, 0)

        def XMLROOT(self):
            return self.getToken(PostgreSQLParser.XMLROOT, 0)

        def XML_P(self):
            return self.getToken(PostgreSQLParser.XML_P, 0)

        def xml_root_version(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_root_versionContext,0)


        def xml_root_standalone_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_root_standalone_Context,0)


        def XMLSERIALIZE(self):
            return self.getToken(PostgreSQLParser.XMLSERIALIZE, 0)

        def simpletypename(self):
            return self.getTypedRuleContext(PostgreSQLParser.SimpletypenameContext,0)


        def JSON_OBJECT(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECT, 0)

        def json_name_and_value_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_name_and_value_listContext,0)


        def json_object_constructor_null_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_object_constructor_null_clauseContext,0)


        def json_key_uniqueness_constraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_key_uniqueness_constraintContext,0)


        def json_returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_returning_clauseContext,0)


        def JSON_ARRAY(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAY, 0)

        def json_value_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_expr_listContext,0)


        def select_no_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_no_parensContext,0)


        def json_array_constructor_null_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_array_constructor_null_clauseContext,0)


        def json_format_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_format_clauseContext,0)


        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def JSON_SCALAR(self):
            return self.getToken(PostgreSQLParser.JSON_SCALAR, 0)

        def JSON_SERIALIZE(self):
            return self.getToken(PostgreSQLParser.JSON_SERIALIZE, 0)

        def MERGE_ACTION(self):
            return self.getToken(PostgreSQLParser.MERGE_ACTION, 0)

        def JSON_QUERY(self):
            return self.getToken(PostgreSQLParser.JSON_QUERY, 0)

        def json_wrapper_behavior(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_wrapper_behaviorContext,0)


        def json_passing_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_passing_clauseContext,0)


        def json_quotes_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_quotes_clauseContext,0)


        def json_behavior_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_behavior_clauseContext,0)


        def JSON_EXISTS(self):
            return self.getToken(PostgreSQLParser.JSON_EXISTS, 0)

        def json_on_error_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_on_error_clauseContext,0)


        def JSON_VALUE(self):
            return self.getToken(PostgreSQLParser.JSON_VALUE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_expr_common_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_expr_common_subexpr" ):
                listener.enterFunc_expr_common_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_expr_common_subexpr" ):
                listener.exitFunc_expr_common_subexpr(self)




    def func_expr_common_subexpr(self):

        localctx = PostgreSQLParser.Func_expr_common_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_func_expr_common_subexpr)
        self._la = 0 # Token type
        try:
            self.state = 9626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.COLLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9320
                self.match(PostgreSQLParser.COLLATION)
                self.state = 9321
                self.match(PostgreSQLParser.FOR)
                self.state = 9322
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9323
                self.a_expr()
                self.state = 9324
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.CURRENT_DATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9326
                self.match(PostgreSQLParser.CURRENT_DATE)
                pass
            elif token in [PostgreSQLParser.CURRENT_TIME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9327
                self.match(PostgreSQLParser.CURRENT_TIME)
                self.state = 9332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,911,self._ctx)
                if la_ == 1:
                    self.state = 9328
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9329
                    self.iconst()
                    self.state = 9330
                    self.match(PostgreSQLParser.CLOSE_PAREN)


                pass
            elif token in [PostgreSQLParser.CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9334
                self.match(PostgreSQLParser.CURRENT_TIMESTAMP)
                self.state = 9339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
                if la_ == 1:
                    self.state = 9335
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9336
                    self.iconst()
                    self.state = 9337
                    self.match(PostgreSQLParser.CLOSE_PAREN)


                pass
            elif token in [PostgreSQLParser.LOCALTIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9341
                self.match(PostgreSQLParser.LOCALTIME)
                self.state = 9346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,913,self._ctx)
                if la_ == 1:
                    self.state = 9342
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9343
                    self.iconst()
                    self.state = 9344
                    self.match(PostgreSQLParser.CLOSE_PAREN)


                pass
            elif token in [PostgreSQLParser.LOCALTIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9348
                self.match(PostgreSQLParser.LOCALTIMESTAMP)
                self.state = 9353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,914,self._ctx)
                if la_ == 1:
                    self.state = 9349
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9350
                    self.iconst()
                    self.state = 9351
                    self.match(PostgreSQLParser.CLOSE_PAREN)


                pass
            elif token in [PostgreSQLParser.CURRENT_ROLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9355
                self.match(PostgreSQLParser.CURRENT_ROLE)
                pass
            elif token in [PostgreSQLParser.CURRENT_USER]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9356
                self.match(PostgreSQLParser.CURRENT_USER)
                pass
            elif token in [PostgreSQLParser.SESSION_USER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 9357
                self.match(PostgreSQLParser.SESSION_USER)
                pass
            elif token in [PostgreSQLParser.SYSTEM_USER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 9358
                self.match(PostgreSQLParser.SYSTEM_USER)
                pass
            elif token in [PostgreSQLParser.USER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 9359
                self.match(PostgreSQLParser.USER)
                pass
            elif token in [PostgreSQLParser.CURRENT_CATALOG]:
                self.enterOuterAlt(localctx, 12)
                self.state = 9360
                self.match(PostgreSQLParser.CURRENT_CATALOG)
                pass
            elif token in [PostgreSQLParser.CURRENT_SCHEMA]:
                self.enterOuterAlt(localctx, 13)
                self.state = 9361
                self.match(PostgreSQLParser.CURRENT_SCHEMA)
                pass
            elif token in [PostgreSQLParser.CAST]:
                self.enterOuterAlt(localctx, 14)
                self.state = 9362
                self.match(PostgreSQLParser.CAST)
                self.state = 9363
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9364
                self.a_expr()
                self.state = 9365
                self.match(PostgreSQLParser.AS)
                self.state = 9366
                self.typename()
                self.state = 9367
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.EXTRACT]:
                self.enterOuterAlt(localctx, 15)
                self.state = 9369
                self.match(PostgreSQLParser.EXTRACT)
                self.state = 9370
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.DAY_P or _la==PostgreSQLParser.HOUR_P or _la==PostgreSQLParser.MINUTE_P or _la==PostgreSQLParser.MONTH_P or _la==PostgreSQLParser.SECOND_P or _la==PostgreSQLParser.YEAR_P or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & ((1 << (PostgreSQLParser.Identifier - 554)) | (1 << (PostgreSQLParser.QuotedIdentifier - 554)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 554)) | (1 << (PostgreSQLParser.StringConstant - 554)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 554)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 554)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 554)) | (1 << (PostgreSQLParser.EscapeStringConstant - 554)))) != 0):
                    self.state = 9371
                    self.extract_list()


                self.state = 9374
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.NORMALIZE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 9375
                self.match(PostgreSQLParser.NORMALIZE)
                self.state = 9376
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9377
                self.a_expr()
                self.state = 9380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 9378
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9379
                    self.unicode_normal_form()


                self.state = 9382
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.OVERLAY]:
                self.enterOuterAlt(localctx, 17)
                self.state = 9384
                self.match(PostgreSQLParser.OVERLAY)
                self.state = 9385
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,918,self._ctx)
                if la_ == 1:
                    self.state = 9386
                    self.overlay_list()
                    pass

                elif la_ == 2:
                    self.state = 9388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                        self.state = 9387
                        self.func_arg_list()


                    pass


                self.state = 9392
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.POSITION]:
                self.enterOuterAlt(localctx, 18)
                self.state = 9393
                self.match(PostgreSQLParser.POSITION)
                self.state = 9394
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                    self.state = 9395
                    self.position_list()


                self.state = 9398
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 19)
                self.state = 9399
                self.match(PostgreSQLParser.SUBSTRING)
                self.state = 9400
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
                if la_ == 1:
                    self.state = 9401
                    self.substr_list()
                    pass

                elif la_ == 2:
                    self.state = 9403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                        self.state = 9402
                        self.func_arg_list()


                    pass


                self.state = 9407
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.TREAT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 9408
                self.match(PostgreSQLParser.TREAT)
                self.state = 9409
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9410
                self.a_expr()
                self.state = 9411
                self.match(PostgreSQLParser.AS)
                self.state = 9412
                self.typename()
                self.state = 9413
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.TRIM]:
                self.enterOuterAlt(localctx, 21)
                self.state = 9415
                self.match(PostgreSQLParser.TRIM)
                self.state = 9416
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PostgreSQLParser.BOTH - 77)) | (1 << (PostgreSQLParser.LEADING - 77)) | (1 << (PostgreSQLParser.TRAILING - 77)))) != 0):
                    self.state = 9417
                    _la = self._input.LA(1)
                    if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PostgreSQLParser.BOTH - 77)) | (1 << (PostgreSQLParser.LEADING - 77)) | (1 << (PostgreSQLParser.TRAILING - 77)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 9420
                self.trim_list()
                self.state = 9421
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.NULLIF]:
                self.enterOuterAlt(localctx, 22)
                self.state = 9423
                self.match(PostgreSQLParser.NULLIF)
                self.state = 9424
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9425
                self.a_expr()
                self.state = 9426
                self.match(PostgreSQLParser.COMMA)
                self.state = 9427
                self.a_expr()
                self.state = 9428
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.COALESCE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 9430
                self.match(PostgreSQLParser.COALESCE)
                self.state = 9431
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9432
                self.expr_list()
                self.state = 9433
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.GREATEST]:
                self.enterOuterAlt(localctx, 24)
                self.state = 9435
                self.match(PostgreSQLParser.GREATEST)
                self.state = 9436
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9437
                self.expr_list()
                self.state = 9438
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.LEAST]:
                self.enterOuterAlt(localctx, 25)
                self.state = 9440
                self.match(PostgreSQLParser.LEAST)
                self.state = 9441
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9442
                self.expr_list()
                self.state = 9443
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.XMLCONCAT]:
                self.enterOuterAlt(localctx, 26)
                self.state = 9445
                self.match(PostgreSQLParser.XMLCONCAT)
                self.state = 9446
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9447
                self.expr_list()
                self.state = 9448
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.XMLELEMENT]:
                self.enterOuterAlt(localctx, 27)
                self.state = 9450
                self.match(PostgreSQLParser.XMLELEMENT)
                self.state = 9451
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9452
                self.match(PostgreSQLParser.NAME_P)
                self.state = 9453
                self.colLabel()
                self.state = 9459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 9454
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                    if la_ == 1:
                        self.state = 9455
                        self.xml_attributes()
                        pass

                    elif la_ == 2:
                        self.state = 9456
                        self.expr_list()
                        pass




                self.state = 9461
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.XMLEXISTS]:
                self.enterOuterAlt(localctx, 28)
                self.state = 9463
                self.match(PostgreSQLParser.XMLEXISTS)
                self.state = 9464
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9465
                self.c_expr()
                self.state = 9466
                self.xmlexists_argument()
                self.state = 9467
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.XMLFOREST]:
                self.enterOuterAlt(localctx, 29)
                self.state = 9469
                self.match(PostgreSQLParser.XMLFOREST)
                self.state = 9470
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9471
                self.xml_attribute_list()
                self.state = 9472
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.XMLPARSE]:
                self.enterOuterAlt(localctx, 30)
                self.state = 9474
                self.match(PostgreSQLParser.XMLPARSE)
                self.state = 9475
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9476
                self.document_or_content()
                self.state = 9477
                self.a_expr()
                self.state = 9479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PRESERVE or _la==PostgreSQLParser.STRIP_P:
                    self.state = 9478
                    self.xml_whitespace_option()


                self.state = 9481
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.XMLPI]:
                self.enterOuterAlt(localctx, 31)
                self.state = 9483
                self.match(PostgreSQLParser.XMLPI)
                self.state = 9484
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9485
                self.match(PostgreSQLParser.NAME_P)
                self.state = 9486
                self.colLabel()
                self.state = 9489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 9487
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9488
                    self.a_expr()


                self.state = 9491
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.XMLROOT]:
                self.enterOuterAlt(localctx, 32)
                self.state = 9493
                self.match(PostgreSQLParser.XMLROOT)
                self.state = 9494
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9495
                self.match(PostgreSQLParser.XML_P)
                self.state = 9496
                self.a_expr()
                self.state = 9497
                self.match(PostgreSQLParser.COMMA)
                self.state = 9498
                self.xml_root_version()
                self.state = 9500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 9499
                    self.xml_root_standalone_()


                self.state = 9502
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.XMLSERIALIZE]:
                self.enterOuterAlt(localctx, 33)
                self.state = 9504
                self.match(PostgreSQLParser.XMLSERIALIZE)
                self.state = 9505
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9506
                self.document_or_content()
                self.state = 9507
                self.a_expr()
                self.state = 9508
                self.match(PostgreSQLParser.AS)
                self.state = 9509
                self.simpletypename()
                self.state = 9510
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON_OBJECT]:
                self.enterOuterAlt(localctx, 34)
                self.state = 9512
                self.match(PostgreSQLParser.JSON_OBJECT)
                self.state = 9513
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
                if la_ == 1:
                    self.state = 9514
                    self.func_arg_list()
                    pass

                elif la_ == 2:
                    self.state = 9515
                    self.json_name_and_value_list(0)
                    self.state = 9517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.ABSENT or _la==PostgreSQLParser.NULL_P:
                        self.state = 9516
                        self.json_object_constructor_null_clause()


                    self.state = 9520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.WITH or _la==PostgreSQLParser.WITHOUT:
                        self.state = 9519
                        self.json_key_uniqueness_constraint()


                    self.state = 9523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.RETURNING:
                        self.state = 9522
                        self.json_returning_clause()


                    pass

                elif la_ == 3:
                    self.state = 9526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.RETURNING:
                        self.state = 9525
                        self.json_returning_clause()


                    pass


                self.state = 9530
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON_ARRAY]:
                self.enterOuterAlt(localctx, 35)
                self.state = 9531
                self.match(PostgreSQLParser.JSON_ARRAY)
                self.state = 9532
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 9533
                    self.json_value_expr_list(0)
                    self.state = 9535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.ABSENT or _la==PostgreSQLParser.NULL_P:
                        self.state = 9534
                        self.json_array_constructor_null_clause()


                    self.state = 9538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.RETURNING:
                        self.state = 9537
                        self.json_returning_clause()


                    pass

                elif la_ == 2:
                    self.state = 9540
                    self.select_no_parens()
                    self.state = 9542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.FORMAT_LA:
                        self.state = 9541
                        self.json_format_clause()


                    self.state = 9545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.RETURNING:
                        self.state = 9544
                        self.json_returning_clause()


                    pass

                elif la_ == 3:
                    self.state = 9548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.RETURNING:
                        self.state = 9547
                        self.json_returning_clause()


                    pass


                self.state = 9552
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON]:
                self.enterOuterAlt(localctx, 36)
                self.state = 9553
                self.match(PostgreSQLParser.JSON)
                self.state = 9554
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9555
                self.json_value_expr()
                self.state = 9557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH or _la==PostgreSQLParser.WITHOUT:
                    self.state = 9556
                    self.json_key_uniqueness_constraint()


                self.state = 9559
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON_SCALAR]:
                self.enterOuterAlt(localctx, 37)
                self.state = 9561
                self.match(PostgreSQLParser.JSON_SCALAR)
                self.state = 9562
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9563
                self.a_expr()
                self.state = 9564
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON_SERIALIZE]:
                self.enterOuterAlt(localctx, 38)
                self.state = 9566
                self.match(PostgreSQLParser.JSON_SERIALIZE)
                self.state = 9567
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9568
                self.json_value_expr()
                self.state = 9570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.RETURNING:
                    self.state = 9569
                    self.json_returning_clause()


                self.state = 9572
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.MERGE_ACTION]:
                self.enterOuterAlt(localctx, 39)
                self.state = 9574
                self.match(PostgreSQLParser.MERGE_ACTION)
                self.state = 9575
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9576
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON_QUERY]:
                self.enterOuterAlt(localctx, 40)
                self.state = 9577
                self.match(PostgreSQLParser.JSON_QUERY)
                self.state = 9578
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9579
                self.json_value_expr()
                self.state = 9580
                self.match(PostgreSQLParser.COMMA)
                self.state = 9581
                self.a_expr()
                self.state = 9583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PASSING:
                    self.state = 9582
                    self.json_passing_clause()


                self.state = 9586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.RETURNING:
                    self.state = 9585
                    self.json_returning_clause()


                self.state = 9588
                self.json_wrapper_behavior()
                self.state = 9590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.KEEP or _la==PostgreSQLParser.OMIT:
                    self.state = 9589
                    self.json_quotes_clause()


                self.state = 9593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.EMPTY_P or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (PostgreSQLParser.DEFAULT - 91)) | (1 << (PostgreSQLParser.FALSE_P - 91)) | (1 << (PostgreSQLParser.NULL_P - 91)) | (1 << (PostgreSQLParser.TRUE_P - 91)))) != 0) or _la==PostgreSQLParser.UNKNOWN or _la==PostgreSQLParser.ERROR:
                    self.state = 9592
                    self.json_behavior_clause()


                self.state = 9595
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON_EXISTS]:
                self.enterOuterAlt(localctx, 41)
                self.state = 9597
                self.match(PostgreSQLParser.JSON_EXISTS)
                self.state = 9598
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9599
                self.json_value_expr()
                self.state = 9600
                self.match(PostgreSQLParser.COMMA)
                self.state = 9601
                self.a_expr()
                self.state = 9603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PASSING:
                    self.state = 9602
                    self.json_passing_clause()


                self.state = 9606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.EMPTY_P or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (PostgreSQLParser.DEFAULT - 91)) | (1 << (PostgreSQLParser.FALSE_P - 91)) | (1 << (PostgreSQLParser.NULL_P - 91)) | (1 << (PostgreSQLParser.TRUE_P - 91)))) != 0) or _la==PostgreSQLParser.UNKNOWN or _la==PostgreSQLParser.ERROR:
                    self.state = 9605
                    self.json_on_error_clause()


                self.state = 9608
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON_VALUE]:
                self.enterOuterAlt(localctx, 42)
                self.state = 9610
                self.match(PostgreSQLParser.JSON_VALUE)
                self.state = 9611
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9612
                self.json_value_expr()
                self.state = 9613
                self.match(PostgreSQLParser.COMMA)
                self.state = 9614
                self.a_expr()
                self.state = 9616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PASSING:
                    self.state = 9615
                    self.json_passing_clause()


                self.state = 9619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.RETURNING:
                    self.state = 9618
                    self.json_returning_clause()


                self.state = 9622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.EMPTY_P or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (PostgreSQLParser.DEFAULT - 91)) | (1 << (PostgreSQLParser.FALSE_P - 91)) | (1 << (PostgreSQLParser.NULL_P - 91)) | (1 << (PostgreSQLParser.TRUE_P - 91)))) != 0) or _la==PostgreSQLParser.UNKNOWN or _la==PostgreSQLParser.ERROR:
                    self.state = 9621
                    self.json_behavior_clause()


                self.state = 9624
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_root_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_root_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_root_version" ):
                listener.enterXml_root_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_root_version" ):
                listener.exitXml_root_version(self)




    def xml_root_version(self):

        localctx = PostgreSQLParser.Xml_root_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_xml_root_version)
        try:
            self.state = 9633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9628
                self.match(PostgreSQLParser.VERSION_P)
                self.state = 9629
                self.a_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9630
                self.match(PostgreSQLParser.VERSION_P)
                self.state = 9631
                self.match(PostgreSQLParser.NO)
                self.state = 9632
                self.match(PostgreSQLParser.VALUE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_root_standalone_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def STANDALONE_P(self):
            return self.getToken(PostgreSQLParser.STANDALONE_P, 0)

        def YES_P(self):
            return self.getToken(PostgreSQLParser.YES_P, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_root_standalone_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_root_standalone_" ):
                listener.enterXml_root_standalone_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_root_standalone_" ):
                listener.exitXml_root_standalone_(self)




    def xml_root_standalone_(self):

        localctx = PostgreSQLParser.Xml_root_standalone_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1220, self.RULE_xml_root_standalone_)
        try:
            self.state = 9645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9635
                self.match(PostgreSQLParser.COMMA)
                self.state = 9636
                self.match(PostgreSQLParser.STANDALONE_P)
                self.state = 9637
                self.match(PostgreSQLParser.YES_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9638
                self.match(PostgreSQLParser.COMMA)
                self.state = 9639
                self.match(PostgreSQLParser.STANDALONE_P)
                self.state = 9640
                self.match(PostgreSQLParser.NO)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9641
                self.match(PostgreSQLParser.COMMA)
                self.state = 9642
                self.match(PostgreSQLParser.STANDALONE_P)
                self.state = 9643
                self.match(PostgreSQLParser.NO)
                self.state = 9644
                self.match(PostgreSQLParser.VALUE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(PostgreSQLParser.XMLATTRIBUTES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def xml_attribute_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_attribute_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attributes" ):
                listener.enterXml_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attributes" ):
                listener.exitXml_attributes(self)




    def xml_attributes(self):

        localctx = PostgreSQLParser.Xml_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1222, self.RULE_xml_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9647
            self.match(PostgreSQLParser.XMLATTRIBUTES)
            self.state = 9648
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9649
            self.xml_attribute_list()
            self.state = 9650
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_attribute_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xml_attribute_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xml_attribute_elContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_list" ):
                listener.enterXml_attribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_list" ):
                listener.exitXml_attribute_list(self)




    def xml_attribute_list(self):

        localctx = PostgreSQLParser.Xml_attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1224, self.RULE_xml_attribute_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9652
            self.xml_attribute_el()
            self.state = 9657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 9653
                self.match(PostgreSQLParser.COMMA)
                self.state = 9654
                self.xml_attribute_el()
                self.state = 9659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_attribute_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_el" ):
                listener.enterXml_attribute_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_el" ):
                listener.exitXml_attribute_el(self)




    def xml_attribute_el(self):

        localctx = PostgreSQLParser.Xml_attribute_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1226, self.RULE_xml_attribute_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9660
            self.a_expr()
            self.state = 9663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS:
                self.state = 9661
                self.match(PostgreSQLParser.AS)
                self.state = 9662
                self.colLabel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Document_or_contentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def CONTENT_P(self):
            return self.getToken(PostgreSQLParser.CONTENT_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_document_or_content

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocument_or_content" ):
                listener.enterDocument_or_content(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocument_or_content" ):
                listener.exitDocument_or_content(self)




    def document_or_content(self):

        localctx = PostgreSQLParser.Document_or_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1228, self.RULE_document_or_content)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9665
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.CONTENT_P or _la==PostgreSQLParser.DOCUMENT_P):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_whitespace_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRESERVE(self):
            return self.getToken(PostgreSQLParser.PRESERVE, 0)

        def WHITESPACE_P(self):
            return self.getToken(PostgreSQLParser.WHITESPACE_P, 0)

        def STRIP_P(self):
            return self.getToken(PostgreSQLParser.STRIP_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_whitespace_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_whitespace_option" ):
                listener.enterXml_whitespace_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_whitespace_option" ):
                listener.exitXml_whitespace_option(self)




    def xml_whitespace_option(self):

        localctx = PostgreSQLParser.Xml_whitespace_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1230, self.RULE_xml_whitespace_option)
        try:
            self.state = 9671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.PRESERVE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9667
                self.match(PostgreSQLParser.PRESERVE)
                self.state = 9668
                self.match(PostgreSQLParser.WHITESPACE_P)
                pass
            elif token in [PostgreSQLParser.STRIP_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9669
                self.match(PostgreSQLParser.STRIP_P)
                self.state = 9670
                self.match(PostgreSQLParser.WHITESPACE_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlexists_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(PostgreSQLParser.PASSING, 0)

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def xml_passing_mech(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xml_passing_mechContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xml_passing_mechContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmlexists_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlexists_argument" ):
                listener.enterXmlexists_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlexists_argument" ):
                listener.exitXmlexists_argument(self)




    def xmlexists_argument(self):

        localctx = PostgreSQLParser.Xmlexists_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1232, self.RULE_xmlexists_argument)
        try:
            self.state = 9688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,956,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9673
                self.match(PostgreSQLParser.PASSING)
                self.state = 9674
                self.c_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9675
                self.match(PostgreSQLParser.PASSING)
                self.state = 9676
                self.c_expr()
                self.state = 9677
                self.xml_passing_mech()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9679
                self.match(PostgreSQLParser.PASSING)
                self.state = 9680
                self.xml_passing_mech()
                self.state = 9681
                self.c_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9683
                self.match(PostgreSQLParser.PASSING)
                self.state = 9684
                self.xml_passing_mech()
                self.state = 9685
                self.c_expr()
                self.state = 9686
                self.xml_passing_mech()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_passing_mechContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def REF(self):
            return self.getToken(PostgreSQLParser.REF, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_passing_mech

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_passing_mech" ):
                listener.enterXml_passing_mech(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_passing_mech" ):
                listener.exitXml_passing_mech(self)




    def xml_passing_mech(self):

        localctx = PostgreSQLParser.Xml_passing_mechContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1234, self.RULE_xml_passing_mech)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9690
            self.match(PostgreSQLParser.BY)
            self.state = 9691
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.REF or _la==PostgreSQLParser.VALUE_P):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(PostgreSQLParser.WITHIN, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def sort_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clauseContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_within_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_group_clause" ):
                listener.enterWithin_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_group_clause" ):
                listener.exitWithin_group_clause(self)




    def within_group_clause(self):

        localctx = PostgreSQLParser.Within_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1236, self.RULE_within_group_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9693
            self.match(PostgreSQLParser.WITHIN)
            self.state = 9694
            self.match(PostgreSQLParser.GROUP_P)
            self.state = 9695
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9696
            self.sort_clause()
            self.state = 9697
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(PostgreSQLParser.FILTER, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = PostgreSQLParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1238, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9699
            self.match(PostgreSQLParser.FILTER)
            self.state = 9700
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9701
            self.match(PostgreSQLParser.WHERE)
            self.state = 9702
            self.a_expr()
            self.state = 9703
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(PostgreSQLParser.WINDOW, 0)

        def window_definition_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_definition_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_clause" ):
                listener.enterWindow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_clause" ):
                listener.exitWindow_clause(self)




    def window_clause(self):

        localctx = PostgreSQLParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1240, self.RULE_window_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9705
            self.match(PostgreSQLParser.WINDOW)
            self.state = 9706
            self.window_definition_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_definition_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Window_definitionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Window_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_definition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_definition_list" ):
                listener.enterWindow_definition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_definition_list" ):
                listener.exitWindow_definition_list(self)




    def window_definition_list(self):

        localctx = PostgreSQLParser.Window_definition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1242, self.RULE_window_definition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9708
            self.window_definition()
            self.state = 9713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 9709
                self.match(PostgreSQLParser.COMMA)
                self.state = 9710
                self.window_definition()
                self.state = 9715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def window_specification(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_definition" ):
                listener.enterWindow_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_definition" ):
                listener.exitWindow_definition(self)




    def window_definition(self):

        localctx = PostgreSQLParser.Window_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1244, self.RULE_window_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9716
            self.colid()
            self.state = 9717
            self.match(PostgreSQLParser.AS)
            self.state = 9718
            self.window_specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(PostgreSQLParser.OVER, 0)

        def window_specification(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_specificationContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = PostgreSQLParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1246, self.RULE_over_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9720
            self.match(PostgreSQLParser.OVER)
            self.state = 9723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN]:
                self.state = 9721
                self.window_specification()
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.state = 9722
                self.colid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def existing_window_name_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Existing_window_name_Context,0)


        def partition_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clause_Context,0)


        def sort_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clause_Context,0)


        def frame_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Frame_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_specification" ):
                listener.enterWindow_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_specification" ):
                listener.exitWindow_specification(self)




    def window_specification(self):

        localctx = PostgreSQLParser.Window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1248, self.RULE_window_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9725
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,959,self._ctx)
            if la_ == 1:
                self.state = 9726
                self.existing_window_name_()


            self.state = 9730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.PARTITION:
                self.state = 9729
                self.partition_clause_()


            self.state = 9733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ORDER:
                self.state = 9732
                self.sort_clause_()


            self.state = 9736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.RANGE or _la==PostgreSQLParser.ROWS or _la==PostgreSQLParser.GROUPS:
                self.state = 9735
                self.frame_clause_()


            self.state = 9738
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Existing_window_name_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_existing_window_name_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExisting_window_name_" ):
                listener.enterExisting_window_name_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExisting_window_name_" ):
                listener.exitExisting_window_name_(self)




    def existing_window_name_(self):

        localctx = PostgreSQLParser.Existing_window_name_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1250, self.RULE_existing_window_name_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9740
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause_" ):
                listener.enterPartition_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause_" ):
                listener.exitPartition_clause_(self)




    def partition_clause_(self):

        localctx = PostgreSQLParser.Partition_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1252, self.RULE_partition_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9742
            self.match(PostgreSQLParser.PARTITION)
            self.state = 9743
            self.match(PostgreSQLParser.BY)
            self.state = 9744
            self.expr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(PostgreSQLParser.RANGE, 0)

        def frame_extent(self):
            return self.getTypedRuleContext(PostgreSQLParser.Frame_extentContext,0)


        def window_exclusion_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_exclusion_clause_Context,0)


        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(PostgreSQLParser.GROUPS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_frame_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause_" ):
                listener.enterFrame_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause_" ):
                listener.exitFrame_clause_(self)




    def frame_clause_(self):

        localctx = PostgreSQLParser.Frame_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1254, self.RULE_frame_clause_)
        self._la = 0 # Token type
        try:
            self.state = 9761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.RANGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9746
                self.match(PostgreSQLParser.RANGE)
                self.state = 9747
                self.frame_extent()
                self.state = 9749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.EXCLUDE:
                    self.state = 9748
                    self.window_exclusion_clause_()


                pass
            elif token in [PostgreSQLParser.ROWS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9751
                self.match(PostgreSQLParser.ROWS)
                self.state = 9752
                self.frame_extent()
                self.state = 9754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.EXCLUDE:
                    self.state = 9753
                    self.window_exclusion_clause_()


                pass
            elif token in [PostgreSQLParser.GROUPS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9756
                self.match(PostgreSQLParser.GROUPS)
                self.state = 9757
                self.frame_extent()
                self.state = 9759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.EXCLUDE:
                    self.state = 9758
                    self.window_exclusion_clause_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_extentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Frame_boundContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Frame_boundContext,i)


        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_extent" ):
                listener.enterFrame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_extent" ):
                listener.exitFrame_extent(self)




    def frame_extent(self):

        localctx = PostgreSQLParser.Frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1256, self.RULE_frame_extent)
        try:
            self.state = 9769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9763
                self.frame_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9764
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 9765
                self.frame_bound()
                self.state = 9766
                self.match(PostgreSQLParser.AND)
                self.state = 9767
                self.frame_bound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(PostgreSQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(PostgreSQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(PostgreSQLParser.FOLLOWING, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_bound" ):
                listener.enterFrame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_bound" ):
                listener.exitFrame_bound(self)




    def frame_bound(self):

        localctx = PostgreSQLParser.Frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1258, self.RULE_frame_bound)
        self._la = 0 # Token type
        try:
            self.state = 9778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,968,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9771
                self.match(PostgreSQLParser.UNBOUNDED)
                self.state = 9772
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.FOLLOWING or _la==PostgreSQLParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9773
                self.match(PostgreSQLParser.CURRENT_P)
                self.state = 9774
                self.match(PostgreSQLParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9775
                self.a_expr()
                self.state = 9776
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.FOLLOWING or _la==PostgreSQLParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_exclusion_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDE(self):
            return self.getToken(PostgreSQLParser.EXCLUDE, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def TIES(self):
            return self.getToken(PostgreSQLParser.TIES, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def OTHERS(self):
            return self.getToken(PostgreSQLParser.OTHERS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_exclusion_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_exclusion_clause_" ):
                listener.enterWindow_exclusion_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_exclusion_clause_" ):
                listener.exitWindow_exclusion_clause_(self)




    def window_exclusion_clause_(self):

        localctx = PostgreSQLParser.Window_exclusion_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1260, self.RULE_window_exclusion_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9780
            self.match(PostgreSQLParser.EXCLUDE)
            self.state = 9787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.CURRENT_P]:
                self.state = 9781
                self.match(PostgreSQLParser.CURRENT_P)
                self.state = 9782
                self.match(PostgreSQLParser.ROW)
                pass
            elif token in [PostgreSQLParser.GROUP_P]:
                self.state = 9783
                self.match(PostgreSQLParser.GROUP_P)
                pass
            elif token in [PostgreSQLParser.TIES]:
                self.state = 9784
                self.match(PostgreSQLParser.TIES)
                pass
            elif token in [PostgreSQLParser.NO]:
                self.state = 9785
                self.match(PostgreSQLParser.NO)
                self.state = 9786
                self.match(PostgreSQLParser.OTHERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow" ):
                listener.enterRow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow" ):
                listener.exitRow(self)




    def row(self):

        localctx = PostgreSQLParser.RowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1262, self.RULE_row)
        self._la = 0 # Token type
        try:
            self.state = 9801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9789
                self.match(PostgreSQLParser.ROW)
                self.state = 9790
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                    self.state = 9791
                    self.expr_list()


                self.state = 9794
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9795
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9796
                self.expr_list()
                self.state = 9797
                self.match(PostgreSQLParser.COMMA)
                self.state = 9798
                self.a_expr()
                self.state = 9799
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explicit_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_row" ):
                listener.enterExplicit_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_row" ):
                listener.exitExplicit_row(self)




    def explicit_row(self):

        localctx = PostgreSQLParser.Explicit_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1264, self.RULE_explicit_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9803
            self.match(PostgreSQLParser.ROW)
            self.state = 9804
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                self.state = 9805
                self.expr_list()


            self.state = 9808
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_implicit_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_row" ):
                listener.enterImplicit_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_row" ):
                listener.exitImplicit_row(self)




    def implicit_row(self):

        localctx = PostgreSQLParser.Implicit_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1266, self.RULE_implicit_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9810
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9811
            self.expr_list()
            self.state = 9812
            self.match(PostgreSQLParser.COMMA)
            self.state = 9813
            self.a_expr()
            self.state = 9814
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sub_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def SOME(self):
            return self.getToken(PostgreSQLParser.SOME, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sub_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSub_type" ):
                listener.enterSub_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSub_type" ):
                listener.exitSub_type(self)




    def sub_type(self):

        localctx = PostgreSQLParser.Sub_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1268, self.RULE_sub_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9816
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (PostgreSQLParser.ALL - 68)) | (1 << (PostgreSQLParser.ANY - 68)) | (1 << (PostgreSQLParser.SOME - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(PostgreSQLParser.Operator, 0)

        def mathop(self):
            return self.getTypedRuleContext(PostgreSQLParser.MathopContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_all_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_op" ):
                listener.enterAll_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_op" ):
                listener.exitAll_op(self)




    def all_op(self):

        localctx = PostgreSQLParser.All_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1270, self.RULE_all_op)
        try:
            self.state = 9820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Operator]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9818
                self.match(PostgreSQLParser.Operator)
                pass
            elif token in [PostgreSQLParser.STAR, PostgreSQLParser.EQUAL, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.SLASH, PostgreSQLParser.CARET, PostgreSQLParser.LT, PostgreSQLParser.GT, PostgreSQLParser.LESS_EQUALS, PostgreSQLParser.GREATER_EQUALS, PostgreSQLParser.NOT_EQUALS, PostgreSQLParser.PERCENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9819
                self.mathop()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PostgreSQLParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(PostgreSQLParser.PERCENT, 0)

        def CARET(self):
            return self.getToken(PostgreSQLParser.CARET, 0)

        def LT(self):
            return self.getToken(PostgreSQLParser.LT, 0)

        def GT(self):
            return self.getToken(PostgreSQLParser.GT, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def LESS_EQUALS(self):
            return self.getToken(PostgreSQLParser.LESS_EQUALS, 0)

        def GREATER_EQUALS(self):
            return self.getToken(PostgreSQLParser.GREATER_EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(PostgreSQLParser.NOT_EQUALS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_mathop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathop" ):
                listener.enterMathop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathop" ):
                listener.exitMathop(self)




    def mathop(self):

        localctx = PostgreSQLParser.MathopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1272, self.RULE_mathop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9822
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.EQUAL) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.SLASH) | (1 << PostgreSQLParser.CARET) | (1 << PostgreSQLParser.LT) | (1 << PostgreSQLParser.GT) | (1 << PostgreSQLParser.LESS_EQUALS) | (1 << PostgreSQLParser.GREATER_EQUALS) | (1 << PostgreSQLParser.NOT_EQUALS) | (1 << PostgreSQLParser.PERCENT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qual_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(PostgreSQLParser.Operator, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_qual_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQual_op" ):
                listener.enterQual_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQual_op" ):
                listener.exitQual_op(self)




    def qual_op(self):

        localctx = PostgreSQLParser.Qual_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1274, self.RULE_qual_op)
        try:
            self.state = 9830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Operator]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9824
                self.match(PostgreSQLParser.Operator)
                pass
            elif token in [PostgreSQLParser.OPERATOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9825
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 9826
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9827
                self.any_operator()
                self.state = 9828
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qual_all_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.All_opContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_qual_all_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQual_all_op" ):
                listener.enterQual_all_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQual_all_op" ):
                listener.exitQual_all_op(self)




    def qual_all_op(self):

        localctx = PostgreSQLParser.Qual_all_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1276, self.RULE_qual_all_op)
        try:
            self.state = 9838
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.STAR, PostgreSQLParser.EQUAL, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.SLASH, PostgreSQLParser.CARET, PostgreSQLParser.LT, PostgreSQLParser.GT, PostgreSQLParser.LESS_EQUALS, PostgreSQLParser.GREATER_EQUALS, PostgreSQLParser.NOT_EQUALS, PostgreSQLParser.PERCENT, PostgreSQLParser.Operator]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9832
                self.all_op()
                pass
            elif token in [PostgreSQLParser.OPERATOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9833
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 9834
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9835
                self.any_operator()
                self.state = 9836
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_OpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.All_opContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def ILIKE(self):
            return self.getToken(PostgreSQLParser.ILIKE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subquery_Op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_Op" ):
                listener.enterSubquery_Op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_Op" ):
                listener.exitSubquery_Op(self)




    def subquery_Op(self):

        localctx = PostgreSQLParser.Subquery_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1278, self.RULE_subquery_Op)
        try:
            self.state = 9852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,976,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9840
                self.all_op()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9841
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 9842
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9843
                self.any_operator()
                self.state = 9844
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9846
                self.match(PostgreSQLParser.LIKE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9847
                self.match(PostgreSQLParser.NOT)
                self.state = 9848
                self.match(PostgreSQLParser.LIKE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9849
                self.match(PostgreSQLParser.ILIKE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9850
                self.match(PostgreSQLParser.NOT)
                self.state = 9851
                self.match(PostgreSQLParser.ILIKE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)




    def expr_list(self):

        localctx = PostgreSQLParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1280, self.RULE_expr_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9854
            self.a_expr()
            self.state = 9859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,977,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9855
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9856
                    self.a_expr() 
                self.state = 9861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,977,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Func_arg_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Func_arg_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg_list" ):
                listener.enterFunc_arg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg_list" ):
                listener.exitFunc_arg_list(self)




    def func_arg_list(self):

        localctx = PostgreSQLParser.Func_arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1282, self.RULE_func_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9862
            self.func_arg_expr()
            self.state = 9867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,978,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9863
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9864
                    self.func_arg_expr() 
                self.state = 9869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,978,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def param_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Param_nameContext,0)


        def COLON_EQUALS(self):
            return self.getToken(PostgreSQLParser.COLON_EQUALS, 0)

        def EQUALS_GREATER(self):
            return self.getToken(PostgreSQLParser.EQUALS_GREATER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_arg_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg_expr" ):
                listener.enterFunc_arg_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg_expr" ):
                listener.exitFunc_arg_expr(self)




    def func_arg_expr(self):

        localctx = PostgreSQLParser.Func_arg_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1284, self.RULE_func_arg_expr)
        self._la = 0 # Token type
        try:
            self.state = 9875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,979,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9870
                self.a_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9871
                self.param_name()
                self.state = 9872
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.COLON_EQUALS or _la==PostgreSQLParser.EQUALS_GREATER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9873
                self.a_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_list" ):
                listener.enterType_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_list" ):
                listener.exitType_list(self)




    def type_list(self):

        localctx = PostgreSQLParser.Type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1286, self.RULE_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9877
            self.typename()
            self.state = 9882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 9878
                self.match(PostgreSQLParser.COMMA)
                self.state = 9879
                self.typename()
                self.state = 9884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(PostgreSQLParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(PostgreSQLParser.CLOSE_BRACKET, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def array_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_expr_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_expr" ):
                listener.enterArray_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_expr" ):
                listener.exitArray_expr(self)




    def array_expr(self):

        localctx = PostgreSQLParser.Array_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1288, self.RULE_array_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9885
            self.match(PostgreSQLParser.OPEN_BRACKET)
            self.state = 9888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.PARAM, PostgreSQLParser.Operator, PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ARRAY, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.FALSE_P, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.SESSION_USER, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.BinaryStringConstant, PostgreSQLParser.HexadecimalStringConstant, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                self.state = 9886
                self.expr_list()
                pass
            elif token in [PostgreSQLParser.OPEN_BRACKET]:
                self.state = 9887
                self.array_expr_list()
                pass
            elif token in [PostgreSQLParser.CLOSE_BRACKET]:
                pass
            else:
                pass
            self.state = 9890
            self.match(PostgreSQLParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Array_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Array_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_expr_list" ):
                listener.enterArray_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_expr_list" ):
                listener.exitArray_expr_list(self)




    def array_expr_list(self):

        localctx = PostgreSQLParser.Array_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1290, self.RULE_array_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9892
            self.array_expr()
            self.state = 9897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 9893
                self.match(PostgreSQLParser.COMMA)
                self.state = 9894
                self.array_expr()
                self.state = 9899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extract_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extract_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Extract_argContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_extract_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract_list" ):
                listener.enterExtract_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract_list" ):
                listener.exitExtract_list(self)




    def extract_list(self):

        localctx = PostgreSQLParser.Extract_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1292, self.RULE_extract_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9900
            self.extract_arg()
            self.state = 9901
            self.match(PostgreSQLParser.FROM)
            self.state = 9902
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extract_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def YEAR_P(self):
            return self.getToken(PostgreSQLParser.YEAR_P, 0)

        def MONTH_P(self):
            return self.getToken(PostgreSQLParser.MONTH_P, 0)

        def DAY_P(self):
            return self.getToken(PostgreSQLParser.DAY_P, 0)

        def HOUR_P(self):
            return self.getToken(PostgreSQLParser.HOUR_P, 0)

        def MINUTE_P(self):
            return self.getToken(PostgreSQLParser.MINUTE_P, 0)

        def SECOND_P(self):
            return self.getToken(PostgreSQLParser.SECOND_P, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_extract_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract_arg" ):
                listener.enterExtract_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract_arg" ):
                listener.exitExtract_arg(self)




    def extract_arg(self):

        localctx = PostgreSQLParser.Extract_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1294, self.RULE_extract_arg)
        try:
            self.state = 9912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9904
                self.identifier()
                pass
            elif token in [PostgreSQLParser.YEAR_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9905
                self.match(PostgreSQLParser.YEAR_P)
                pass
            elif token in [PostgreSQLParser.MONTH_P]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9906
                self.match(PostgreSQLParser.MONTH_P)
                pass
            elif token in [PostgreSQLParser.DAY_P]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9907
                self.match(PostgreSQLParser.DAY_P)
                pass
            elif token in [PostgreSQLParser.HOUR_P]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9908
                self.match(PostgreSQLParser.HOUR_P)
                pass
            elif token in [PostgreSQLParser.MINUTE_P]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9909
                self.match(PostgreSQLParser.MINUTE_P)
                pass
            elif token in [PostgreSQLParser.SECOND_P]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9910
                self.match(PostgreSQLParser.SECOND_P)
                pass
            elif token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9911
                self.sconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_normal_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFC(self):
            return self.getToken(PostgreSQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(PostgreSQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(PostgreSQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(PostgreSQLParser.NFKD, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_unicode_normal_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_normal_form" ):
                listener.enterUnicode_normal_form(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_normal_form" ):
                listener.exitUnicode_normal_form(self)




    def unicode_normal_form(self):

        localctx = PostgreSQLParser.Unicode_normal_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1296, self.RULE_unicode_normal_form)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9914
            _la = self._input.LA(1)
            if not(((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (PostgreSQLParser.NFC - 521)) | (1 << (PostgreSQLParser.NFD - 521)) | (1 << (PostgreSQLParser.NFKC - 521)) | (1 << (PostgreSQLParser.NFKD - 521)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overlay_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def PLACING(self):
            return self.getToken(PostgreSQLParser.PLACING, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_overlay_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlay_list" ):
                listener.enterOverlay_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlay_list" ):
                listener.exitOverlay_list(self)




    def overlay_list(self):

        localctx = PostgreSQLParser.Overlay_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1298, self.RULE_overlay_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9916
            self.a_expr()
            self.state = 9917
            self.match(PostgreSQLParser.PLACING)
            self.state = 9918
            self.a_expr()
            self.state = 9919
            self.match(PostgreSQLParser.FROM)
            self.state = 9920
            self.a_expr()
            self.state = 9923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FOR:
                self.state = 9921
                self.match(PostgreSQLParser.FOR)
                self.state = 9922
                self.a_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Position_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def b_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.B_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.B_exprContext,i)


        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_position_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition_list" ):
                listener.enterPosition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition_list" ):
                listener.exitPosition_list(self)




    def position_list(self):

        localctx = PostgreSQLParser.Position_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1300, self.RULE_position_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9925
            self.b_expr(0)
            self.state = 9926
            self.match(PostgreSQLParser.IN_P)
            self.state = 9927
            self.b_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Substr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def SIMILAR(self):
            return self.getToken(PostgreSQLParser.SIMILAR, 0)

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_substr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstr_list" ):
                listener.enterSubstr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstr_list" ):
                listener.exitSubstr_list(self)




    def substr_list(self):

        localctx = PostgreSQLParser.Substr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1302, self.RULE_substr_list)
        try:
            self.state = 9955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,985,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9929
                self.a_expr()
                self.state = 9930
                self.match(PostgreSQLParser.FROM)
                self.state = 9931
                self.a_expr()
                self.state = 9932
                self.match(PostgreSQLParser.FOR)
                self.state = 9933
                self.a_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9935
                self.a_expr()
                self.state = 9936
                self.match(PostgreSQLParser.FOR)
                self.state = 9937
                self.a_expr()
                self.state = 9938
                self.match(PostgreSQLParser.FROM)
                self.state = 9939
                self.a_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9941
                self.a_expr()
                self.state = 9942
                self.match(PostgreSQLParser.FROM)
                self.state = 9943
                self.a_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9945
                self.a_expr()
                self.state = 9946
                self.match(PostgreSQLParser.FOR)
                self.state = 9947
                self.a_expr()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9949
                self.a_expr()
                self.state = 9950
                self.match(PostgreSQLParser.SIMILAR)
                self.state = 9951
                self.a_expr()
                self.state = 9952
                self.match(PostgreSQLParser.ESCAPE)
                self.state = 9953
                self.a_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trim_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_trim_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim_list" ):
                listener.enterTrim_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim_list" ):
                listener.exitTrim_list(self)




    def trim_list(self):

        localctx = PostgreSQLParser.Trim_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1304, self.RULE_trim_list)
        try:
            self.state = 9964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,986,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9957
                self.a_expr()
                self.state = 9958
                self.match(PostgreSQLParser.FROM)
                self.state = 9959
                self.expr_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9961
                self.match(PostgreSQLParser.FROM)
                self.state = 9962
                self.expr_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9963
                self.expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_in_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class In_expr_listContext(In_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.In_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)
        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_expr_list" ):
                listener.enterIn_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_expr_list" ):
                listener.exitIn_expr_list(self)


    class In_expr_selectContext(In_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.In_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_expr_select" ):
                listener.enterIn_expr_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_expr_select" ):
                listener.exitIn_expr_select(self)



    def in_expr(self):

        localctx = PostgreSQLParser.In_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1306, self.RULE_in_expr)
        try:
            self.state = 9971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,987,self._ctx)
            if la_ == 1:
                localctx = PostgreSQLParser.In_expr_selectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 9966
                self.select_with_parens()
                pass

            elif la_ == 2:
                localctx = PostgreSQLParser.In_expr_listContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 9967
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9968
                self.expr_list()
                self.state = 9969
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(PostgreSQLParser.CASE, 0)

        def when_clause_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.When_clause_listContext,0)


        def END_P(self):
            return self.getToken(PostgreSQLParser.END_P, 0)

        def case_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_argContext,0)


        def case_default(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_defaultContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = PostgreSQLParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1308, self.RULE_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9973
            self.match(PostgreSQLParser.CASE)
            self.state = 9975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                self.state = 9974
                self.case_arg()


            self.state = 9977
            self.when_clause_list()
            self.state = 9979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ELSE:
                self.state = 9978
                self.case_default()


            self.state = 9981
            self.match(PostgreSQLParser.END_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_clause_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def when_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.When_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.When_clauseContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_when_clause_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_clause_list" ):
                listener.enterWhen_clause_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_clause_list" ):
                listener.exitWhen_clause_list(self)




    def when_clause_list(self):

        localctx = PostgreSQLParser.When_clause_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1310, self.RULE_when_clause_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9984 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9983
                self.when_clause()
                self.state = 9986 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.WHEN):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_clause" ):
                listener.enterWhen_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_clause" ):
                listener.exitWhen_clause(self)




    def when_clause(self):

        localctx = PostgreSQLParser.When_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1312, self.RULE_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9988
            self.match(PostgreSQLParser.WHEN)
            self.state = 9989
            self.a_expr()
            self.state = 9990
            self.match(PostgreSQLParser.THEN)
            self.state = 9991
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PostgreSQLParser.ELSE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_default" ):
                listener.enterCase_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_default" ):
                listener.exitCase_default(self)




    def case_default(self):

        localctx = PostgreSQLParser.Case_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1314, self.RULE_case_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9993
            self.match(PostgreSQLParser.ELSE)
            self.state = 9994
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_arg" ):
                listener.enterCase_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_arg" ):
                listener.exitCase_arg(self)




    def case_arg(self):

        localctx = PostgreSQLParser.Case_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1316, self.RULE_case_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9996
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnrefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnref" ):
                listener.enterColumnref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnref" ):
                listener.exitColumnref(self)




    def columnref(self):

        localctx = PostgreSQLParser.ColumnrefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1318, self.RULE_columnref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9998
            self.colid()
            self.state = 10000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
            if la_ == 1:
                self.state = 9999
                self.indirection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indirection_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def attr_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Attr_nameContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def OPEN_BRACKET(self):
            return self.getToken(PostgreSQLParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(PostgreSQLParser.CLOSE_BRACKET, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def COLON(self):
            return self.getToken(PostgreSQLParser.COLON, 0)

        def slice_bound_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Slice_bound_Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Slice_bound_Context,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_indirection_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirection_el" ):
                listener.enterIndirection_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirection_el" ):
                listener.exitIndirection_el(self)




    def indirection_el(self):

        localctx = PostgreSQLParser.Indirection_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1320, self.RULE_indirection_el)
        self._la = 0 # Token type
        try:
            self.state = 10019
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.DOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10002
                self.match(PostgreSQLParser.DOT)
                self.state = 10005
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ALL, PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE, PostgreSQLParser.AND, PostgreSQLParser.ANY, PostgreSQLParser.ARRAY, PostgreSQLParser.AS, PostgreSQLParser.ASC, PostgreSQLParser.ASYMMETRIC, PostgreSQLParser.BOTH, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CHECK, PostgreSQLParser.COLLATE, PostgreSQLParser.COLUMN, PostgreSQLParser.CONSTRAINT, PostgreSQLParser.CREATE, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEFERRABLE, PostgreSQLParser.DESC, PostgreSQLParser.DISTINCT, PostgreSQLParser.DO, PostgreSQLParser.ELSE, PostgreSQLParser.EXCEPT, PostgreSQLParser.FALSE_P, PostgreSQLParser.FETCH, PostgreSQLParser.FOR, PostgreSQLParser.FOREIGN, PostgreSQLParser.FROM, PostgreSQLParser.GRANT, PostgreSQLParser.GROUP_P, PostgreSQLParser.HAVING, PostgreSQLParser.IN_P, PostgreSQLParser.INITIALLY, PostgreSQLParser.INTERSECT, PostgreSQLParser.INTO, PostgreSQLParser.LATERAL_P, PostgreSQLParser.LEADING, PostgreSQLParser.LIMIT, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.OFFSET, PostgreSQLParser.ON, PostgreSQLParser.ONLY, PostgreSQLParser.OR, PostgreSQLParser.ORDER, PostgreSQLParser.PLACING, PostgreSQLParser.PRIMARY, PostgreSQLParser.REFERENCES, PostgreSQLParser.RETURNING, PostgreSQLParser.SELECT, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SOME, PostgreSQLParser.SYMMETRIC, PostgreSQLParser.TABLE, PostgreSQLParser.THEN, PostgreSQLParser.TO, PostgreSQLParser.TRAILING, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNION, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.USING, PostgreSQLParser.VARIADIC, PostgreSQLParser.WHEN, PostgreSQLParser.WHERE, PostgreSQLParser.WINDOW, PostgreSQLParser.WITH, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.END_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.EXIT, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                    self.state = 10003
                    self.attr_name()
                    pass
                elif token in [PostgreSQLParser.STAR]:
                    self.state = 10004
                    self.match(PostgreSQLParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PostgreSQLParser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10007
                self.match(PostgreSQLParser.OPEN_BRACKET)
                self.state = 10016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,995,self._ctx)
                if la_ == 1:
                    self.state = 10008
                    self.a_expr()
                    pass

                elif la_ == 2:
                    self.state = 10010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                        self.state = 10009
                        self.slice_bound_()


                    self.state = 10012
                    self.match(PostgreSQLParser.COLON)
                    self.state = 10014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator) | (1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ARRAY - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (PostgreSQLParser.TRUE_P - 134)) | (1 << (PostgreSQLParser.UNIQUE - 134)) | (1 << (PostgreSQLParser.USER - 134)) | (1 << (PostgreSQLParser.AUTHORIZATION - 134)) | (1 << (PostgreSQLParser.BINARY - 134)) | (1 << (PostgreSQLParser.COLLATION - 134)) | (1 << (PostgreSQLParser.CONCURRENTLY - 134)) | (1 << (PostgreSQLParser.CROSS - 134)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 134)) | (1 << (PostgreSQLParser.FREEZE - 134)) | (1 << (PostgreSQLParser.FULL - 134)) | (1 << (PostgreSQLParser.ILIKE - 134)) | (1 << (PostgreSQLParser.INNER_P - 134)) | (1 << (PostgreSQLParser.IS - 134)) | (1 << (PostgreSQLParser.ISNULL - 134)) | (1 << (PostgreSQLParser.JOIN - 134)) | (1 << (PostgreSQLParser.LEFT - 134)) | (1 << (PostgreSQLParser.LIKE - 134)) | (1 << (PostgreSQLParser.NATURAL - 134)) | (1 << (PostgreSQLParser.NOTNULL - 134)) | (1 << (PostgreSQLParser.OUTER_P - 134)) | (1 << (PostgreSQLParser.OVER - 134)) | (1 << (PostgreSQLParser.OVERLAPS - 134)) | (1 << (PostgreSQLParser.RIGHT - 134)) | (1 << (PostgreSQLParser.SIMILAR - 134)) | (1 << (PostgreSQLParser.VERBOSE - 134)) | (1 << (PostgreSQLParser.ABORT_P - 134)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 134)) | (1 << (PostgreSQLParser.ACCESS - 134)) | (1 << (PostgreSQLParser.ACTION - 134)) | (1 << (PostgreSQLParser.ADD_P - 134)) | (1 << (PostgreSQLParser.ADMIN - 134)) | (1 << (PostgreSQLParser.AFTER - 134)) | (1 << (PostgreSQLParser.AGGREGATE - 134)) | (1 << (PostgreSQLParser.ALSO - 134)) | (1 << (PostgreSQLParser.ALTER - 134)) | (1 << (PostgreSQLParser.ALWAYS - 134)) | (1 << (PostgreSQLParser.ASSERTION - 134)) | (1 << (PostgreSQLParser.ASSIGNMENT - 134)) | (1 << (PostgreSQLParser.AT - 134)) | (1 << (PostgreSQLParser.ATTRIBUTE - 134)) | (1 << (PostgreSQLParser.BACKWARD - 134)) | (1 << (PostgreSQLParser.BEFORE - 134)) | (1 << (PostgreSQLParser.BEGIN_P - 134)) | (1 << (PostgreSQLParser.BY - 134)) | (1 << (PostgreSQLParser.CACHE - 134)) | (1 << (PostgreSQLParser.CALLED - 134)) | (1 << (PostgreSQLParser.CASCADE - 134)) | (1 << (PostgreSQLParser.CASCADED - 134)) | (1 << (PostgreSQLParser.CATALOG - 134)) | (1 << (PostgreSQLParser.CHAIN - 134)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 134)) | (1 << (PostgreSQLParser.CHECKPOINT - 134)) | (1 << (PostgreSQLParser.CLASS - 134)) | (1 << (PostgreSQLParser.CLOSE - 134)) | (1 << (PostgreSQLParser.CLUSTER - 134)) | (1 << (PostgreSQLParser.COMMENT - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (PostgreSQLParser.COMMENTS - 198)) | (1 << (PostgreSQLParser.COMMIT - 198)) | (1 << (PostgreSQLParser.COMMITTED - 198)) | (1 << (PostgreSQLParser.CONFIGURATION - 198)) | (1 << (PostgreSQLParser.CONNECTION - 198)) | (1 << (PostgreSQLParser.CONSTRAINTS - 198)) | (1 << (PostgreSQLParser.CONTENT_P - 198)) | (1 << (PostgreSQLParser.CONTINUE_P - 198)) | (1 << (PostgreSQLParser.CONVERSION_P - 198)) | (1 << (PostgreSQLParser.COPY - 198)) | (1 << (PostgreSQLParser.COST - 198)) | (1 << (PostgreSQLParser.CSV - 198)) | (1 << (PostgreSQLParser.CURSOR - 198)) | (1 << (PostgreSQLParser.CYCLE - 198)) | (1 << (PostgreSQLParser.DATA_P - 198)) | (1 << (PostgreSQLParser.DATABASE - 198)) | (1 << (PostgreSQLParser.DAY_P - 198)) | (1 << (PostgreSQLParser.DEALLOCATE - 198)) | (1 << (PostgreSQLParser.DECLARE - 198)) | (1 << (PostgreSQLParser.DEFAULTS - 198)) | (1 << (PostgreSQLParser.DEFERRED - 198)) | (1 << (PostgreSQLParser.DEFINER - 198)) | (1 << (PostgreSQLParser.DELETE_P - 198)) | (1 << (PostgreSQLParser.DELIMITER - 198)) | (1 << (PostgreSQLParser.DELIMITERS - 198)) | (1 << (PostgreSQLParser.DICTIONARY - 198)) | (1 << (PostgreSQLParser.DISABLE_P - 198)) | (1 << (PostgreSQLParser.DISCARD - 198)) | (1 << (PostgreSQLParser.DOCUMENT_P - 198)) | (1 << (PostgreSQLParser.DOMAIN_P - 198)) | (1 << (PostgreSQLParser.DOUBLE_P - 198)) | (1 << (PostgreSQLParser.DROP - 198)) | (1 << (PostgreSQLParser.EACH - 198)) | (1 << (PostgreSQLParser.ENABLE_P - 198)) | (1 << (PostgreSQLParser.ENCODING - 198)) | (1 << (PostgreSQLParser.ENCRYPTED - 198)) | (1 << (PostgreSQLParser.ENUM_P - 198)) | (1 << (PostgreSQLParser.ESCAPE - 198)) | (1 << (PostgreSQLParser.EVENT - 198)) | (1 << (PostgreSQLParser.EXCLUDE - 198)) | (1 << (PostgreSQLParser.EXCLUDING - 198)) | (1 << (PostgreSQLParser.EXCLUSIVE - 198)) | (1 << (PostgreSQLParser.EXECUTE - 198)) | (1 << (PostgreSQLParser.EXPLAIN - 198)) | (1 << (PostgreSQLParser.EXTENSION - 198)) | (1 << (PostgreSQLParser.EXTERNAL - 198)) | (1 << (PostgreSQLParser.FAMILY - 198)) | (1 << (PostgreSQLParser.FIRST_P - 198)) | (1 << (PostgreSQLParser.FOLLOWING - 198)) | (1 << (PostgreSQLParser.FORCE - 198)) | (1 << (PostgreSQLParser.FORWARD - 198)) | (1 << (PostgreSQLParser.FUNCTION - 198)) | (1 << (PostgreSQLParser.FUNCTIONS - 198)) | (1 << (PostgreSQLParser.GLOBAL - 198)) | (1 << (PostgreSQLParser.GRANTED - 198)) | (1 << (PostgreSQLParser.HANDLER - 198)) | (1 << (PostgreSQLParser.HEADER_P - 198)) | (1 << (PostgreSQLParser.HOLD - 198)) | (1 << (PostgreSQLParser.HOUR_P - 198)) | (1 << (PostgreSQLParser.IDENTITY_P - 198)) | (1 << (PostgreSQLParser.IF_P - 198)) | (1 << (PostgreSQLParser.IMMEDIATE - 198)) | (1 << (PostgreSQLParser.IMMUTABLE - 198)) | (1 << (PostgreSQLParser.IMPLICIT_P - 198)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (PostgreSQLParser.INCLUDING - 262)) | (1 << (PostgreSQLParser.INCREMENT - 262)) | (1 << (PostgreSQLParser.INDEX - 262)) | (1 << (PostgreSQLParser.INDEXES - 262)) | (1 << (PostgreSQLParser.INHERIT - 262)) | (1 << (PostgreSQLParser.INHERITS - 262)) | (1 << (PostgreSQLParser.INLINE_P - 262)) | (1 << (PostgreSQLParser.INSENSITIVE - 262)) | (1 << (PostgreSQLParser.INSERT - 262)) | (1 << (PostgreSQLParser.INSTEAD - 262)) | (1 << (PostgreSQLParser.INVOKER - 262)) | (1 << (PostgreSQLParser.ISOLATION - 262)) | (1 << (PostgreSQLParser.KEY - 262)) | (1 << (PostgreSQLParser.LABEL - 262)) | (1 << (PostgreSQLParser.LANGUAGE - 262)) | (1 << (PostgreSQLParser.LARGE_P - 262)) | (1 << (PostgreSQLParser.LAST_P - 262)) | (1 << (PostgreSQLParser.LEAKPROOF - 262)) | (1 << (PostgreSQLParser.LEVEL - 262)) | (1 << (PostgreSQLParser.LISTEN - 262)) | (1 << (PostgreSQLParser.LOAD - 262)) | (1 << (PostgreSQLParser.LOCAL - 262)) | (1 << (PostgreSQLParser.LOCATION - 262)) | (1 << (PostgreSQLParser.LOCK_P - 262)) | (1 << (PostgreSQLParser.MAPPING - 262)) | (1 << (PostgreSQLParser.MATCH - 262)) | (1 << (PostgreSQLParser.MATCHED - 262)) | (1 << (PostgreSQLParser.MATERIALIZED - 262)) | (1 << (PostgreSQLParser.MAXVALUE - 262)) | (1 << (PostgreSQLParser.MERGE - 262)) | (1 << (PostgreSQLParser.MINUTE_P - 262)) | (1 << (PostgreSQLParser.MINVALUE - 262)) | (1 << (PostgreSQLParser.MODE - 262)) | (1 << (PostgreSQLParser.MONTH_P - 262)) | (1 << (PostgreSQLParser.MOVE - 262)) | (1 << (PostgreSQLParser.NAME_P - 262)) | (1 << (PostgreSQLParser.NAMES - 262)) | (1 << (PostgreSQLParser.NEXT - 262)) | (1 << (PostgreSQLParser.NO - 262)) | (1 << (PostgreSQLParser.NOTHING - 262)) | (1 << (PostgreSQLParser.NOTIFY - 262)) | (1 << (PostgreSQLParser.NOWAIT - 262)) | (1 << (PostgreSQLParser.NULLS_P - 262)) | (1 << (PostgreSQLParser.OBJECT_P - 262)) | (1 << (PostgreSQLParser.OF - 262)) | (1 << (PostgreSQLParser.OFF - 262)) | (1 << (PostgreSQLParser.OIDS - 262)) | (1 << (PostgreSQLParser.OPERATOR - 262)) | (1 << (PostgreSQLParser.OPTION - 262)) | (1 << (PostgreSQLParser.OPTIONS - 262)) | (1 << (PostgreSQLParser.OWNED - 262)) | (1 << (PostgreSQLParser.OWNER - 262)) | (1 << (PostgreSQLParser.PARSER - 262)) | (1 << (PostgreSQLParser.PARTIAL - 262)) | (1 << (PostgreSQLParser.PARTITION - 262)) | (1 << (PostgreSQLParser.PASSING - 262)) | (1 << (PostgreSQLParser.PASSWORD - 262)) | (1 << (PostgreSQLParser.PLANS - 262)) | (1 << (PostgreSQLParser.PRECEDING - 262)) | (1 << (PostgreSQLParser.PREPARE - 262)) | (1 << (PostgreSQLParser.PREPARED - 262)) | (1 << (PostgreSQLParser.PRESERVE - 262)) | (1 << (PostgreSQLParser.PRIOR - 262)) | (1 << (PostgreSQLParser.PRIVILEGES - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (PostgreSQLParser.PROCEDURAL - 326)) | (1 << (PostgreSQLParser.PROCEDURE - 326)) | (1 << (PostgreSQLParser.PROGRAM - 326)) | (1 << (PostgreSQLParser.QUOTE - 326)) | (1 << (PostgreSQLParser.RANGE - 326)) | (1 << (PostgreSQLParser.READ - 326)) | (1 << (PostgreSQLParser.REASSIGN - 326)) | (1 << (PostgreSQLParser.RECURSIVE - 326)) | (1 << (PostgreSQLParser.REF - 326)) | (1 << (PostgreSQLParser.REFRESH - 326)) | (1 << (PostgreSQLParser.REINDEX - 326)) | (1 << (PostgreSQLParser.RELATIVE_P - 326)) | (1 << (PostgreSQLParser.RELEASE - 326)) | (1 << (PostgreSQLParser.RENAME - 326)) | (1 << (PostgreSQLParser.REPEATABLE - 326)) | (1 << (PostgreSQLParser.REPLACE - 326)) | (1 << (PostgreSQLParser.REPLICA - 326)) | (1 << (PostgreSQLParser.RESET - 326)) | (1 << (PostgreSQLParser.RESTART - 326)) | (1 << (PostgreSQLParser.RESTRICT - 326)) | (1 << (PostgreSQLParser.RETURNS - 326)) | (1 << (PostgreSQLParser.REVOKE - 326)) | (1 << (PostgreSQLParser.ROLE - 326)) | (1 << (PostgreSQLParser.ROLLBACK - 326)) | (1 << (PostgreSQLParser.ROWS - 326)) | (1 << (PostgreSQLParser.RULE - 326)) | (1 << (PostgreSQLParser.SAVEPOINT - 326)) | (1 << (PostgreSQLParser.SCHEMA - 326)) | (1 << (PostgreSQLParser.SCROLL - 326)) | (1 << (PostgreSQLParser.SEARCH - 326)) | (1 << (PostgreSQLParser.SECOND_P - 326)) | (1 << (PostgreSQLParser.SECURITY - 326)) | (1 << (PostgreSQLParser.SEQUENCE - 326)) | (1 << (PostgreSQLParser.SEQUENCES - 326)) | (1 << (PostgreSQLParser.SERIALIZABLE - 326)) | (1 << (PostgreSQLParser.SERVER - 326)) | (1 << (PostgreSQLParser.SESSION - 326)) | (1 << (PostgreSQLParser.SET - 326)) | (1 << (PostgreSQLParser.SHARE - 326)) | (1 << (PostgreSQLParser.SHOW - 326)) | (1 << (PostgreSQLParser.SIMPLE - 326)) | (1 << (PostgreSQLParser.SNAPSHOT - 326)) | (1 << (PostgreSQLParser.STABLE - 326)) | (1 << (PostgreSQLParser.STANDALONE_P - 326)) | (1 << (PostgreSQLParser.START - 326)) | (1 << (PostgreSQLParser.STATEMENT - 326)) | (1 << (PostgreSQLParser.STATISTICS - 326)) | (1 << (PostgreSQLParser.STDIN - 326)) | (1 << (PostgreSQLParser.STDOUT - 326)) | (1 << (PostgreSQLParser.STORAGE - 326)) | (1 << (PostgreSQLParser.STRICT_P - 326)) | (1 << (PostgreSQLParser.STRIP_P - 326)) | (1 << (PostgreSQLParser.SYSID - 326)) | (1 << (PostgreSQLParser.SYSTEM_P - 326)) | (1 << (PostgreSQLParser.TABLES - 326)) | (1 << (PostgreSQLParser.TABLESPACE - 326)) | (1 << (PostgreSQLParser.TEMP - 326)) | (1 << (PostgreSQLParser.TEMPLATE - 326)) | (1 << (PostgreSQLParser.TEMPORARY - 326)) | (1 << (PostgreSQLParser.TEXT_P - 326)) | (1 << (PostgreSQLParser.TRANSACTION - 326)) | (1 << (PostgreSQLParser.TRIGGER - 326)) | (1 << (PostgreSQLParser.TRUNCATE - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PostgreSQLParser.TRUSTED - 390)) | (1 << (PostgreSQLParser.TYPE_P - 390)) | (1 << (PostgreSQLParser.TYPES_P - 390)) | (1 << (PostgreSQLParser.UNBOUNDED - 390)) | (1 << (PostgreSQLParser.UNCOMMITTED - 390)) | (1 << (PostgreSQLParser.UNENCRYPTED - 390)) | (1 << (PostgreSQLParser.UNKNOWN - 390)) | (1 << (PostgreSQLParser.UNLISTEN - 390)) | (1 << (PostgreSQLParser.UNLOGGED - 390)) | (1 << (PostgreSQLParser.UNTIL - 390)) | (1 << (PostgreSQLParser.UPDATE - 390)) | (1 << (PostgreSQLParser.VACUUM - 390)) | (1 << (PostgreSQLParser.VALID - 390)) | (1 << (PostgreSQLParser.VALIDATE - 390)) | (1 << (PostgreSQLParser.VALIDATOR - 390)) | (1 << (PostgreSQLParser.VARYING - 390)) | (1 << (PostgreSQLParser.VERSION_P - 390)) | (1 << (PostgreSQLParser.VIEW - 390)) | (1 << (PostgreSQLParser.VOLATILE - 390)) | (1 << (PostgreSQLParser.WHITESPACE_P - 390)) | (1 << (PostgreSQLParser.WITHOUT - 390)) | (1 << (PostgreSQLParser.WORK - 390)) | (1 << (PostgreSQLParser.WRAPPER - 390)) | (1 << (PostgreSQLParser.WRITE - 390)) | (1 << (PostgreSQLParser.XML_P - 390)) | (1 << (PostgreSQLParser.YEAR_P - 390)) | (1 << (PostgreSQLParser.YES_P - 390)) | (1 << (PostgreSQLParser.ZONE - 390)) | (1 << (PostgreSQLParser.BETWEEN - 390)) | (1 << (PostgreSQLParser.BIGINT - 390)) | (1 << (PostgreSQLParser.BIT - 390)) | (1 << (PostgreSQLParser.BOOLEAN_P - 390)) | (1 << (PostgreSQLParser.CHAR_P - 390)) | (1 << (PostgreSQLParser.CHARACTER - 390)) | (1 << (PostgreSQLParser.COALESCE - 390)) | (1 << (PostgreSQLParser.DEC - 390)) | (1 << (PostgreSQLParser.DECIMAL_P - 390)) | (1 << (PostgreSQLParser.EXISTS - 390)) | (1 << (PostgreSQLParser.EXTRACT - 390)) | (1 << (PostgreSQLParser.FLOAT_P - 390)) | (1 << (PostgreSQLParser.GREATEST - 390)) | (1 << (PostgreSQLParser.INOUT - 390)) | (1 << (PostgreSQLParser.INT_P - 390)) | (1 << (PostgreSQLParser.INTEGER - 390)) | (1 << (PostgreSQLParser.INTERVAL - 390)) | (1 << (PostgreSQLParser.LEAST - 390)) | (1 << (PostgreSQLParser.NATIONAL - 390)) | (1 << (PostgreSQLParser.NCHAR - 390)) | (1 << (PostgreSQLParser.NONE - 390)) | (1 << (PostgreSQLParser.NULLIF - 390)) | (1 << (PostgreSQLParser.NUMERIC - 390)) | (1 << (PostgreSQLParser.OVERLAY - 390)) | (1 << (PostgreSQLParser.POSITION - 390)) | (1 << (PostgreSQLParser.PRECISION - 390)) | (1 << (PostgreSQLParser.REAL - 390)) | (1 << (PostgreSQLParser.ROW - 390)) | (1 << (PostgreSQLParser.SETOF - 390)) | (1 << (PostgreSQLParser.SMALLINT - 390)) | (1 << (PostgreSQLParser.SUBSTRING - 390)) | (1 << (PostgreSQLParser.TIME - 390)) | (1 << (PostgreSQLParser.TIMESTAMP - 390)) | (1 << (PostgreSQLParser.TREAT - 390)) | (1 << (PostgreSQLParser.TRIM - 390)) | (1 << (PostgreSQLParser.VALUES - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PostgreSQLParser.VARCHAR - 454)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 454)) | (1 << (PostgreSQLParser.XMLCONCAT - 454)) | (1 << (PostgreSQLParser.XMLELEMENT - 454)) | (1 << (PostgreSQLParser.XMLEXISTS - 454)) | (1 << (PostgreSQLParser.XMLFOREST - 454)) | (1 << (PostgreSQLParser.XMLPARSE - 454)) | (1 << (PostgreSQLParser.XMLPI - 454)) | (1 << (PostgreSQLParser.XMLROOT - 454)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 454)) | (1 << (PostgreSQLParser.CALL - 454)) | (1 << (PostgreSQLParser.CURRENT_P - 454)) | (1 << (PostgreSQLParser.ATTACH - 454)) | (1 << (PostgreSQLParser.DETACH - 454)) | (1 << (PostgreSQLParser.EXPRESSION - 454)) | (1 << (PostgreSQLParser.GENERATED - 454)) | (1 << (PostgreSQLParser.LOGGED - 454)) | (1 << (PostgreSQLParser.STORED - 454)) | (1 << (PostgreSQLParser.INCLUDE - 454)) | (1 << (PostgreSQLParser.ROUTINE - 454)) | (1 << (PostgreSQLParser.TRANSFORM - 454)) | (1 << (PostgreSQLParser.IMPORT_P - 454)) | (1 << (PostgreSQLParser.POLICY - 454)) | (1 << (PostgreSQLParser.METHOD - 454)) | (1 << (PostgreSQLParser.REFERENCING - 454)) | (1 << (PostgreSQLParser.NEW - 454)) | (1 << (PostgreSQLParser.OLD - 454)) | (1 << (PostgreSQLParser.VALUE_P - 454)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 454)) | (1 << (PostgreSQLParser.PUBLICATION - 454)) | (1 << (PostgreSQLParser.OUT_P - 454)) | (1 << (PostgreSQLParser.ROUTINES - 454)) | (1 << (PostgreSQLParser.SCHEMAS - 454)) | (1 << (PostgreSQLParser.PROCEDURES - 454)) | (1 << (PostgreSQLParser.INPUT_P - 454)) | (1 << (PostgreSQLParser.SUPPORT - 454)) | (1 << (PostgreSQLParser.PARALLEL - 454)) | (1 << (PostgreSQLParser.SQL_P - 454)) | (1 << (PostgreSQLParser.DEPENDS - 454)) | (1 << (PostgreSQLParser.OVERRIDING - 454)) | (1 << (PostgreSQLParser.CONFLICT - 454)) | (1 << (PostgreSQLParser.SKIP_P - 454)) | (1 << (PostgreSQLParser.LOCKED - 454)) | (1 << (PostgreSQLParser.TIES - 454)) | (1 << (PostgreSQLParser.ROLLUP - 454)) | (1 << (PostgreSQLParser.CUBE - 454)) | (1 << (PostgreSQLParser.GROUPING - 454)) | (1 << (PostgreSQLParser.SETS - 454)) | (1 << (PostgreSQLParser.TABLESAMPLE - 454)) | (1 << (PostgreSQLParser.ORDINALITY - 454)) | (1 << (PostgreSQLParser.XMLTABLE - 454)) | (1 << (PostgreSQLParser.COLUMNS - 454)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 454)) | (1 << (PostgreSQLParser.NORMALIZED - 454)) | (1 << (PostgreSQLParser.WITHIN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PostgreSQLParser.FILTER - 518)) | (1 << (PostgreSQLParser.GROUPS - 518)) | (1 << (PostgreSQLParser.OTHERS - 518)) | (1 << (PostgreSQLParser.NFC - 518)) | (1 << (PostgreSQLParser.NFD - 518)) | (1 << (PostgreSQLParser.NFKC - 518)) | (1 << (PostgreSQLParser.NFKD - 518)) | (1 << (PostgreSQLParser.UESCAPE - 518)) | (1 << (PostgreSQLParser.VIEWS - 518)) | (1 << (PostgreSQLParser.NORMALIZE - 518)) | (1 << (PostgreSQLParser.ERROR - 518)) | (1 << (PostgreSQLParser.RETURN - 518)) | (1 << (PostgreSQLParser.FORMAT - 518)) | (1 << (PostgreSQLParser.Identifier - 518)) | (1 << (PostgreSQLParser.QuotedIdentifier - 518)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 518)) | (1 << (PostgreSQLParser.StringConstant - 518)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 518)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 518)) | (1 << (PostgreSQLParser.BinaryStringConstant - 518)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 518)) | (1 << (PostgreSQLParser.Integral - 518)) | (1 << (PostgreSQLParser.BinaryIntegral - 518)) | (1 << (PostgreSQLParser.OctalIntegral - 518)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 518)) | (1 << (PostgreSQLParser.Numeric - 518)))) != 0) or _la==PostgreSQLParser.PLSQLVARIABLENAME or _la==PostgreSQLParser.EscapeStringConstant:
                        self.state = 10013
                        self.slice_bound_()


                    pass


                self.state = 10018
                self.match(PostgreSQLParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slice_bound_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_slice_bound_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_bound_" ):
                listener.enterSlice_bound_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_bound_" ):
                listener.exitSlice_bound_(self)




    def slice_bound_(self):

        localctx = PostgreSQLParser.Slice_bound_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1322, self.RULE_slice_bound_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10021
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indirection_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Indirection_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Indirection_elContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_indirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirection" ):
                listener.enterIndirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirection" ):
                listener.exitIndirection(self)




    def indirection(self):

        localctx = PostgreSQLParser.IndirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1324, self.RULE_indirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10024 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 10023
                    self.indirection_el()

                else:
                    raise NoViableAltException(self)
                self.state = 10026 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,997,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_indirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indirection_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Indirection_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Indirection_elContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opt_indirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_indirection" ):
                listener.enterOpt_indirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_indirection" ):
                listener.exitOpt_indirection(self)




    def opt_indirection(self):

        localctx = PostgreSQLParser.Opt_indirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1326, self.RULE_opt_indirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10031
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,998,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10028
                    self.indirection_el() 
                self.state = 10033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,998,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_passing_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(PostgreSQLParser.PASSING, 0)

        def json_arguments(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_argumentsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_passing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_passing_clause" ):
                listener.enterJson_passing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_passing_clause" ):
                listener.exitJson_passing_clause(self)




    def json_passing_clause(self):

        localctx = PostgreSQLParser.Json_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1328, self.RULE_json_passing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10034
            self.match(PostgreSQLParser.PASSING)
            self.state = 10035
            self.json_arguments(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_argument(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_argumentContext,0)


        def json_arguments(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_argumentsContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_arguments" ):
                listener.enterJson_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_arguments" ):
                listener.exitJson_arguments(self)



    def json_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSQLParser.Json_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1330
        self.enterRecursionRule(localctx, 1330, self.RULE_json_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10038
            self.json_argument()
            self._ctx.stop = self._input.LT(-1)
            self.state = 10045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,999,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PostgreSQLParser.Json_argumentsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_json_arguments)
                    self.state = 10040
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 10041
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 10042
                    self.json_argument() 
                self.state = 10047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,999,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Json_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_argument" ):
                listener.enterJson_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_argument" ):
                listener.exitJson_argument(self)




    def json_argument(self):

        localctx = PostgreSQLParser.Json_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1332, self.RULE_json_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10048
            self.json_value_expr()
            self.state = 10049
            self.match(PostgreSQLParser.AS)
            self.state = 10050
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_wrapper_behaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def CONDITIONAL(self):
            return self.getToken(PostgreSQLParser.CONDITIONAL, 0)

        def UNCONDITIONAL(self):
            return self.getToken(PostgreSQLParser.UNCONDITIONAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_wrapper_behavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_wrapper_behavior" ):
                listener.enterJson_wrapper_behavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_wrapper_behavior" ):
                listener.exitJson_wrapper_behavior(self)




    def json_wrapper_behavior(self):

        localctx = PostgreSQLParser.Json_wrapper_behaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1334, self.RULE_json_wrapper_behavior)
        try:
            self.state = 10077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10052
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 10053
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10054
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 10055
                self.match(PostgreSQLParser.ARRAY)
                self.state = 10056
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10057
                self.match(PostgreSQLParser.WITH)
                self.state = 10058
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10059
                self.match(PostgreSQLParser.WITH)
                self.state = 10060
                self.match(PostgreSQLParser.ARRAY)
                self.state = 10061
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10062
                self.match(PostgreSQLParser.WITH)
                self.state = 10063
                self.match(PostgreSQLParser.CONDITIONAL)
                self.state = 10064
                self.match(PostgreSQLParser.ARRAY)
                self.state = 10065
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10066
                self.match(PostgreSQLParser.WITH)
                self.state = 10067
                self.match(PostgreSQLParser.UNCONDITIONAL)
                self.state = 10068
                self.match(PostgreSQLParser.ARRAY)
                self.state = 10069
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10070
                self.match(PostgreSQLParser.WITH)
                self.state = 10071
                self.match(PostgreSQLParser.CONDITIONAL)
                self.state = 10072
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10073
                self.match(PostgreSQLParser.WITH)
                self.state = 10074
                self.match(PostgreSQLParser.UNCONDITIONAL)
                self.state = 10075
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_behaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def json_behavior_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_behavior_typeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_behavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_behavior" ):
                listener.enterJson_behavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_behavior" ):
                listener.exitJson_behavior(self)




    def json_behavior(self):

        localctx = PostgreSQLParser.Json_behaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1336, self.RULE_json_behavior)
        try:
            self.state = 10082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10079
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 10080
                self.a_expr()
                pass
            elif token in [PostgreSQLParser.EMPTY_P, PostgreSQLParser.FALSE_P, PostgreSQLParser.NULL_P, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNKNOWN, PostgreSQLParser.ERROR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10081
                self.json_behavior_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_behavior_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def UNKNOWN(self):
            return self.getToken(PostgreSQLParser.UNKNOWN, 0)

        def EMPTY_P(self):
            return self.getToken(PostgreSQLParser.EMPTY_P, 0)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_behavior_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_behavior_type" ):
                listener.enterJson_behavior_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_behavior_type" ):
                listener.exitJson_behavior_type(self)




    def json_behavior_type(self):

        localctx = PostgreSQLParser.Json_behavior_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1338, self.RULE_json_behavior_type)
        try:
            self.state = 10094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10084
                self.match(PostgreSQLParser.ERROR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10085
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10086
                self.match(PostgreSQLParser.TRUE_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10087
                self.match(PostgreSQLParser.FALSE_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10088
                self.match(PostgreSQLParser.UNKNOWN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10089
                self.match(PostgreSQLParser.EMPTY_P)
                self.state = 10090
                self.match(PostgreSQLParser.ARRAY)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10091
                self.match(PostgreSQLParser.EMPTY_P)
                self.state = 10092
                self.match(PostgreSQLParser.OBJECT_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10093
                self.match(PostgreSQLParser.EMPTY_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_behavior_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_behavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Json_behaviorContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Json_behaviorContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ON)
            else:
                return self.getToken(PostgreSQLParser.ON, i)

        def EMPTY_P(self):
            return self.getToken(PostgreSQLParser.EMPTY_P, 0)

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_behavior_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_behavior_clause" ):
                listener.enterJson_behavior_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_behavior_clause" ):
                listener.exitJson_behavior_clause(self)




    def json_behavior_clause(self):

        localctx = PostgreSQLParser.Json_behavior_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1340, self.RULE_json_behavior_clause)
        try:
            self.state = 10111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1003,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10096
                self.json_behavior()
                self.state = 10097
                self.match(PostgreSQLParser.ON)
                self.state = 10098
                self.match(PostgreSQLParser.EMPTY_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10100
                self.json_behavior()
                self.state = 10101
                self.match(PostgreSQLParser.ON)
                self.state = 10102
                self.match(PostgreSQLParser.ERROR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10104
                self.json_behavior()
                self.state = 10105
                self.match(PostgreSQLParser.ON)
                self.state = 10106
                self.match(PostgreSQLParser.EMPTY_P)
                self.state = 10107
                self.json_behavior()
                self.state = 10108
                self.match(PostgreSQLParser.ON)
                self.state = 10109
                self.match(PostgreSQLParser.ERROR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_on_error_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_behavior(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_behaviorContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_on_error_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_on_error_clause" ):
                listener.enterJson_on_error_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_on_error_clause" ):
                listener.exitJson_on_error_clause(self)




    def json_on_error_clause(self):

        localctx = PostgreSQLParser.Json_on_error_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1342, self.RULE_json_on_error_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10113
            self.json_behavior()
            self.state = 10114
            self.match(PostgreSQLParser.ON)
            self.state = 10115
            self.match(PostgreSQLParser.ERROR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_value_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def json_format_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_format_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_value_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_value_expr" ):
                listener.enterJson_value_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_value_expr" ):
                listener.exitJson_value_expr(self)




    def json_value_expr(self):

        localctx = PostgreSQLParser.Json_value_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1344, self.RULE_json_value_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10117
            self.a_expr()
            self.state = 10119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
            if la_ == 1:
                self.state = 10118
                self.json_format_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_LA(self):
            return self.getToken(PostgreSQLParser.FORMAT_LA, 0)

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_format_clause" ):
                listener.enterJson_format_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_format_clause" ):
                listener.exitJson_format_clause(self)




    def json_format_clause(self):

        localctx = PostgreSQLParser.Json_format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1346, self.RULE_json_format_clause)
        try:
            self.state = 10127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10121
                self.match(PostgreSQLParser.FORMAT_LA)
                self.state = 10122
                self.match(PostgreSQLParser.JSON)
                self.state = 10123
                self.match(PostgreSQLParser.ENCODING)
                self.state = 10124
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10125
                self.match(PostgreSQLParser.FORMAT_LA)
                self.state = 10126
                self.match(PostgreSQLParser.JSON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_quotes_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(PostgreSQLParser.KEEP, 0)

        def QUOTES(self):
            return self.getToken(PostgreSQLParser.QUOTES, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def SCALAR(self):
            return self.getToken(PostgreSQLParser.SCALAR, 0)

        def STRING_P(self):
            return self.getToken(PostgreSQLParser.STRING_P, 0)

        def OMIT(self):
            return self.getToken(PostgreSQLParser.OMIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_quotes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_quotes_clause" ):
                listener.enterJson_quotes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_quotes_clause" ):
                listener.exitJson_quotes_clause(self)




    def json_quotes_clause(self):

        localctx = PostgreSQLParser.Json_quotes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1348, self.RULE_json_quotes_clause)
        try:
            self.state = 10143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10129
                self.match(PostgreSQLParser.KEEP)
                self.state = 10130
                self.match(PostgreSQLParser.QUOTES)
                self.state = 10131
                self.match(PostgreSQLParser.ON)
                self.state = 10132
                self.match(PostgreSQLParser.SCALAR)
                self.state = 10133
                self.match(PostgreSQLParser.STRING_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10134
                self.match(PostgreSQLParser.KEEP)
                self.state = 10135
                self.match(PostgreSQLParser.QUOTES)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10136
                self.match(PostgreSQLParser.OMIT)
                self.state = 10137
                self.match(PostgreSQLParser.QUOTES)
                self.state = 10138
                self.match(PostgreSQLParser.ON)
                self.state = 10139
                self.match(PostgreSQLParser.SCALAR)
                self.state = 10140
                self.match(PostgreSQLParser.STRING_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10141
                self.match(PostgreSQLParser.OMIT)
                self.state = 10142
                self.match(PostgreSQLParser.QUOTES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_returning_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(PostgreSQLParser.RETURNING, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def json_format_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_format_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_returning_clause" ):
                listener.enterJson_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_returning_clause" ):
                listener.exitJson_returning_clause(self)




    def json_returning_clause(self):

        localctx = PostgreSQLParser.Json_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1350, self.RULE_json_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10145
            self.match(PostgreSQLParser.RETURNING)
            self.state = 10146
            self.typename()
            self.state = 10148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FORMAT_LA:
                self.state = 10147
                self.json_format_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_predicate_type_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def SCALAR(self):
            return self.getToken(PostgreSQLParser.SCALAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_predicate_type_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_predicate_type_constraint" ):
                listener.enterJson_predicate_type_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_predicate_type_constraint" ):
                listener.exitJson_predicate_type_constraint(self)




    def json_predicate_type_constraint(self):

        localctx = PostgreSQLParser.Json_predicate_type_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1352, self.RULE_json_predicate_type_constraint)
        try:
            self.state = 10159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1008,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10150
                self.match(PostgreSQLParser.JSON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10151
                self.match(PostgreSQLParser.JSON)
                self.state = 10152
                self.match(PostgreSQLParser.VALUE_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10153
                self.match(PostgreSQLParser.JSON)
                self.state = 10154
                self.match(PostgreSQLParser.ARRAY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10155
                self.match(PostgreSQLParser.JSON)
                self.state = 10156
                self.match(PostgreSQLParser.OBJECT_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10157
                self.match(PostgreSQLParser.JSON)
                self.state = 10158
                self.match(PostgreSQLParser.SCALAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_key_uniqueness_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def KEYS(self):
            return self.getToken(PostgreSQLParser.KEYS, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_key_uniqueness_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_key_uniqueness_constraint" ):
                listener.enterJson_key_uniqueness_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_key_uniqueness_constraint" ):
                listener.exitJson_key_uniqueness_constraint(self)




    def json_key_uniqueness_constraint(self):

        localctx = PostgreSQLParser.Json_key_uniqueness_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1354, self.RULE_json_key_uniqueness_constraint)
        try:
            self.state = 10171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10161
                self.match(PostgreSQLParser.WITH)
                self.state = 10162
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 10163
                self.match(PostgreSQLParser.KEYS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10164
                self.match(PostgreSQLParser.WITH)
                self.state = 10165
                self.match(PostgreSQLParser.UNIQUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10166
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 10167
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 10168
                self.match(PostgreSQLParser.KEYS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10169
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 10170
                self.match(PostgreSQLParser.UNIQUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_name_and_value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_name_and_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_name_and_valueContext,0)


        def json_name_and_value_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_name_and_value_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_name_and_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_name_and_value_list" ):
                listener.enterJson_name_and_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_name_and_value_list" ):
                listener.exitJson_name_and_value_list(self)



    def json_name_and_value_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSQLParser.Json_name_and_value_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1356
        self.enterRecursionRule(localctx, 1356, self.RULE_json_name_and_value_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10174
            self.json_name_and_value()
            self._ctx.stop = self._input.LT(-1)
            self.state = 10181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1010,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PostgreSQLParser.Json_name_and_value_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_json_name_and_value_list)
                    self.state = 10176
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 10177
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 10178
                    self.json_name_and_value() 
                self.state = 10183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1010,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Json_name_and_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def COLON(self):
            return self.getToken(PostgreSQLParser.COLON, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_name_and_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_name_and_value" ):
                listener.enterJson_name_and_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_name_and_value" ):
                listener.exitJson_name_and_value(self)




    def json_name_and_value(self):

        localctx = PostgreSQLParser.Json_name_and_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1358, self.RULE_json_name_and_value)
        try:
            self.state = 10192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1011,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10184
                self.c_expr()
                self.state = 10185
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 10186
                self.json_value_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10188
                self.a_expr()
                self.state = 10189
                self.match(PostgreSQLParser.COLON)
                self.state = 10190
                self.json_value_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_object_constructor_null_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NULL_P)
            else:
                return self.getToken(PostgreSQLParser.NULL_P, i)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def ABSENT(self):
            return self.getToken(PostgreSQLParser.ABSENT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_object_constructor_null_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_object_constructor_null_clause" ):
                listener.enterJson_object_constructor_null_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_object_constructor_null_clause" ):
                listener.exitJson_object_constructor_null_clause(self)




    def json_object_constructor_null_clause(self):

        localctx = PostgreSQLParser.Json_object_constructor_null_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1360, self.RULE_json_object_constructor_null_clause)
        try:
            self.state = 10200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.NULL_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10194
                self.match(PostgreSQLParser.NULL_P)
                self.state = 10195
                self.match(PostgreSQLParser.ON)
                self.state = 10196
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [PostgreSQLParser.ABSENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10197
                self.match(PostgreSQLParser.ABSENT)
                self.state = 10198
                self.match(PostgreSQLParser.ON)
                self.state = 10199
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_array_constructor_null_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NULL_P)
            else:
                return self.getToken(PostgreSQLParser.NULL_P, i)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def ABSENT(self):
            return self.getToken(PostgreSQLParser.ABSENT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_array_constructor_null_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_array_constructor_null_clause" ):
                listener.enterJson_array_constructor_null_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_array_constructor_null_clause" ):
                listener.exitJson_array_constructor_null_clause(self)




    def json_array_constructor_null_clause(self):

        localctx = PostgreSQLParser.Json_array_constructor_null_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1362, self.RULE_json_array_constructor_null_clause)
        try:
            self.state = 10208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.NULL_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10202
                self.match(PostgreSQLParser.NULL_P)
                self.state = 10203
                self.match(PostgreSQLParser.ON)
                self.state = 10204
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [PostgreSQLParser.ABSENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10205
                self.match(PostgreSQLParser.ABSENT)
                self.state = 10206
                self.match(PostgreSQLParser.ON)
                self.state = 10207
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_value_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def json_value_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_expr_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_value_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_value_expr_list" ):
                listener.enterJson_value_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_value_expr_list" ):
                listener.exitJson_value_expr_list(self)



    def json_value_expr_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSQLParser.Json_value_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1364
        self.enterRecursionRule(localctx, 1364, self.RULE_json_value_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10211
            self.json_value_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 10218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1014,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PostgreSQLParser.Json_value_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_json_value_expr_list)
                    self.state = 10213
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 10214
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 10215
                    self.json_value_expr() 
                self.state = 10220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1014,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Json_aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_OBJECTAGG(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def json_name_and_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_name_and_valueContext,0)


        def json_returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_returning_clauseContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def json_object_constructor_null_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_object_constructor_null_clauseContext,0)


        def json_key_uniqueness_constraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_key_uniqueness_constraintContext,0)


        def JSON_ARRAYAGG(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0)

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def json_array_aggregate_order_by_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_array_aggregate_order_by_clauseContext,0)


        def json_array_constructor_null_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_array_constructor_null_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_aggregate_func" ):
                listener.enterJson_aggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_aggregate_func" ):
                listener.exitJson_aggregate_func(self)




    def json_aggregate_func(self):

        localctx = PostgreSQLParser.Json_aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1366, self.RULE_json_aggregate_func)
        self._la = 0 # Token type
        try:
            self.state = 10245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON_OBJECTAGG]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10221
                self.match(PostgreSQLParser.JSON_OBJECTAGG)
                self.state = 10222
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 10223
                self.json_name_and_value()
                self.state = 10225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ABSENT or _la==PostgreSQLParser.NULL_P:
                    self.state = 10224
                    self.json_object_constructor_null_clause()


                self.state = 10228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WITH or _la==PostgreSQLParser.WITHOUT:
                    self.state = 10227
                    self.json_key_uniqueness_constraint()


                self.state = 10230
                self.json_returning_clause()
                self.state = 10231
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [PostgreSQLParser.JSON_ARRAYAGG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10233
                self.match(PostgreSQLParser.JSON_ARRAYAGG)
                self.state = 10234
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 10235
                self.json_value_expr()
                self.state = 10237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ORDER:
                    self.state = 10236
                    self.json_array_aggregate_order_by_clause()


                self.state = 10240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ABSENT or _la==PostgreSQLParser.NULL_P:
                    self.state = 10239
                    self.json_array_constructor_null_clause()


                self.state = 10242
                self.json_returning_clause()
                self.state = 10243
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_array_aggregate_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def sortby_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sortby_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_array_aggregate_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_array_aggregate_order_by_clause" ):
                listener.enterJson_array_aggregate_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_array_aggregate_order_by_clause" ):
                listener.exitJson_array_aggregate_order_by_clause(self)




    def json_array_aggregate_order_by_clause(self):

        localctx = PostgreSQLParser.Json_array_aggregate_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1368, self.RULE_json_array_aggregate_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10247
            self.match(PostgreSQLParser.ORDER)
            self.state = 10248
            self.match(PostgreSQLParser.BY)
            self.state = 10249
            self.sortby_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def target_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Target_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_target_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_list_" ):
                listener.enterTarget_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_list_" ):
                listener.exitTarget_list_(self)




    def target_list_(self):

        localctx = PostgreSQLParser.Target_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1370, self.RULE_target_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10251
            self.target_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def target_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Target_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Target_elContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_target_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_list" ):
                listener.enterTarget_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_list" ):
                listener.exitTarget_list(self)




    def target_list(self):

        localctx = PostgreSQLParser.Target_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1372, self.RULE_target_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10253
            self.target_el()
            self.state = 10258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 10254
                self.match(PostgreSQLParser.COMMA)
                self.state = 10255
                self.target_el()
                self.state = 10260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_target_el

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Target_labelContext(Target_elContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.Target_elContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)
        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)

        def bareColLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.BareColLabelContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_label" ):
                listener.enterTarget_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_label" ):
                listener.exitTarget_label(self)


    class Target_starContext(Target_elContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.Target_elContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_star" ):
                listener.enterTarget_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_star" ):
                listener.exitTarget_star(self)



    def target_el(self):

        localctx = PostgreSQLParser.Target_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1374, self.RULE_target_el)
        try:
            self.state = 10269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.OPEN_PAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.PARAM, PostgreSQLParser.Operator, PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ARRAY, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.FALSE_P, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.SESSION_USER, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.BinaryStringConstant, PostgreSQLParser.HexadecimalStringConstant, PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral, PostgreSQLParser.Numeric, PostgreSQLParser.PLSQLVARIABLENAME, PostgreSQLParser.EscapeStringConstant]:
                localctx = PostgreSQLParser.Target_labelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 10261
                self.a_expr()
                self.state = 10266
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.AS]:
                    self.state = 10262
                    self.match(PostgreSQLParser.AS)
                    self.state = 10263
                    self.colLabel()
                    pass
                elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ALL, PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE, PostgreSQLParser.AND, PostgreSQLParser.ANY, PostgreSQLParser.ASC, PostgreSQLParser.ASYMMETRIC, PostgreSQLParser.BOTH, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CHECK, PostgreSQLParser.COLLATE, PostgreSQLParser.COLUMN, PostgreSQLParser.CONSTRAINT, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEFERRABLE, PostgreSQLParser.DESC, PostgreSQLParser.DISTINCT, PostgreSQLParser.DO, PostgreSQLParser.ELSE, PostgreSQLParser.FALSE_P, PostgreSQLParser.FOREIGN, PostgreSQLParser.IN_P, PostgreSQLParser.INITIALLY, PostgreSQLParser.LATERAL_P, PostgreSQLParser.LEADING, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.ONLY, PostgreSQLParser.OR, PostgreSQLParser.PLACING, PostgreSQLParser.PRIMARY, PostgreSQLParser.REFERENCES, PostgreSQLParser.SELECT, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SOME, PostgreSQLParser.SYMMETRIC, PostgreSQLParser.TABLE, PostgreSQLParser.THEN, PostgreSQLParser.TRAILING, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.USING, PostgreSQLParser.VARIADIC, PostgreSQLParser.WHEN, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.OUTER_P, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.END_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                    self.state = 10264
                    self.bareColLabel()
                    pass
                elif token in [PostgreSQLParser.EOF, PostgreSQLParser.CLOSE_PAREN, PostgreSQLParser.COMMA, PostgreSQLParser.SEMI, PostgreSQLParser.FORMAT_LA, PostgreSQLParser.CREATE, PostgreSQLParser.EXCEPT, PostgreSQLParser.FETCH, PostgreSQLParser.FOR, PostgreSQLParser.FROM, PostgreSQLParser.GRANT, PostgreSQLParser.GROUP_P, PostgreSQLParser.HAVING, PostgreSQLParser.INTERSECT, PostgreSQLParser.INTO, PostgreSQLParser.LIMIT, PostgreSQLParser.OFFSET, PostgreSQLParser.ON, PostgreSQLParser.ORDER, PostgreSQLParser.RETURNING, PostgreSQLParser.UNION, PostgreSQLParser.WHERE, PostgreSQLParser.WINDOW, PostgreSQLParser.WITH]:
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PostgreSQLParser.STAR]:
                localctx = PostgreSQLParser.Target_starContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 10268
                self.match(PostgreSQLParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_qualified_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_name_list" ):
                listener.enterQualified_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_name_list" ):
                listener.exitQualified_name_list(self)




    def qualified_name_list(self):

        localctx = PostgreSQLParser.Qualified_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1376, self.RULE_qualified_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10271
            self.qualified_name()
            self.state = 10276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 10272
                self.match(PostgreSQLParser.COMMA)
                self.state = 10273
                self.qualified_name()
                self.state = 10278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_qualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_name" ):
                listener.enterQualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_name" ):
                listener.exitQualified_name(self)




    def qualified_name(self):

        localctx = PostgreSQLParser.Qualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1378, self.RULE_qualified_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10279
            self.colid()
            self.state = 10281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OPEN_BRACKET or _la==PostgreSQLParser.DOT:
                self.state = 10280
                self.indirection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list" ):
                listener.enterName_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list" ):
                listener.exitName_list(self)




    def name_list(self):

        localctx = PostgreSQLParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1380, self.RULE_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10283
            self.name()
            self.state = 10288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 10284
                self.match(PostgreSQLParser.COMMA)
                self.state = 10285
                self.name()
                self.state = 10290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = PostgreSQLParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1382, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10291
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_attr_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_name" ):
                listener.enterAttr_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_name" ):
                listener.exitAttr_name(self)




    def attr_name(self):

        localctx = PostgreSQLParser.Attr_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1384, self.RULE_attr_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10293
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_name" ):
                listener.enterFile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_name" ):
                listener.exitFile_name(self)




    def file_name(self):

        localctx = PostgreSQLParser.File_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1386, self.RULE_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10295
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_function_nameContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_name" ):
                listener.enterFunc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_name" ):
                listener.exitFunc_name(self)




    def func_name(self):

        localctx = PostgreSQLParser.Func_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1388, self.RULE_func_name)
        try:
            self.state = 10301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1026,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10297
                self.type_function_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10298
                self.colid()
                self.state = 10299
                self.indirection()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AexprconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def fconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.FconstContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def bconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.BconstContext,0)


        def xconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.XconstContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def func_arg_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_arg_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def sort_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clause_Context,0)


        def consttypename(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConsttypenameContext,0)


        def constinterval(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstintervalContext,0)


        def interval_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_Context,0)


        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aexprconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAexprconst" ):
                listener.enterAexprconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAexprconst" ):
                listener.exitAexprconst(self)




    def aexprconst(self):

        localctx = PostgreSQLParser.AexprconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1390, self.RULE_aexprconst)
        self._la = 0 # Token type
        try:
            self.state = 10338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1031,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10303
                self.iconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10304
                self.fconst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10305
                self.sconst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10306
                self.bconst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10307
                self.xconst()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10308
                self.func_name()
                self.state = 10318
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                    self.state = 10309
                    self.sconst()
                    pass
                elif token in [PostgreSQLParser.OPEN_PAREN]:
                    self.state = 10310
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 10311
                    self.func_arg_list()
                    self.state = 10313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.ORDER:
                        self.state = 10312
                        self.sort_clause_()


                    self.state = 10315
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 10316
                    self.sconst()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10320
                self.consttypename()
                self.state = 10321
                self.sconst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10323
                self.constinterval()
                self.state = 10333
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.StringConstant, PostgreSQLParser.UnicodeEscapeStringConstant, PostgreSQLParser.BeginDollarStringConstant, PostgreSQLParser.EscapeStringConstant]:
                    self.state = 10324
                    self.sconst()
                    self.state = 10326
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1029,self._ctx)
                    if la_ == 1:
                        self.state = 10325
                        self.interval_()


                    pass
                elif token in [PostgreSQLParser.OPEN_PAREN]:
                    self.state = 10328
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 10329
                    self.iconst()
                    self.state = 10330
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 10331
                    self.sconst()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10335
                self.match(PostgreSQLParser.TRUE_P)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10336
                self.match(PostgreSQLParser.FALSE_P)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10337
                self.match(PostgreSQLParser.NULL_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexadecimalStringConstant(self):
            return self.getToken(PostgreSQLParser.HexadecimalStringConstant, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXconst" ):
                listener.enterXconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXconst" ):
                listener.exitXconst(self)




    def xconst(self):

        localctx = PostgreSQLParser.XconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1392, self.RULE_xconst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10340
            self.match(PostgreSQLParser.HexadecimalStringConstant)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BinaryStringConstant(self):
            return self.getToken(PostgreSQLParser.BinaryStringConstant, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBconst" ):
                listener.enterBconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBconst" ):
                listener.exitBconst(self)




    def bconst(self):

        localctx = PostgreSQLParser.BconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1394, self.RULE_bconst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10342
            self.match(PostgreSQLParser.BinaryStringConstant)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Numeric(self):
            return self.getToken(PostgreSQLParser.Numeric, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFconst" ):
                listener.enterFconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFconst" ):
                listener.exitFconst(self)




    def fconst(self):

        localctx = PostgreSQLParser.FconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1396, self.RULE_fconst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10344
            self.match(PostgreSQLParser.Numeric)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integral(self):
            return self.getToken(PostgreSQLParser.Integral, 0)

        def BinaryIntegral(self):
            return self.getToken(PostgreSQLParser.BinaryIntegral, 0)

        def OctalIntegral(self):
            return self.getToken(PostgreSQLParser.OctalIntegral, 0)

        def HexadecimalIntegral(self):
            return self.getToken(PostgreSQLParser.HexadecimalIntegral, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_iconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIconst" ):
                listener.enterIconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIconst" ):
                listener.exitIconst(self)




    def iconst(self):

        localctx = PostgreSQLParser.IconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1398, self.RULE_iconst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10346
            _la = self._input.LA(1)
            if not(((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (PostgreSQLParser.Integral - 576)) | (1 << (PostgreSQLParser.BinaryIntegral - 576)) | (1 << (PostgreSQLParser.OctalIntegral - 576)) | (1 << (PostgreSQLParser.HexadecimalIntegral - 576)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anysconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.AnysconstContext,0)


        def uescape_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Uescape_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSconst" ):
                listener.enterSconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSconst" ):
                listener.exitSconst(self)




    def sconst(self):

        localctx = PostgreSQLParser.SconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1400, self.RULE_sconst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10348
            self.anysconst()
            self.state = 10350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
            if la_ == 1:
                self.state = 10349
                self.uescape_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnysconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringConstant(self):
            return self.getToken(PostgreSQLParser.StringConstant, 0)

        def UnicodeEscapeStringConstant(self):
            return self.getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0)

        def BeginDollarStringConstant(self):
            return self.getToken(PostgreSQLParser.BeginDollarStringConstant, 0)

        def EndDollarStringConstant(self):
            return self.getToken(PostgreSQLParser.EndDollarStringConstant, 0)

        def DollarText(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DollarText)
            else:
                return self.getToken(PostgreSQLParser.DollarText, i)

        def EscapeStringConstant(self):
            return self.getToken(PostgreSQLParser.EscapeStringConstant, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_anysconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnysconst" ):
                listener.enterAnysconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnysconst" ):
                listener.exitAnysconst(self)




    def anysconst(self):

        localctx = PostgreSQLParser.AnysconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1402, self.RULE_anysconst)
        self._la = 0 # Token type
        try:
            self.state = 10363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.StringConstant]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10352
                self.match(PostgreSQLParser.StringConstant)
                pass
            elif token in [PostgreSQLParser.UnicodeEscapeStringConstant]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10353
                self.match(PostgreSQLParser.UnicodeEscapeStringConstant)
                pass
            elif token in [PostgreSQLParser.BeginDollarStringConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10354
                self.match(PostgreSQLParser.BeginDollarStringConstant)
                self.state = 10358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PostgreSQLParser.DollarText:
                    self.state = 10355
                    self.match(PostgreSQLParser.DollarText)
                    self.state = 10360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 10361
                self.match(PostgreSQLParser.EndDollarStringConstant)
                pass
            elif token in [PostgreSQLParser.EscapeStringConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10362
                self.match(PostgreSQLParser.EscapeStringConstant)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uescape_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UESCAPE(self):
            return self.getToken(PostgreSQLParser.UESCAPE, 0)

        def anysconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.AnysconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_uescape_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUescape_" ):
                listener.enterUescape_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUescape_" ):
                listener.exitUescape_(self)




    def uescape_(self):

        localctx = PostgreSQLParser.Uescape_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1404, self.RULE_uescape_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10365
            self.match(PostgreSQLParser.UESCAPE)
            self.state = 10366
            self.anysconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignediconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_signediconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignediconst" ):
                listener.enterSignediconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignediconst" ):
                listener.exitSignediconst(self)




    def signediconst(self):

        localctx = PostgreSQLParser.SignediconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1406, self.RULE_signediconst)
        try:
            self.state = 10373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Integral, PostgreSQLParser.BinaryIntegral, PostgreSQLParser.OctalIntegral, PostgreSQLParser.HexadecimalIntegral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10368
                self.iconst()
                pass
            elif token in [PostgreSQLParser.PLUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10369
                self.match(PostgreSQLParser.PLUS)
                self.state = 10370
                self.iconst()
                pass
            elif token in [PostgreSQLParser.MINUS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10371
                self.match(PostgreSQLParser.MINUS)
                self.state = 10372
                self.iconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_roleid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleid" ):
                listener.enterRoleid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleid" ):
                listener.exitRoleid(self)




    def roleid(self):

        localctx = PostgreSQLParser.RoleidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1408, self.RULE_roleid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10375
            self.rolespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolespecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rolespec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRolespec" ):
                listener.enterRolespec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRolespec" ):
                listener.exitRolespec(self)




    def rolespec(self):

        localctx = PostgreSQLParser.RolespecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1410, self.RULE_rolespec)
        try:
            self.state = 10380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVER, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT, PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10377
                self.nonreservedword()
                pass
            elif token in [PostgreSQLParser.CURRENT_USER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10378
                self.match(PostgreSQLParser.CURRENT_USER)
                pass
            elif token in [PostgreSQLParser.SESSION_USER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10379
                self.match(PostgreSQLParser.SESSION_USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rolespec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.RolespecContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_role_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_list" ):
                listener.enterRole_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_list" ):
                listener.exitRole_list(self)




    def role_list(self):

        localctx = PostgreSQLParser.Role_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1412, self.RULE_role_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10382
            self.rolespec()
            self.state = 10387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 10383
                self.match(PostgreSQLParser.COMMA)
                self.state = 10384
                self.rolespec()
                self.state = 10389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def unreserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Col_name_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColid" ):
                listener.enterColid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColid" ):
                listener.exitColid(self)




    def colid(self):

        localctx = PostgreSQLParser.ColidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1414, self.RULE_colid)
        try:
            self.state = 10393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10390
                self.identifier()
                pass
            elif token in [PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.COLUMNS, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10391
                self.unreserved_keyword()
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.OUT_P, PostgreSQLParser.GROUPING, PostgreSQLParser.XMLTABLE, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10392
                self.col_name_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def unreserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unreserved_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_func_name_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_function_name" ):
                listener.enterType_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_function_name" ):
                listener.exitType_function_name(self)




    def type_function_name(self):

        localctx = PostgreSQLParser.Type_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1416, self.RULE_type_function_name)
        try:
            self.state = 10398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10395
                self.identifier()
                pass
            elif token in [PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.COLUMNS, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10396
                self.unreserved_keyword()
                pass
            elif token in [PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.TABLESAMPLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10397
                self.type_func_name_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonreservedwordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def unreserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Col_name_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_func_name_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nonreservedword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreservedword" ):
                listener.enterNonreservedword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreservedword" ):
                listener.exitNonreservedword(self)




    def nonreservedword(self):

        localctx = PostgreSQLParser.NonreservedwordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1418, self.RULE_nonreservedword)
        try:
            self.state = 10404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10400
                self.identifier()
                pass
            elif token in [PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.COLUMNS, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10401
                self.unreserved_keyword()
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.OUT_P, PostgreSQLParser.GROUPING, PostgreSQLParser.XMLTABLE, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10402
                self.col_name_keyword()
                pass
            elif token in [PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.TABLESAMPLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10403
                self.type_func_name_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def unreserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Col_name_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_func_name_keywordContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reserved_keywordContext,0)


        def EXIT(self):
            return self.getToken(PostgreSQLParser.EXIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColLabel" ):
                listener.enterColLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColLabel" ):
                listener.exitColLabel(self)




    def colLabel(self):

        localctx = PostgreSQLParser.ColLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1420, self.RULE_colLabel)
        try:
            self.state = 10412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10406
                self.identifier()
                pass
            elif token in [PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.OVER, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DAY_P, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.HOUR_P, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINUTE_P, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MONTH_P, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECOND_P, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VARYING, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WITHOUT, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YEAR_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.SETS, PostgreSQLParser.ORDINALITY, PostgreSQLParser.COLUMNS, PostgreSQLParser.NORMALIZED, PostgreSQLParser.WITHIN, PostgreSQLParser.FILTER, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10407
                self.unreserved_keyword()
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.CHAR_P, PostgreSQLParser.CHARACTER, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.PRECISION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.OUT_P, PostgreSQLParser.GROUPING, PostgreSQLParser.XMLTABLE, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10408
                self.col_name_keyword()
                pass
            elif token in [PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.ISNULL, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.NOTNULL, PostgreSQLParser.OUTER_P, PostgreSQLParser.OVERLAPS, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.TABLESAMPLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10409
                self.type_func_name_keyword()
                pass
            elif token in [PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ALL, PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE, PostgreSQLParser.AND, PostgreSQLParser.ANY, PostgreSQLParser.ARRAY, PostgreSQLParser.AS, PostgreSQLParser.ASC, PostgreSQLParser.ASYMMETRIC, PostgreSQLParser.BOTH, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CHECK, PostgreSQLParser.COLLATE, PostgreSQLParser.COLUMN, PostgreSQLParser.CONSTRAINT, PostgreSQLParser.CREATE, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEFERRABLE, PostgreSQLParser.DESC, PostgreSQLParser.DISTINCT, PostgreSQLParser.DO, PostgreSQLParser.ELSE, PostgreSQLParser.EXCEPT, PostgreSQLParser.FALSE_P, PostgreSQLParser.FETCH, PostgreSQLParser.FOR, PostgreSQLParser.FOREIGN, PostgreSQLParser.FROM, PostgreSQLParser.GRANT, PostgreSQLParser.GROUP_P, PostgreSQLParser.HAVING, PostgreSQLParser.IN_P, PostgreSQLParser.INITIALLY, PostgreSQLParser.INTERSECT, PostgreSQLParser.INTO, PostgreSQLParser.LATERAL_P, PostgreSQLParser.LEADING, PostgreSQLParser.LIMIT, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.OFFSET, PostgreSQLParser.ON, PostgreSQLParser.ONLY, PostgreSQLParser.OR, PostgreSQLParser.ORDER, PostgreSQLParser.PLACING, PostgreSQLParser.PRIMARY, PostgreSQLParser.REFERENCES, PostgreSQLParser.RETURNING, PostgreSQLParser.SELECT, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SOME, PostgreSQLParser.SYMMETRIC, PostgreSQLParser.TABLE, PostgreSQLParser.THEN, PostgreSQLParser.TO, PostgreSQLParser.TRAILING, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNION, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.USING, PostgreSQLParser.VARIADIC, PostgreSQLParser.WHEN, PostgreSQLParser.WHERE, PostgreSQLParser.WINDOW, PostgreSQLParser.WITH, PostgreSQLParser.END_P]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10410
                self.reserved_keyword()
                pass
            elif token in [PostgreSQLParser.EXIT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 10411
                self.match(PostgreSQLParser.EXIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BareColLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def bare_label_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bare_label_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bareColLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBareColLabel" ):
                listener.enterBareColLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBareColLabel" ):
                listener.exitBareColLabel(self)




    def bareColLabel(self):

        localctx = PostgreSQLParser.BareColLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1422, self.RULE_bareColLabel)
        try:
            self.state = 10416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Identifier, PostgreSQLParser.QuotedIdentifier, PostgreSQLParser.UnicodeQuotedIdentifier, PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10414
                self.identifier()
                pass
            elif token in [PostgreSQLParser.JSON, PostgreSQLParser.JSON_ARRAY, PostgreSQLParser.JSON_ARRAYAGG, PostgreSQLParser.JSON_EXISTS, PostgreSQLParser.JSON_OBJECT, PostgreSQLParser.JSON_OBJECTAGG, PostgreSQLParser.JSON_QUERY, PostgreSQLParser.JSON_SCALAR, PostgreSQLParser.JSON_SERIALIZE, PostgreSQLParser.JSON_TABLE, PostgreSQLParser.JSON_VALUE, PostgreSQLParser.MERGE_ACTION, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.ABSENT, PostgreSQLParser.ASENSITIVE, PostgreSQLParser.ATOMIC, PostgreSQLParser.BREADTH, PostgreSQLParser.COMPRESSION, PostgreSQLParser.CONDITIONAL, PostgreSQLParser.DEPTH, PostgreSQLParser.EMPTY_P, PostgreSQLParser.FINALIZE, PostgreSQLParser.INDENT, PostgreSQLParser.KEEP, PostgreSQLParser.KEYS, PostgreSQLParser.NESTED, PostgreSQLParser.OMIT, PostgreSQLParser.PARAMETER, PostgreSQLParser.PATH, PostgreSQLParser.PLAN, PostgreSQLParser.QUOTES, PostgreSQLParser.SCALAR, PostgreSQLParser.SOURCE, PostgreSQLParser.STRING_P, PostgreSQLParser.TARGET, PostgreSQLParser.UNCONDITIONAL, PostgreSQLParser.PERIOD, PostgreSQLParser.ALL, PostgreSQLParser.ANALYSE, PostgreSQLParser.ANALYZE, PostgreSQLParser.AND, PostgreSQLParser.ANY, PostgreSQLParser.ASC, PostgreSQLParser.ASYMMETRIC, PostgreSQLParser.BOTH, PostgreSQLParser.CASE, PostgreSQLParser.CAST, PostgreSQLParser.CHECK, PostgreSQLParser.COLLATE, PostgreSQLParser.COLUMN, PostgreSQLParser.CONSTRAINT, PostgreSQLParser.CURRENT_CATALOG, PostgreSQLParser.CURRENT_DATE, PostgreSQLParser.CURRENT_ROLE, PostgreSQLParser.CURRENT_TIME, PostgreSQLParser.CURRENT_TIMESTAMP, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEFERRABLE, PostgreSQLParser.DESC, PostgreSQLParser.DISTINCT, PostgreSQLParser.DO, PostgreSQLParser.ELSE, PostgreSQLParser.FALSE_P, PostgreSQLParser.FOREIGN, PostgreSQLParser.IN_P, PostgreSQLParser.INITIALLY, PostgreSQLParser.LATERAL_P, PostgreSQLParser.LEADING, PostgreSQLParser.LOCALTIME, PostgreSQLParser.LOCALTIMESTAMP, PostgreSQLParser.NOT, PostgreSQLParser.NULL_P, PostgreSQLParser.ONLY, PostgreSQLParser.OR, PostgreSQLParser.PLACING, PostgreSQLParser.PRIMARY, PostgreSQLParser.REFERENCES, PostgreSQLParser.SELECT, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SOME, PostgreSQLParser.SYMMETRIC, PostgreSQLParser.TABLE, PostgreSQLParser.THEN, PostgreSQLParser.TRAILING, PostgreSQLParser.TRUE_P, PostgreSQLParser.UNIQUE, PostgreSQLParser.USER, PostgreSQLParser.USING, PostgreSQLParser.VARIADIC, PostgreSQLParser.WHEN, PostgreSQLParser.AUTHORIZATION, PostgreSQLParser.BINARY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCURRENTLY, PostgreSQLParser.CROSS, PostgreSQLParser.CURRENT_SCHEMA, PostgreSQLParser.FREEZE, PostgreSQLParser.FULL, PostgreSQLParser.ILIKE, PostgreSQLParser.INNER_P, PostgreSQLParser.IS, PostgreSQLParser.JOIN, PostgreSQLParser.LEFT, PostgreSQLParser.LIKE, PostgreSQLParser.NATURAL, PostgreSQLParser.OUTER_P, PostgreSQLParser.RIGHT, PostgreSQLParser.SIMILAR, PostgreSQLParser.VERBOSE, PostgreSQLParser.ABORT_P, PostgreSQLParser.ABSOLUTE_P, PostgreSQLParser.ACCESS, PostgreSQLParser.ACTION, PostgreSQLParser.ADD_P, PostgreSQLParser.ADMIN, PostgreSQLParser.AFTER, PostgreSQLParser.AGGREGATE, PostgreSQLParser.ALSO, PostgreSQLParser.ALTER, PostgreSQLParser.ALWAYS, PostgreSQLParser.ASSERTION, PostgreSQLParser.ASSIGNMENT, PostgreSQLParser.AT, PostgreSQLParser.ATTRIBUTE, PostgreSQLParser.BACKWARD, PostgreSQLParser.BEFORE, PostgreSQLParser.BEGIN_P, PostgreSQLParser.BY, PostgreSQLParser.CACHE, PostgreSQLParser.CALLED, PostgreSQLParser.CASCADE, PostgreSQLParser.CASCADED, PostgreSQLParser.CATALOG, PostgreSQLParser.CHAIN, PostgreSQLParser.CHARACTERISTICS, PostgreSQLParser.CHECKPOINT, PostgreSQLParser.CLASS, PostgreSQLParser.CLOSE, PostgreSQLParser.CLUSTER, PostgreSQLParser.COMMENT, PostgreSQLParser.COMMENTS, PostgreSQLParser.COMMIT, PostgreSQLParser.COMMITTED, PostgreSQLParser.CONFIGURATION, PostgreSQLParser.CONNECTION, PostgreSQLParser.CONSTRAINTS, PostgreSQLParser.CONTENT_P, PostgreSQLParser.CONTINUE_P, PostgreSQLParser.CONVERSION_P, PostgreSQLParser.COPY, PostgreSQLParser.COST, PostgreSQLParser.CSV, PostgreSQLParser.CURSOR, PostgreSQLParser.CYCLE, PostgreSQLParser.DATA_P, PostgreSQLParser.DATABASE, PostgreSQLParser.DEALLOCATE, PostgreSQLParser.DECLARE, PostgreSQLParser.DEFAULTS, PostgreSQLParser.DEFERRED, PostgreSQLParser.DEFINER, PostgreSQLParser.DELETE_P, PostgreSQLParser.DELIMITER, PostgreSQLParser.DELIMITERS, PostgreSQLParser.DICTIONARY, PostgreSQLParser.DISABLE_P, PostgreSQLParser.DISCARD, PostgreSQLParser.DOCUMENT_P, PostgreSQLParser.DOMAIN_P, PostgreSQLParser.DOUBLE_P, PostgreSQLParser.DROP, PostgreSQLParser.EACH, PostgreSQLParser.ENABLE_P, PostgreSQLParser.ENCODING, PostgreSQLParser.ENCRYPTED, PostgreSQLParser.ENUM_P, PostgreSQLParser.ESCAPE, PostgreSQLParser.EVENT, PostgreSQLParser.EXCLUDE, PostgreSQLParser.EXCLUDING, PostgreSQLParser.EXCLUSIVE, PostgreSQLParser.EXECUTE, PostgreSQLParser.EXPLAIN, PostgreSQLParser.EXTENSION, PostgreSQLParser.EXTERNAL, PostgreSQLParser.FAMILY, PostgreSQLParser.FIRST_P, PostgreSQLParser.FOLLOWING, PostgreSQLParser.FORCE, PostgreSQLParser.FORWARD, PostgreSQLParser.FUNCTION, PostgreSQLParser.FUNCTIONS, PostgreSQLParser.GLOBAL, PostgreSQLParser.GRANTED, PostgreSQLParser.HANDLER, PostgreSQLParser.HEADER_P, PostgreSQLParser.HOLD, PostgreSQLParser.IDENTITY_P, PostgreSQLParser.IF_P, PostgreSQLParser.IMMEDIATE, PostgreSQLParser.IMMUTABLE, PostgreSQLParser.IMPLICIT_P, PostgreSQLParser.INCLUDING, PostgreSQLParser.INCREMENT, PostgreSQLParser.INDEX, PostgreSQLParser.INDEXES, PostgreSQLParser.INHERIT, PostgreSQLParser.INHERITS, PostgreSQLParser.INLINE_P, PostgreSQLParser.INSENSITIVE, PostgreSQLParser.INSERT, PostgreSQLParser.INSTEAD, PostgreSQLParser.INVOKER, PostgreSQLParser.ISOLATION, PostgreSQLParser.KEY, PostgreSQLParser.LABEL, PostgreSQLParser.LANGUAGE, PostgreSQLParser.LARGE_P, PostgreSQLParser.LAST_P, PostgreSQLParser.LEAKPROOF, PostgreSQLParser.LEVEL, PostgreSQLParser.LISTEN, PostgreSQLParser.LOAD, PostgreSQLParser.LOCAL, PostgreSQLParser.LOCATION, PostgreSQLParser.LOCK_P, PostgreSQLParser.MAPPING, PostgreSQLParser.MATCH, PostgreSQLParser.MATCHED, PostgreSQLParser.MATERIALIZED, PostgreSQLParser.MAXVALUE, PostgreSQLParser.MERGE, PostgreSQLParser.MINVALUE, PostgreSQLParser.MODE, PostgreSQLParser.MOVE, PostgreSQLParser.NAME_P, PostgreSQLParser.NAMES, PostgreSQLParser.NEXT, PostgreSQLParser.NO, PostgreSQLParser.NOTHING, PostgreSQLParser.NOTIFY, PostgreSQLParser.NOWAIT, PostgreSQLParser.NULLS_P, PostgreSQLParser.OBJECT_P, PostgreSQLParser.OF, PostgreSQLParser.OFF, PostgreSQLParser.OIDS, PostgreSQLParser.OPERATOR, PostgreSQLParser.OPTION, PostgreSQLParser.OPTIONS, PostgreSQLParser.OWNED, PostgreSQLParser.OWNER, PostgreSQLParser.PARSER, PostgreSQLParser.PARTIAL, PostgreSQLParser.PARTITION, PostgreSQLParser.PASSING, PostgreSQLParser.PASSWORD, PostgreSQLParser.PLANS, PostgreSQLParser.PRECEDING, PostgreSQLParser.PREPARE, PostgreSQLParser.PREPARED, PostgreSQLParser.PRESERVE, PostgreSQLParser.PRIOR, PostgreSQLParser.PRIVILEGES, PostgreSQLParser.PROCEDURAL, PostgreSQLParser.PROCEDURE, PostgreSQLParser.PROGRAM, PostgreSQLParser.QUOTE, PostgreSQLParser.RANGE, PostgreSQLParser.READ, PostgreSQLParser.REASSIGN, PostgreSQLParser.RECURSIVE, PostgreSQLParser.REF, PostgreSQLParser.REFRESH, PostgreSQLParser.REINDEX, PostgreSQLParser.RELATIVE_P, PostgreSQLParser.RELEASE, PostgreSQLParser.RENAME, PostgreSQLParser.REPEATABLE, PostgreSQLParser.REPLACE, PostgreSQLParser.REPLICA, PostgreSQLParser.RESET, PostgreSQLParser.RESTART, PostgreSQLParser.RESTRICT, PostgreSQLParser.RETURNS, PostgreSQLParser.REVOKE, PostgreSQLParser.ROLE, PostgreSQLParser.ROLLBACK, PostgreSQLParser.ROWS, PostgreSQLParser.RULE, PostgreSQLParser.SAVEPOINT, PostgreSQLParser.SCHEMA, PostgreSQLParser.SCROLL, PostgreSQLParser.SEARCH, PostgreSQLParser.SECURITY, PostgreSQLParser.SEQUENCE, PostgreSQLParser.SEQUENCES, PostgreSQLParser.SERIALIZABLE, PostgreSQLParser.SERVER, PostgreSQLParser.SESSION, PostgreSQLParser.SET, PostgreSQLParser.SHARE, PostgreSQLParser.SHOW, PostgreSQLParser.SIMPLE, PostgreSQLParser.SNAPSHOT, PostgreSQLParser.STABLE, PostgreSQLParser.STANDALONE_P, PostgreSQLParser.START, PostgreSQLParser.STATEMENT, PostgreSQLParser.STATISTICS, PostgreSQLParser.STDIN, PostgreSQLParser.STDOUT, PostgreSQLParser.STORAGE, PostgreSQLParser.STRICT_P, PostgreSQLParser.STRIP_P, PostgreSQLParser.SYSID, PostgreSQLParser.SYSTEM_P, PostgreSQLParser.TABLES, PostgreSQLParser.TABLESPACE, PostgreSQLParser.TEMP, PostgreSQLParser.TEMPLATE, PostgreSQLParser.TEMPORARY, PostgreSQLParser.TEXT_P, PostgreSQLParser.TRANSACTION, PostgreSQLParser.TRIGGER, PostgreSQLParser.TRUNCATE, PostgreSQLParser.TRUSTED, PostgreSQLParser.TYPE_P, PostgreSQLParser.TYPES_P, PostgreSQLParser.UNBOUNDED, PostgreSQLParser.UNCOMMITTED, PostgreSQLParser.UNENCRYPTED, PostgreSQLParser.UNKNOWN, PostgreSQLParser.UNLISTEN, PostgreSQLParser.UNLOGGED, PostgreSQLParser.UNTIL, PostgreSQLParser.UPDATE, PostgreSQLParser.VACUUM, PostgreSQLParser.VALID, PostgreSQLParser.VALIDATE, PostgreSQLParser.VALIDATOR, PostgreSQLParser.VERSION_P, PostgreSQLParser.VIEW, PostgreSQLParser.VOLATILE, PostgreSQLParser.WHITESPACE_P, PostgreSQLParser.WORK, PostgreSQLParser.WRAPPER, PostgreSQLParser.WRITE, PostgreSQLParser.XML_P, PostgreSQLParser.YES_P, PostgreSQLParser.ZONE, PostgreSQLParser.BETWEEN, PostgreSQLParser.BIGINT, PostgreSQLParser.BIT, PostgreSQLParser.BOOLEAN_P, PostgreSQLParser.COALESCE, PostgreSQLParser.DEC, PostgreSQLParser.DECIMAL_P, PostgreSQLParser.EXISTS, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOAT_P, PostgreSQLParser.GREATEST, PostgreSQLParser.INOUT, PostgreSQLParser.INT_P, PostgreSQLParser.INTEGER, PostgreSQLParser.INTERVAL, PostgreSQLParser.LEAST, PostgreSQLParser.NATIONAL, PostgreSQLParser.NCHAR, PostgreSQLParser.NONE, PostgreSQLParser.NULLIF, PostgreSQLParser.NUMERIC, PostgreSQLParser.OVERLAY, PostgreSQLParser.POSITION, PostgreSQLParser.REAL, PostgreSQLParser.ROW, PostgreSQLParser.SETOF, PostgreSQLParser.SMALLINT, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TIME, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TREAT, PostgreSQLParser.TRIM, PostgreSQLParser.VALUES, PostgreSQLParser.VARCHAR, PostgreSQLParser.XMLATTRIBUTES, PostgreSQLParser.XMLCONCAT, PostgreSQLParser.XMLELEMENT, PostgreSQLParser.XMLEXISTS, PostgreSQLParser.XMLFOREST, PostgreSQLParser.XMLPARSE, PostgreSQLParser.XMLPI, PostgreSQLParser.XMLROOT, PostgreSQLParser.XMLSERIALIZE, PostgreSQLParser.CALL, PostgreSQLParser.CURRENT_P, PostgreSQLParser.ATTACH, PostgreSQLParser.DETACH, PostgreSQLParser.EXPRESSION, PostgreSQLParser.GENERATED, PostgreSQLParser.LOGGED, PostgreSQLParser.STORED, PostgreSQLParser.INCLUDE, PostgreSQLParser.ROUTINE, PostgreSQLParser.TRANSFORM, PostgreSQLParser.IMPORT_P, PostgreSQLParser.POLICY, PostgreSQLParser.METHOD, PostgreSQLParser.REFERENCING, PostgreSQLParser.NEW, PostgreSQLParser.OLD, PostgreSQLParser.VALUE_P, PostgreSQLParser.SUBSCRIPTION, PostgreSQLParser.PUBLICATION, PostgreSQLParser.OUT_P, PostgreSQLParser.END_P, PostgreSQLParser.ROUTINES, PostgreSQLParser.SCHEMAS, PostgreSQLParser.PROCEDURES, PostgreSQLParser.INPUT_P, PostgreSQLParser.SUPPORT, PostgreSQLParser.PARALLEL, PostgreSQLParser.SQL_P, PostgreSQLParser.DEPENDS, PostgreSQLParser.OVERRIDING, PostgreSQLParser.CONFLICT, PostgreSQLParser.SKIP_P, PostgreSQLParser.LOCKED, PostgreSQLParser.TIES, PostgreSQLParser.ROLLUP, PostgreSQLParser.CUBE, PostgreSQLParser.GROUPING, PostgreSQLParser.SETS, PostgreSQLParser.TABLESAMPLE, PostgreSQLParser.ORDINALITY, PostgreSQLParser.XMLTABLE, PostgreSQLParser.COLUMNS, PostgreSQLParser.XMLNAMESPACES, PostgreSQLParser.NORMALIZED, PostgreSQLParser.GROUPS, PostgreSQLParser.OTHERS, PostgreSQLParser.NFC, PostgreSQLParser.NFD, PostgreSQLParser.NFKC, PostgreSQLParser.NFKD, PostgreSQLParser.UESCAPE, PostgreSQLParser.VIEWS, PostgreSQLParser.NORMALIZE, PostgreSQLParser.ERROR, PostgreSQLParser.RETURN, PostgreSQLParser.FORMAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10415
                self.bare_label_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unreserved_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_P(self):
            return self.getToken(PostgreSQLParser.ABORT_P, 0)

        def ABSENT(self):
            return self.getToken(PostgreSQLParser.ABSENT, 0)

        def ABSOLUTE_P(self):
            return self.getToken(PostgreSQLParser.ABSOLUTE_P, 0)

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def ACTION(self):
            return self.getToken(PostgreSQLParser.ACTION, 0)

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def ALSO(self):
            return self.getToken(PostgreSQLParser.ALSO, 0)

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def ASENSITIVE(self):
            return self.getToken(PostgreSQLParser.ASENSITIVE, 0)

        def ASSERTION(self):
            return self.getToken(PostgreSQLParser.ASSERTION, 0)

        def ASSIGNMENT(self):
            return self.getToken(PostgreSQLParser.ASSIGNMENT, 0)

        def AT(self):
            return self.getToken(PostgreSQLParser.AT, 0)

        def ATOMIC(self):
            return self.getToken(PostgreSQLParser.ATOMIC, 0)

        def ATTACH(self):
            return self.getToken(PostgreSQLParser.ATTACH, 0)

        def ATTRIBUTE(self):
            return self.getToken(PostgreSQLParser.ATTRIBUTE, 0)

        def BACKWARD(self):
            return self.getToken(PostgreSQLParser.BACKWARD, 0)

        def BEFORE(self):
            return self.getToken(PostgreSQLParser.BEFORE, 0)

        def BEGIN_P(self):
            return self.getToken(PostgreSQLParser.BEGIN_P, 0)

        def BREADTH(self):
            return self.getToken(PostgreSQLParser.BREADTH, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def CACHE(self):
            return self.getToken(PostgreSQLParser.CACHE, 0)

        def CALL(self):
            return self.getToken(PostgreSQLParser.CALL, 0)

        def CALLED(self):
            return self.getToken(PostgreSQLParser.CALLED, 0)

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def CASCADED(self):
            return self.getToken(PostgreSQLParser.CASCADED, 0)

        def CATALOG(self):
            return self.getToken(PostgreSQLParser.CATALOG, 0)

        def CHAIN(self):
            return self.getToken(PostgreSQLParser.CHAIN, 0)

        def CHARACTERISTICS(self):
            return self.getToken(PostgreSQLParser.CHARACTERISTICS, 0)

        def CHECKPOINT(self):
            return self.getToken(PostgreSQLParser.CHECKPOINT, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(PostgreSQLParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(PostgreSQLParser.CLUSTER, 0)

        def COLUMNS(self):
            return self.getToken(PostgreSQLParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(PostgreSQLParser.COMMENT, 0)

        def COMMENTS(self):
            return self.getToken(PostgreSQLParser.COMMENTS, 0)

        def COMMIT(self):
            return self.getToken(PostgreSQLParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(PostgreSQLParser.COMMITTED, 0)

        def COMPRESSION(self):
            return self.getToken(PostgreSQLParser.COMPRESSION, 0)

        def CONDITIONAL(self):
            return self.getToken(PostgreSQLParser.CONDITIONAL, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def CONFLICT(self):
            return self.getToken(PostgreSQLParser.CONFLICT, 0)

        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def CONSTRAINTS(self):
            return self.getToken(PostgreSQLParser.CONSTRAINTS, 0)

        def CONTENT_P(self):
            return self.getToken(PostgreSQLParser.CONTENT_P, 0)

        def CONTINUE_P(self):
            return self.getToken(PostgreSQLParser.CONTINUE_P, 0)

        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def COPY(self):
            return self.getToken(PostgreSQLParser.COPY, 0)

        def COST(self):
            return self.getToken(PostgreSQLParser.COST, 0)

        def CSV(self):
            return self.getToken(PostgreSQLParser.CSV, 0)

        def CUBE(self):
            return self.getToken(PostgreSQLParser.CUBE, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def CURSOR(self):
            return self.getToken(PostgreSQLParser.CURSOR, 0)

        def CYCLE(self):
            return self.getToken(PostgreSQLParser.CYCLE, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def DAY_P(self):
            return self.getToken(PostgreSQLParser.DAY_P, 0)

        def DEALLOCATE(self):
            return self.getToken(PostgreSQLParser.DEALLOCATE, 0)

        def DECLARE(self):
            return self.getToken(PostgreSQLParser.DECLARE, 0)

        def DEFAULTS(self):
            return self.getToken(PostgreSQLParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(PostgreSQLParser.DEFINER, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def DELIMITER(self):
            return self.getToken(PostgreSQLParser.DELIMITER, 0)

        def DELIMITERS(self):
            return self.getToken(PostgreSQLParser.DELIMITERS, 0)

        def DEPENDS(self):
            return self.getToken(PostgreSQLParser.DEPENDS, 0)

        def DEPTH(self):
            return self.getToken(PostgreSQLParser.DEPTH, 0)

        def DETACH(self):
            return self.getToken(PostgreSQLParser.DETACH, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def DISCARD(self):
            return self.getToken(PostgreSQLParser.DISCARD, 0)

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def DOUBLE_P(self):
            return self.getToken(PostgreSQLParser.DOUBLE_P, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def EACH(self):
            return self.getToken(PostgreSQLParser.EACH, 0)

        def EMPTY_P(self):
            return self.getToken(PostgreSQLParser.EMPTY_P, 0)

        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def ENCRYPTED(self):
            return self.getToken(PostgreSQLParser.ENCRYPTED, 0)

        def ENUM_P(self):
            return self.getToken(PostgreSQLParser.ENUM_P, 0)

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def EXCLUDE(self):
            return self.getToken(PostgreSQLParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(PostgreSQLParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(PostgreSQLParser.EXCLUSIVE, 0)

        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def EXPLAIN(self):
            return self.getToken(PostgreSQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(PostgreSQLParser.EXPRESSION, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def EXTERNAL(self):
            return self.getToken(PostgreSQLParser.EXTERNAL, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def FILTER(self):
            return self.getToken(PostgreSQLParser.FILTER, 0)

        def FINALIZE(self):
            return self.getToken(PostgreSQLParser.FINALIZE, 0)

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def FOLLOWING(self):
            return self.getToken(PostgreSQLParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def FORMAT(self):
            return self.getToken(PostgreSQLParser.FORMAT, 0)

        def FORWARD(self):
            return self.getToken(PostgreSQLParser.FORWARD, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(PostgreSQLParser.FUNCTIONS, 0)

        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def GLOBAL(self):
            return self.getToken(PostgreSQLParser.GLOBAL, 0)

        def GRANTED(self):
            return self.getToken(PostgreSQLParser.GRANTED, 0)

        def GROUPS(self):
            return self.getToken(PostgreSQLParser.GROUPS, 0)

        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def HEADER_P(self):
            return self.getToken(PostgreSQLParser.HEADER_P, 0)

        def HOLD(self):
            return self.getToken(PostgreSQLParser.HOLD, 0)

        def HOUR_P(self):
            return self.getToken(PostgreSQLParser.HOUR_P, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def IMMUTABLE(self):
            return self.getToken(PostgreSQLParser.IMMUTABLE, 0)

        def IMPLICIT_P(self):
            return self.getToken(PostgreSQLParser.IMPLICIT_P, 0)

        def IMPORT_P(self):
            return self.getToken(PostgreSQLParser.IMPORT_P, 0)

        def INCLUDE(self):
            return self.getToken(PostgreSQLParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(PostgreSQLParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(PostgreSQLParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(PostgreSQLParser.INDENT, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(PostgreSQLParser.INDEXES, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def INHERITS(self):
            return self.getToken(PostgreSQLParser.INHERITS, 0)

        def INLINE_P(self):
            return self.getToken(PostgreSQLParser.INLINE_P, 0)

        def INPUT_P(self):
            return self.getToken(PostgreSQLParser.INPUT_P, 0)

        def INSENSITIVE(self):
            return self.getToken(PostgreSQLParser.INSENSITIVE, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(PostgreSQLParser.INSTEAD, 0)

        def INVOKER(self):
            return self.getToken(PostgreSQLParser.INVOKER, 0)

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(PostgreSQLParser.KEEP, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def KEYS(self):
            return self.getToken(PostgreSQLParser.KEYS, 0)

        def LABEL(self):
            return self.getToken(PostgreSQLParser.LABEL, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def LAST_P(self):
            return self.getToken(PostgreSQLParser.LAST_P, 0)

        def LEAKPROOF(self):
            return self.getToken(PostgreSQLParser.LEAKPROOF, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def LISTEN(self):
            return self.getToken(PostgreSQLParser.LISTEN, 0)

        def LOAD(self):
            return self.getToken(PostgreSQLParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(PostgreSQLParser.LOCATION, 0)

        def LOCK_P(self):
            return self.getToken(PostgreSQLParser.LOCK_P, 0)

        def LOCKED(self):
            return self.getToken(PostgreSQLParser.LOCKED, 0)

        def LOGGED(self):
            return self.getToken(PostgreSQLParser.LOGGED, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def MATCH(self):
            return self.getToken(PostgreSQLParser.MATCH, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def MAXVALUE(self):
            return self.getToken(PostgreSQLParser.MAXVALUE, 0)

        def MERGE(self):
            return self.getToken(PostgreSQLParser.MERGE, 0)

        def METHOD(self):
            return self.getToken(PostgreSQLParser.METHOD, 0)

        def MINUTE_P(self):
            return self.getToken(PostgreSQLParser.MINUTE_P, 0)

        def MINVALUE(self):
            return self.getToken(PostgreSQLParser.MINVALUE, 0)

        def MODE(self):
            return self.getToken(PostgreSQLParser.MODE, 0)

        def MONTH_P(self):
            return self.getToken(PostgreSQLParser.MONTH_P, 0)

        def MOVE(self):
            return self.getToken(PostgreSQLParser.MOVE, 0)

        def NAME_P(self):
            return self.getToken(PostgreSQLParser.NAME_P, 0)

        def NAMES(self):
            return self.getToken(PostgreSQLParser.NAMES, 0)

        def NESTED(self):
            return self.getToken(PostgreSQLParser.NESTED, 0)

        def NEW(self):
            return self.getToken(PostgreSQLParser.NEW, 0)

        def NEXT(self):
            return self.getToken(PostgreSQLParser.NEXT, 0)

        def NFC(self):
            return self.getToken(PostgreSQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(PostgreSQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(PostgreSQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(PostgreSQLParser.NFKD, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def NORMALIZED(self):
            return self.getToken(PostgreSQLParser.NORMALIZED, 0)

        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def NOTIFY(self):
            return self.getToken(PostgreSQLParser.NOTIFY, 0)

        def NOWAIT(self):
            return self.getToken(PostgreSQLParser.NOWAIT, 0)

        def NULLS_P(self):
            return self.getToken(PostgreSQLParser.NULLS_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def OFF(self):
            return self.getToken(PostgreSQLParser.OFF, 0)

        def OIDS(self):
            return self.getToken(PostgreSQLParser.OIDS, 0)

        def OLD(self):
            return self.getToken(PostgreSQLParser.OLD, 0)

        def OMIT(self):
            return self.getToken(PostgreSQLParser.OMIT, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def ORDINALITY(self):
            return self.getToken(PostgreSQLParser.ORDINALITY, 0)

        def OTHERS(self):
            return self.getToken(PostgreSQLParser.OTHERS, 0)

        def OVER(self):
            return self.getToken(PostgreSQLParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(PostgreSQLParser.OVERRIDING, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def PARALLEL(self):
            return self.getToken(PostgreSQLParser.PARALLEL, 0)

        def PARAMETER(self):
            return self.getToken(PostgreSQLParser.PARAMETER, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(PostgreSQLParser.PARTIAL, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(PostgreSQLParser.PASSING, 0)

        def PASSWORD(self):
            return self.getToken(PostgreSQLParser.PASSWORD, 0)

        def PATH(self):
            return self.getToken(PostgreSQLParser.PATH, 0)

        def PERIOD(self):
            return self.getToken(PostgreSQLParser.PERIOD, 0)

        def PLAN(self):
            return self.getToken(PostgreSQLParser.PLAN, 0)

        def PLANS(self):
            return self.getToken(PostgreSQLParser.PLANS, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def PRECEDING(self):
            return self.getToken(PostgreSQLParser.PRECEDING, 0)

        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def PREPARED(self):
            return self.getToken(PostgreSQLParser.PREPARED, 0)

        def PRESERVE(self):
            return self.getToken(PostgreSQLParser.PRESERVE, 0)

        def PRIOR(self):
            return self.getToken(PostgreSQLParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(PostgreSQLParser.PRIVILEGES, 0)

        def PROCEDURAL(self):
            return self.getToken(PostgreSQLParser.PROCEDURAL, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(PostgreSQLParser.PROCEDURES, 0)

        def PROGRAM(self):
            return self.getToken(PostgreSQLParser.PROGRAM, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def QUOTE(self):
            return self.getToken(PostgreSQLParser.QUOTE, 0)

        def QUOTES(self):
            return self.getToken(PostgreSQLParser.QUOTES, 0)

        def RANGE(self):
            return self.getToken(PostgreSQLParser.RANGE, 0)

        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def REASSIGN(self):
            return self.getToken(PostgreSQLParser.REASSIGN, 0)

        def RECURSIVE(self):
            return self.getToken(PostgreSQLParser.RECURSIVE, 0)

        def REF(self):
            return self.getToken(PostgreSQLParser.REF, 0)

        def REFERENCING(self):
            return self.getToken(PostgreSQLParser.REFERENCING, 0)

        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def REINDEX(self):
            return self.getToken(PostgreSQLParser.REINDEX, 0)

        def RELATIVE_P(self):
            return self.getToken(PostgreSQLParser.RELATIVE_P, 0)

        def RELEASE(self):
            return self.getToken(PostgreSQLParser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(PostgreSQLParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(PostgreSQLParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(PostgreSQLParser.REPLICA, 0)

        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def RETURN(self):
            return self.getToken(PostgreSQLParser.RETURN, 0)

        def RETURNS(self):
            return self.getToken(PostgreSQLParser.RETURNS, 0)

        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def ROLLBACK(self):
            return self.getToken(PostgreSQLParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(PostgreSQLParser.ROLLUP, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def ROUTINES(self):
            return self.getToken(PostgreSQLParser.ROUTINES, 0)

        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def SAVEPOINT(self):
            return self.getToken(PostgreSQLParser.SAVEPOINT, 0)

        def SCALAR(self):
            return self.getToken(PostgreSQLParser.SCALAR, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(PostgreSQLParser.SCHEMAS, 0)

        def SCROLL(self):
            return self.getToken(PostgreSQLParser.SCROLL, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def SECOND_P(self):
            return self.getToken(PostgreSQLParser.SECOND_P, 0)

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def SERIALIZABLE(self):
            return self.getToken(PostgreSQLParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def SETS(self):
            return self.getToken(PostgreSQLParser.SETS, 0)

        def SHARE(self):
            return self.getToken(PostgreSQLParser.SHARE, 0)

        def SHOW(self):
            return self.getToken(PostgreSQLParser.SHOW, 0)

        def SIMPLE(self):
            return self.getToken(PostgreSQLParser.SIMPLE, 0)

        def SKIP_P(self):
            return self.getToken(PostgreSQLParser.SKIP_P, 0)

        def SNAPSHOT(self):
            return self.getToken(PostgreSQLParser.SNAPSHOT, 0)

        def SOURCE(self):
            return self.getToken(PostgreSQLParser.SOURCE, 0)

        def SQL_P(self):
            return self.getToken(PostgreSQLParser.SQL_P, 0)

        def STABLE(self):
            return self.getToken(PostgreSQLParser.STABLE, 0)

        def STANDALONE_P(self):
            return self.getToken(PostgreSQLParser.STANDALONE_P, 0)

        def START(self):
            return self.getToken(PostgreSQLParser.START, 0)

        def STATEMENT(self):
            return self.getToken(PostgreSQLParser.STATEMENT, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def STDIN(self):
            return self.getToken(PostgreSQLParser.STDIN, 0)

        def STDOUT(self):
            return self.getToken(PostgreSQLParser.STDOUT, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def STORED(self):
            return self.getToken(PostgreSQLParser.STORED, 0)

        def STRICT_P(self):
            return self.getToken(PostgreSQLParser.STRICT_P, 0)

        def STRING_P(self):
            return self.getToken(PostgreSQLParser.STRING_P, 0)

        def STRIP_P(self):
            return self.getToken(PostgreSQLParser.STRIP_P, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def SUPPORT(self):
            return self.getToken(PostgreSQLParser.SUPPORT, 0)

        def SYSID(self):
            return self.getToken(PostgreSQLParser.SYSID, 0)

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def TARGET(self):
            return self.getToken(PostgreSQLParser.TARGET, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def TIES(self):
            return self.getToken(PostgreSQLParser.TIES, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def TRUSTED(self):
            return self.getToken(PostgreSQLParser.TRUSTED, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def TYPES_P(self):
            return self.getToken(PostgreSQLParser.TYPES_P, 0)

        def UESCAPE(self):
            return self.getToken(PostgreSQLParser.UESCAPE, 0)

        def UNBOUNDED(self):
            return self.getToken(PostgreSQLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(PostgreSQLParser.UNCOMMITTED, 0)

        def UNCONDITIONAL(self):
            return self.getToken(PostgreSQLParser.UNCONDITIONAL, 0)

        def UNENCRYPTED(self):
            return self.getToken(PostgreSQLParser.UNENCRYPTED, 0)

        def UNKNOWN(self):
            return self.getToken(PostgreSQLParser.UNKNOWN, 0)

        def UNLISTEN(self):
            return self.getToken(PostgreSQLParser.UNLISTEN, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def UNTIL(self):
            return self.getToken(PostgreSQLParser.UNTIL, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def VACUUM(self):
            return self.getToken(PostgreSQLParser.VACUUM, 0)

        def VALID(self):
            return self.getToken(PostgreSQLParser.VALID, 0)

        def VALIDATE(self):
            return self.getToken(PostgreSQLParser.VALIDATE, 0)

        def VALIDATOR(self):
            return self.getToken(PostgreSQLParser.VALIDATOR, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def VARYING(self):
            return self.getToken(PostgreSQLParser.VARYING, 0)

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(PostgreSQLParser.VIEWS, 0)

        def VOLATILE(self):
            return self.getToken(PostgreSQLParser.VOLATILE, 0)

        def WHITESPACE_P(self):
            return self.getToken(PostgreSQLParser.WHITESPACE_P, 0)

        def WITHIN(self):
            return self.getToken(PostgreSQLParser.WITHIN, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(PostgreSQLParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def WRITE(self):
            return self.getToken(PostgreSQLParser.WRITE, 0)

        def XML_P(self):
            return self.getToken(PostgreSQLParser.XML_P, 0)

        def YEAR_P(self):
            return self.getToken(PostgreSQLParser.YEAR_P, 0)

        def YES_P(self):
            return self.getToken(PostgreSQLParser.YES_P, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_unreserved_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnreserved_keyword" ):
                listener.enterUnreserved_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnreserved_keyword" ):
                listener.exitUnreserved_keyword(self)




    def unreserved_keyword(self):

        localctx = PostgreSQLParser.Unreserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1424, self.RULE_unreserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10418
            _la = self._input.LA(1)
            if not(((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PostgreSQLParser.ABSENT - 43)) | (1 << (PostgreSQLParser.ASENSITIVE - 43)) | (1 << (PostgreSQLParser.ATOMIC - 43)) | (1 << (PostgreSQLParser.BREADTH - 43)) | (1 << (PostgreSQLParser.COMPRESSION - 43)) | (1 << (PostgreSQLParser.CONDITIONAL - 43)) | (1 << (PostgreSQLParser.DEPTH - 43)) | (1 << (PostgreSQLParser.EMPTY_P - 43)) | (1 << (PostgreSQLParser.FINALIZE - 43)) | (1 << (PostgreSQLParser.INDENT - 43)) | (1 << (PostgreSQLParser.KEEP - 43)) | (1 << (PostgreSQLParser.KEYS - 43)) | (1 << (PostgreSQLParser.NESTED - 43)) | (1 << (PostgreSQLParser.OMIT - 43)) | (1 << (PostgreSQLParser.PARAMETER - 43)) | (1 << (PostgreSQLParser.PATH - 43)) | (1 << (PostgreSQLParser.PLAN - 43)) | (1 << (PostgreSQLParser.QUOTES - 43)) | (1 << (PostgreSQLParser.SCALAR - 43)) | (1 << (PostgreSQLParser.SOURCE - 43)) | (1 << (PostgreSQLParser.STRING_P - 43)) | (1 << (PostgreSQLParser.TARGET - 43)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 43)) | (1 << (PostgreSQLParser.PERIOD - 43)))) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PostgreSQLParser.OVER - 162)) | (1 << (PostgreSQLParser.ABORT_P - 162)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 162)) | (1 << (PostgreSQLParser.ACCESS - 162)) | (1 << (PostgreSQLParser.ACTION - 162)) | (1 << (PostgreSQLParser.ADD_P - 162)) | (1 << (PostgreSQLParser.ADMIN - 162)) | (1 << (PostgreSQLParser.AFTER - 162)) | (1 << (PostgreSQLParser.AGGREGATE - 162)) | (1 << (PostgreSQLParser.ALSO - 162)) | (1 << (PostgreSQLParser.ALTER - 162)) | (1 << (PostgreSQLParser.ALWAYS - 162)) | (1 << (PostgreSQLParser.ASSERTION - 162)) | (1 << (PostgreSQLParser.ASSIGNMENT - 162)) | (1 << (PostgreSQLParser.AT - 162)) | (1 << (PostgreSQLParser.ATTRIBUTE - 162)) | (1 << (PostgreSQLParser.BACKWARD - 162)) | (1 << (PostgreSQLParser.BEFORE - 162)) | (1 << (PostgreSQLParser.BEGIN_P - 162)) | (1 << (PostgreSQLParser.BY - 162)) | (1 << (PostgreSQLParser.CACHE - 162)) | (1 << (PostgreSQLParser.CALLED - 162)) | (1 << (PostgreSQLParser.CASCADE - 162)) | (1 << (PostgreSQLParser.CASCADED - 162)) | (1 << (PostgreSQLParser.CATALOG - 162)) | (1 << (PostgreSQLParser.CHAIN - 162)) | (1 << (PostgreSQLParser.CHARACTERISTICS - 162)) | (1 << (PostgreSQLParser.CHECKPOINT - 162)) | (1 << (PostgreSQLParser.CLASS - 162)) | (1 << (PostgreSQLParser.CLOSE - 162)) | (1 << (PostgreSQLParser.CLUSTER - 162)) | (1 << (PostgreSQLParser.COMMENT - 162)) | (1 << (PostgreSQLParser.COMMENTS - 162)) | (1 << (PostgreSQLParser.COMMIT - 162)) | (1 << (PostgreSQLParser.COMMITTED - 162)) | (1 << (PostgreSQLParser.CONFIGURATION - 162)) | (1 << (PostgreSQLParser.CONNECTION - 162)) | (1 << (PostgreSQLParser.CONSTRAINTS - 162)) | (1 << (PostgreSQLParser.CONTENT_P - 162)) | (1 << (PostgreSQLParser.CONTINUE_P - 162)) | (1 << (PostgreSQLParser.CONVERSION_P - 162)) | (1 << (PostgreSQLParser.COPY - 162)) | (1 << (PostgreSQLParser.COST - 162)) | (1 << (PostgreSQLParser.CSV - 162)) | (1 << (PostgreSQLParser.CURSOR - 162)) | (1 << (PostgreSQLParser.CYCLE - 162)) | (1 << (PostgreSQLParser.DATA_P - 162)) | (1 << (PostgreSQLParser.DATABASE - 162)) | (1 << (PostgreSQLParser.DAY_P - 162)) | (1 << (PostgreSQLParser.DEALLOCATE - 162)) | (1 << (PostgreSQLParser.DECLARE - 162)) | (1 << (PostgreSQLParser.DEFAULTS - 162)) | (1 << (PostgreSQLParser.DEFERRED - 162)) | (1 << (PostgreSQLParser.DEFINER - 162)) | (1 << (PostgreSQLParser.DELETE_P - 162)) | (1 << (PostgreSQLParser.DELIMITER - 162)) | (1 << (PostgreSQLParser.DELIMITERS - 162)) | (1 << (PostgreSQLParser.DICTIONARY - 162)) | (1 << (PostgreSQLParser.DISABLE_P - 162)) | (1 << (PostgreSQLParser.DISCARD - 162)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PostgreSQLParser.DOCUMENT_P - 226)) | (1 << (PostgreSQLParser.DOMAIN_P - 226)) | (1 << (PostgreSQLParser.DOUBLE_P - 226)) | (1 << (PostgreSQLParser.DROP - 226)) | (1 << (PostgreSQLParser.EACH - 226)) | (1 << (PostgreSQLParser.ENABLE_P - 226)) | (1 << (PostgreSQLParser.ENCODING - 226)) | (1 << (PostgreSQLParser.ENCRYPTED - 226)) | (1 << (PostgreSQLParser.ENUM_P - 226)) | (1 << (PostgreSQLParser.ESCAPE - 226)) | (1 << (PostgreSQLParser.EVENT - 226)) | (1 << (PostgreSQLParser.EXCLUDE - 226)) | (1 << (PostgreSQLParser.EXCLUDING - 226)) | (1 << (PostgreSQLParser.EXCLUSIVE - 226)) | (1 << (PostgreSQLParser.EXECUTE - 226)) | (1 << (PostgreSQLParser.EXPLAIN - 226)) | (1 << (PostgreSQLParser.EXTENSION - 226)) | (1 << (PostgreSQLParser.EXTERNAL - 226)) | (1 << (PostgreSQLParser.FAMILY - 226)) | (1 << (PostgreSQLParser.FIRST_P - 226)) | (1 << (PostgreSQLParser.FOLLOWING - 226)) | (1 << (PostgreSQLParser.FORCE - 226)) | (1 << (PostgreSQLParser.FORWARD - 226)) | (1 << (PostgreSQLParser.FUNCTION - 226)) | (1 << (PostgreSQLParser.FUNCTIONS - 226)) | (1 << (PostgreSQLParser.GLOBAL - 226)) | (1 << (PostgreSQLParser.GRANTED - 226)) | (1 << (PostgreSQLParser.HANDLER - 226)) | (1 << (PostgreSQLParser.HEADER_P - 226)) | (1 << (PostgreSQLParser.HOLD - 226)) | (1 << (PostgreSQLParser.HOUR_P - 226)) | (1 << (PostgreSQLParser.IDENTITY_P - 226)) | (1 << (PostgreSQLParser.IF_P - 226)) | (1 << (PostgreSQLParser.IMMEDIATE - 226)) | (1 << (PostgreSQLParser.IMMUTABLE - 226)) | (1 << (PostgreSQLParser.IMPLICIT_P - 226)) | (1 << (PostgreSQLParser.INCLUDING - 226)) | (1 << (PostgreSQLParser.INCREMENT - 226)) | (1 << (PostgreSQLParser.INDEX - 226)) | (1 << (PostgreSQLParser.INDEXES - 226)) | (1 << (PostgreSQLParser.INHERIT - 226)) | (1 << (PostgreSQLParser.INHERITS - 226)) | (1 << (PostgreSQLParser.INLINE_P - 226)) | (1 << (PostgreSQLParser.INSENSITIVE - 226)) | (1 << (PostgreSQLParser.INSERT - 226)) | (1 << (PostgreSQLParser.INSTEAD - 226)) | (1 << (PostgreSQLParser.INVOKER - 226)) | (1 << (PostgreSQLParser.ISOLATION - 226)) | (1 << (PostgreSQLParser.KEY - 226)) | (1 << (PostgreSQLParser.LABEL - 226)) | (1 << (PostgreSQLParser.LANGUAGE - 226)) | (1 << (PostgreSQLParser.LARGE_P - 226)) | (1 << (PostgreSQLParser.LAST_P - 226)) | (1 << (PostgreSQLParser.LEAKPROOF - 226)) | (1 << (PostgreSQLParser.LEVEL - 226)) | (1 << (PostgreSQLParser.LISTEN - 226)) | (1 << (PostgreSQLParser.LOAD - 226)) | (1 << (PostgreSQLParser.LOCAL - 226)) | (1 << (PostgreSQLParser.LOCATION - 226)) | (1 << (PostgreSQLParser.LOCK_P - 226)) | (1 << (PostgreSQLParser.MAPPING - 226)) | (1 << (PostgreSQLParser.MATCH - 226)) | (1 << (PostgreSQLParser.MATCHED - 226)) | (1 << (PostgreSQLParser.MATERIALIZED - 226)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.MAXVALUE - 290)) | (1 << (PostgreSQLParser.MERGE - 290)) | (1 << (PostgreSQLParser.MINUTE_P - 290)) | (1 << (PostgreSQLParser.MINVALUE - 290)) | (1 << (PostgreSQLParser.MODE - 290)) | (1 << (PostgreSQLParser.MONTH_P - 290)) | (1 << (PostgreSQLParser.MOVE - 290)) | (1 << (PostgreSQLParser.NAME_P - 290)) | (1 << (PostgreSQLParser.NAMES - 290)) | (1 << (PostgreSQLParser.NEXT - 290)) | (1 << (PostgreSQLParser.NO - 290)) | (1 << (PostgreSQLParser.NOTHING - 290)) | (1 << (PostgreSQLParser.NOTIFY - 290)) | (1 << (PostgreSQLParser.NOWAIT - 290)) | (1 << (PostgreSQLParser.NULLS_P - 290)) | (1 << (PostgreSQLParser.OBJECT_P - 290)) | (1 << (PostgreSQLParser.OF - 290)) | (1 << (PostgreSQLParser.OFF - 290)) | (1 << (PostgreSQLParser.OIDS - 290)) | (1 << (PostgreSQLParser.OPERATOR - 290)) | (1 << (PostgreSQLParser.OPTION - 290)) | (1 << (PostgreSQLParser.OPTIONS - 290)) | (1 << (PostgreSQLParser.OWNED - 290)) | (1 << (PostgreSQLParser.OWNER - 290)) | (1 << (PostgreSQLParser.PARSER - 290)) | (1 << (PostgreSQLParser.PARTIAL - 290)) | (1 << (PostgreSQLParser.PARTITION - 290)) | (1 << (PostgreSQLParser.PASSING - 290)) | (1 << (PostgreSQLParser.PASSWORD - 290)) | (1 << (PostgreSQLParser.PLANS - 290)) | (1 << (PostgreSQLParser.PRECEDING - 290)) | (1 << (PostgreSQLParser.PREPARE - 290)) | (1 << (PostgreSQLParser.PREPARED - 290)) | (1 << (PostgreSQLParser.PRESERVE - 290)) | (1 << (PostgreSQLParser.PRIOR - 290)) | (1 << (PostgreSQLParser.PRIVILEGES - 290)) | (1 << (PostgreSQLParser.PROCEDURAL - 290)) | (1 << (PostgreSQLParser.PROCEDURE - 290)) | (1 << (PostgreSQLParser.PROGRAM - 290)) | (1 << (PostgreSQLParser.QUOTE - 290)) | (1 << (PostgreSQLParser.RANGE - 290)) | (1 << (PostgreSQLParser.READ - 290)) | (1 << (PostgreSQLParser.REASSIGN - 290)) | (1 << (PostgreSQLParser.RECURSIVE - 290)) | (1 << (PostgreSQLParser.REF - 290)) | (1 << (PostgreSQLParser.REFRESH - 290)) | (1 << (PostgreSQLParser.REINDEX - 290)) | (1 << (PostgreSQLParser.RELATIVE_P - 290)) | (1 << (PostgreSQLParser.RELEASE - 290)) | (1 << (PostgreSQLParser.RENAME - 290)) | (1 << (PostgreSQLParser.REPEATABLE - 290)) | (1 << (PostgreSQLParser.REPLACE - 290)) | (1 << (PostgreSQLParser.REPLICA - 290)) | (1 << (PostgreSQLParser.RESET - 290)) | (1 << (PostgreSQLParser.RESTART - 290)) | (1 << (PostgreSQLParser.RESTRICT - 290)) | (1 << (PostgreSQLParser.RETURNS - 290)) | (1 << (PostgreSQLParser.REVOKE - 290)) | (1 << (PostgreSQLParser.ROLE - 290)) | (1 << (PostgreSQLParser.ROLLBACK - 290)) | (1 << (PostgreSQLParser.ROWS - 290)) | (1 << (PostgreSQLParser.RULE - 290)) | (1 << (PostgreSQLParser.SAVEPOINT - 290)))) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PostgreSQLParser.SCHEMA - 354)) | (1 << (PostgreSQLParser.SCROLL - 354)) | (1 << (PostgreSQLParser.SEARCH - 354)) | (1 << (PostgreSQLParser.SECOND_P - 354)) | (1 << (PostgreSQLParser.SECURITY - 354)) | (1 << (PostgreSQLParser.SEQUENCE - 354)) | (1 << (PostgreSQLParser.SEQUENCES - 354)) | (1 << (PostgreSQLParser.SERIALIZABLE - 354)) | (1 << (PostgreSQLParser.SERVER - 354)) | (1 << (PostgreSQLParser.SESSION - 354)) | (1 << (PostgreSQLParser.SET - 354)) | (1 << (PostgreSQLParser.SHARE - 354)) | (1 << (PostgreSQLParser.SHOW - 354)) | (1 << (PostgreSQLParser.SIMPLE - 354)) | (1 << (PostgreSQLParser.SNAPSHOT - 354)) | (1 << (PostgreSQLParser.STABLE - 354)) | (1 << (PostgreSQLParser.STANDALONE_P - 354)) | (1 << (PostgreSQLParser.START - 354)) | (1 << (PostgreSQLParser.STATEMENT - 354)) | (1 << (PostgreSQLParser.STATISTICS - 354)) | (1 << (PostgreSQLParser.STDIN - 354)) | (1 << (PostgreSQLParser.STDOUT - 354)) | (1 << (PostgreSQLParser.STORAGE - 354)) | (1 << (PostgreSQLParser.STRICT_P - 354)) | (1 << (PostgreSQLParser.STRIP_P - 354)) | (1 << (PostgreSQLParser.SYSID - 354)) | (1 << (PostgreSQLParser.SYSTEM_P - 354)) | (1 << (PostgreSQLParser.TABLES - 354)) | (1 << (PostgreSQLParser.TABLESPACE - 354)) | (1 << (PostgreSQLParser.TEMP - 354)) | (1 << (PostgreSQLParser.TEMPLATE - 354)) | (1 << (PostgreSQLParser.TEMPORARY - 354)) | (1 << (PostgreSQLParser.TEXT_P - 354)) | (1 << (PostgreSQLParser.TRANSACTION - 354)) | (1 << (PostgreSQLParser.TRIGGER - 354)) | (1 << (PostgreSQLParser.TRUNCATE - 354)) | (1 << (PostgreSQLParser.TRUSTED - 354)) | (1 << (PostgreSQLParser.TYPE_P - 354)) | (1 << (PostgreSQLParser.TYPES_P - 354)) | (1 << (PostgreSQLParser.UNBOUNDED - 354)) | (1 << (PostgreSQLParser.UNCOMMITTED - 354)) | (1 << (PostgreSQLParser.UNENCRYPTED - 354)) | (1 << (PostgreSQLParser.UNKNOWN - 354)) | (1 << (PostgreSQLParser.UNLISTEN - 354)) | (1 << (PostgreSQLParser.UNLOGGED - 354)) | (1 << (PostgreSQLParser.UNTIL - 354)) | (1 << (PostgreSQLParser.UPDATE - 354)) | (1 << (PostgreSQLParser.VACUUM - 354)) | (1 << (PostgreSQLParser.VALID - 354)) | (1 << (PostgreSQLParser.VALIDATE - 354)) | (1 << (PostgreSQLParser.VALIDATOR - 354)) | (1 << (PostgreSQLParser.VARYING - 354)) | (1 << (PostgreSQLParser.VERSION_P - 354)) | (1 << (PostgreSQLParser.VIEW - 354)) | (1 << (PostgreSQLParser.VOLATILE - 354)) | (1 << (PostgreSQLParser.WHITESPACE_P - 354)) | (1 << (PostgreSQLParser.WITHOUT - 354)) | (1 << (PostgreSQLParser.WORK - 354)) | (1 << (PostgreSQLParser.WRAPPER - 354)) | (1 << (PostgreSQLParser.WRITE - 354)) | (1 << (PostgreSQLParser.XML_P - 354)) | (1 << (PostgreSQLParser.YEAR_P - 354)) | (1 << (PostgreSQLParser.YES_P - 354)) | (1 << (PostgreSQLParser.ZONE - 354)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (PostgreSQLParser.CALL - 471)) | (1 << (PostgreSQLParser.CURRENT_P - 471)) | (1 << (PostgreSQLParser.ATTACH - 471)) | (1 << (PostgreSQLParser.DETACH - 471)) | (1 << (PostgreSQLParser.EXPRESSION - 471)) | (1 << (PostgreSQLParser.GENERATED - 471)) | (1 << (PostgreSQLParser.LOGGED - 471)) | (1 << (PostgreSQLParser.STORED - 471)) | (1 << (PostgreSQLParser.INCLUDE - 471)) | (1 << (PostgreSQLParser.ROUTINE - 471)) | (1 << (PostgreSQLParser.TRANSFORM - 471)) | (1 << (PostgreSQLParser.IMPORT_P - 471)) | (1 << (PostgreSQLParser.POLICY - 471)) | (1 << (PostgreSQLParser.METHOD - 471)) | (1 << (PostgreSQLParser.REFERENCING - 471)) | (1 << (PostgreSQLParser.NEW - 471)) | (1 << (PostgreSQLParser.OLD - 471)) | (1 << (PostgreSQLParser.VALUE_P - 471)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 471)) | (1 << (PostgreSQLParser.PUBLICATION - 471)) | (1 << (PostgreSQLParser.ROUTINES - 471)) | (1 << (PostgreSQLParser.SCHEMAS - 471)) | (1 << (PostgreSQLParser.PROCEDURES - 471)) | (1 << (PostgreSQLParser.INPUT_P - 471)) | (1 << (PostgreSQLParser.SUPPORT - 471)) | (1 << (PostgreSQLParser.PARALLEL - 471)) | (1 << (PostgreSQLParser.SQL_P - 471)) | (1 << (PostgreSQLParser.DEPENDS - 471)) | (1 << (PostgreSQLParser.OVERRIDING - 471)) | (1 << (PostgreSQLParser.CONFLICT - 471)) | (1 << (PostgreSQLParser.SKIP_P - 471)) | (1 << (PostgreSQLParser.LOCKED - 471)) | (1 << (PostgreSQLParser.TIES - 471)) | (1 << (PostgreSQLParser.ROLLUP - 471)) | (1 << (PostgreSQLParser.CUBE - 471)) | (1 << (PostgreSQLParser.SETS - 471)) | (1 << (PostgreSQLParser.ORDINALITY - 471)) | (1 << (PostgreSQLParser.COLUMNS - 471)) | (1 << (PostgreSQLParser.NORMALIZED - 471)) | (1 << (PostgreSQLParser.WITHIN - 471)) | (1 << (PostgreSQLParser.FILTER - 471)) | (1 << (PostgreSQLParser.GROUPS - 471)) | (1 << (PostgreSQLParser.OTHERS - 471)) | (1 << (PostgreSQLParser.NFC - 471)) | (1 << (PostgreSQLParser.NFD - 471)) | (1 << (PostgreSQLParser.NFKC - 471)) | (1 << (PostgreSQLParser.NFKD - 471)) | (1 << (PostgreSQLParser.UESCAPE - 471)) | (1 << (PostgreSQLParser.VIEWS - 471)) | (1 << (PostgreSQLParser.ERROR - 471)))) != 0) or _la==PostgreSQLParser.RETURN or _la==PostgreSQLParser.FORMAT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_name_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def BIT(self):
            return self.getToken(PostgreSQLParser.BIT, 0)

        def BOOLEAN_P(self):
            return self.getToken(PostgreSQLParser.BOOLEAN_P, 0)

        def CHAR_P(self):
            return self.getToken(PostgreSQLParser.CHAR_P, 0)

        def character(self):
            return self.getTypedRuleContext(PostgreSQLParser.CharacterContext,0)


        def COALESCE(self):
            return self.getToken(PostgreSQLParser.COALESCE, 0)

        def DEC(self):
            return self.getToken(PostgreSQLParser.DEC, 0)

        def DECIMAL_P(self):
            return self.getToken(PostgreSQLParser.DECIMAL_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def FLOAT_P(self):
            return self.getToken(PostgreSQLParser.FLOAT_P, 0)

        def GREATEST(self):
            return self.getToken(PostgreSQLParser.GREATEST, 0)

        def GROUPING(self):
            return self.getToken(PostgreSQLParser.GROUPING, 0)

        def INOUT(self):
            return self.getToken(PostgreSQLParser.INOUT, 0)

        def INT_P(self):
            return self.getToken(PostgreSQLParser.INT_P, 0)

        def INTEGER(self):
            return self.getToken(PostgreSQLParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(PostgreSQLParser.INTERVAL, 0)

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def JSON_ARRAY(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAY, 0)

        def JSON_ARRAYAGG(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0)

        def JSON_EXISTS(self):
            return self.getToken(PostgreSQLParser.JSON_EXISTS, 0)

        def JSON_OBJECT(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECT, 0)

        def JSON_OBJECTAGG(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0)

        def JSON_QUERY(self):
            return self.getToken(PostgreSQLParser.JSON_QUERY, 0)

        def JSON_SCALAR(self):
            return self.getToken(PostgreSQLParser.JSON_SCALAR, 0)

        def JSON_SERIALIZE(self):
            return self.getToken(PostgreSQLParser.JSON_SERIALIZE, 0)

        def JSON_TABLE(self):
            return self.getToken(PostgreSQLParser.JSON_TABLE, 0)

        def JSON_VALUE(self):
            return self.getToken(PostgreSQLParser.JSON_VALUE, 0)

        def LEAST(self):
            return self.getToken(PostgreSQLParser.LEAST, 0)

        def MERGE_ACTION(self):
            return self.getToken(PostgreSQLParser.MERGE_ACTION, 0)

        def NATIONAL(self):
            return self.getToken(PostgreSQLParser.NATIONAL, 0)

        def NCHAR(self):
            return self.getToken(PostgreSQLParser.NCHAR, 0)

        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def NORMALIZE(self):
            return self.getToken(PostgreSQLParser.NORMALIZE, 0)

        def NULLIF(self):
            return self.getToken(PostgreSQLParser.NULLIF, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSQLParser.NUMERIC, 0)

        def OUT_P(self):
            return self.getToken(PostgreSQLParser.OUT_P, 0)

        def OVERLAY(self):
            return self.getToken(PostgreSQLParser.OVERLAY, 0)

        def POSITION(self):
            return self.getToken(PostgreSQLParser.POSITION, 0)

        def PRECISION(self):
            return self.getToken(PostgreSQLParser.PRECISION, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def SETOF(self):
            return self.getToken(PostgreSQLParser.SETOF, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSQLParser.SMALLINT, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TREAT(self):
            return self.getToken(PostgreSQLParser.TREAT, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def VARCHAR(self):
            return self.getToken(PostgreSQLParser.VARCHAR, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(PostgreSQLParser.XMLATTRIBUTES, 0)

        def XMLCONCAT(self):
            return self.getToken(PostgreSQLParser.XMLCONCAT, 0)

        def XMLELEMENT(self):
            return self.getToken(PostgreSQLParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(PostgreSQLParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(PostgreSQLParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(PostgreSQLParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(PostgreSQLParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(PostgreSQLParser.XMLPI, 0)

        def XMLROOT(self):
            return self.getToken(PostgreSQLParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(PostgreSQLParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(PostgreSQLParser.XMLTABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_col_name_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_name_keyword" ):
                listener.enterCol_name_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_name_keyword" ):
                listener.exitCol_name_keyword(self)




    def col_name_keyword(self):

        localctx = PostgreSQLParser.Col_name_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1426, self.RULE_col_name_keyword)
        try:
            self.state = 10483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1043,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10420
                self.match(PostgreSQLParser.BETWEEN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10421
                self.match(PostgreSQLParser.BIGINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10422
                self.match(PostgreSQLParser.BIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10423
                self.match(PostgreSQLParser.BOOLEAN_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10424
                self.match(PostgreSQLParser.CHAR_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10425
                self.character()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10426
                self.match(PostgreSQLParser.COALESCE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10427
                self.match(PostgreSQLParser.DEC)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10428
                self.match(PostgreSQLParser.DECIMAL_P)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10429
                self.match(PostgreSQLParser.EXISTS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10430
                self.match(PostgreSQLParser.EXTRACT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 10431
                self.match(PostgreSQLParser.FLOAT_P)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 10432
                self.match(PostgreSQLParser.GREATEST)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 10433
                self.match(PostgreSQLParser.GROUPING)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 10434
                self.match(PostgreSQLParser.INOUT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 10435
                self.match(PostgreSQLParser.INT_P)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 10436
                self.match(PostgreSQLParser.INTEGER)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 10437
                self.match(PostgreSQLParser.INTERVAL)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 10438
                self.match(PostgreSQLParser.JSON)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 10439
                self.match(PostgreSQLParser.JSON_ARRAY)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 10440
                self.match(PostgreSQLParser.JSON_ARRAYAGG)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 10441
                self.match(PostgreSQLParser.JSON_EXISTS)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 10442
                self.match(PostgreSQLParser.JSON_OBJECT)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 10443
                self.match(PostgreSQLParser.JSON_OBJECTAGG)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 10444
                self.match(PostgreSQLParser.JSON_QUERY)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 10445
                self.match(PostgreSQLParser.JSON_SCALAR)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 10446
                self.match(PostgreSQLParser.JSON_SERIALIZE)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 10447
                self.match(PostgreSQLParser.JSON_TABLE)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 10448
                self.match(PostgreSQLParser.JSON_VALUE)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 10449
                self.match(PostgreSQLParser.LEAST)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 10450
                self.match(PostgreSQLParser.MERGE_ACTION)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 10451
                self.match(PostgreSQLParser.NATIONAL)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 10452
                self.match(PostgreSQLParser.NCHAR)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 10453
                self.match(PostgreSQLParser.NONE)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 10454
                self.match(PostgreSQLParser.NORMALIZE)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 10455
                self.match(PostgreSQLParser.NULLIF)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 10456
                self.match(PostgreSQLParser.NUMERIC)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 10457
                self.match(PostgreSQLParser.OUT_P)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 10458
                self.match(PostgreSQLParser.OVERLAY)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 10459
                self.match(PostgreSQLParser.POSITION)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 10460
                self.match(PostgreSQLParser.PRECISION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 10461
                self.match(PostgreSQLParser.REAL)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 10462
                self.match(PostgreSQLParser.ROW)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 10463
                self.match(PostgreSQLParser.SETOF)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 10464
                self.match(PostgreSQLParser.SMALLINT)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 10465
                self.match(PostgreSQLParser.SUBSTRING)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 10466
                self.match(PostgreSQLParser.TIME)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 10467
                self.match(PostgreSQLParser.TIMESTAMP)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 10468
                self.match(PostgreSQLParser.TREAT)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 10469
                self.match(PostgreSQLParser.TRIM)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 10470
                self.match(PostgreSQLParser.VALUES)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 10471
                self.match(PostgreSQLParser.VARCHAR)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 10472
                self.match(PostgreSQLParser.XMLATTRIBUTES)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 10473
                self.match(PostgreSQLParser.XMLCONCAT)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 10474
                self.match(PostgreSQLParser.XMLELEMENT)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 10475
                self.match(PostgreSQLParser.XMLEXISTS)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 10476
                self.match(PostgreSQLParser.XMLFOREST)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 10477
                self.match(PostgreSQLParser.XMLNAMESPACES)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 10478
                self.match(PostgreSQLParser.XMLPARSE)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 10479
                self.match(PostgreSQLParser.XMLPI)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 10480
                self.match(PostgreSQLParser.XMLROOT)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 10481
                self.match(PostgreSQLParser.XMLSERIALIZE)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 10482
                self.match(PostgreSQLParser.XMLTABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_func_name_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def CONCURRENTLY(self):
            return self.getToken(PostgreSQLParser.CONCURRENTLY, 0)

        def CROSS(self):
            return self.getToken(PostgreSQLParser.CROSS, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0)

        def FREEZE(self):
            return self.getToken(PostgreSQLParser.FREEZE, 0)

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def ILIKE(self):
            return self.getToken(PostgreSQLParser.ILIKE, 0)

        def INNER_P(self):
            return self.getToken(PostgreSQLParser.INNER_P, 0)

        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def JOIN(self):
            return self.getToken(PostgreSQLParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def OUTER_P(self):
            return self.getToken(PostgreSQLParser.OUTER_P, 0)

        def OVERLAPS(self):
            return self.getToken(PostgreSQLParser.OVERLAPS, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def SIMILAR(self):
            return self.getToken(PostgreSQLParser.SIMILAR, 0)

        def TABLESAMPLE(self):
            return self.getToken(PostgreSQLParser.TABLESAMPLE, 0)

        def VERBOSE(self):
            return self.getToken(PostgreSQLParser.VERBOSE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_func_name_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_func_name_keyword" ):
                listener.enterType_func_name_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_func_name_keyword" ):
                listener.exitType_func_name_keyword(self)




    def type_func_name_keyword(self):

        localctx = PostgreSQLParser.Type_func_name_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1428, self.RULE_type_func_name_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10485
            _la = self._input.LA(1)
            if not(((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (PostgreSQLParser.AUTHORIZATION - 144)) | (1 << (PostgreSQLParser.BINARY - 144)) | (1 << (PostgreSQLParser.COLLATION - 144)) | (1 << (PostgreSQLParser.CONCURRENTLY - 144)) | (1 << (PostgreSQLParser.CROSS - 144)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 144)) | (1 << (PostgreSQLParser.FREEZE - 144)) | (1 << (PostgreSQLParser.FULL - 144)) | (1 << (PostgreSQLParser.ILIKE - 144)) | (1 << (PostgreSQLParser.INNER_P - 144)) | (1 << (PostgreSQLParser.IS - 144)) | (1 << (PostgreSQLParser.ISNULL - 144)) | (1 << (PostgreSQLParser.JOIN - 144)) | (1 << (PostgreSQLParser.LEFT - 144)) | (1 << (PostgreSQLParser.LIKE - 144)) | (1 << (PostgreSQLParser.NATURAL - 144)) | (1 << (PostgreSQLParser.NOTNULL - 144)) | (1 << (PostgreSQLParser.OUTER_P - 144)) | (1 << (PostgreSQLParser.OVERLAPS - 144)) | (1 << (PostgreSQLParser.RIGHT - 144)) | (1 << (PostgreSQLParser.SIMILAR - 144)) | (1 << (PostgreSQLParser.VERBOSE - 144)))) != 0) or _la==PostgreSQLParser.TABLESAMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reserved_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def ANALYSE(self):
            return self.getToken(PostgreSQLParser.ANALYSE, 0)

        def ANALYZE(self):
            return self.getToken(PostgreSQLParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def ASYMMETRIC(self):
            return self.getToken(PostgreSQLParser.ASYMMETRIC, 0)

        def BOTH(self):
            return self.getToken(PostgreSQLParser.BOTH, 0)

        def CASE(self):
            return self.getToken(PostgreSQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(PostgreSQLParser.CURRENT_CATALOG, 0)

        def CURRENT_DATE(self):
            return self.getToken(PostgreSQLParser.CURRENT_DATE, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PostgreSQLParser.CURRENT_ROLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def ELSE(self):
            return self.getToken(PostgreSQLParser.ELSE, 0)

        def END_P(self):
            return self.getToken(PostgreSQLParser.END_P, 0)

        def EXCEPT(self):
            return self.getToken(PostgreSQLParser.EXCEPT, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def FETCH(self):
            return self.getToken(PostgreSQLParser.FETCH, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def INITIALLY(self):
            return self.getToken(PostgreSQLParser.INITIALLY, 0)

        def INTERSECT(self):
            return self.getToken(PostgreSQLParser.INTERSECT, 0)

        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def LATERAL_P(self):
            return self.getToken(PostgreSQLParser.LATERAL_P, 0)

        def LEADING(self):
            return self.getToken(PostgreSQLParser.LEADING, 0)

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def LOCALTIME(self):
            return self.getToken(PostgreSQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def OFFSET(self):
            return self.getToken(PostgreSQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def OR(self):
            return self.getToken(PostgreSQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def PLACING(self):
            return self.getToken(PostgreSQLParser.PLACING, 0)

        def PRIMARY(self):
            return self.getToken(PostgreSQLParser.PRIMARY, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def RETURNING(self):
            return self.getToken(PostgreSQLParser.RETURNING, 0)

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def SOME(self):
            return self.getToken(PostgreSQLParser.SOME, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def SYSTEM_USER(self):
            return self.getToken(PostgreSQLParser.SYSTEM_USER, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def TRAILING(self):
            return self.getToken(PostgreSQLParser.TRAILING, 0)

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def UNION(self):
            return self.getToken(PostgreSQLParser.UNION, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def VARIADIC(self):
            return self.getToken(PostgreSQLParser.VARIADIC, 0)

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(PostgreSQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reserved_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReserved_keyword" ):
                listener.enterReserved_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReserved_keyword" ):
                listener.exitReserved_keyword(self)




    def reserved_keyword(self):

        localctx = PostgreSQLParser.Reserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1430, self.RULE_reserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10487
            _la = self._input.LA(1)
            if not(((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & ((1 << (PostgreSQLParser.SYSTEM_USER - 42)) | (1 << (PostgreSQLParser.ALL - 42)) | (1 << (PostgreSQLParser.ANALYSE - 42)) | (1 << (PostgreSQLParser.ANALYZE - 42)) | (1 << (PostgreSQLParser.AND - 42)) | (1 << (PostgreSQLParser.ANY - 42)) | (1 << (PostgreSQLParser.ARRAY - 42)) | (1 << (PostgreSQLParser.AS - 42)) | (1 << (PostgreSQLParser.ASC - 42)) | (1 << (PostgreSQLParser.ASYMMETRIC - 42)) | (1 << (PostgreSQLParser.BOTH - 42)) | (1 << (PostgreSQLParser.CASE - 42)) | (1 << (PostgreSQLParser.CAST - 42)) | (1 << (PostgreSQLParser.CHECK - 42)) | (1 << (PostgreSQLParser.COLLATE - 42)) | (1 << (PostgreSQLParser.COLUMN - 42)) | (1 << (PostgreSQLParser.CONSTRAINT - 42)) | (1 << (PostgreSQLParser.CREATE - 42)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 42)) | (1 << (PostgreSQLParser.CURRENT_DATE - 42)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 42)) | (1 << (PostgreSQLParser.CURRENT_TIME - 42)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 42)) | (1 << (PostgreSQLParser.CURRENT_USER - 42)) | (1 << (PostgreSQLParser.DEFAULT - 42)) | (1 << (PostgreSQLParser.DEFERRABLE - 42)) | (1 << (PostgreSQLParser.DESC - 42)) | (1 << (PostgreSQLParser.DISTINCT - 42)) | (1 << (PostgreSQLParser.DO - 42)) | (1 << (PostgreSQLParser.ELSE - 42)) | (1 << (PostgreSQLParser.EXCEPT - 42)) | (1 << (PostgreSQLParser.FALSE_P - 42)) | (1 << (PostgreSQLParser.FETCH - 42)) | (1 << (PostgreSQLParser.FOR - 42)) | (1 << (PostgreSQLParser.FOREIGN - 42)) | (1 << (PostgreSQLParser.FROM - 42)) | (1 << (PostgreSQLParser.GRANT - 42)) | (1 << (PostgreSQLParser.GROUP_P - 42)) | (1 << (PostgreSQLParser.HAVING - 42)))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (PostgreSQLParser.IN_P - 106)) | (1 << (PostgreSQLParser.INITIALLY - 106)) | (1 << (PostgreSQLParser.INTERSECT - 106)) | (1 << (PostgreSQLParser.INTO - 106)) | (1 << (PostgreSQLParser.LATERAL_P - 106)) | (1 << (PostgreSQLParser.LEADING - 106)) | (1 << (PostgreSQLParser.LIMIT - 106)) | (1 << (PostgreSQLParser.LOCALTIME - 106)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 106)) | (1 << (PostgreSQLParser.NOT - 106)) | (1 << (PostgreSQLParser.NULL_P - 106)) | (1 << (PostgreSQLParser.OFFSET - 106)) | (1 << (PostgreSQLParser.ON - 106)) | (1 << (PostgreSQLParser.ONLY - 106)) | (1 << (PostgreSQLParser.OR - 106)) | (1 << (PostgreSQLParser.ORDER - 106)) | (1 << (PostgreSQLParser.PLACING - 106)) | (1 << (PostgreSQLParser.PRIMARY - 106)) | (1 << (PostgreSQLParser.REFERENCES - 106)) | (1 << (PostgreSQLParser.RETURNING - 106)) | (1 << (PostgreSQLParser.SELECT - 106)) | (1 << (PostgreSQLParser.SESSION_USER - 106)) | (1 << (PostgreSQLParser.SOME - 106)) | (1 << (PostgreSQLParser.SYMMETRIC - 106)) | (1 << (PostgreSQLParser.TABLE - 106)) | (1 << (PostgreSQLParser.THEN - 106)) | (1 << (PostgreSQLParser.TO - 106)) | (1 << (PostgreSQLParser.TRAILING - 106)) | (1 << (PostgreSQLParser.TRUE_P - 106)) | (1 << (PostgreSQLParser.UNION - 106)) | (1 << (PostgreSQLParser.UNIQUE - 106)) | (1 << (PostgreSQLParser.USER - 106)) | (1 << (PostgreSQLParser.USING - 106)) | (1 << (PostgreSQLParser.VARIADIC - 106)) | (1 << (PostgreSQLParser.WHEN - 106)) | (1 << (PostgreSQLParser.WHERE - 106)) | (1 << (PostgreSQLParser.WINDOW - 106)) | (1 << (PostgreSQLParser.WITH - 106)))) != 0) or _la==PostgreSQLParser.END_P):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bare_label_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_P(self):
            return self.getToken(PostgreSQLParser.ABORT_P, 0)

        def ABSENT(self):
            return self.getToken(PostgreSQLParser.ABSENT, 0)

        def ABSOLUTE_P(self):
            return self.getToken(PostgreSQLParser.ABSOLUTE_P, 0)

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def ACTION(self):
            return self.getToken(PostgreSQLParser.ACTION, 0)

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def ALSO(self):
            return self.getToken(PostgreSQLParser.ALSO, 0)

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def ANALYSE(self):
            return self.getToken(PostgreSQLParser.ANALYSE, 0)

        def ANALYZE(self):
            return self.getToken(PostgreSQLParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def ASENSITIVE(self):
            return self.getToken(PostgreSQLParser.ASENSITIVE, 0)

        def ASSERTION(self):
            return self.getToken(PostgreSQLParser.ASSERTION, 0)

        def ASSIGNMENT(self):
            return self.getToken(PostgreSQLParser.ASSIGNMENT, 0)

        def ASYMMETRIC(self):
            return self.getToken(PostgreSQLParser.ASYMMETRIC, 0)

        def AT(self):
            return self.getToken(PostgreSQLParser.AT, 0)

        def ATOMIC(self):
            return self.getToken(PostgreSQLParser.ATOMIC, 0)

        def ATTACH(self):
            return self.getToken(PostgreSQLParser.ATTACH, 0)

        def ATTRIBUTE(self):
            return self.getToken(PostgreSQLParser.ATTRIBUTE, 0)

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def BACKWARD(self):
            return self.getToken(PostgreSQLParser.BACKWARD, 0)

        def BEFORE(self):
            return self.getToken(PostgreSQLParser.BEFORE, 0)

        def BEGIN_P(self):
            return self.getToken(PostgreSQLParser.BEGIN_P, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def BIT(self):
            return self.getToken(PostgreSQLParser.BIT, 0)

        def BOOLEAN_P(self):
            return self.getToken(PostgreSQLParser.BOOLEAN_P, 0)

        def BOTH(self):
            return self.getToken(PostgreSQLParser.BOTH, 0)

        def BREADTH(self):
            return self.getToken(PostgreSQLParser.BREADTH, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def CACHE(self):
            return self.getToken(PostgreSQLParser.CACHE, 0)

        def CALL(self):
            return self.getToken(PostgreSQLParser.CALL, 0)

        def CALLED(self):
            return self.getToken(PostgreSQLParser.CALLED, 0)

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def CASCADED(self):
            return self.getToken(PostgreSQLParser.CASCADED, 0)

        def CASE(self):
            return self.getToken(PostgreSQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def CATALOG(self):
            return self.getToken(PostgreSQLParser.CATALOG, 0)

        def CHAIN(self):
            return self.getToken(PostgreSQLParser.CHAIN, 0)

        def CHARACTERISTICS(self):
            return self.getToken(PostgreSQLParser.CHARACTERISTICS, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def CHECKPOINT(self):
            return self.getToken(PostgreSQLParser.CHECKPOINT, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(PostgreSQLParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(PostgreSQLParser.CLUSTER, 0)

        def COALESCE(self):
            return self.getToken(PostgreSQLParser.COALESCE, 0)

        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(PostgreSQLParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(PostgreSQLParser.COMMENT, 0)

        def COMMENTS(self):
            return self.getToken(PostgreSQLParser.COMMENTS, 0)

        def COMMIT(self):
            return self.getToken(PostgreSQLParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(PostgreSQLParser.COMMITTED, 0)

        def COMPRESSION(self):
            return self.getToken(PostgreSQLParser.COMPRESSION, 0)

        def CONCURRENTLY(self):
            return self.getToken(PostgreSQLParser.CONCURRENTLY, 0)

        def CONDITIONAL(self):
            return self.getToken(PostgreSQLParser.CONDITIONAL, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def CONFLICT(self):
            return self.getToken(PostgreSQLParser.CONFLICT, 0)

        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(PostgreSQLParser.CONSTRAINTS, 0)

        def CONTENT_P(self):
            return self.getToken(PostgreSQLParser.CONTENT_P, 0)

        def CONTINUE_P(self):
            return self.getToken(PostgreSQLParser.CONTINUE_P, 0)

        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def COPY(self):
            return self.getToken(PostgreSQLParser.COPY, 0)

        def COST(self):
            return self.getToken(PostgreSQLParser.COST, 0)

        def CROSS(self):
            return self.getToken(PostgreSQLParser.CROSS, 0)

        def CSV(self):
            return self.getToken(PostgreSQLParser.CSV, 0)

        def CUBE(self):
            return self.getToken(PostgreSQLParser.CUBE, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(PostgreSQLParser.CURRENT_CATALOG, 0)

        def CURRENT_DATE(self):
            return self.getToken(PostgreSQLParser.CURRENT_DATE, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PostgreSQLParser.CURRENT_ROLE, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0)

        def CURRENT_TIME(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(PostgreSQLParser.CURSOR, 0)

        def CYCLE(self):
            return self.getToken(PostgreSQLParser.CYCLE, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def DEALLOCATE(self):
            return self.getToken(PostgreSQLParser.DEALLOCATE, 0)

        def DEC(self):
            return self.getToken(PostgreSQLParser.DEC, 0)

        def DECIMAL_P(self):
            return self.getToken(PostgreSQLParser.DECIMAL_P, 0)

        def DECLARE(self):
            return self.getToken(PostgreSQLParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def DEFAULTS(self):
            return self.getToken(PostgreSQLParser.DEFAULTS, 0)

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(PostgreSQLParser.DEFINER, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def DELIMITER(self):
            return self.getToken(PostgreSQLParser.DELIMITER, 0)

        def DELIMITERS(self):
            return self.getToken(PostgreSQLParser.DELIMITERS, 0)

        def DEPENDS(self):
            return self.getToken(PostgreSQLParser.DEPENDS, 0)

        def DEPTH(self):
            return self.getToken(PostgreSQLParser.DEPTH, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def DETACH(self):
            return self.getToken(PostgreSQLParser.DETACH, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def DISCARD(self):
            return self.getToken(PostgreSQLParser.DISCARD, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def DOUBLE_P(self):
            return self.getToken(PostgreSQLParser.DOUBLE_P, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def EACH(self):
            return self.getToken(PostgreSQLParser.EACH, 0)

        def ELSE(self):
            return self.getToken(PostgreSQLParser.ELSE, 0)

        def EMPTY_P(self):
            return self.getToken(PostgreSQLParser.EMPTY_P, 0)

        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def ENCRYPTED(self):
            return self.getToken(PostgreSQLParser.ENCRYPTED, 0)

        def END_P(self):
            return self.getToken(PostgreSQLParser.END_P, 0)

        def ENUM_P(self):
            return self.getToken(PostgreSQLParser.ENUM_P, 0)

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def EXCLUDE(self):
            return self.getToken(PostgreSQLParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(PostgreSQLParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(PostgreSQLParser.EXCLUSIVE, 0)

        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(PostgreSQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(PostgreSQLParser.EXPRESSION, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def EXTERNAL(self):
            return self.getToken(PostgreSQLParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def FINALIZE(self):
            return self.getToken(PostgreSQLParser.FINALIZE, 0)

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def FLOAT_P(self):
            return self.getToken(PostgreSQLParser.FLOAT_P, 0)

        def FOLLOWING(self):
            return self.getToken(PostgreSQLParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(PostgreSQLParser.FORMAT, 0)

        def FORWARD(self):
            return self.getToken(PostgreSQLParser.FORWARD, 0)

        def FREEZE(self):
            return self.getToken(PostgreSQLParser.FREEZE, 0)

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(PostgreSQLParser.FUNCTIONS, 0)

        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def GLOBAL(self):
            return self.getToken(PostgreSQLParser.GLOBAL, 0)

        def GRANTED(self):
            return self.getToken(PostgreSQLParser.GRANTED, 0)

        def GREATEST(self):
            return self.getToken(PostgreSQLParser.GREATEST, 0)

        def GROUPING(self):
            return self.getToken(PostgreSQLParser.GROUPING, 0)

        def GROUPS(self):
            return self.getToken(PostgreSQLParser.GROUPS, 0)

        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def HEADER_P(self):
            return self.getToken(PostgreSQLParser.HEADER_P, 0)

        def HOLD(self):
            return self.getToken(PostgreSQLParser.HOLD, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def ILIKE(self):
            return self.getToken(PostgreSQLParser.ILIKE, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def IMMUTABLE(self):
            return self.getToken(PostgreSQLParser.IMMUTABLE, 0)

        def IMPLICIT_P(self):
            return self.getToken(PostgreSQLParser.IMPLICIT_P, 0)

        def IMPORT_P(self):
            return self.getToken(PostgreSQLParser.IMPORT_P, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def INCLUDE(self):
            return self.getToken(PostgreSQLParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(PostgreSQLParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(PostgreSQLParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(PostgreSQLParser.INDENT, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(PostgreSQLParser.INDEXES, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def INHERITS(self):
            return self.getToken(PostgreSQLParser.INHERITS, 0)

        def INITIALLY(self):
            return self.getToken(PostgreSQLParser.INITIALLY, 0)

        def INLINE_P(self):
            return self.getToken(PostgreSQLParser.INLINE_P, 0)

        def INNER_P(self):
            return self.getToken(PostgreSQLParser.INNER_P, 0)

        def INOUT(self):
            return self.getToken(PostgreSQLParser.INOUT, 0)

        def INPUT_P(self):
            return self.getToken(PostgreSQLParser.INPUT_P, 0)

        def INSENSITIVE(self):
            return self.getToken(PostgreSQLParser.INSENSITIVE, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(PostgreSQLParser.INSTEAD, 0)

        def INT_P(self):
            return self.getToken(PostgreSQLParser.INT_P, 0)

        def INTEGER(self):
            return self.getToken(PostgreSQLParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(PostgreSQLParser.INTERVAL, 0)

        def INVOKER(self):
            return self.getToken(PostgreSQLParser.INVOKER, 0)

        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def JOIN(self):
            return self.getToken(PostgreSQLParser.JOIN, 0)

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def JSON_ARRAY(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAY, 0)

        def JSON_ARRAYAGG(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0)

        def JSON_EXISTS(self):
            return self.getToken(PostgreSQLParser.JSON_EXISTS, 0)

        def JSON_OBJECT(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECT, 0)

        def JSON_OBJECTAGG(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0)

        def JSON_QUERY(self):
            return self.getToken(PostgreSQLParser.JSON_QUERY, 0)

        def JSON_SCALAR(self):
            return self.getToken(PostgreSQLParser.JSON_SCALAR, 0)

        def JSON_SERIALIZE(self):
            return self.getToken(PostgreSQLParser.JSON_SERIALIZE, 0)

        def JSON_TABLE(self):
            return self.getToken(PostgreSQLParser.JSON_TABLE, 0)

        def JSON_VALUE(self):
            return self.getToken(PostgreSQLParser.JSON_VALUE, 0)

        def KEEP(self):
            return self.getToken(PostgreSQLParser.KEEP, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def KEYS(self):
            return self.getToken(PostgreSQLParser.KEYS, 0)

        def LABEL(self):
            return self.getToken(PostgreSQLParser.LABEL, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def LAST_P(self):
            return self.getToken(PostgreSQLParser.LAST_P, 0)

        def LATERAL_P(self):
            return self.getToken(PostgreSQLParser.LATERAL_P, 0)

        def LEADING(self):
            return self.getToken(PostgreSQLParser.LEADING, 0)

        def LEAKPROOF(self):
            return self.getToken(PostgreSQLParser.LEAKPROOF, 0)

        def LEAST(self):
            return self.getToken(PostgreSQLParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def LISTEN(self):
            return self.getToken(PostgreSQLParser.LISTEN, 0)

        def LOAD(self):
            return self.getToken(PostgreSQLParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def LOCALTIME(self):
            return self.getToken(PostgreSQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0)

        def LOCATION(self):
            return self.getToken(PostgreSQLParser.LOCATION, 0)

        def LOCK_P(self):
            return self.getToken(PostgreSQLParser.LOCK_P, 0)

        def LOCKED(self):
            return self.getToken(PostgreSQLParser.LOCKED, 0)

        def LOGGED(self):
            return self.getToken(PostgreSQLParser.LOGGED, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def MATCH(self):
            return self.getToken(PostgreSQLParser.MATCH, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def MAXVALUE(self):
            return self.getToken(PostgreSQLParser.MAXVALUE, 0)

        def MERGE(self):
            return self.getToken(PostgreSQLParser.MERGE, 0)

        def MERGE_ACTION(self):
            return self.getToken(PostgreSQLParser.MERGE_ACTION, 0)

        def METHOD(self):
            return self.getToken(PostgreSQLParser.METHOD, 0)

        def MINVALUE(self):
            return self.getToken(PostgreSQLParser.MINVALUE, 0)

        def MODE(self):
            return self.getToken(PostgreSQLParser.MODE, 0)

        def MOVE(self):
            return self.getToken(PostgreSQLParser.MOVE, 0)

        def NAME_P(self):
            return self.getToken(PostgreSQLParser.NAME_P, 0)

        def NAMES(self):
            return self.getToken(PostgreSQLParser.NAMES, 0)

        def NATIONAL(self):
            return self.getToken(PostgreSQLParser.NATIONAL, 0)

        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def NCHAR(self):
            return self.getToken(PostgreSQLParser.NCHAR, 0)

        def NESTED(self):
            return self.getToken(PostgreSQLParser.NESTED, 0)

        def NEW(self):
            return self.getToken(PostgreSQLParser.NEW, 0)

        def NEXT(self):
            return self.getToken(PostgreSQLParser.NEXT, 0)

        def NFC(self):
            return self.getToken(PostgreSQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(PostgreSQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(PostgreSQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(PostgreSQLParser.NFKD, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def NORMALIZE(self):
            return self.getToken(PostgreSQLParser.NORMALIZE, 0)

        def NORMALIZED(self):
            return self.getToken(PostgreSQLParser.NORMALIZED, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def NOTIFY(self):
            return self.getToken(PostgreSQLParser.NOTIFY, 0)

        def NOWAIT(self):
            return self.getToken(PostgreSQLParser.NOWAIT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def NULLIF(self):
            return self.getToken(PostgreSQLParser.NULLIF, 0)

        def NULLS_P(self):
            return self.getToken(PostgreSQLParser.NULLS_P, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSQLParser.NUMERIC, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def OFF(self):
            return self.getToken(PostgreSQLParser.OFF, 0)

        def OIDS(self):
            return self.getToken(PostgreSQLParser.OIDS, 0)

        def OLD(self):
            return self.getToken(PostgreSQLParser.OLD, 0)

        def OMIT(self):
            return self.getToken(PostgreSQLParser.OMIT, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(PostgreSQLParser.OR, 0)

        def ORDINALITY(self):
            return self.getToken(PostgreSQLParser.ORDINALITY, 0)

        def OTHERS(self):
            return self.getToken(PostgreSQLParser.OTHERS, 0)

        def OUT_P(self):
            return self.getToken(PostgreSQLParser.OUT_P, 0)

        def OUTER_P(self):
            return self.getToken(PostgreSQLParser.OUTER_P, 0)

        def OVERLAY(self):
            return self.getToken(PostgreSQLParser.OVERLAY, 0)

        def OVERRIDING(self):
            return self.getToken(PostgreSQLParser.OVERRIDING, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def PARALLEL(self):
            return self.getToken(PostgreSQLParser.PARALLEL, 0)

        def PARAMETER(self):
            return self.getToken(PostgreSQLParser.PARAMETER, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(PostgreSQLParser.PARTIAL, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(PostgreSQLParser.PASSING, 0)

        def PASSWORD(self):
            return self.getToken(PostgreSQLParser.PASSWORD, 0)

        def PATH(self):
            return self.getToken(PostgreSQLParser.PATH, 0)

        def PERIOD(self):
            return self.getToken(PostgreSQLParser.PERIOD, 0)

        def PLACING(self):
            return self.getToken(PostgreSQLParser.PLACING, 0)

        def PLAN(self):
            return self.getToken(PostgreSQLParser.PLAN, 0)

        def PLANS(self):
            return self.getToken(PostgreSQLParser.PLANS, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def POSITION(self):
            return self.getToken(PostgreSQLParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(PostgreSQLParser.PRECEDING, 0)

        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def PREPARED(self):
            return self.getToken(PostgreSQLParser.PREPARED, 0)

        def PRESERVE(self):
            return self.getToken(PostgreSQLParser.PRESERVE, 0)

        def PRIMARY(self):
            return self.getToken(PostgreSQLParser.PRIMARY, 0)

        def PRIOR(self):
            return self.getToken(PostgreSQLParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(PostgreSQLParser.PRIVILEGES, 0)

        def PROCEDURAL(self):
            return self.getToken(PostgreSQLParser.PROCEDURAL, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(PostgreSQLParser.PROCEDURES, 0)

        def PROGRAM(self):
            return self.getToken(PostgreSQLParser.PROGRAM, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def QUOTE(self):
            return self.getToken(PostgreSQLParser.QUOTE, 0)

        def QUOTES(self):
            return self.getToken(PostgreSQLParser.QUOTES, 0)

        def RANGE(self):
            return self.getToken(PostgreSQLParser.RANGE, 0)

        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def REASSIGN(self):
            return self.getToken(PostgreSQLParser.REASSIGN, 0)

        def RECURSIVE(self):
            return self.getToken(PostgreSQLParser.RECURSIVE, 0)

        def REF(self):
            return self.getToken(PostgreSQLParser.REF, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def REFERENCING(self):
            return self.getToken(PostgreSQLParser.REFERENCING, 0)

        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def REINDEX(self):
            return self.getToken(PostgreSQLParser.REINDEX, 0)

        def RELATIVE_P(self):
            return self.getToken(PostgreSQLParser.RELATIVE_P, 0)

        def RELEASE(self):
            return self.getToken(PostgreSQLParser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(PostgreSQLParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(PostgreSQLParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(PostgreSQLParser.REPLICA, 0)

        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def RETURN(self):
            return self.getToken(PostgreSQLParser.RETURN, 0)

        def RETURNS(self):
            return self.getToken(PostgreSQLParser.RETURNS, 0)

        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def ROLLBACK(self):
            return self.getToken(PostgreSQLParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(PostgreSQLParser.ROLLUP, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def ROUTINES(self):
            return self.getToken(PostgreSQLParser.ROUTINES, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def SAVEPOINT(self):
            return self.getToken(PostgreSQLParser.SAVEPOINT, 0)

        def SCALAR(self):
            return self.getToken(PostgreSQLParser.SCALAR, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(PostgreSQLParser.SCHEMAS, 0)

        def SCROLL(self):
            return self.getToken(PostgreSQLParser.SCROLL, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def SERIALIZABLE(self):
            return self.getToken(PostgreSQLParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def SETOF(self):
            return self.getToken(PostgreSQLParser.SETOF, 0)

        def SETS(self):
            return self.getToken(PostgreSQLParser.SETS, 0)

        def SHARE(self):
            return self.getToken(PostgreSQLParser.SHARE, 0)

        def SHOW(self):
            return self.getToken(PostgreSQLParser.SHOW, 0)

        def SIMILAR(self):
            return self.getToken(PostgreSQLParser.SIMILAR, 0)

        def SIMPLE(self):
            return self.getToken(PostgreSQLParser.SIMPLE, 0)

        def SKIP_P(self):
            return self.getToken(PostgreSQLParser.SKIP_P, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSQLParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(PostgreSQLParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(PostgreSQLParser.SOME, 0)

        def SOURCE(self):
            return self.getToken(PostgreSQLParser.SOURCE, 0)

        def SQL_P(self):
            return self.getToken(PostgreSQLParser.SQL_P, 0)

        def STABLE(self):
            return self.getToken(PostgreSQLParser.STABLE, 0)

        def STANDALONE_P(self):
            return self.getToken(PostgreSQLParser.STANDALONE_P, 0)

        def START(self):
            return self.getToken(PostgreSQLParser.START, 0)

        def STATEMENT(self):
            return self.getToken(PostgreSQLParser.STATEMENT, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def STDIN(self):
            return self.getToken(PostgreSQLParser.STDIN, 0)

        def STDOUT(self):
            return self.getToken(PostgreSQLParser.STDOUT, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def STORED(self):
            return self.getToken(PostgreSQLParser.STORED, 0)

        def STRICT_P(self):
            return self.getToken(PostgreSQLParser.STRICT_P, 0)

        def STRING_P(self):
            return self.getToken(PostgreSQLParser.STRING_P, 0)

        def STRIP_P(self):
            return self.getToken(PostgreSQLParser.STRIP_P, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def SUPPORT(self):
            return self.getToken(PostgreSQLParser.SUPPORT, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def SYSID(self):
            return self.getToken(PostgreSQLParser.SYSID, 0)

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def SYSTEM_USER(self):
            return self.getToken(PostgreSQLParser.SYSTEM_USER, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(PostgreSQLParser.TABLESAMPLE, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def TARGET(self):
            return self.getToken(PostgreSQLParser.TARGET, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(PostgreSQLParser.TIES, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TRAILING(self):
            return self.getToken(PostgreSQLParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def TREAT(self):
            return self.getToken(PostgreSQLParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def TRUSTED(self):
            return self.getToken(PostgreSQLParser.TRUSTED, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def TYPES_P(self):
            return self.getToken(PostgreSQLParser.TYPES_P, 0)

        def UESCAPE(self):
            return self.getToken(PostgreSQLParser.UESCAPE, 0)

        def UNBOUNDED(self):
            return self.getToken(PostgreSQLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(PostgreSQLParser.UNCOMMITTED, 0)

        def UNCONDITIONAL(self):
            return self.getToken(PostgreSQLParser.UNCONDITIONAL, 0)

        def UNENCRYPTED(self):
            return self.getToken(PostgreSQLParser.UNENCRYPTED, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(PostgreSQLParser.UNKNOWN, 0)

        def UNLISTEN(self):
            return self.getToken(PostgreSQLParser.UNLISTEN, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def UNTIL(self):
            return self.getToken(PostgreSQLParser.UNTIL, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def VACUUM(self):
            return self.getToken(PostgreSQLParser.VACUUM, 0)

        def VALID(self):
            return self.getToken(PostgreSQLParser.VALID, 0)

        def VALIDATE(self):
            return self.getToken(PostgreSQLParser.VALIDATE, 0)

        def VALIDATOR(self):
            return self.getToken(PostgreSQLParser.VALIDATOR, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def VARCHAR(self):
            return self.getToken(PostgreSQLParser.VARCHAR, 0)

        def VARIADIC(self):
            return self.getToken(PostgreSQLParser.VARIADIC, 0)

        def VERBOSE(self):
            return self.getToken(PostgreSQLParser.VERBOSE, 0)

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(PostgreSQLParser.VIEWS, 0)

        def VOLATILE(self):
            return self.getToken(PostgreSQLParser.VOLATILE, 0)

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def WHITESPACE_P(self):
            return self.getToken(PostgreSQLParser.WHITESPACE_P, 0)

        def WORK(self):
            return self.getToken(PostgreSQLParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def WRITE(self):
            return self.getToken(PostgreSQLParser.WRITE, 0)

        def XML_P(self):
            return self.getToken(PostgreSQLParser.XML_P, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(PostgreSQLParser.XMLATTRIBUTES, 0)

        def XMLCONCAT(self):
            return self.getToken(PostgreSQLParser.XMLCONCAT, 0)

        def XMLELEMENT(self):
            return self.getToken(PostgreSQLParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(PostgreSQLParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(PostgreSQLParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(PostgreSQLParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(PostgreSQLParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(PostgreSQLParser.XMLPI, 0)

        def XMLROOT(self):
            return self.getToken(PostgreSQLParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(PostgreSQLParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(PostgreSQLParser.XMLTABLE, 0)

        def YES_P(self):
            return self.getToken(PostgreSQLParser.YES_P, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bare_label_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBare_label_keyword" ):
                listener.enterBare_label_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBare_label_keyword" ):
                listener.exitBare_label_keyword(self)




    def bare_label_keyword(self):

        localctx = PostgreSQLParser.Bare_label_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1432, self.RULE_bare_label_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10489
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.JSON) | (1 << PostgreSQLParser.JSON_ARRAY) | (1 << PostgreSQLParser.JSON_ARRAYAGG) | (1 << PostgreSQLParser.JSON_EXISTS) | (1 << PostgreSQLParser.JSON_OBJECT) | (1 << PostgreSQLParser.JSON_OBJECTAGG) | (1 << PostgreSQLParser.JSON_QUERY) | (1 << PostgreSQLParser.JSON_SCALAR) | (1 << PostgreSQLParser.JSON_SERIALIZE) | (1 << PostgreSQLParser.JSON_TABLE) | (1 << PostgreSQLParser.JSON_VALUE) | (1 << PostgreSQLParser.MERGE_ACTION) | (1 << PostgreSQLParser.SYSTEM_USER) | (1 << PostgreSQLParser.ABSENT) | (1 << PostgreSQLParser.ASENSITIVE) | (1 << PostgreSQLParser.ATOMIC) | (1 << PostgreSQLParser.BREADTH) | (1 << PostgreSQLParser.COMPRESSION) | (1 << PostgreSQLParser.CONDITIONAL) | (1 << PostgreSQLParser.DEPTH) | (1 << PostgreSQLParser.EMPTY_P) | (1 << PostgreSQLParser.FINALIZE) | (1 << PostgreSQLParser.INDENT) | (1 << PostgreSQLParser.KEEP) | (1 << PostgreSQLParser.KEYS) | (1 << PostgreSQLParser.NESTED) | (1 << PostgreSQLParser.OMIT) | (1 << PostgreSQLParser.PARAMETER) | (1 << PostgreSQLParser.PATH) | (1 << PostgreSQLParser.PLAN) | (1 << PostgreSQLParser.QUOTES) | (1 << PostgreSQLParser.SCALAR) | (1 << PostgreSQLParser.SOURCE) | (1 << PostgreSQLParser.STRING_P))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.TARGET - 64)) | (1 << (PostgreSQLParser.UNCONDITIONAL - 64)) | (1 << (PostgreSQLParser.PERIOD - 64)) | (1 << (PostgreSQLParser.ALL - 64)) | (1 << (PostgreSQLParser.ANALYSE - 64)) | (1 << (PostgreSQLParser.ANALYZE - 64)) | (1 << (PostgreSQLParser.AND - 64)) | (1 << (PostgreSQLParser.ANY - 64)) | (1 << (PostgreSQLParser.ASC - 64)) | (1 << (PostgreSQLParser.ASYMMETRIC - 64)) | (1 << (PostgreSQLParser.BOTH - 64)) | (1 << (PostgreSQLParser.CASE - 64)) | (1 << (PostgreSQLParser.CAST - 64)) | (1 << (PostgreSQLParser.CHECK - 64)) | (1 << (PostgreSQLParser.COLLATE - 64)) | (1 << (PostgreSQLParser.COLUMN - 64)) | (1 << (PostgreSQLParser.CONSTRAINT - 64)) | (1 << (PostgreSQLParser.CURRENT_CATALOG - 64)) | (1 << (PostgreSQLParser.CURRENT_DATE - 64)) | (1 << (PostgreSQLParser.CURRENT_ROLE - 64)) | (1 << (PostgreSQLParser.CURRENT_TIME - 64)) | (1 << (PostgreSQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (PostgreSQLParser.CURRENT_USER - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.DEFERRABLE - 64)) | (1 << (PostgreSQLParser.DESC - 64)) | (1 << (PostgreSQLParser.DISTINCT - 64)) | (1 << (PostgreSQLParser.DO - 64)) | (1 << (PostgreSQLParser.ELSE - 64)) | (1 << (PostgreSQLParser.FALSE_P - 64)) | (1 << (PostgreSQLParser.FOREIGN - 64)) | (1 << (PostgreSQLParser.IN_P - 64)) | (1 << (PostgreSQLParser.INITIALLY - 64)) | (1 << (PostgreSQLParser.LATERAL_P - 64)) | (1 << (PostgreSQLParser.LEADING - 64)) | (1 << (PostgreSQLParser.LOCALTIME - 64)) | (1 << (PostgreSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PostgreSQLParser.NOT - 64)) | (1 << (PostgreSQLParser.NULL_P - 64)) | (1 << (PostgreSQLParser.ONLY - 64)) | (1 << (PostgreSQLParser.OR - 64)) | (1 << (PostgreSQLParser.PLACING - 64)) | (1 << (PostgreSQLParser.PRIMARY - 64)) | (1 << (PostgreSQLParser.REFERENCES - 64)) | (1 << (PostgreSQLParser.SELECT - 64)) | (1 << (PostgreSQLParser.SESSION_USER - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PostgreSQLParser.SOME - 128)) | (1 << (PostgreSQLParser.SYMMETRIC - 128)) | (1 << (PostgreSQLParser.TABLE - 128)) | (1 << (PostgreSQLParser.THEN - 128)) | (1 << (PostgreSQLParser.TRAILING - 128)) | (1 << (PostgreSQLParser.TRUE_P - 128)) | (1 << (PostgreSQLParser.UNIQUE - 128)) | (1 << (PostgreSQLParser.USER - 128)) | (1 << (PostgreSQLParser.USING - 128)) | (1 << (PostgreSQLParser.VARIADIC - 128)) | (1 << (PostgreSQLParser.WHEN - 128)) | (1 << (PostgreSQLParser.AUTHORIZATION - 128)) | (1 << (PostgreSQLParser.BINARY - 128)) | (1 << (PostgreSQLParser.COLLATION - 128)) | (1 << (PostgreSQLParser.CONCURRENTLY - 128)) | (1 << (PostgreSQLParser.CROSS - 128)) | (1 << (PostgreSQLParser.CURRENT_SCHEMA - 128)) | (1 << (PostgreSQLParser.FREEZE - 128)) | (1 << (PostgreSQLParser.FULL - 128)) | (1 << (PostgreSQLParser.ILIKE - 128)) | (1 << (PostgreSQLParser.INNER_P - 128)) | (1 << (PostgreSQLParser.IS - 128)) | (1 << (PostgreSQLParser.JOIN - 128)) | (1 << (PostgreSQLParser.LEFT - 128)) | (1 << (PostgreSQLParser.LIKE - 128)) | (1 << (PostgreSQLParser.NATURAL - 128)) | (1 << (PostgreSQLParser.OUTER_P - 128)) | (1 << (PostgreSQLParser.RIGHT - 128)) | (1 << (PostgreSQLParser.SIMILAR - 128)) | (1 << (PostgreSQLParser.VERBOSE - 128)) | (1 << (PostgreSQLParser.ABORT_P - 128)) | (1 << (PostgreSQLParser.ABSOLUTE_P - 128)) | (1 << (PostgreSQLParser.ACCESS - 128)) | (1 << (PostgreSQLParser.ACTION - 128)) | (1 << (PostgreSQLParser.ADD_P - 128)) | (1 << (PostgreSQLParser.ADMIN - 128)) | (1 << (PostgreSQLParser.AFTER - 128)) | (1 << (PostgreSQLParser.AGGREGATE - 128)) | (1 << (PostgreSQLParser.ALSO - 128)) | (1 << (PostgreSQLParser.ALTER - 128)) | (1 << (PostgreSQLParser.ALWAYS - 128)) | (1 << (PostgreSQLParser.ASSERTION - 128)) | (1 << (PostgreSQLParser.ASSIGNMENT - 128)) | (1 << (PostgreSQLParser.AT - 128)) | (1 << (PostgreSQLParser.ATTRIBUTE - 128)) | (1 << (PostgreSQLParser.BACKWARD - 128)) | (1 << (PostgreSQLParser.BEFORE - 128)) | (1 << (PostgreSQLParser.BEGIN_P - 128)) | (1 << (PostgreSQLParser.BY - 128)) | (1 << (PostgreSQLParser.CACHE - 128)) | (1 << (PostgreSQLParser.CALLED - 128)) | (1 << (PostgreSQLParser.CASCADE - 128)) | (1 << (PostgreSQLParser.CASCADED - 128)) | (1 << (PostgreSQLParser.CATALOG - 128)) | (1 << (PostgreSQLParser.CHAIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PostgreSQLParser.CHARACTERISTICS - 192)) | (1 << (PostgreSQLParser.CHECKPOINT - 192)) | (1 << (PostgreSQLParser.CLASS - 192)) | (1 << (PostgreSQLParser.CLOSE - 192)) | (1 << (PostgreSQLParser.CLUSTER - 192)) | (1 << (PostgreSQLParser.COMMENT - 192)) | (1 << (PostgreSQLParser.COMMENTS - 192)) | (1 << (PostgreSQLParser.COMMIT - 192)) | (1 << (PostgreSQLParser.COMMITTED - 192)) | (1 << (PostgreSQLParser.CONFIGURATION - 192)) | (1 << (PostgreSQLParser.CONNECTION - 192)) | (1 << (PostgreSQLParser.CONSTRAINTS - 192)) | (1 << (PostgreSQLParser.CONTENT_P - 192)) | (1 << (PostgreSQLParser.CONTINUE_P - 192)) | (1 << (PostgreSQLParser.CONVERSION_P - 192)) | (1 << (PostgreSQLParser.COPY - 192)) | (1 << (PostgreSQLParser.COST - 192)) | (1 << (PostgreSQLParser.CSV - 192)) | (1 << (PostgreSQLParser.CURSOR - 192)) | (1 << (PostgreSQLParser.CYCLE - 192)) | (1 << (PostgreSQLParser.DATA_P - 192)) | (1 << (PostgreSQLParser.DATABASE - 192)) | (1 << (PostgreSQLParser.DEALLOCATE - 192)) | (1 << (PostgreSQLParser.DECLARE - 192)) | (1 << (PostgreSQLParser.DEFAULTS - 192)) | (1 << (PostgreSQLParser.DEFERRED - 192)) | (1 << (PostgreSQLParser.DEFINER - 192)) | (1 << (PostgreSQLParser.DELETE_P - 192)) | (1 << (PostgreSQLParser.DELIMITER - 192)) | (1 << (PostgreSQLParser.DELIMITERS - 192)) | (1 << (PostgreSQLParser.DICTIONARY - 192)) | (1 << (PostgreSQLParser.DISABLE_P - 192)) | (1 << (PostgreSQLParser.DISCARD - 192)) | (1 << (PostgreSQLParser.DOCUMENT_P - 192)) | (1 << (PostgreSQLParser.DOMAIN_P - 192)) | (1 << (PostgreSQLParser.DOUBLE_P - 192)) | (1 << (PostgreSQLParser.DROP - 192)) | (1 << (PostgreSQLParser.EACH - 192)) | (1 << (PostgreSQLParser.ENABLE_P - 192)) | (1 << (PostgreSQLParser.ENCODING - 192)) | (1 << (PostgreSQLParser.ENCRYPTED - 192)) | (1 << (PostgreSQLParser.ENUM_P - 192)) | (1 << (PostgreSQLParser.ESCAPE - 192)) | (1 << (PostgreSQLParser.EVENT - 192)) | (1 << (PostgreSQLParser.EXCLUDE - 192)) | (1 << (PostgreSQLParser.EXCLUDING - 192)) | (1 << (PostgreSQLParser.EXCLUSIVE - 192)) | (1 << (PostgreSQLParser.EXECUTE - 192)) | (1 << (PostgreSQLParser.EXPLAIN - 192)) | (1 << (PostgreSQLParser.EXTENSION - 192)) | (1 << (PostgreSQLParser.EXTERNAL - 192)) | (1 << (PostgreSQLParser.FAMILY - 192)) | (1 << (PostgreSQLParser.FIRST_P - 192)) | (1 << (PostgreSQLParser.FOLLOWING - 192)) | (1 << (PostgreSQLParser.FORCE - 192)) | (1 << (PostgreSQLParser.FORWARD - 192)) | (1 << (PostgreSQLParser.FUNCTION - 192)) | (1 << (PostgreSQLParser.FUNCTIONS - 192)) | (1 << (PostgreSQLParser.GLOBAL - 192)) | (1 << (PostgreSQLParser.GRANTED - 192)) | (1 << (PostgreSQLParser.HANDLER - 192)) | (1 << (PostgreSQLParser.HEADER_P - 192)) | (1 << (PostgreSQLParser.HOLD - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (PostgreSQLParser.IDENTITY_P - 257)) | (1 << (PostgreSQLParser.IF_P - 257)) | (1 << (PostgreSQLParser.IMMEDIATE - 257)) | (1 << (PostgreSQLParser.IMMUTABLE - 257)) | (1 << (PostgreSQLParser.IMPLICIT_P - 257)) | (1 << (PostgreSQLParser.INCLUDING - 257)) | (1 << (PostgreSQLParser.INCREMENT - 257)) | (1 << (PostgreSQLParser.INDEX - 257)) | (1 << (PostgreSQLParser.INDEXES - 257)) | (1 << (PostgreSQLParser.INHERIT - 257)) | (1 << (PostgreSQLParser.INHERITS - 257)) | (1 << (PostgreSQLParser.INLINE_P - 257)) | (1 << (PostgreSQLParser.INSENSITIVE - 257)) | (1 << (PostgreSQLParser.INSERT - 257)) | (1 << (PostgreSQLParser.INSTEAD - 257)) | (1 << (PostgreSQLParser.INVOKER - 257)) | (1 << (PostgreSQLParser.ISOLATION - 257)) | (1 << (PostgreSQLParser.KEY - 257)) | (1 << (PostgreSQLParser.LABEL - 257)) | (1 << (PostgreSQLParser.LANGUAGE - 257)) | (1 << (PostgreSQLParser.LARGE_P - 257)) | (1 << (PostgreSQLParser.LAST_P - 257)) | (1 << (PostgreSQLParser.LEAKPROOF - 257)) | (1 << (PostgreSQLParser.LEVEL - 257)) | (1 << (PostgreSQLParser.LISTEN - 257)) | (1 << (PostgreSQLParser.LOAD - 257)) | (1 << (PostgreSQLParser.LOCAL - 257)) | (1 << (PostgreSQLParser.LOCATION - 257)) | (1 << (PostgreSQLParser.LOCK_P - 257)) | (1 << (PostgreSQLParser.MAPPING - 257)) | (1 << (PostgreSQLParser.MATCH - 257)) | (1 << (PostgreSQLParser.MATCHED - 257)) | (1 << (PostgreSQLParser.MATERIALIZED - 257)) | (1 << (PostgreSQLParser.MAXVALUE - 257)) | (1 << (PostgreSQLParser.MERGE - 257)) | (1 << (PostgreSQLParser.MINVALUE - 257)) | (1 << (PostgreSQLParser.MODE - 257)) | (1 << (PostgreSQLParser.MOVE - 257)) | (1 << (PostgreSQLParser.NAME_P - 257)) | (1 << (PostgreSQLParser.NAMES - 257)) | (1 << (PostgreSQLParser.NEXT - 257)) | (1 << (PostgreSQLParser.NO - 257)) | (1 << (PostgreSQLParser.NOTHING - 257)) | (1 << (PostgreSQLParser.NOTIFY - 257)) | (1 << (PostgreSQLParser.NOWAIT - 257)) | (1 << (PostgreSQLParser.NULLS_P - 257)) | (1 << (PostgreSQLParser.OBJECT_P - 257)) | (1 << (PostgreSQLParser.OF - 257)) | (1 << (PostgreSQLParser.OFF - 257)) | (1 << (PostgreSQLParser.OIDS - 257)) | (1 << (PostgreSQLParser.OPERATOR - 257)) | (1 << (PostgreSQLParser.OPTION - 257)) | (1 << (PostgreSQLParser.OPTIONS - 257)) | (1 << (PostgreSQLParser.OWNED - 257)) | (1 << (PostgreSQLParser.OWNER - 257)) | (1 << (PostgreSQLParser.PARSER - 257)) | (1 << (PostgreSQLParser.PARTIAL - 257)) | (1 << (PostgreSQLParser.PARTITION - 257)) | (1 << (PostgreSQLParser.PASSING - 257)) | (1 << (PostgreSQLParser.PASSWORD - 257)) | (1 << (PostgreSQLParser.PLANS - 257)) | (1 << (PostgreSQLParser.PRECEDING - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (PostgreSQLParser.PREPARE - 321)) | (1 << (PostgreSQLParser.PREPARED - 321)) | (1 << (PostgreSQLParser.PRESERVE - 321)) | (1 << (PostgreSQLParser.PRIOR - 321)) | (1 << (PostgreSQLParser.PRIVILEGES - 321)) | (1 << (PostgreSQLParser.PROCEDURAL - 321)) | (1 << (PostgreSQLParser.PROCEDURE - 321)) | (1 << (PostgreSQLParser.PROGRAM - 321)) | (1 << (PostgreSQLParser.QUOTE - 321)) | (1 << (PostgreSQLParser.RANGE - 321)) | (1 << (PostgreSQLParser.READ - 321)) | (1 << (PostgreSQLParser.REASSIGN - 321)) | (1 << (PostgreSQLParser.RECURSIVE - 321)) | (1 << (PostgreSQLParser.REF - 321)) | (1 << (PostgreSQLParser.REFRESH - 321)) | (1 << (PostgreSQLParser.REINDEX - 321)) | (1 << (PostgreSQLParser.RELATIVE_P - 321)) | (1 << (PostgreSQLParser.RELEASE - 321)) | (1 << (PostgreSQLParser.RENAME - 321)) | (1 << (PostgreSQLParser.REPEATABLE - 321)) | (1 << (PostgreSQLParser.REPLACE - 321)) | (1 << (PostgreSQLParser.REPLICA - 321)) | (1 << (PostgreSQLParser.RESET - 321)) | (1 << (PostgreSQLParser.RESTART - 321)) | (1 << (PostgreSQLParser.RESTRICT - 321)) | (1 << (PostgreSQLParser.RETURNS - 321)) | (1 << (PostgreSQLParser.REVOKE - 321)) | (1 << (PostgreSQLParser.ROLE - 321)) | (1 << (PostgreSQLParser.ROLLBACK - 321)) | (1 << (PostgreSQLParser.ROWS - 321)) | (1 << (PostgreSQLParser.RULE - 321)) | (1 << (PostgreSQLParser.SAVEPOINT - 321)) | (1 << (PostgreSQLParser.SCHEMA - 321)) | (1 << (PostgreSQLParser.SCROLL - 321)) | (1 << (PostgreSQLParser.SEARCH - 321)) | (1 << (PostgreSQLParser.SECURITY - 321)) | (1 << (PostgreSQLParser.SEQUENCE - 321)) | (1 << (PostgreSQLParser.SEQUENCES - 321)) | (1 << (PostgreSQLParser.SERIALIZABLE - 321)) | (1 << (PostgreSQLParser.SERVER - 321)) | (1 << (PostgreSQLParser.SESSION - 321)) | (1 << (PostgreSQLParser.SET - 321)) | (1 << (PostgreSQLParser.SHARE - 321)) | (1 << (PostgreSQLParser.SHOW - 321)) | (1 << (PostgreSQLParser.SIMPLE - 321)) | (1 << (PostgreSQLParser.SNAPSHOT - 321)) | (1 << (PostgreSQLParser.STABLE - 321)) | (1 << (PostgreSQLParser.STANDALONE_P - 321)) | (1 << (PostgreSQLParser.START - 321)) | (1 << (PostgreSQLParser.STATEMENT - 321)) | (1 << (PostgreSQLParser.STATISTICS - 321)) | (1 << (PostgreSQLParser.STDIN - 321)) | (1 << (PostgreSQLParser.STDOUT - 321)) | (1 << (PostgreSQLParser.STORAGE - 321)) | (1 << (PostgreSQLParser.STRICT_P - 321)) | (1 << (PostgreSQLParser.STRIP_P - 321)) | (1 << (PostgreSQLParser.SYSID - 321)) | (1 << (PostgreSQLParser.SYSTEM_P - 321)) | (1 << (PostgreSQLParser.TABLES - 321)) | (1 << (PostgreSQLParser.TABLESPACE - 321)) | (1 << (PostgreSQLParser.TEMP - 321)) | (1 << (PostgreSQLParser.TEMPLATE - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (PostgreSQLParser.TEMPORARY - 385)) | (1 << (PostgreSQLParser.TEXT_P - 385)) | (1 << (PostgreSQLParser.TRANSACTION - 385)) | (1 << (PostgreSQLParser.TRIGGER - 385)) | (1 << (PostgreSQLParser.TRUNCATE - 385)) | (1 << (PostgreSQLParser.TRUSTED - 385)) | (1 << (PostgreSQLParser.TYPE_P - 385)) | (1 << (PostgreSQLParser.TYPES_P - 385)) | (1 << (PostgreSQLParser.UNBOUNDED - 385)) | (1 << (PostgreSQLParser.UNCOMMITTED - 385)) | (1 << (PostgreSQLParser.UNENCRYPTED - 385)) | (1 << (PostgreSQLParser.UNKNOWN - 385)) | (1 << (PostgreSQLParser.UNLISTEN - 385)) | (1 << (PostgreSQLParser.UNLOGGED - 385)) | (1 << (PostgreSQLParser.UNTIL - 385)) | (1 << (PostgreSQLParser.UPDATE - 385)) | (1 << (PostgreSQLParser.VACUUM - 385)) | (1 << (PostgreSQLParser.VALID - 385)) | (1 << (PostgreSQLParser.VALIDATE - 385)) | (1 << (PostgreSQLParser.VALIDATOR - 385)) | (1 << (PostgreSQLParser.VERSION_P - 385)) | (1 << (PostgreSQLParser.VIEW - 385)) | (1 << (PostgreSQLParser.VOLATILE - 385)) | (1 << (PostgreSQLParser.WHITESPACE_P - 385)) | (1 << (PostgreSQLParser.WORK - 385)) | (1 << (PostgreSQLParser.WRAPPER - 385)) | (1 << (PostgreSQLParser.WRITE - 385)) | (1 << (PostgreSQLParser.XML_P - 385)) | (1 << (PostgreSQLParser.YES_P - 385)) | (1 << (PostgreSQLParser.ZONE - 385)) | (1 << (PostgreSQLParser.BETWEEN - 385)) | (1 << (PostgreSQLParser.BIGINT - 385)) | (1 << (PostgreSQLParser.BIT - 385)) | (1 << (PostgreSQLParser.BOOLEAN_P - 385)) | (1 << (PostgreSQLParser.COALESCE - 385)) | (1 << (PostgreSQLParser.DEC - 385)) | (1 << (PostgreSQLParser.DECIMAL_P - 385)) | (1 << (PostgreSQLParser.EXISTS - 385)) | (1 << (PostgreSQLParser.EXTRACT - 385)) | (1 << (PostgreSQLParser.FLOAT_P - 385)) | (1 << (PostgreSQLParser.GREATEST - 385)) | (1 << (PostgreSQLParser.INOUT - 385)) | (1 << (PostgreSQLParser.INT_P - 385)) | (1 << (PostgreSQLParser.INTEGER - 385)) | (1 << (PostgreSQLParser.INTERVAL - 385)) | (1 << (PostgreSQLParser.LEAST - 385)) | (1 << (PostgreSQLParser.NATIONAL - 385)) | (1 << (PostgreSQLParser.NCHAR - 385)) | (1 << (PostgreSQLParser.NONE - 385)) | (1 << (PostgreSQLParser.NULLIF - 385)) | (1 << (PostgreSQLParser.NUMERIC - 385)) | (1 << (PostgreSQLParser.OVERLAY - 385)) | (1 << (PostgreSQLParser.POSITION - 385)) | (1 << (PostgreSQLParser.REAL - 385)) | (1 << (PostgreSQLParser.ROW - 385)) | (1 << (PostgreSQLParser.SETOF - 385)) | (1 << (PostgreSQLParser.SMALLINT - 385)) | (1 << (PostgreSQLParser.SUBSTRING - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (PostgreSQLParser.TIME - 449)) | (1 << (PostgreSQLParser.TIMESTAMP - 449)) | (1 << (PostgreSQLParser.TREAT - 449)) | (1 << (PostgreSQLParser.TRIM - 449)) | (1 << (PostgreSQLParser.VALUES - 449)) | (1 << (PostgreSQLParser.VARCHAR - 449)) | (1 << (PostgreSQLParser.XMLATTRIBUTES - 449)) | (1 << (PostgreSQLParser.XMLCONCAT - 449)) | (1 << (PostgreSQLParser.XMLELEMENT - 449)) | (1 << (PostgreSQLParser.XMLEXISTS - 449)) | (1 << (PostgreSQLParser.XMLFOREST - 449)) | (1 << (PostgreSQLParser.XMLPARSE - 449)) | (1 << (PostgreSQLParser.XMLPI - 449)) | (1 << (PostgreSQLParser.XMLROOT - 449)) | (1 << (PostgreSQLParser.XMLSERIALIZE - 449)) | (1 << (PostgreSQLParser.CALL - 449)) | (1 << (PostgreSQLParser.CURRENT_P - 449)) | (1 << (PostgreSQLParser.ATTACH - 449)) | (1 << (PostgreSQLParser.DETACH - 449)) | (1 << (PostgreSQLParser.EXPRESSION - 449)) | (1 << (PostgreSQLParser.GENERATED - 449)) | (1 << (PostgreSQLParser.LOGGED - 449)) | (1 << (PostgreSQLParser.STORED - 449)) | (1 << (PostgreSQLParser.INCLUDE - 449)) | (1 << (PostgreSQLParser.ROUTINE - 449)) | (1 << (PostgreSQLParser.TRANSFORM - 449)) | (1 << (PostgreSQLParser.IMPORT_P - 449)) | (1 << (PostgreSQLParser.POLICY - 449)) | (1 << (PostgreSQLParser.METHOD - 449)) | (1 << (PostgreSQLParser.REFERENCING - 449)) | (1 << (PostgreSQLParser.NEW - 449)) | (1 << (PostgreSQLParser.OLD - 449)) | (1 << (PostgreSQLParser.VALUE_P - 449)) | (1 << (PostgreSQLParser.SUBSCRIPTION - 449)) | (1 << (PostgreSQLParser.PUBLICATION - 449)) | (1 << (PostgreSQLParser.OUT_P - 449)) | (1 << (PostgreSQLParser.END_P - 449)) | (1 << (PostgreSQLParser.ROUTINES - 449)) | (1 << (PostgreSQLParser.SCHEMAS - 449)) | (1 << (PostgreSQLParser.PROCEDURES - 449)) | (1 << (PostgreSQLParser.INPUT_P - 449)) | (1 << (PostgreSQLParser.SUPPORT - 449)) | (1 << (PostgreSQLParser.PARALLEL - 449)) | (1 << (PostgreSQLParser.SQL_P - 449)) | (1 << (PostgreSQLParser.DEPENDS - 449)) | (1 << (PostgreSQLParser.OVERRIDING - 449)) | (1 << (PostgreSQLParser.CONFLICT - 449)) | (1 << (PostgreSQLParser.SKIP_P - 449)) | (1 << (PostgreSQLParser.LOCKED - 449)) | (1 << (PostgreSQLParser.TIES - 449)) | (1 << (PostgreSQLParser.ROLLUP - 449)) | (1 << (PostgreSQLParser.CUBE - 449)) | (1 << (PostgreSQLParser.GROUPING - 449)) | (1 << (PostgreSQLParser.SETS - 449)) | (1 << (PostgreSQLParser.TABLESAMPLE - 449)) | (1 << (PostgreSQLParser.ORDINALITY - 449)) | (1 << (PostgreSQLParser.XMLTABLE - 449)))) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & ((1 << (PostgreSQLParser.COLUMNS - 513)) | (1 << (PostgreSQLParser.XMLNAMESPACES - 513)) | (1 << (PostgreSQLParser.NORMALIZED - 513)) | (1 << (PostgreSQLParser.GROUPS - 513)) | (1 << (PostgreSQLParser.OTHERS - 513)) | (1 << (PostgreSQLParser.NFC - 513)) | (1 << (PostgreSQLParser.NFD - 513)) | (1 << (PostgreSQLParser.NFKC - 513)) | (1 << (PostgreSQLParser.NFKD - 513)) | (1 << (PostgreSQLParser.UESCAPE - 513)) | (1 << (PostgreSQLParser.VIEWS - 513)) | (1 << (PostgreSQLParser.NORMALIZE - 513)) | (1 << (PostgreSQLParser.ERROR - 513)) | (1 << (PostgreSQLParser.RETURN - 513)) | (1 << (PostgreSQLParser.FORMAT - 513)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_identifier" ):
                listener.enterAny_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_identifier" ):
                listener.exitAny_identifier(self)




    def any_identifier(self):

        localctx = PostgreSQLParser.Any_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1434, self.RULE_any_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10491
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(PostgreSQLParser.Identifier, 0)

        def uescape_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Uescape_Context,0)


        def QuotedIdentifier(self):
            return self.getToken(PostgreSQLParser.QuotedIdentifier, 0)

        def UnicodeQuotedIdentifier(self):
            return self.getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0)

        def PLSQLVARIABLENAME(self):
            return self.getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = PostgreSQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1436, self.RULE_identifier)
        try:
            self.state = 10500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10493
                self.match(PostgreSQLParser.Identifier)
                self.state = 10495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1044,self._ctx)
                if la_ == 1:
                    self.state = 10494
                    self.uescape_()


                pass
            elif token in [PostgreSQLParser.QuotedIdentifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10497
                self.match(PostgreSQLParser.QuotedIdentifier)
                pass
            elif token in [PostgreSQLParser.UnicodeQuotedIdentifier]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10498
                self.match(PostgreSQLParser.UnicodeQuotedIdentifier)
                pass
            elif token in [PostgreSQLParser.PLSQLVARIABLENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10499
                self.match(PostgreSQLParser.PLSQLVARIABLENAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[582] = self.a_expr_qual_sempred
        self._predicates[602] = self.b_expr_sempred
        self._predicates[665] = self.json_arguments_sempred
        self._predicates[678] = self.json_name_and_value_list_sempred
        self._predicates[682] = self.json_value_expr_list_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def a_expr_qual_sempred(self, localctx:A_expr_qualContext, predIndex:int):
            if predIndex == 0:
                return self.OnlyAcceptableOps()
         

    def b_expr_sempred(self, localctx:B_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def json_arguments_sempred(self, localctx:Json_argumentsContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def json_name_and_value_list_sempred(self, localctx:Json_name_and_value_listContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def json_value_expr_list_sempred(self, localctx:Json_value_expr_listContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




